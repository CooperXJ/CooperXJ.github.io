<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Ansible使用</title>
    <url>/2022/01/07/Ansible/ansible%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<ol>
<li><p>ansible k8s -m ping -k (基于用户名和口令的方式进行ping)</p>
<p>比如说查看是否可以ping到对面的三台主机</p>
<p>ansible {ip}/{ip组名}/all（默认所有在/etc/ansible/hosts中的主机）-m ping -k (-k表示需要输入对应主机的密钥，默认输入的密钥就是对应的第一个主机的密钥，如果后面的主机的密钥和第一个主机的密钥不同，则后面的主机将无法ping)</p>
<p><font color=red>注意</font>:</p>
<ul>
<li><p>需要在/etc/ansible/hosts中对主机进行声明</p>
<ul>
<li><p>声明的方式</p>
<p>可以用组例如</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[k8s]</span><br><span class="line">node1</span><br><span class="line">node2</span><br><span class="line">node3</span><br></pre></td></tr></table></figure></li>
<li><p>可以使用标识符的方式</p>
<p>192.168.1.1[01-06]</p>
</li>
</ul>
</li>
<li><p>如果对方使用的服务器ssh对应的端口并非是22端口，需要在/etc/ansible/hosts进行指定端口</p>
<p>192.168.1.1[01-06]:23</p>
</li>
<li><p>如果之前主控机器没有被控机器ssh过，那么第一次直接进行访问会报错，是因为没有添加对应主机的fingerprint，需要ssh一下对应的主机</p>
<p>如果想要避免这种情况的发生，可以在配置文件中取消注释</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210127145831.png" alt="image-20210127145830168" style="zoom:50%;" /> </li>
<li><p>直接指定ip进行操作</p>
<p><code>ansible  all -i &quot;10.168.101.179,&quot; -m ping</code></p>
</li>
</ul>
</li>
<li><p>基于key验证进行ping</p>
<p><code>ssh-keygen</code></p>
<p><code>ssh-copy-id &#123;ip&#125;</code></p>
<p><code>ansible k8s -m ping</code></p>
</li>
<li><p>日志</p>
<p>默认是不记录日志的，如果希望日志被记录下来，则修改配置文件中的注释</p>
</li>
</ol>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210127150002.png" alt="image-20210127145957693" style="zoom:50%;" />



<ol start="4">
<li><p>模块</p>
<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210127152557232.png" alt="image-20210127152557232" style="zoom:50%;" />

<p>​            </p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210127155646.png" alt="image-20210127155642424" style="zoom:50%;" />

<p>​        </p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210127162306.png" alt="image-20210127162302180" style="zoom:50%;" />

<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210127164418.png" alt="image-20210127164413444" style="zoom:50%;" />

<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210127164723.png" alt="image-20210127164717439" style="zoom:50%;" />

<p>几个命令</p>
<ul>
<li><p>removes</p>
<p>不存在则不执行</p>
</li>
<li><p>creates</p>
<p>存在则不执行</p>
</li>
<li><p>chdir</p>
<p>相当于cd命令</p>
</li>
</ul>
</li>
<li><p>命令</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210127175718.png" alt="image-20210127175714036" style="zoom:50%;" /></li>
<li><p>注意事项</p>
</li>
</ol>
<ul>
<li><p>corn模块</p>
<p>删除的时候必须加上job对应的名字，否则会新建一个注释掉的corn任务</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Ansible</category>
      </categories>
      <tags>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>playbook</title>
    <url>/2022/01/07/Ansible/playbook/</url>
    <content><![CDATA[<ol>
<li><p>基础组件</p>
<ul>
<li><p>hosts</p>
<p>申明主机</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span></span><br><span class="line">	<span class="attr">remote_user:</span> <span class="comment">#以什么身份远程操作主机</span></span><br></pre></td></tr></table></figure></li>
<li><p>task</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tasks:</span>  <span class="comment">#需要注意的是   不管该任务用到的是不是同一个模块，都需要声明在两个name里面</span></span><br><span class="line">	<span class="bullet">-</span> <span class="attr">name:</span></span><br><span class="line">		<span class="attr">ping:</span> <span class="comment">#模块名: 参数 || /bin/ture #忽略产生的错误，让脚本继续执行</span></span><br><span class="line">    <span class="attr">remote_user:</span> <span class="string">magedu</span></span><br><span class="line">    <span class="attr">sudo:</span> <span class="literal">yes</span> <span class="comment">#切换为root用户 </span></span><br><span class="line">    <span class="attr">sudo_user:</span> <span class="string">wang</span> <span class="comment">#root用户密码</span></span><br><span class="line">    <span class="attr">ingore_errors:</span> <span class="literal">True</span> <span class="comment">#忽略产生的错误，让脚本继续执行</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="comment">#声明标签之后，可以特定的只执行一个动作</span></span><br><span class="line">    <span class="attr">when:</span> <span class="comment">#实现条件判断</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">   </span><br><span class="line">  细节：</span><br><span class="line">   </span><br><span class="line">     	1. -v /-vv/-vvv表示展示详细过程</span><br><span class="line">     	2. --list-hosts 列出运行任务的主机</span><br><span class="line">     	3. --limit 主机列表  只针对特定的主机执行</span><br><span class="line">  	4. --check 只检测可能发生的改变，但不真正执行操作</span><br><span class="line">   </span><br><span class="line">- handler</span><br><span class="line">   </span><br><span class="line">     ```yaml</span><br><span class="line">     tasks: </span><br><span class="line">     	- name:</span><br><span class="line">     		copy: </span><br><span class="line">     		notify: change #当文件发生了变化就会触发handlers中的change操作</span><br><span class="line">     handlers: </span><br><span class="line">     	- name: change </span><br><span class="line">     		service: </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<ul>
<li>赋值操作在模块里面有变量名可以使用<ol>
<li><p>在调用playbook的时候  -e ‘var=xxxx’</p>
</li>
<li><p>在playbook里面写</p>
   <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">vars:</span></span><br><span class="line">	<span class="bullet">-</span> <span class="attr">var1:</span></span><br><span class="line">	<span class="bullet">-</span> <span class="attr">var2:</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写var文件</p>
<p>在playbook中的声明</p>
   <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">host:</span> </span><br><span class="line">	<span class="attr">remote_user:</span></span><br><span class="line">	<span class="attr">vars_files:</span></span><br><span class="line">		<span class="bullet">-</span> <span class="string">xxx.yaml</span> <span class="comment">#这个地方声明变量文件</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li>template功能：根据模块文件动态生成对应的配置文件<ul>
<li><p>templates文件必须存放于templates目录下，且命名为.j2结尾</p>
</li>
<li><p>yaml/yml文件必须和emplates目录平级，目录结构如下所示：</p>
   <img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210128141137847.png" alt="image-20210128141137847" style="zoom:50%;" />
 </li>
<li><p>with_items</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210128143455.png" alt="image-20210128143450984" style="zoom:50%;" /></li>
</ul>
</li>
</ul>
<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210128143700345.png" alt="image-20210128143700345" style="zoom:50%;" />]]></content>
      <categories>
        <category>Ansible</category>
      </categories>
      <tags>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>role</title>
    <url>/2022/01/07/Ansible/role/</url>
    <content><![CDATA[<ol>
<li><p>Roles文件下子目录的作用</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210128150232.png" alt="image-20210128150228789" style="zoom:50%;" /></li>
</ol>
]]></content>
      <categories>
        <category>Ansible</category>
      </categories>
      <tags>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>初始Ansible</title>
    <url>/2022/01/07/Ansible/%E5%88%9D%E5%A7%8Bansible/</url>
    <content><![CDATA[<ol>
<li><p>ansible是基于ssh进行服务的，并非是基于agent，</p>
<p>注：agent的坏处就是如果agent升级了的话，会导致每台被控主机上面的agent都需要进行升级</p>
<p>ansible效率差一些（适用于中小型生产环境，大约三四百台机器），主机太多的话，需要考虑使用saltstack和puppet</p>
</li>
<li><p>ansible的重要特点</p>
<p>==幂等性==：一个任务执行一遍的效果与执行n遍的效果是相同的，不会因为重复执行而带来意外的情况</p>
</li>
<li><p>注意事项</p>
<ul>
<li>主控端的Python版本需要&gt;=2.6</li>
<li>被控端的Pyhton小于2.4需要安装python-simplejson</li>
<li>被控端如果开启了selinux需要安装libselinux-python</li>
<li>Windows不能作为主控端</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Ansible</category>
      </categories>
      <tags>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Ansible</title>
    <url>/2022/01/07/Ansible/%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<ol>
<li><p>pm包安装：epel源</p>
<p>yun install ansible</p>
</li>
<li><p>编译安装</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210127135926.png" alt="image-20210127135912298" style="zoom:50%;" /></li>
<li><p>其他安装方式</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210127140035.png" alt="image-20210127140030512" style="zoom:50%;" /></li>
<li><p>确认安装</p>
<p>ansible –version</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Ansible</category>
      </categories>
      <tags>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>ceph安装教程</title>
    <url>/2022/01/07/Ceph/Ceph%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<ol>
<li><p>设置三台linux主机并配置不同的ip地址以及内网地址</p>
<p>我设置的ip网址为：192.168.236.121 192.168.236.122 192.168.236.123</p>
<p>内网地址为：192.168.100.101 192.168.100.102  192.168.100.103</p>
</li>
<li><p>设置三条主机名分别为node1、node2、node3</p>
<p><code>hostnamectl set-hostname node1</code></p>
<p><code>bash #使得命名生效</code></p>
</li>
<li><p>编写hosts文件并传递到另外两个主机上</p>
</li>
<li><p>免密钥登录</p>
<ol>
<li><p>ssh-keygen 生成公钥和私钥</p>
</li>
<li><p>将公钥派发到三个节点上</p>
<p><code>ssh-copy-id -i 公钥存放地址</code></p>
</li>
</ol>
</li>
<li><p>关闭防火墙</p>
<ul>
<li><p>关闭selinux</p>
<p>SELinux 主要作用就是<strong>最大限度地减小系统中服务进程可访问的资源</strong>（最小权限原则）</p>
<ul>
<li>将/etc/selinux下的config文件中的selinux修改为disabled</li>
</ul>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201003101658.png" alt="image-20201003085849002" style="zoom:50%;" />

<ul>
<li><p>设置setenforce为0  （临时关闭selinux）</p>
<p><code>setenforce 0 </code></p>
<p>查看当前selinux状态</p>
<p> <code>getenforce</code></p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201003101652.png" alt="image-20201003090415905" style="zoom:50%;" /></li>
</ul>
</li>
<li><p>关闭防火墙</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>设置ntp同步</p>
<ul>
<li><p>安装ntp</p>
<p> yum install ntp -y</p>
</li>
<li><p>如果需要将ntp的时间以内网为准的话需要设置ntp的文件，也就是设置以下部分</p>
<p>这里默认是指向外网的，一般都需要指向公司的ntp服务器</p>
<p>文件位于 /etc/ntp.conf</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201003101645.png" alt="image-20201003091341145" style="zoom:50%;" /></li>
<li><p>重启ntp服务</p>
<p>systemctl restart ntpd</p>
<p>systemctl enable ntpd</p>
</li>
<li><p>查看是否启动</p>
<p> ntpq -pn</p>
</li>
<li><p>将另外两台服务器的ntp指向第一台服务器的ntp，并重新启动ntp服务</p>
<p>在其对用的ntp.conf文件中将原来的server注释掉，然后添加对应的服务器</p>
<p>sever  ip iburst</p>
<p>如果出现*则说明同步完成</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201003101635.png" alt="image-20201003092656801" style="zoom:50%;" /></li>
</ul>
</li>
<li><p>配置yum源</p>
<ul>
<li><p>配置centos的<a href="https://developer.aliyun.com/mirror/centos?spm=a2c6h.13651102.0.0.3e221b11MsogJv">yum源</a></p>
<ul>
<li><p>删除原来自带的yum源</p>
<p>rm -f * 删除掉 /etc/yum.repos.d/下的yum源</p>
</li>
<li><p>在阿里云镜像上找到与自己版本匹配的yum源</p>
</li>
</ul>
</li>
<li><p>配置epl的yum源</p>
</li>
<li><p>配置ceph的yum源</p>
<p>自己编写ceph.repo文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[norch]</span><br><span class="line">name=norch</span><br><span class="line">baseurl=https://mirrors.aliyun.com/ceph/rpm-nautilus/el7/noarch/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line"></span><br><span class="line">[x86_64]</span><br><span class="line">name=x86 64</span><br><span class="line">baseurl=https://mirrors.aliyun.com/ceph/rpm-nautilus/el7/x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br></pre></td></tr></table></figure>

<p>创建缓存 yum makecache</p>
</li>
</ul>
</li>
<li><p>安装ceph-deploy</p>
<p>yum install python-setuptools ceph-deploy -y</p>
<p>需要确保版本是2.0.1或者是2.0.0</p>
</li>
<li><p>创建monitor</p>
<p>先创建ceph-deploy文件夹，进入之后执行创建monitor命令，创建ceph-deloy文件夹是想将让生成的文件放到包里面</p>
<p>ceph-deploy new –public-network 192.168.236.0/24(这个必须有) –cluster-network 192.168.100.0/24 node1</p>
<p>public-network用于对外，cluster-network用于对内</p>
</li>
<li><p>安装依赖的包  （每个节点都需要安装）</p>
<p>yum install ceph ceph-mon ceph-mgr ceph-radosgw ceph-mds -y</p>
</li>
<li><p>初始化monitor (必须等待步骤10全部完成)</p>
<p>ceph-deploy mon create-initial</p>
</li>
<li><p>将admin的密钥推送到所有的节点上</p>
<p>ceph-deploy admin node1 node2 node3</p>
</li>
<li><p>部署监控节点</p>
<p> ceph-deploy mgr create node1</p>
</li>
<li><p>添加osd</p>
<p>可以将主机中的磁盘作为osd添加到ceph集群中</p>
<p>ceph-deploy osd create node1 –data /dev/sdb</p>
<p>ceph-deploy osd create node2 –data /dev/sdb</p>
<p>ceph-deploy osd create node3 –data /dev/sdb</p>
</li>
<li><p>为了确保高可用的集群，需要部署多个monitor，ceph采用的是Paxos算法，因此需要部署奇数个mon</p>
<p>ceph-deploy  mon add node2 –address 192.168.100.102</p>
<p>ceph-deploy  mon add node2 –address 192.168.100.103</p>
<p>也可以查看仲裁选举的情况</p>
<p>ceph quorum_status –format json-pretty</p>
</li>
<li><p>部署多个mgr节点，也是为了高可用，但是此处的mgr节点只有一个是active的状态，其余的都是standby状态</p>
<p>ceph-deploy mgr create node2 node3</p>
</li>
</ol>
<p>到此我们已经部署一个有3个mon，3个mgr和3个osd的高可用ceph集群！</p>
<h3 id="附加"><a href="#附加" class="headerlink" title="附加"></a>附加</h3><ol>
<li><p>如果安装过程中遇到问题</p>
<ul>
<li><p>删除安装包 </p>
<p>ceph-deploy purge admin-node node1 node2 node3</p>
</li>
<li><p>清除配置 </p>
<p>ceph-deploy purgedata admin-node node1 node2 node3</p>
</li>
</ul>
<p>​       ceph-deploy forgetkeys</p>
</li>
<li><p>如果osd安装不了 查看磁盘是否清理干净</p>
<p><a href="https://www.jianshu.com/p/c88ddc104a4a">https://www.jianshu.com/p/c88ddc104a4a</a></p>
<p>vgscan 查看</p>
</li>
</ol>
]]></content>
      <categories>
        <category>ceph</category>
      </categories>
      <tags>
        <tag>ceph</tag>
      </tags>
  </entry>
  <entry>
    <title>Ceph安装第三方Ceph exporter</title>
    <url>/2022/01/07/Ceph/Ceph%E5%AE%89%E8%A3%85%E7%AC%AC%E4%B8%89%E6%96%B9Ceph%20exporter/</url>
    <content><![CDATA[<h3 id="安装-Go-语言环境"><a href="#安装-Go-语言环境" class="headerlink" title="安装 Go 语言环境"></a>安装 Go 语言环境</h3><p>导出 Ceph 信息到 Prometheus 有多种方式，本文采用的是 DigitalOcean 的 ceph_exporter，ceph_exporter 使用 go 语言编写的，所以需要先安装 go 语言环境。还是一条命令解决：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt install -y golang</span><br></pre></td></tr></table></figure>

<p>安装好后执行 <code>$ go env</code> 命令验证并查看一下 go 环境信息。</p>
<p><font color=red>此处需要注意一下GOROOT</font>，有可能不是/usr/lib/go-1.6，需要在/usr/lib下查看当前go库的名字，</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201023172011.png" alt="image-20201023171958553" style="zoom:50%;" />

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go env</span><br><span class="line">GOARCH=<span class="string">&quot;amd64&quot;</span></span><br><span class="line">GOBIN=<span class="string">&quot;&quot;</span></span><br><span class="line">GOEXE=<span class="string">&quot;&quot;</span></span><br><span class="line">GOHOSTARCH=<span class="string">&quot;amd64&quot;</span></span><br><span class="line">GOHOSTOS=<span class="string">&quot;linux&quot;</span></span><br><span class="line">GOOS=<span class="string">&quot;linux&quot;</span></span><br><span class="line">GOPATH=<span class="string">&quot;&quot;</span></span><br><span class="line">GORACE=<span class="string">&quot;&quot;</span></span><br><span class="line">GOROOT=<span class="string">&quot;/usr/lib/go-1.6&quot;</span></span><br><span class="line">GOTOOLDIR=<span class="string">&quot;/usr/lib/go-1.6/pkg/tool/linux_amd64&quot;</span></span><br><span class="line">GO15VENDOREXPERIMENT=<span class="string">&quot;1&quot;</span></span><br><span class="line">CC=<span class="string">&quot;gcc&quot;</span></span><br><span class="line">GOGCCFLAGS=<span class="string">&quot;-fPIC -m64 -pthread -fmessage-length=0&quot;</span></span><br><span class="line">CXX=<span class="string">&quot;g++&quot;</span></span><br><span class="line">CGO_ENABLED=<span class="string">&quot;1&quot;</span></span><br></pre></td></tr></table></figure>

<p>然后需要设置 Go 环境变量：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat /etc/profile.d/go.sh </span><br><span class="line"><span class="built_in">export</span> GOROOT=/usr/lib/go-1.6</span><br><span class="line"><span class="built_in">export</span> GOBIN=<span class="variable">$GOROOT</span>/bin</span><br><span class="line"><span class="built_in">export</span> GOPATH=/home/&lt;user-name&gt;/go</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GOROOT</span>/bin:<span class="variable">$GOPATH</span>/bin</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">source</span> /etc/profile.d/go.sh</span><br></pre></td></tr></table></figure>

<p>已经配置好 Go 环境了，接下来创建 <strong>GOPATH</strong> 指定的目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir /home/&lt;user-name&gt;/go</span><br></pre></td></tr></table></figure>

<h3 id="2-2-安装-ceph-exporter"><a href="#2-2-安装-ceph-exporter" class="headerlink" title="2.2 安装 ceph_exporter"></a>2.2 安装 ceph_exporter</h3><p>Go 环境安装好后，我们接下来下载 ceph_exporter 代码，然后编译出可执行程序。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir -p /home/&lt;user-name&gt;/go/src/github.com/digitalocean</span><br><span class="line">$ <span class="built_in">cd</span> /home/&lt;user-name&gt;/go/github.com/src/digitalocean</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/digitalocean/ceph_exporter</span><br><span class="line">$ <span class="built_in">cd</span> ceph_exporter</span><br><span class="line">$ go build</span><br></pre></td></tr></table></figure>

<p>这时编译会报错，原因是需要依赖 ceph rados 相关的头文件，需要安装 librados-dev 包。</p>
<p>此处的librados-dev需要<font color=red>根据具体</font>的平台进行调整</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201023172116.png" alt="image-20201023172114718"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt install -y librados-dev</span><br></pre></td></tr></table></figure>

<p>安装好后，在编译，复制可执行文件到对应目录完成安装。<br> 再运行 <code>go build</code> 完成安装。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go get</span><br><span class="line">$ go build </span><br><span class="line">$ mkdir /home/&lt;user-name&gt;/go/bin</span><br><span class="line">$ cp ceph_exporter /home/&lt;user-name&gt;/go/bin</span><br></pre></td></tr></table></figure>

<p>执行 ceph_exporter 来验证一下是否可以正常使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ceph_exporter --<span class="built_in">help</span></span><br><span class="line">Usage of ceph_exporter:</span><br><span class="line">  -ceph.config string</span><br><span class="line">        path to ceph config file</span><br><span class="line">  -ceph.user string</span><br><span class="line">        Ceph user to connect to cluster. (default <span class="string">&quot;admin&quot;</span>)</span><br><span class="line">  -exporter.config string</span><br><span class="line">        Path to ceph exporter config. (default <span class="string">&quot;/etc/ceph/exporter.yml&quot;</span>)</span><br><span class="line">  -rgw.mode int</span><br><span class="line">        Enable collection of stats from RGW (0:disabled 1:enabled 2:background)</span><br><span class="line">  -telemetry.addr string</span><br><span class="line">        host:port <span class="keyword">for</span> ceph exporter (default <span class="string">&quot;:9128&quot;</span>)</span><br><span class="line">  -telemetry.path string</span><br><span class="line">        URL path <span class="keyword">for</span> surfacing collected metrics (default <span class="string">&quot;/metrics&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>接下来要配置 ceph_exporter 的自动启动：</p>
<p><font color=red>注意&lt; user-name &gt;是什么可能需要修改</font></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">$ cat /lib/systemd/system/ceph_exporter.service </span><br><span class="line">[Unit]</span><br><span class="line">Description=Prometheus&#x27;s ceph metrics exporter</span><br><span class="line">After=prometheus.ervice</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/home/<span class="tag">&lt;<span class="name">user-name</span>&gt;</span>/go/bin/ceph_exporter</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">Alias=ceph_exporter.service</span><br><span class="line"></span><br><span class="line">$ sudo systemctl daemon-reload</span><br><span class="line">$ sudo systemctl enable ceph_exporter.service</span><br><span class="line">$ sudo systemctl start ceph_exporter.service</span><br></pre></td></tr></table></figure>

<h3 id="2-3-修改-Promethues-配置"><a href="#2-3-修改-Promethues-配置" class="headerlink" title="2.3 修改 Promethues 配置"></a>2.3 修改 Promethues 配置</h3><p>接下来需要修改 Prometheus 的配置，添加一会要安装的 ceph_exporter 的相关信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo vim /etc/prometheus/prometheus.yml</span><br><span class="line">...</span><br><span class="line">scrape_configs:</span><br><span class="line">  - job_name: <span class="string">&#x27;ceph_exporter&#x27;</span></span><br><span class="line">    static_configs:</span><br><span class="line">    - targets: [<span class="string">&#x27;localhost:9128&#x27;</span>]</span><br><span class="line">      labels:</span><br><span class="line">        <span class="built_in">alias</span>: ceph_exporter</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>改好后，重启：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>sudo systemctl restart prometheus.service</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ceph</category>
      </categories>
      <tags>
        <tag>ceph</tag>
      </tags>
  </entry>
  <entry>
    <title>ceph调优</title>
    <url>/2022/01/07/Ceph/Ceph%E8%B0%83%E4%BC%98/</url>
    <content><![CDATA[<ol>
<li><p>扩容最好一个个osd的加，否则数据再平衡需要较长的时间</p>
</li>
<li><p>如果业务流量比较大的话，可以先暂停到数据的rebalance（相当于设置标志位）</p>
<ul>
<li><code>ceph osd set norebalance</code></li>
<li><code>ceph osd set nobackfill</code></li>
</ul>
<p>两个必须都关掉才能有效果 </p>
<p>等业务流量高峰期过了重新设置标志位即可</p>
<ul>
<li><code>ceph osd unset norebalance</code></li>
<li><code>ceph osd unset nobackfill</code></li>
</ul>
</li>
<li><p>查看每块盘的延迟</p>
<p><code>ceph osd perf</code></p>
<p>如果有盘延迟特别高，说明出现了问题，需要及时处理</p>
</li>
<li><p>当有盘被踢掉之后，大概需要过10min数据才会开始进行rebalance</p>
</li>
<li><p>删盘</p>
<ul>
<li><code>ceph osd out osd.编号</code>（消除权重）</li>
<li><code>ceph osd crush rm osd.编号</code>(从map中删除)</li>
<li><code>ceph osd rm osd.编号</code>(从osd tree中删除)</li>
<li><code>ceph auth rm osd.编号</code>(从认证信息中删除)</li>
</ul>
</li>
<li><p>数据一致性检查</p>
<ul>
<li><p>scrub</p>
<p>轻量级的检查，对比文件属性</p>
</li>
<li><p>deep scrub（每周自动检查一次）</p>
<p>重量级检查，文件内容检查</p>
</li>
</ul>
</li>
<li><p>日志在 /var/log/ceph中</p>
</li>
</ol>
]]></content>
      <categories>
        <category>ceph</category>
      </categories>
      <tags>
        <tag>ceph</tag>
      </tags>
  </entry>
  <entry>
    <title>ceph运维笔记</title>
    <url>/2022/01/07/Ceph/Ceph%E8%BF%90%E7%BB%B4%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<ol>
<li><p>查看ceph 读写i/o最好不要通过iostat查看 因为有可能会将内容写到缓存中，从而无法获得对于的真正读写i/o</p>
<p>可以通过ceph dashboard来查看，也可以通过ceph -s来查看</p>
<p>动态获取脚本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">LANG=C</span><br><span class="line">PATH=/sbin:/usr/sbin:/bin:/usr/bin</span><br><span class="line">interval=1</span><br><span class="line">length=86400</span><br><span class="line">for i in $(seq 1 $(expr $&#123;length&#125; / $&#123;interval&#125;));do</span><br><span class="line">date=`date`</span><br><span class="line">echo -n &quot;$date  &quot;</span><br><span class="line">ceph pg stat</span><br><span class="line">sleep $&#123;interval&#125;</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li>
<li><p>查看用户已经使用的空间</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">radosgw-admin user stats --uid=&lt;uid&gt; --sync-stats</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210201122902.png" alt="image-20210201122901310"></p>
</li>
<li><p>如果发现mgr相关命令不可以使用例如：</p>
<p>ceph config set mgr mgr/dashboard/server_port 8080等等</p>
<p>出现 mgr/dashboard/server_port位置找不到等问题时检查<font color=red>当前所在的mgr</font>是否存活</p>
<p>检查是否存活：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl status ceph-mgr@&#123;node名称&#125;</span><br></pre></td></tr></table></figure>

<p>如果发现实在复活不了mgr则删除掉它</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop ceph-mgr@&#123;mgr-name&#125;</span><br><span class="line">sudo systemctl disable ceph-mgr@&#123;mgr-name&#125;</span><br><span class="line">sudo rm -rf /var/lib/ceph/mgr/ceph-&#123;mgr-name&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>可以创建subuser，其名称可以带中文，但是带中文的话到时候会dashboard会显示错误</p>
</li>
<li><p><font color=red>rgw创建bucket的时候必须给定最大值，否则后期当某一个bucket中object中的数量非常多会出现问题</font></p>
</li>
<li><p><font color=red>没有什么不是重启不能解决的</font></p>
<p>如果日志排查不出有什么问题，直接重启看看行不行</p>
</li>
<li><p>对象存储使用s3上传 1个26M大小的文件 上传的时候显示增加了8个objects 而删除的时候只少了1个 这是什么原因？</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210514191216.png" alt="image-20210514191208864"></p>
<p> 可以看到上传之后此处object的个数为2692个</p>
<p>删除之后</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210514191317.png" alt="image-20210514191316220"></p>
<p>可以看到删除之后此处的object个数为2691个</p>
<p><font color=red>剩下的由gc清理</font></p>
</li>
<li><p>分享永久链接的生成方法</p>
<ul>
<li><p>设置对象所在bucket的权限为public</p>
</li>
<li><p>设置对象的权限为public</p>
</li>
<li><p>生成链接（截取生成链接到第一个问号位置，不加上问号）</p>
</li>
</ul>
</li>
<li><p>pg操作</p>
<ul>
<li><p>查看pg对应的osd</p>
<p><code>ceph pg dump pgs_brief</code></p>
</li>
<li><p>查看拥有某个osd的所有pg</p>
<p>比如下面显示的就是拥有osd0的所有pg</p>
<p><code>ceph pg dump pgs_brief | egrep &#39;\[0,|UP_&#39;</code></p>
</li>
<li><p>查看指定osd上的scrub任务</p>
<p><code>ceph daemon osd.0 dump_scrubs</code></p>
</li>
<li><p>查看哪些pg正在scrub</p>
<p><code>ceph pg dump pgs_brief |grep scrub</code></p>
</li>
</ul>
</li>
</ol>
<p>​            </p>
]]></content>
      <categories>
        <category>ceph</category>
      </categories>
      <tags>
        <tag>ceph</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>ceph重启命令</title>
    <url>/2022/01/07/Ceph/Ceph%E9%87%8D%E5%90%AF%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="所有ceph的服务开启、关闭等"><a href="#所有ceph的服务开启、关闭等" class="headerlink" title="所有ceph的服务开启、关闭等"></a>所有ceph的服务开启、关闭等</h3><p><code>systemctl start ceph.target</code></p>
<h3 id="按照服务分类开启、关闭等"><a href="#按照服务分类开启、关闭等" class="headerlink" title="按照服务分类开启、关闭等"></a>按照服务分类开启、关闭等</h3><p><code>systemctl start ceph-mon.target    </code></p>
<p><code>systemctl start ceph-mgr.target</code></p>
<p><code>systemctl start ceph.osd.target</code></p>
<h3 id="更加细粒度的服务开启、关闭"><a href="#更加细粒度的服务开启、关闭" class="headerlink" title="更加细粒度的服务开启、关闭"></a>更加细粒度的服务开启、关闭</h3><p><code>systemctl start ceph-osd@&#123;osd Id&#125;</code></p>
]]></content>
      <categories>
        <category>ceph</category>
      </categories>
      <tags>
        <tag>ceph</tag>
      </tags>
  </entry>
  <entry>
    <title>ceph重装</title>
    <url>/2022/01/07/Ceph/Ceph%E9%87%8D%E8%A3%85/</url>
    <content><![CDATA[<h5 id="清理osd磁盘"><a href="#清理osd磁盘" class="headerlink" title="清理osd磁盘"></a>清理osd磁盘</h5><p>osd磁盘未主动卸载就直接删除了ceph，需要手动清理对应的osd磁盘</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201012124736.png" alt="image-20201011182934067"></p>
<p>手动进行dd命令清空磁盘并重启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dd <span class="keyword">if</span>=/dev/zero of=/dev/sdb bs=512K count=1</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>ceph</category>
      </categories>
      <tags>
        <tag>ceph</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>ceph集成Prometheus、grafana</title>
    <url>/2022/01/07/Ceph/Ceph%E9%9B%86%E6%88%90prometheus%E3%80%81grafana/</url>
    <content><![CDATA[<ol>
<li><p>加载模块</p>
<p><code>ceph mgr module enable prometheus</code></p>
<p>Ceph Luminous 12.2.1的mgr中<font color=red>自带</font>了Prometheus插件，内置了 Prometheus ceph exporter，可以使用Ceph mgr内置的exporter作为Prometheus的target。</p>
</li>
<li><p>默认暴露的端口是9283</p>
<p>地址：ip:9283</p>
<p>里面有非常多的指标</p>
<p>当然端口也是可以修改的</p>
</li>
<li><p>安装Prometheus</p>
<p>编写yum源</p>
<p>安装</p>
<p><code>yum install prometheus -y</code>   如果安装不起来可以考虑使用<a href="https://www.huaweicloud.com/articles/f6145c1e2f9dc2b73134f01925ca751d.html">这个</a></p>
</li>
<li><p>修改Prometheus的配置文件并启动</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201007201106.png" alt="image-20201007200927996" style="zoom:50%;" /></li>
<li><p>打开宿主机的网址以及端口号</p>
<p>{ip}:9090</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201007201045.png" alt="image-20201007201040079" style="zoom:50%;" /></li>
<li><p>安装grafana并启动</p>
<p><code>yum install https://mirrors.cloud.tencent.com/grafana/yum/el7/grafana-5.4.2-1.x86_64.rpm </code></p>
<p><code>service grafana-server start</code></p>
</li>
<li><p>查看grafana端口(默认是3000端口)</p>
<p><code>netstat -antupl |grep grafana</code></p>
</li>
<li><p>登录的默认账户和密码都是admin</p>
</li>
<li><p>配置datasource</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201007202503.png" alt="image-20201007202456062" style="zoom:50%;" /></li>
<li><p>因为下载的时候grafana就已经提供了一些页面脚本共选择</p>
<p>在 /etc/grafana/dashboards/下有较多的json文件</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201007213637.png" alt="image-20201007203436859" style="zoom:50%;" />

<p>可以直接导入到grafana中</p>
<p>或者直接输入UID（也就是官方提供的一些模板）</p>
</li>
</ol>
]]></content>
      <categories>
        <category>ceph</category>
      </categories>
      <tags>
        <tag>ceph</tag>
      </tags>
  </entry>
  <entry>
    <title>CrushMap</title>
    <url>/2022/01/07/Ceph/CrushMap/</url>
    <content><![CDATA[<ol>
<li><p>数据是如何分配的，数据容灾的级别是怎样的</p>
</li>
<li><p>查看curshMap tree</p>
<p><code>ceph osd crush tree</code></p>
<p><code>ceph osd crush dump</code></p>
</li>
<li><p>curshMap修改</p>
<ul>
<li><p>获取crushMap</p>
<p><code>ceph osd getcrushmap -o crushmap.bin</code></p>
</li>
<li><p>因为得到的文件类型时2进制文件，所以需要编译一下</p>
<p><code>crushtool -d crushmap.bin -o crushmap.txt</code></p>
</li>
<li><p>查看cursh rule</p>
<p><code>ceph osd crush rule ls</code></p>
</li>
<li><p>编写完crushmap之后重新编译成二进制文件</p>
<p><code>crushtool -c crushmap.txt -o crushmap-new.bin</code></p>
</li>
<li><p>应用生成的规则二进制文件</p>
<p><code>ceph osd setcrushmap -i crushmap.bin </code></p>
</li>
<li><p>如果修改了map文件，我们还需要在ceph.conf中添加一个内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[osd]</span><br><span class="line">osd crush update on start = <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>如果不添加该内容的话，重启osd之后就会自动迁移到其最初的默认位置，因此如果想让他回到修改map后位置，必须添加该内容</p>
<p>添加了该内容之后，如果想要在集群中添加osd，需要自己进行手动调整，系统不会再自动进行调整</p>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>ceph</category>
      </categories>
      <tags>
        <tag>ceph</tag>
      </tags>
  </entry>
  <entry>
    <title>Dashboard</title>
    <url>/2022/01/07/Ceph/Dashboard/</url>
    <content><![CDATA[<ol>
<li><p>ceph dashboard 可以配合mgr进行调试</p>
<p>步骤：</p>
<ol>
<li><p>开启dashboard的debug模式</p>
<p>在dashboard中调整对应模块的参数</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210421105953.png" alt="image-20210421105944977"></p>
</li>
<li><p>修改配置文件</p>
<p>在ceph.conf中加入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[mgr]</span><br><span class="line">debug mgr = 20</span><br></pre></td></tr></table></figure>

<p>重启mgr模块</p>
<p><code>systemctl restart ceph-mgr@*</code></p>
<p>or</p>
<p><code>systemctl restart ceph-mgr.target</code></p>
</li>
<li><p>查看mgr的log</p>
</li>
</ol>
</li>
<li><p>ceph dashboard可以根据需要指定对应的rgw地址和端口，以及传输模式</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210421110211.png" alt="image-20210421110209724"></p>
<p><font color=red>注意这里的必须是rgw的配置，用户必须是system级别的</font></p>
</li>
<li><p>当桶数量太多时，dashboard无法展示</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210517144321.png" alt="5A97ADA7-FA8A-4992-B1F0-43A9B0877A20"></p>
<p>是由于一次性的请求实在太多并且原生的dashboard没有做处理从而导致整个请求崩溃</p>
</li>
</ol>
]]></content>
      <categories>
        <category>ceph</category>
      </categories>
      <tags>
        <tag>ceph</tag>
        <tag>运维</tag>
        <tag>dashboard</tag>
      </tags>
  </entry>
  <entry>
    <title>RBD</title>
    <url>/2022/01/07/Ceph/RBD/</url>
    <content><![CDATA[<ol>
<li><p>创建资源池pool</p>
<p>因为数据是先存放到pool中，然后pool映射到对于的pg上，最终由pg映射到osd上</p>
<p><code>ceph osd pool create &#123;pool_name&#125; &#123;pg_num&#125; &#123;pgp_num&#125;</code></p>
<p>初始化pool(不初始化的话，会出现警告错误)</p>
<p><code>rbd pool init &#123;pool_name&#125;</code></p>
<p>查看当前集群中的pool</p>
<p><code>ceph osd lspools</code></p>
<p>查看指定池中的pg_num、pgp_num、size(副本数)、crush_rule</p>
<p><code> ceph osd pool get demo size/pg_num/pgp_num/crush_rule</code></p>
<p>也可以对指定pool中的规则进行调整，比如size</p>
<p><code> ceph osd pool set demo size 2</code></p>
</li>
<li><p>查看当前指定pool中的块文件</p>
<p><code> rbd -p demo ls</code></p>
</li>
<li><p>创建块文件</p>
<p><code>rbd create -p &#123;pool_name&#125; --image &#123;image名称.img&#125;  --size &#123;大小&#125;</code></p>
<p>例如</p>
<p><code>rbd create -p demo --image rbd-demo.img --size 1G</code></p>
</li>
<li><p>删除块</p>
<p><code>rbd rm -p &#123;pool_name&#125; --image &#123;image名称.img&#125;</code></p>
</li>
<li><p>查看块文件的信息</p>
<p><code>rbd info &#123;pool_name&#125;/&#123;image名称.img&#125;</code>        </p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201003130519.png" alt="image-20201003130513552" style="zoom:50%;" /></li>
<li><p>因为在centos7的版本中对于块设备的一些高级特征不兼容，因此挂载的时候需要去除掉这些特性才能够挂载</p>
<p><code>rbd feature disable &#123;pool_name&#125;/&#123;image名称.img&#125; &#123;特性名称&#125;</code></p>
</li>
<li><p>加载到内核下</p>
<p><code>rbd map &#123;pool_name&#125;/&#123;image名称.img&#125;</code></p>
<p><font color=red>注意</font>:我们这里的rbd设备是一个瘦策略，也就是虽然分配了1G的空间，但是实际上并没有分配这个多，而是根据实际的使用情况去分配空间，如果存入的文件越来越多，那么分配的空间也就会越来越大，但是最多只能放1G大小的文件</p>
</li>
<li><p>查看挂载情况（也就相当于可以将挂载的设备作为一个裸的磁盘来使用）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rbd device list</span><br><span class="line">fdisk -l</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201003131929.png" alt="image-20201003131657331" style="zoom:50%;" />

<p>我们可以看到挂载成功</p>
</li>
<li><p>格式化磁盘</p>
<p><code>mkfs.ext4 /dev/rbd0</code></p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201003131907.png" alt="image-20201003131902265" style="zoom:50%;" /></li>
<li><p>挂载rbd0</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201003132209.png" alt="image-20201003132204331" style="zoom:50%;" /></li>
<li><p>查看rbd被切割的对象(每个被切割成的对象大小都是4M)</p>
<p><code>rados  -p &#123;pool_name&#125; ls|grep 指定rbd的前缀</code></p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201003133036.png" alt="image-20201003133031927" style="zoom:50%;" /></li>
<li><p>查看每个小分片映射到的osd的过程</p>
<p><code>ceph osd map &#123;pool_name&#125; &#123;分片名&#125;</code></p>
<p>例如</p>
<p><code>ceph osd map demo rbd_data.38a629d9bc4b.000000000000008</code></p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201003133710.png" alt="image-20201003133704794" style="zoom:50%;" /></li>
<li><p>扩容（不建议分区，如果需要分区，那就多买几块磁盘）</p>
<p>扩容rbd</p>
<p><code>rbd resize demo/rbd-demo.img --size 2G</code></p>
<p>还需要扩容</p>
<p><code>resize2fs /dev/rbd0</code></p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201003140102.png" alt="image-20201003135920443" style="zoom:50%;" /></li>
<li><p>删除到垃圾箱中（可以恢复并制定截止日期(只能到精确到天)）</p>
<p><code>rbd trash mv demo/rbd-trash.img --expires-at 20201005</code></p>
<p>查看回收站中的元素</p>
<p><code>rbd trash ls &#123;pool_name&#125;</code></p>
<p>恢复删除的元素</p>
<p><code>rbd trash restore -p demo adee33dfb8f4</code></p>
</li>
<li><p>快照</p>
<ul>
<li><p>创建快照</p>
<p><code>rbd snap create &#123;pool_name&#125;/&#123;镜像名称.img&#125;@&#123;快照名称&#125;</code></p>
</li>
<li><p>找回数据</p>
<p><code>rbd snap rollback &#123;pool_name&#125;/&#123;镜像名称.img&#125;@&#123;快照名称&#125;</code></p>
<p>一旦重新找回数据之后，需要先unmount之前挂载的文件，之后重新mount</p>
</li>
<li><p>删除快照</p>
<p><code>rbd snap rm  &#123;pool_name&#125;/&#123;镜像名称.img&#125;@&#123;快照名称&#125;</code></p>
<p>如果使用pure删除的话，被引用的了的快照是无法进行删除的</p>
</li>
<li><p>为快照设置保护的标志位，使得无法被删除</p>
<p><code>rbd snap protect demo/rbd-demo.img@20201004</code></p>
</li>
<li><p>克隆快照(克隆的速度非常快)</p>
<p><code>rbd clone demo/rbd-demo.img@20201004 demo/clone-demo.img</code></p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201004135851.png" alt="image-20201004135835070" style="zoom:50%;" />

<p>秒级创建虚拟机的方法：COW(Copy on Write) </p>
<p>使用一个虚拟机作为父虚拟机，并将其快照设置为保护的标志位，然后用户每创建一个虚拟机从该快照复制一份即可。也就是用户的虚拟机引用了父虚拟机的快照。用户自己的产生的内容只会在自己的虚拟机上保存。</p>
</li>
<li><p>解除父子快照之间的引用关系,这样子快照就可以成为一个独立的快照</p>
<p><code>rbd flatten clone-demo.img</code></p>
</li>
</ul>
<ol start="16">
<li><p>导出块设备或者快照（防止ceph集群损坏,离线备份）</p>
<p><code>rbd export demo/rbd-demo.img /root/export.img</code></p>
</li>
<li><p>导入块设备或者快照</p>
<p><code>rbd import export.img demo/export-new.img</code></p>
</li>
<li><p>增量备份导出和导入</p>
<p>也就是不完全将快照导出，只导出快照增加的内容，这样可以大大缩小导出的快照大小</p>
<ul>
<li><p>导出</p>
<p><code>rbd export-diff demo/rbd-demo.img@20201004 /root/export.img</code></p>
</li>
<li><p>导入</p>
<p><code>rbd import-diff export.img demo/rbd-demo.img@20201004</code></p>
<p>导入之后可能不会立刻生效，需要先unmount，再重新mount</p>
</li>
</ul>
</li>
<li><p>使用场景</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201004151156.png" alt="image-20201004151151662" style="zoom:50%;" /></li>
<li><p>池无法删除出现下面的问题</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210311164512.png" alt="image-20210311164503820"></p>
</li>
</ol>
<p>切换终端重新尝试，实在不行直接到宿主机上面执行</p>
</li>
</ol>
]]></content>
      <categories>
        <category>ceph</category>
      </categories>
      <tags>
        <tag>ceph</tag>
        <tag>RBD</tag>
      </tags>
  </entry>
  <entry>
    <title>s3cmd操作</title>
    <url>/2022/01/07/Ceph/S3cmd/</url>
    <content><![CDATA[<ol>
<li><p>设置s3桶 public权限(已经存在的文件权限为public)，并非桶的权限为public</p>
<p><code>s3cmd setacl s3://Xyz --acl-public --recursive</code></p>
</li>
<li><p>debug</p>
<p><code>s3cmd xxx --deubg</code></p>
</li>
<li><p>转移桶内的文件到另外一个桶</p>
<p><code>s3cmd sync s3://Aaa s3://Sync</code></p>
<p>Aaa是目标桶，Sync是目的桶</p>
</li>
<li><p>删除bucket</p>
<p><code>s3cmd rb  --recursive s3://Sync</code></p>
</li>
<li><p>设置桶的权限为public</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;Version&quot;</span>:<span class="string">&quot;2012-10-17&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Statement&quot;</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;Effect&quot;</span>:<span class="string">&quot;Allow&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;Principal&quot;</span>:<span class="string">&quot;*&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;Action&quot;</span>:[<span class="string">&quot;*&quot;</span>],</span><br><span class="line">            <span class="attr">&quot;Resource&quot;</span>:[</span><br><span class="line">                <span class="string">&quot;arn:aws:s3:::Public/*&quot;</span>,</span><br><span class="line">                <span class="string">&quot;arn:aws:s3:::Public&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>获得对应的bucket所占用的空间大小</p>
<p><code>s3cmd du -H s3://my-bucket-name</code></p>
</li>
<li><p>上传并将权限设置为所有人可读</p>
<p><code>s3cmd put --acl-public file.txt s3://my-bucket-name/file.txt</code></p>
</li>
<li><p>获得分享链接</p>
<p><code>s3cmd signurl &#123;key&#125; &#123;day&#125;</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">day=`date -d &#x27;now + 1 year&#x27; +%s`</span><br><span class="line">for name in $(s3cmd ls s3://Xyz | awk &#x27;&#123;print $4&#125;&#x27;)</span><br><span class="line">do</span><br><span class="line"> s3cmd signurl $name $day</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>ceph</category>
      </categories>
      <tags>
        <tag>ceph</tag>
        <tag>s3cmd</tag>
      </tags>
  </entry>
  <entry>
    <title>ceph Scrub</title>
    <url>/2022/01/07/Ceph/Scrub/</url>
    <content><![CDATA[<ol>
<li><p>osd max scrubs</p>
<p>一个Ceph OSD守护线程同时执行Scrub操作的最大数目,并非指的是进行scrub的osd最大个数</p>
</li>
<li><p>osd_scrub_chunk_min = 1<br>osd_scrub_chunk_max = 1<br>osd_scrub_sleep = 3</p>
<p>这几个参数会影响在scrub时去获取集群中存储的对象，获取效率会有一定的影响，如果<code>osd_scrub_chunk_min</code>和<code>osd_scrub_chunk_max</code></p>
<p>设置的很大，并且<code>osd_scrub_sleep</code>设置的比较小，那么会严重的影响获取正在scrub的chunk中的存储对象的效率，出现slow request 的情况</p>
<p>一般如果在生成环境中需要根据实际的情况对这几个参数进行调整</p>
<p>比较好的方案：</p>
<p>Ceph默认的是到了最大的intelval以后就会开启自动开启scrub了，所以我建议的是不用系统自带的时间控制，而是自己去分析的scrub的时间戳和对象数目，然后计算好以后，可以是每天晚上，扫描指定个数的PG，然后等一轮全做完以后，中间就是自定义的一段时间的不扫描期，这个可以自己定义，是一个月或者两个月扫一轮都行，</p>
<p><a href="https://ceph.com/planet/%E5%85%B3%E4%BA%8Escrub%E7%9A%84%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90%E5%92%8C%E5%BB%BA%E8%AE%AE/">参考</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>ceph</category>
      </categories>
      <tags>
        <tag>ceph</tag>
      </tags>
  </entry>
  <entry>
    <title>ansible-runner 自动创建ceph集群</title>
    <url>/2022/01/07/Ceph/ansible-runner%E8%87%AA%E5%8A%A8%E5%88%9B%E5%BB%BAceph%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<p><a href="https://ansible-runner.readthedocs.io/en/stable/intro.html">Ansible-runner</a></p>
<h3 id="安装ansible-runner"><a href="#安装ansible-runner" class="headerlink" title="安装ansible-runner"></a>安装ansible-runner</h3><p><code>pip3 install ansible-runner</code></p>
<p>遇到问题：</p>
<ul>
<li><p>缺少psutil/_psutil_common.c:9:20: 致命错误:Python.h:没有那个文件或目录</p>
<p>如果是python2环境则需要安装<font color=red>python3-dev</font>，注意一定是安装python3-dev，安装python-dev没有用！！</p>
</li>
</ul>
<h3 id="安装ansible"><a href="#安装ansible" class="headerlink" title="安装ansible"></a>安装ansible</h3><p><code>pip3 install ansible==2.9.17</code></p>
<p>注意：</p>
<ul>
<li><p>如果之前使用yum安装了ansible还需要用pip3进行安装，否则找不到依赖</p>
<p>并且一定要是2.9.17版本，因为ceph-ansible暂时不支持ansible2.10以及以上版本</p>
</li>
</ul>
<h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><ul>
<li><p>代码结构如下</p>
<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210217154229659.png" alt="image-20210217154229659" style="zoom:50%;" />

<p>main.py为执行代码</p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ansible_runner</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">&quot;/usr/local/lib/python3.6/site-packages&quot;</span>) <span class="comment">#找到ansible-runner依赖</span></span><br><span class="line"><span class="comment"># become_password = getpass.getpass(&quot;Please type in the become password: &quot;)</span></span><br><span class="line"><span class="comment"># password_dict=&#123;&quot;^SSH [pP]assword:$&quot;: become_password&#125;</span></span><br><span class="line">extra_dict=&#123;<span class="string">&quot;ansible_sudo_pass&quot;</span>: <span class="string">&quot;123&quot;</span>&#125; <span class="comment">#ceph集群主机密码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置运行配置信息</span></span><br><span class="line">rc = ansible_runner.RunnerConfig(private_data_dir=<span class="string">&quot;./private_data_dir/&quot;</span>,</span><br><span class="line">                       playbook=<span class="string">&quot;/root/project/private_data_dir/project/ceph-ansible-stable-4.0/site.yaml&quot;</span>,</span><br><span class="line">                       extravars=extra_dict)</span><br><span class="line">rc.prepare()</span><br><span class="line">ansible_command = rc.generate_ansible_command()</span><br><span class="line"><span class="built_in">print</span>(ansible_command)</span><br><span class="line"><span class="built_in">print</span>(rc.roles_path)</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行</span></span><br><span class="line">r = ansible_runner.Runner(config=rc)</span><br><span class="line">r.run()</span><br><span class="line"></span><br><span class="line"><span class="comment"># r = ansible_runner.run(private_data_dir=&quot;./private_data_dir/&quot;, host_pattern=&#x27;ceph&#x27;, module=&#x27;shell&#x27;, module_args=&#x27;whoami&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;--------\n&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(r.status, r.rc))</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>private_data_dir存放如下东西：</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210217154423.png" alt="image-20210217154418334" style="zoom:50%;" /></li>
</ul>
<p>​        </p>
<h3 id="执行main-py"><a href="#执行main-py" class="headerlink" title="执行main.py"></a>执行main.py</h3><p><code>python3 main.py</code></p>
<p>遇到问题：</p>
<ul>
<li><pre><code class="shell">TASK [ceph-common : generate ceph configuration file] **************************
fatal: [mon1.ceph.pp.sd.lbn.fr]: FAILED! =&gt; &#123;&quot;failed&quot;: true, &quot;msg&quot;: &quot;module (config_template) is missing interpreter line&quot;&#125;
fatal: [mon2.ceph.pp.sd.lbn.fr]: FAILED! =&gt; &#123;&quot;failed&quot;: true, &quot;msg&quot;: &quot;module (config_template) is missing interpreter line&quot;&#125;
fatal: [mon3.ceph.pp.sd.lbn.fr]: FAILED! =&gt; &#123;&quot;failed&quot;: true, &quot;msg&quot;: &quot;module (config_template) is missing interpreter line&quot;&#125;
</code></pre>
<p> 解决办法：</p>
<p>原因是没有修改ansible.cfg中的action_plugin默认路径，需要将默认路径修改为ansible当前工作路径：</p>
<p>此处我就将 /etc/anisble/ansible.cfg中的action_plugins ={ceph-ansible中的actions路径}</p>
<p><a href="https://github.com/ceph/ceph-ansible/issues/4717#issuecomment-561082560">参考1</a></p>
<p><a href="https://blog.csdn.net/dhmzwk/article/details/87785462">参考2</a></p>
</li>
</ul>
<h3 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h3><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210217155319.png" alt="image-20210217155314817" style="zoom:50%;" />

]]></content>
      <categories>
        <category>ceph</category>
      </categories>
      <tags>
        <tag>ceph</tag>
        <tag>ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>ceph-ansible(docker)</title>
    <url>/2022/01/07/Ceph/ceph-ansible(docker)/</url>
    <content><![CDATA[<h3 id="设置ymal文件"><a href="#设置ymal文件" class="headerlink" title="设置ymal文件"></a>设置ymal文件</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">generate_fsid:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">monitor_interface:</span> <span class="string">ens5f0</span></span><br><span class="line"><span class="attr">journal_size:</span> <span class="number">5120</span></span><br><span class="line"><span class="attr">public_network:</span> <span class="number">192.168</span><span class="number">.74</span><span class="number">.0</span><span class="string">/24</span></span><br><span class="line"><span class="attr">cluster_network:</span> <span class="number">192.168</span><span class="number">.74</span><span class="number">.0</span><span class="string">/24</span></span><br><span class="line"><span class="attr">ceph_docker_image:</span> <span class="string">&quot;ceph/daemon&quot;</span></span><br><span class="line"><span class="attr">ceph_docker_image_tag:</span> <span class="string">master-d4b8dde-mimic-centos-7-x86_64</span></span><br><span class="line"><span class="attr">containerized_deployment:</span> <span class="literal">true</span> <span class="comment">#这个一定要开</span></span><br><span class="line"><span class="attr">ceph_docker_registry:</span> <span class="string">docker.io</span> </span><br><span class="line"><span class="attr">radosgw_interface:</span> <span class="string">ens5f0</span></span><br></pre></td></tr></table></figure>

<p>其他的和ceph-ansible(host) 一样</p>
<ul>
<li><p>启动</p>
<p><code>ansible-playbook site-docker.yml</code></p>
</li>
<li><p>销毁集群</p>
<p><code>ansible-playbook infrastructure-playbooks/purge-docker-cluster.yml</code></p>
<p>注意：</p>
<p>docker也会被摧毁</p>
</li>
</ul>
]]></content>
      <categories>
        <category>ceph</category>
      </categories>
      <tags>
        <tag>ceph</tag>
        <tag>ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>ceph-ansible(host)</title>
    <url>/2022/01/07/Ceph/ceph-ansible(host)/</url>
    <content><![CDATA[<p><a href="https://docs.ceph.com/projects/ceph-ansible/en/latest/glossary.html">ceph-ansible官网</a></p>
<h3 id="检查环境"><a href="#检查环境" class="headerlink" title="检查环境"></a>检查环境</h3><ol>
<li><p>ansible主机</p>
<ul>
<li><p>ansible安装</p>
<p> <code>yum install ansible -y</code></p>
</li>
<li><p>设置host</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> vim /etc/ansible/hosts</span></span><br><span class="line">[mons]</span><br><span class="line">node01</span><br><span class="line">node02</span><br><span class="line">node03</span><br><span class="line"></span><br><span class="line">[mgrs]</span><br><span class="line">node01</span><br><span class="line">node02</span><br><span class="line">node03</span><br><span class="line"></span><br><span class="line">[osds]</span><br><span class="line">node01</span><br><span class="line">node02</span><br><span class="line">node03</span><br><span class="line"></span><br><span class="line">[rgws]</span><br><span class="line">node01</span><br><span class="line">node02</span><br><span class="line">node03</span><br><span class="line"></span><br><span class="line">[mdss]</span><br><span class="line">node01</span><br><span class="line">node02</span><br><span class="line">node03</span><br><span class="line"></span><br><span class="line">[grafana-server]</span><br><span class="line">node01</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>ceph集群</p>
<ul>
<li>配置IP</li>
<li>配置主机名</li>
<li>配置HOSTS文件</li>
<li>配置加速源（EPEL）</li>
<li>配置时钟同步</li>
<li>关闭 SELinux</li>
<li>关闭Firewalld</li>
<li>设置免密登录</li>
</ul>
</li>
</ol>
<h3 id="选择ceph-ansible"><a href="#选择ceph-ansible" class="headerlink" title="选择ceph-ansible"></a>选择ceph-ansible</h3><p><font color=red>安装不同的ceph版本需要选择不同的ceph-ansible，一般来说ansible不需要替换</font></p>
<p>按下图进行选择：</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210215172739.png" alt="image-20210215172721682" style="zoom:50%;" /><a href="https://github.com/ceph/ceph-ansible">版本选择</a></p>
<p>例如选择nautilus</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -q -O ceph-ansible-stable-4.0.zip https://codeload.github.com/ceph/ceph-ansible/zip/stable-4.0</span><br><span class="line">unzip ceph-ansible-stable-4.0.zip</span><br><span class="line">mv ceph-ansible-stable-4.0.zip ceph-ansible</span><br></pre></td></tr></table></figure>



<h3 id="设置ymal文件"><a href="#设置ymal文件" class="headerlink" title="设置ymal文件"></a>设置ymal文件</h3><ol>
<li><p>修改ceph配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd ceph-ansible/group_vars/</span></span><br><span class="line"><span class="comment"># mv all.yml.sample all.yml</span></span><br><span class="line"><span class="comment"># grep -Ev &#x27;^#|^$&#x27; all.yml</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">dummy:</span></span><br><span class="line"><span class="attr">ceph_repository_type:</span> <span class="string">repository</span></span><br><span class="line"><span class="attr">ceph_origin:</span> <span class="string">repository</span></span><br><span class="line"><span class="attr">ceph_repository:</span> <span class="string">community</span></span><br><span class="line"><span class="attr">ceph_mirror:</span> <span class="string">https://mirrors.tuna.tsinghua.edu.cn/ceph/</span></span><br><span class="line"><span class="attr">ceph_stable_key:</span> <span class="string">https://mirrors.tuna.tsinghua.edu.cn/ceph/keys/release.asc</span></span><br><span class="line"><span class="attr">ceph_stable_release:</span> <span class="string">octopus</span></span><br><span class="line"><span class="attr">ceph_stable_repo:</span> <span class="string">https://mirrors.tuna.tsinghua.edu.cn/ceph/rpm-15.2.7/el7/</span></span><br><span class="line"><span class="attr">monitor_interface:</span> <span class="string">eth0</span></span><br><span class="line"><span class="attr">public_network:</span> <span class="number">192.168</span><span class="number">.198</span><span class="number">.0</span><span class="string">/24</span></span><br><span class="line"><span class="attr">cluster_network:</span> <span class="number">172.20</span><span class="number">.1</span><span class="number">.0</span><span class="string">/24</span></span><br><span class="line"><span class="attr">osd_objectstore:</span> <span class="string">bluestore</span></span><br><span class="line"><span class="attr">radosgw_civetweb_port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">radosgw_interface:</span> <span class="string">eth0</span></span><br><span class="line"><span class="attr">dashboard_enabled:</span> <span class="literal">True</span> <span class="comment">#此处需要注意一下 centos7不能无法自动设置dashboard，需要置为false</span></span><br><span class="line"><span class="attr">dashboard_admin_user:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">dashboard_admin_password:</span> [<span class="string">email</span> <span class="string">protected</span>]</span><br><span class="line"><span class="attr">grafana_admin_user:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">grafana_admin_password:</span> [<span class="string">email</span> <span class="string">protected</span>]</span><br></pre></td></tr></table></figure></li>
<li><p>osd配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cp osds.yml.sample osds.yml</span></span><br><span class="line"><span class="comment"># grep -Ev &#x27;^#|^$&#x27; osds.yml</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">dummy:</span></span><br><span class="line"><span class="attr">devices:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/dev/sdb</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/dev/sdc</span></span><br></pre></td></tr></table></figure>

<p>此处需要特别注意下：</p>
<p>devices这里的”#”也需要注释掉，否则无法识别到盘</p>
</li>
<li><p>其他配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cp clients.yml.sample clients.yml</span></span><br><span class="line"><span class="comment"># cp mons.yml.sample mons.yml</span></span><br><span class="line"><span class="comment"># cp mgrs.yml.sample mgrs.yml</span></span><br><span class="line"><span class="comment"># cp rgws.yml.sample rgws.yml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cd ../</span></span><br><span class="line"><span class="comment"># cp site.yml.sample site.yml</span></span><br></pre></td></tr></table></figure></li>
<li><p>安装文件配置（site.yaml）</p>
<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210215173911487.png" alt="image-20210215173911487" style="zoom:50%;" />

<p>不需要的功能注释掉</p>
</li>
<li><p>安装</p>
<p><code>ansible-playbook site.yml </code></p>
</li>
<li><p>安装完成</p>
<p>![image-20210215180432171](/Users/cooper/Library/Application Support/typora-user-images/image-20210215180432171.png)</p>
</li>
<li><p>重置ceph集群</p>
<ol>
<li><p><font color=red>需要先将group_vars/下的内容复制到/etc/ansible/group_vars/下面（group_vars/需要自己创建），如果不这样做，会找不到ceph集群</font></p>
</li>
<li><p>执行命令 <code>ansible-playbook infrastructure-playbooks/purge-cluster.yml</code></p>
</li>
</ol>
</li>
</ol>
<h3 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h3><ol>
<li><p>安装mon的时候报错</p>
<p>依赖没有装，装上就可以了</p>
</li>
<li><p>安装mgr遇到无法安装</p>
<p>直接在ceph集群中的机器上面测试</p>
<p><code>yum install ceph-mgr -y</code></p>
<p>测试ceph源是否有问题</p>
</li>
<li><p>重置集群之后可能会导致安装包产生冲突</p>
<p>Transaction Check Error:</p>
<p>conflicts with file from package</p>
<p>解决方案：卸载后面一个包</p>
</li>
</ol>
<p><a href="https://cloud.tencent.com/developer/article/1768394">参考</a></p>
]]></content>
      <categories>
        <category>ceph</category>
      </categories>
      <tags>
        <tag>ceph</tag>
        <tag>ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>ansible-runner 自动创建ceph集群</title>
    <url>/2022/01/07/Ceph/ceph-ansible-5.0/</url>
    <content><![CDATA[<h3 id="ceph-ansible-5-0"><a href="#ceph-ansible-5-0" class="headerlink" title="ceph-ansible 5.0"></a>ceph-ansible 5.0</h3><p>优势：需要部署的节点数量越多，ceph-ansible的效率就越高</p>
<h5 id="版本信息："><a href="#版本信息：" class="headerlink" title="版本信息："></a>版本信息：</h5><p>ceph-ansible:5.0.5    ceph 15</p>
<p>os:centos 7.9.2009</p>
<p>kernel version:5.4.93-1.el7.elrepo.x86_64</p>
<h5 id="集群拓扑"><a href="#集群拓扑" class="headerlink" title="集群拓扑"></a>集群拓扑</h5><table>
<thead>
<tr>
<th>ceph-admin</th>
<th>192.168.200.120</th>
<th>192.168.100.120</th>
</tr>
</thead>
<tbody><tr>
<td>ceph-node01</td>
<td>192.168.200.121</td>
<td>192.168.100.121</td>
</tr>
<tr>
<td>ceph-node02</td>
<td>192.168.200.122</td>
<td>192.168.100.122</td>
</tr>
<tr>
<td>ceph-node03</td>
<td>192.168.200.123</td>
<td>192.168.100.123</td>
</tr>
<tr>
<td>ceph-node04 lb01</td>
<td>192.168.200.124</td>
<td>192.168.100.124</td>
</tr>
<tr>
<td>ceph-node05 lb02</td>
<td>192.168.200.125</td>
<td>192.168.100.125</td>
</tr>
<tr>
<td>ceph-admin</td>
<td>192.168.200.126</td>
<td>192.168.100.126</td>
</tr>
</tbody></table>
<h5 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h5><ul>
<li>本文档适用于创建具有mon、mgr、mds、osds四类进程的Ceph集群，如需启用nfs-ganesha、rgw、rbd-mirror等其他功能的Ceph集群，请参阅ceph-ansible github仓库中的示例文件说明，或在集群创建完成之后，手动进行配置。</li>
<li>ceph-ansible项目的版本号与Ceph版本有依赖关系，ceph-ansible 4.0用于创建Ceph N版本的集群，ceph-ansible 5.0用于创建Ceph O版的集群，以此类推。</li>
<li>部分Ceph功能依赖于新版内核的特性，在部署之前请将内核升级至最新的Long Term版本，升级内核请参阅另外一篇文档</li>
<li>在ceph-admin节点上，配置好对其他所有节点的免密登录，所有节点关闭防火墙和SELinux</li>
<li>所有节点配置好EPEL源</li>
</ul>
<p>在ceph-admin节点上安装ansible，admin节点可以是任意能连接到目标集群的节点，并且按照ansible的要求，需要配置免密登录至目标集群的所有节点。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install ansible python-netaddr unzip python36-six.noarch  python36-PyYAML.x86_64 -y</span><br><span class="line"><span class="meta">#</span><span class="bash"> python-netaddr是一个用来处理IP地址的Python模块</span></span><br><span class="line">yum update -y</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在7.7上 ，ceph-volume命令会出错</span></span><br><span class="line">pip3 install pecan</span><br><span class="line">pip3 install werkzeug</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在所有mgr节点上安装必须的python 3 模块</span></span><br></pre></td></tr></table></figure>

<p>获取ceph-ansible项目文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/ceph/ceph-ansible/archive/refs/tags/v5.0.5.zip</span><br><span class="line"><span class="meta">#</span><span class="bash"> 可能需要科学上网，或者使用迅雷下载</span></span><br><span class="line">unzip ceph-ansible-5.0.5.zip -d /usr/local/</span><br><span class="line">cd /usr/local/ceph-ansible-5.0.5</span><br></pre></td></tr></table></figure>

<h4 id="group-vars目录"><a href="#group-vars目录" class="headerlink" title="group_vars目录"></a>group_vars目录</h4><p>Ceph集群的配置将通过使用ceph-ansible提供的ansible变量来设置。所有这些选项及其默认值都定义在ceph-ansible项目根部的<code>group_vars/</code>目录中。在group_vars/目录里面有很多Ansible配置文件的样本，通过文件名与每种Ceph守护进程相关。例如，osds.yml.sample包含了OSD守护进程的所有默认配置。all.yml.sample文件是一个特殊的group_vars文件，适用于集群中的所有主机。</p>
<p>all.yml文件中定义的配置，作用于集群中的所有进程类型上，在安装过程中，所有进程的安装步骤都可以使用</p>
<p>其他类似于osd.yml的文件，只适用于特定的进程组，只作用于特定进程的安装过程；例如osd.yml只适用于与osd相关的配置</p>
<p>重点来看all.yml文件中的配置</p>
<h4 id="all-yml文件"><a href="#all-yml文件" class="headerlink" title="all.yml文件"></a>all.yml文件</h4><p>cd至<code>group_vars</code>目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/ceph-ansible-5.0.5/group_vars/</span><br></pre></td></tr></table></figure>

<p>在<code>group_vars</code>目录下创建all.yml文件，内容如下</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mon_group_name:</span> <span class="string">mons</span></span><br><span class="line"><span class="comment"># 在Inventory文件（ansible的hosts文件），要安装mon组件的主机是在哪个资产组内，上面这个例子指的就是在[mons]组内</span></span><br><span class="line"><span class="comment"># 以下同理</span></span><br><span class="line"><span class="attr">osd_group_name:</span> <span class="string">osds</span></span><br><span class="line"><span class="comment"># rgw_group_name: rgws</span></span><br><span class="line"><span class="attr">mds_group_name:</span> <span class="string">mdss</span></span><br><span class="line"><span class="comment"># nfs_group_name: nfss</span></span><br><span class="line"><span class="comment"># rbdmirror_group_name: rbdmirrors</span></span><br><span class="line"><span class="attr">client_group_name:</span> <span class="string">clients</span></span><br><span class="line"><span class="comment"># iscsi_gw_group_name: iscsigws</span></span><br><span class="line"><span class="attr">mgr_group_name:</span> <span class="string">mgrs</span></span><br><span class="line"><span class="comment"># rgwloadbalancer_group_name: rgwloadbalancers</span></span><br><span class="line"><span class="attr">configure_firewall:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># 是否自动配置防火墙，如果设置为true，ceph-ansible会自动去配置集群内组件相互通信所需的防火墙规则</span></span><br><span class="line"><span class="comment"># 这一步建议手动做</span></span><br><span class="line"><span class="attr">ceph_origin:</span> <span class="string">repository</span></span><br><span class="line"><span class="comment"># 自动配置源</span></span><br><span class="line"><span class="comment"># 设置为distro表示不自动配置源</span></span><br><span class="line"><span class="comment"># 设置为local表示从本地计算机——即ceph-admin节点去复制ceph二进制文件分发至其他节点</span></span><br><span class="line"><span class="attr">ceph_repository:</span> <span class="string">community</span></span><br><span class="line"><span class="comment"># 表示使用ceph社区的版本，ceph-ansible可以安装rhcs等厂家发行的版本</span></span><br><span class="line"><span class="comment"># 此处只安装社区的版本，如果指定了此参数,需要设置ceph_stable_release和cepph_mirror</span></span><br><span class="line"><span class="attr">ceph_mirror:</span> <span class="string">http://mirrors.163.com/ceph</span></span><br><span class="line"><span class="attr">ceph_stable_release:</span> <span class="string">octopus</span></span><br><span class="line"><span class="comment"># 要部署哪个ceph版本</span></span><br><span class="line"><span class="attr">ceph_version_num:</span> <span class="number">15</span></span><br><span class="line"><span class="attr">ceph_stable_repo:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; ceph_mirror &#125;&#125;</span>/rpm-<span class="template-variable">&#123;&#123; ceph_stable_release &#125;&#125;</span>&quot;</span></span><br><span class="line"><span class="comment"># 两个&#123;&#123;&#125;&#125;表示使用ansible变量</span></span><br><span class="line"><span class="attr">ceph_stable_key:</span> <span class="string">http://mirrors.163.com/ceph/keys/release.asc</span></span><br><span class="line"><span class="attr">ip_version:</span> <span class="string">ipv4</span></span><br><span class="line"><span class="attr">monitor_interface:</span> <span class="string">ens33</span></span><br><span class="line"><span class="attr">public_network:</span> <span class="number">192.168</span><span class="number">.200</span><span class="number">.0</span><span class="string">/24</span></span><br><span class="line"><span class="attr">cluster_network:</span> <span class="number">192.168</span><span class="number">.100</span><span class="number">.0</span><span class="string">/24</span></span><br><span class="line"><span class="attr">monitor_address_block:</span> <span class="number">192.168</span><span class="number">.200</span><span class="number">.0</span><span class="string">/24</span></span><br><span class="line"><span class="attr">cephx:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">copy_admin_key:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 将&#x27;copy_admin_key&#x27;设置为&#x27;true&#x27;会将管理员密钥复制到[clients]主机中的/etc/ceph/目录下</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ceph_iscsi_config_dev: true </span></span><br><span class="line"><span class="comment"># nfs_ganesha_stable: true </span></span><br><span class="line"><span class="comment"># nfs </span></span><br><span class="line"><span class="comment"># nfs_file_gw: true</span></span><br><span class="line"><span class="comment"># 是否启用通过NFS的形式来访问CephFS的功能，将此项设置为true依赖于mds角色，即必须启用mds安装</span></span><br><span class="line"><span class="comment"># nfs_obj_gw: true</span></span><br><span class="line"><span class="comment"># 是否启用通过NFS的形式来访问RGW的功能，将此项设置为true依赖于rgws角色，即必须启用rgw安装</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义的ceph配置选项可以写在这里</span></span><br><span class="line"><span class="comment"># ceph_conf_overrides:</span></span><br><span class="line"><span class="comment">#  global:</span></span><br><span class="line"><span class="comment">#    osd_pool_default_size: 3</span></span><br><span class="line"><span class="comment">#  mon:</span></span><br><span class="line"><span class="comment">#    mon_allow_pool_delete: true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># osd相关的配置</span></span><br><span class="line"><span class="attr">osd_objectstore:</span> <span class="string">bluestore</span></span><br><span class="line"><span class="comment"># filestore bluestore SeaStore</span></span><br><span class="line"><span class="comment"># SeaStore面向全NVMe场景设计</span></span><br><span class="line"><span class="comment"># 对象存储引擎，如有必要可以将其更改为filestore</span></span><br><span class="line"><span class="attr">osd_auto_discovery:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 是否启用OSD设备自动发现，如果这个选项设置为true，将不再需要填写osds.yml中的device设置</span></span><br><span class="line"><span class="comment"># 因为ceph-ansible将会使用ansible_devices发现的所有可用的块设备</span></span><br><span class="line"><span class="comment"># 不必担心会将系统盘也给做成OSD，ceph-ansible将检测所有块设备，已有分区表的设备将不会被使用</span></span><br><span class="line"><span class="comment"># 与之相关的还有另外一个配置项osd_auto_discovery_exclude，用于设置一个规则来排除指定的设备</span></span><br><span class="line"><span class="comment"># 例如rbd*表示所有rbd开头的设备将不会被自动创建为osd</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">dashboard_enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># 这一步如果不设置为false，默认启动的grafana容器将会到github下载必须的json文件，需科学上网</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># rgw相关的配置</span></span><br><span class="line"><span class="comment"># radosgw_frontend_type: beast</span></span><br><span class="line"><span class="comment"># 使用什么实现来作为RGW的前端，beast表示使用Boost.Beast库来作为前端web服务器，以及使用</span></span><br><span class="line"><span class="comment"># Boost.Asio库来进行异步网络i/o，此实现于Mimic版本中引入</span></span><br><span class="line"><span class="comment"># 当前共有两个实现，beast和civetweb</span></span><br><span class="line"><span class="comment"># 端口默认是8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># radosgw_interface: ens33</span></span><br><span class="line"><span class="comment"># radosgw_address_block: 192.168.200.0/24</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># radosgw_civetweb_port: 8080</span></span><br><span class="line"><span class="comment"># 设置civetweb的端口</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cephx，是否启用cephx认证功能</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># dashboard</span></span><br><span class="line"><span class="comment"># dashboard_enabled: false</span></span><br><span class="line"><span class="comment"># dashboard_protocol: http</span></span><br><span class="line"><span class="comment"># dashboard_admin_user_ro: false</span></span><br><span class="line"><span class="comment"># dashboard_port: 8443</span></span><br><span class="line"><span class="comment"># dashboard_admin_user: admin</span></span><br><span class="line"><span class="comment"># dashboard_admin_password: 123456</span></span><br><span class="line"><span class="comment"># grafana_admin_user: admin</span></span><br><span class="line"><span class="comment"># grafana_admin_password: 123456</span></span><br><span class="line"><span class="comment"># dashboard_grafana_api_no_ssl_verify: True</span></span><br><span class="line"><span class="comment"># dashboard_rgw_api_user_id: ceph-dashboard</span></span><br><span class="line"><span class="comment"># dashboard_rgw_api_no_ssl_verify: True</span></span><br><span class="line"><span class="comment"># prometheus和grafana</span></span><br><span class="line"><span class="comment"># docker_pull_timeout: 600s</span></span><br><span class="line"><span class="comment"># grafana_datasource: Dashboard</span></span><br><span class="line"><span class="comment"># grafana_dashboards_path: &quot;/etc/grafana/dashboards/ceph-dashboard&quot;</span></span><br><span class="line"><span class="comment"># grafana_dashboard_version: nautilus</span></span><br><span class="line"><span class="comment"># grafana_dashboard_files:</span></span><br><span class="line"><span class="comment">#  - ceph-cluster.json</span></span><br><span class="line"><span class="comment">#  - cephfs-overview.json</span></span><br><span class="line"><span class="comment">#  - host-details.json</span></span><br><span class="line"><span class="comment">#  - hosts-overview.json</span></span><br><span class="line"><span class="comment">#  - osd-device-details.json</span></span><br><span class="line"><span class="comment">#  - osds-overview.json</span></span><br><span class="line"><span class="comment">#  - pool-detail.json</span></span><br><span class="line"><span class="comment">#  - pool-overview.json</span></span><br><span class="line"><span class="comment">#  - radosgw-detail.json</span></span><br><span class="line"><span class="comment">#  - radosgw-overview.json</span></span><br><span class="line"><span class="comment">#  - rbd-overview.json</span></span><br><span class="line"><span class="comment"># grafana_plugins:</span></span><br><span class="line"><span class="comment">#  - vonage-status-panel</span></span><br><span class="line"><span class="comment">#  - grafana-piechart-panel</span></span><br><span class="line"><span class="comment"># node_exporter_container_image: &quot;prom/node-exporter:v0.17.0&quot;</span></span><br><span class="line"><span class="comment"># node_exporter_port: 9100</span></span><br><span class="line"><span class="comment"># grafana_container_image: &quot;grafana/grafana:5.4.3&quot;</span></span><br><span class="line"><span class="comment"># grafana_allow_embedding: True</span></span><br><span class="line"><span class="comment"># grafana_port: 3000</span></span><br><span class="line"><span class="comment"># prometheus_container_image: &quot;prom/prometheus:v2.7.2&quot;</span></span><br><span class="line"><span class="comment"># prometheus_data_dir: /var/lib/prometheus</span></span><br><span class="line"><span class="comment"># prometheus_conf_dir: /etc/prometheus</span></span><br><span class="line"><span class="comment"># prometheus_port: 9092</span></span><br><span class="line"><span class="comment"># alertmanager_container_image: &quot;prom/alertmanager:v0.16.2&quot;</span></span><br><span class="line"><span class="comment"># alertmanager_container_memory: 4</span></span><br><span class="line"><span class="comment"># alertmanager_data_dir: /var/lib/alertmanager</span></span><br><span class="line"><span class="comment"># alertmanager_conf_dir: /etc/alertmanager</span></span><br><span class="line"><span class="comment"># alertmanager_port: 9093</span></span><br></pre></td></tr></table></figure>

<p>复制mon、osd、mgr、mds的yml文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在group_vars目录下执行</span></span><br><span class="line">for i in &#123;mons,osds,mgrs,mdss&#125;;do cp $i.yml.sample $i.yml;done</span><br></pre></td></tr></table></figure>

<p>在<code>group_vars</code>的上一级目录，即ceph-ansible项目的根目录下，新建一个hosts文件，作为ansible的资产清单使用</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mons]</span></span><br><span class="line">192.168.200.121</span><br><span class="line">192.168.200.122</span><br><span class="line">192.168.200.123</span><br><span class="line"><span class="section">[mgrs]</span></span><br><span class="line">192.168.200.121</span><br><span class="line">192.168.200.122</span><br><span class="line">192.168.200.123</span><br><span class="line"><span class="section">[mdss]</span></span><br><span class="line">192.168.200.121</span><br><span class="line">192.168.200.122</span><br><span class="line">192.168.200.123</span><br><span class="line"><span class="section">[osds]</span></span><br><span class="line">192.168.200.121</span><br><span class="line">192.168.200.122</span><br><span class="line">192.168.200.123</span><br><span class="line">192.168.200.124</span><br><span class="line">192.168.200.125</span><br><span class="line"><span class="section">[clients]</span></span><br><span class="line">192.168.200.126</span><br></pre></td></tr></table></figure>

<p>如果不需要单独指明db和wal设备，那么现在已经开始部署了，如果需要，请参照下文的参考。</p>
<p>在ceph-ansible的根目录下，执行如下命令，开始部署过程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp site.yml.sample site.yml</span><br><span class="line">ansible-playbook -i hosts site.yml</span><br></pre></td></tr></table></figure>

<h3 id="单独指明DB和WAL设备"><a href="#单独指明DB和WAL设备" class="headerlink" title="单独指明DB和WAL设备"></a>单独指明DB和WAL设备</h3><h5 id="指明block-db设备"><a href="#指明block-db设备" class="headerlink" title="指明block-db设备"></a>指明block-db设备</h5><p>编辑group_vars/osds.yml，添加</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dedicated_devices:</span><br><span class="line">- /dev/sdg</span><br><span class="line"><span class="meta">#</span><span class="bash"> 会自动平均分配这个设备上的所有空间给host上的osd</span></span><br></pre></td></tr></table></figure>

<p>编辑group_vars/all.yml，添加</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">osd_auto_discovery_exclude:</span> <span class="string">&quot;dm-*|loop*|md*|rbd*|sdg&quot;</span></span><br><span class="line"><span class="comment"># 如果有多个设备，在此处全部写上，表示在做osd设备自动发现的时候，将这些设备排除在外。</span></span><br></pre></td></tr></table></figure>

<h5 id="指明block-wal设备"><a href="#指明block-wal设备" class="headerlink" title="指明block-wal设备"></a>指明block-wal设备</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">bluestore_wal_devices:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">/dev/nvme0n1</span></span><br></pre></td></tr></table></figure>

<p>编辑group_vars/all.yml，添加</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">osd_auto_discovery_exclude: &quot;dm-*|loop*|md*|rbd*|nvme0n1&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果有多个设备，在此处全部写上，表示在做osd设备自动发现的时候，将这些设备排除在外。</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ceph</category>
      </categories>
      <tags>
        <tag>ceph</tag>
        <tag>ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>ceph单osd创建遇到的问题</title>
    <url>/2022/01/07/Ceph/ceph%E5%8D%95osd%E5%88%9B%E5%BB%BA%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<ol>
<li><p>当我们只有一个磁盘去创建单个osd的时候最好先在config中设置如下内容：</p>
<p>osd pool default min size = 1<br>osd pool default size = 1</p>
<p><font color=red>如果不这样设置会导致直接创建rgw的时候默认按照三副本的方式给你创建pool的副本，但是此时只有一个osd，就会导致下图场景发生</font></p>
<p>![image-20210418155847000](/Users/cooper/Library/Application Support/typora-user-images/image-20210418155847000.png)</p>
<p>不管如何重启都会导致osd完全崩掉，并且rgw服务虽然存在但是没有执行</p>
</li>
</ol>
]]></content>
      <categories>
        <category>ceph</category>
      </categories>
      <tags>
        <tag>ceph</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>ceph常见命令</title>
    <url>/2022/01/07/Ceph/ceph%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<ol>
<li><p>动态监视客户端</p>
<p><code>ceph -w</code></p>
</li>
<li><p>查看、调试内核参数</p>
<p><code>ceph --admin-daemon &#123;sock的地址 一般在/var/run/ceph/下&#125; help</code></p>
<p>会显示当前的sock对应的命令</p>
<p>调整参数</p>
<p><code>ceph --admin-daemon &#123;sock的地址 一般在/var/run/ceph/下&#125; config set &#123;参数&#125; &#123;对应值&#125;</code></p>
<p>查看各项参数</p>
<p><code>ceph --admin-daemon &#123;sock的地址 一般在/var/run/ceph/下&#125; config show</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>ceph</category>
      </categories>
      <tags>
        <tag>ceph</tag>
      </tags>
  </entry>
  <entry>
    <title>ceph自定义rgw元数据查询</title>
    <url>/2022/01/07/Ceph/ceph%E8%87%AA%E5%AE%9A%E4%B9%89rgw%E5%85%83%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h3 id="可以利用rgw对ceph中的objectd的metadata进行个性化的筛选与查询"><a href="#可以利用rgw对ceph中的objectd的metadata进行个性化的筛选与查询" class="headerlink" title="可以利用rgw对ceph中的objectd的metadata进行个性化的筛选与查询"></a>可以利用rgw对ceph中的objectd的metadata进行个性化的筛选与查询</h3><ol>
<li><p>创建默认的realm</p>
<p><code>radosgw-admin realm create --rgw-realm=default --default</code></p>
<p>realm的作用：相当于是一块领土。</p>
<p>一个realm代表了全局唯一的命名空间，这个命名空间由一个或者多个zonegroup，zonegroup可以包含一个或多个zone，zone包含了桶，桶里包依次存放了对象</p>
</li>
<li><p>将默认的zonegroup关联至realm</p>
<p><code>radosgw-admin zonegroup modify  --rgw-zonegroup=default  --rgw-realm=&quot;default&quot;  --master --default</code></p>
<p>此处是指定默认的realm中的主zonegroup，相当于是君主</p>
<p><font color=red>一个realm下只能有一个主zonegroup，从的zonegroup可以是0或多个</font></p>
</li>
<li><p>将master zone 关联至 zonegroup</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">radosgw-admin zone modify  --rgw-zone=default --rgw-zonegroup=default --rgw-realm=default </span><br><span class="line">--master --default --endpoints=http://172.16.20.65:7480</span><br></pre></td></tr></table></figure>

<p>master zonegroup的master zone，或者说是王国中的国王。中央集权，权力较大，所有用户的创建、删除、修改都必须通过他进行，其他zone创建、删除或者修改桶级别的元数据的所有请求都需要转发给他。不通过他创建的用户，则无法创建桶。</p>
</li>
<li><p>更新配置</p>
<p><code>radosgw-admin period update --commit</code></p>
</li>
<li><p>创建系统用户</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建同步用户</span></span><br><span class="line">radosgw-admin user create --uid=sync --display-name=&quot;sync&quot; --access-key=sync  --secret=sync  --system</span><br></pre></td></tr></table></figure>

<p>各个zone拉取主主zone的数据中心结构都需要通过这个系统用户，需要获取他的AK和SK。系统用户就像一位总管。</p>
</li>
<li><p>配置rgw</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 配置网关</span></span><br><span class="line">[client.rgw.node1]</span><br><span class="line">host = node65</span><br><span class="line">rgw_frontends = civetweb port=7480</span><br><span class="line">rgw_content_length_compat = true</span><br><span class="line"></span><br><span class="line">[client.rgw.node2]</span><br><span class="line">host = node66</span><br><span class="line">rgw_frontends = civetweb port=7480</span><br><span class="line">rgw_content_length_compat = true</span><br><span class="line">rgw_zone = es-zone</span><br></pre></td></tr></table></figure></li>
<li><p>启动网关</p>
<p><code>systemctl start ceph-radosgw@rgw.target</code></p>
</li>
<li><p>配置slave zone （es zone）</p>
<p>RGW支持配置ES参数有：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">endpoint</span><br><span class="line"></span><br><span class="line">指定要访问的Elasticsearch服务器端点</span><br><span class="line"></span><br><span class="line">num_shards （整数）</span><br><span class="line"></span><br><span class="line">数据同步初始化时将为Elasticsearch配置的分片数。请注意，初始化后无法更改。此处的任何更改都需要重建Elasticsearch索引并重</span><br><span class="line">新初始化数据同步过程。</span><br><span class="line"></span><br><span class="line">num_replicas （整数）</span><br><span class="line"></span><br><span class="line">数据同步初始化时将为Elasticsearch配置的副本数。</span><br><span class="line"></span><br><span class="line">explicit_custom_meta （正确|错误）</span><br><span class="line"></span><br><span class="line">指定是否将对所有用户自定义元数据编制索引，或者用户是否需要配置（在存储桶级别）应为哪些自定义元数据条目编制索引。默认为假</span><br><span class="line"></span><br><span class="line">index_buckets_list （以逗号分隔的字符串列表）</span><br><span class="line"></span><br><span class="line">如果为空，则将对所有存储桶建立索引。否则，将仅索引此处指定的存储桶。可以提供存储桶前缀（例如foo *）或存储桶后缀（例如* bar）。</span><br><span class="line"></span><br><span class="line">approved_owners_list （以逗号分隔的字符串列表）</span><br><span class="line"></span><br><span class="line">如果为空，将为所有所有者的存储桶建立索引（受其他限制），否则，将仅对指定所有者拥有的存储桶建立索引。也可以提供后缀和前缀。</span><br><span class="line"></span><br><span class="line">override_index_path （串）</span><br><span class="line"></span><br><span class="line">如果不为空，则此字符串将用作elasticsearch索引路径。否则，索引路径将在同步初始化时确定并生成。</span><br></pre></td></tr></table></figure>

<p>这些参数我也不知道有没有用，我试了explicit_custom_meta，没有效果</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210311204523.png" alt="image-20210311204517668" style="zoom:50%;" /></li>
<li><p>配置es-zone</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">radosgw-admin zone  create --rgw-zone es-zone --rgw-zonegroup default --rgw-realm=default   </span><br><span class="line">--endpoints=http://172.16.20.66:7480  --access-key=sync  --secret=sync  --tier-type=elasticsearch </span><br><span class="line">--tier-config=endpoint=http://172.16.20.66:9200</span><br></pre></td></tr></table></figure></li>
<li><p>更新配置</p>
<p><code>radosgw-admin period update --commit</code></p>
</li>
<li><p>创建桶并查看</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210319163738.png" alt="image-20210319163735677"></p>
</li>
</ol>
<h3 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h3><ol>
<li><p>无法查询到用户自定义的元数据，但是可以查询到用户自定义的tagging</p>
</li>
<li><p>同步数据需要时间</p>
</li>
</ol>
<p>参考：</p>
<p><a href="https://www.jianshu.com/p/31a6f8df9a8f">Ceph Multisite</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/338167396">RGW搭建ES同步模块</a></p>
<p><a href="https://www.jianshu.com/p/e1b65ca2e095">对象存储的元数据搜索</a></p>
]]></content>
      <categories>
        <category>ceph</category>
      </categories>
      <tags>
        <tag>ceph</tag>
        <tag>rgw</tag>
      </tags>
  </entry>
  <entry>
    <title>Minio-SDK与ceph兼容性问题</title>
    <url>/2022/01/07/Ceph/minio-SDK/</url>
    <content><![CDATA[<h3 id="Minio"><a href="#Minio" class="headerlink" title="Minio"></a>Minio</h3><ul>
<li>minio对ceph的兼容性一般。以下情况已知<ul>
<li>minio的composeObject功能对ceph无法兼容（原因minio每次对于上传的request都会添加<code>Content-MD5</code>请求头，但是因为composeObject没有主动获取到当前需要composeObject对象的md5，因此发送的请求头中<code>Content-MD5</code>为1B2M2Y8AsgTpgAmY7PhCfg==，这个是<code>&#39;&#39;</code>的md5在base64之后的值，但是ceph你只要提供了md5，那么他就会进行对比，那么肯定就对比不通过，因此报错为BadDigest）</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>ceph</category>
      </categories>
      <tags>
        <tag>ceph</tag>
        <tag>minio</tag>
      </tags>
  </entry>
  <entry>
    <title>rgw分段上传问题</title>
    <url>/2022/01/07/Ceph/rgw%E5%88%86%E6%AE%B5%E4%B8%8A%E4%BC%A0%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="关于rgw分段上传问题"><a href="#关于rgw分段上传问题" class="headerlink" title="关于rgw分段上传问题"></a>关于rgw分段上传问题</h2><ul>
<li><p>分段上传会将每一段都作为一个object，比如一个文件45M，按照默认的分段上传的大小为15M，那么将会分段上传3次，每一个都会作为一个object上传</p>
<p>如果上传的bucket的max_object=2，那么上传将会失败，因为需要max_object=3</p>
<p>下面的例子是docker.log=55M，Quota的max_object=3,因此在上传第四块的时候出错</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210522104746.jpg" alt="592FF8FC53C458C103FE1E278475FFCA"></p>
</li>
</ul>
<p>​    可以查询看到</p>
<ul>
<li><p><font color=red>为何达不到bucket的max_object，继续上传会报配额不足的情况？</font></p>
<p>分段上传失败此处太多，导致usage中的rgw.multimeta中的num_objects残留数量太多，因为max_object&lt;(红色箭头之和)</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210522105050.png" alt="image-20210522105049780"></p>
<p><font color=red>注：</font></p>
<ol>
<li><font color=red>下面的第二个红色箭头的数字代表的含义：bucket中上传完毕的对象总个数（包括合并的与为合并的）</font></li>
</ol>
<ul>
<li>当分段上传完成之后会将分片合并为一个object</li>
<li>当分段上传的一块上传完毕之后也会产生一个object</li>
</ul>
<ol start="2">
<li><font color=red> 下面的第一个红色箭头的数字代表的含义：bucket中未上传完毕的对象总个数</font></li>
</ol>
<ul>
<li>分段上传未上传成功会产生一个num_object （如果不是分段上传，强制停止的话也会作为一个完整的上传对象，不会在第一个箭头处+1，而是在第二个箭头处+1）</li>
</ul>
<p>例子：</p>
<p>一个对象55M，对应的max_bucket为6，上传了2次之后,rgw.main中的num_objects=2，rgw.multimeta=0</p>
<p>当上传第三次的时候会失败，在第四个分段时报出配额不足的问题，bucket状态查询如下所示：</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210522110011.png" alt="image-20210522110009475"></p>
</li>
</ul>
<p>​           虽然说应该能够完成上传，因为2+4=6，但是我猜测还有一次是告诉ceph上传完毕，从而导致整个过程变为了2+5&gt;max_object</p>
<p>​            </p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> <span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span>&gt;</span></span>分段上传一定要获得最终的结果，如果上传失败一定要记得清理<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="bullet">2.</span> rgw.main中的num<span class="emphasis">_objects代表的是真正上传成功的个数，包括分段上传中上传成功的个数</span></span><br><span class="line"><span class="emphasis">3. rgw.multimeta中的num_</span>objects代表的是所有未上传成功的个数，比如说分段上传中上传失败的个数(失败比如说网络中断、强制停止上传)</span><br><span class="line"><span class="bullet">4.</span> Quota中的max<span class="emphasis">_objects需要&gt;2+3中的nums_</span>objects才能继续完成上传</span><br><span class="line"><span class="bullet">5.</span> Quota中的max<span class="emphasis">_size_</span>kb需要&gt;2+3中的size<span class="emphasis">_kb_</span>utilized才能继续完成上传</span><br><span class="line"><span class="bullet">6.</span> 定期清理失败的上传对象</span><br></pre></td></tr></table></figure>

<p>清理操作参考：<a href="https://blog.csdn.net/qq_16327997/article/details/89635115">https://blog.csdn.net/qq_16327997/article/details/89635115</a></p>
]]></content>
      <categories>
        <category>ceph</category>
      </categories>
      <tags>
        <tag>ceph</tag>
        <tag>运维</tag>
        <tag>rgw</tag>
      </tags>
  </entry>
  <entry>
    <title>安装dashboard</title>
    <url>/2022/01/07/Ceph/%E5%AE%89%E8%A3%85dashboard/</url>
    <content><![CDATA[<ol>
<li><p>安装包</p>
<p><code>yum install ceph-mgr-dashboard</code></p>
</li>
<li><p>启用模块</p>
<p><code>ceph mgr module enable dashboard</code></p>
<p>有可能需要强制启动</p>
<p><code>ceph mgr module enable dashboard --force</code></p>
</li>
<li><p>查看ceph mgr 已经挂载的模块</p>
<p><code>ceph mgr module ls | less</code></p>
</li>
<li><p>认证</p>
<ul>
<li>可以使用自签<ul>
<li><code>ceph dashboard create-self-signed-cert</code></li>
</ul>
</li>
<li>可以使用CA证书</li>
<li>也可以直接使用http</li>
</ul>
</li>
<li><p>分配端口和地址</p>
<p>如果启用了证书签名的话，默认走8443端口，没有用证书签名的话，默认走8080端口</p>
<ul>
<li><p>地址</p>
<p><code>ceph config set mgr mgr/dashboard/server_addr 192.168.236.121</code></p>
</li>
<li><p>http端口</p>
<p><code>ceph config set mgr mgr/dashboard/server_port 8080</code></p>
</li>
<li><p>ssl端口</p>
<p><code>ceph config set mgr mgr/dashboard/ssl_server_port 8443</code></p>
</li>
</ul>
</li>
<li><p>查看当前配置</p>
<p><code>ceph mgr services</code></p>
</li>
<li><p>创建用户</p>
<p><code>ceph dashboard ac-user-create &#123;username&#125; &#123;password&#125; administrator</code></p>
</li>
<li><p>然后登录mgr对应的网站，记住一定要是对应mgr node的网站,并且开头一定要加上<font color=red>https://</font>，直接在地址栏输入是无效的</p>
</li>
</ol>
]]></content>
      <categories>
        <category>ceph</category>
      </categories>
      <tags>
        <tag>ceph</tag>
      </tags>
  </entry>
  <entry>
    <title>对象存储</title>
    <url>/2022/01/07/Ceph/%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/</url>
    <content><![CDATA[<ol>
<li><p>创建rgw网关</p>
<p><code>ceph-deploy rgw create &#123;主机名&#125;</code></p>
</li>
<li><p>修改默认端口（7480）</p>
<ul>
<li>在ceph.conf配置文件追加</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[client.rgw.node1]</span><br><span class="line">rgw_frontends = <span class="string">&quot;civetweb port=80&quot;</span></span><br><span class="line">[root@node1 ceph-deploy]<span class="comment"># </span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>push到各个节点</p>
<p><code> ceph-deploy --overwrite-conf config push node1 node2 node3</code></p>
</li>
<li><p>重启服务</p>
<p><code>systemctl restart ceph-radosgw.target</code></p>
<p>Or</p>
<p><code>systemctl restart ceph-radosgw@*.service</code></p>
</li>
<li><p>查看对应的服务状态</p>
<p><code>systemctl status ceph-radosgw@rgw-node&#123;id&#125;</code></p>
</li>
</ul>
<p>网关也可以使用https协议</p>
</li>
<li><p>创建用户</p>
<p><code>radosgw-admin user create --uid &quot;ceph-s3-user&quot; --display-name &quot;Cooper&quot;</code></p>
<p>如果忘记了创建得来的用户名和密码，可以查询</p>
<p><code>radosgw-admin user list</code></p>
<p><code>radosgw-admin user info --uid &#123;uid&#125;</code></p>
</li>
<li><p>下载s3cmd工具包</p>
<p><code> yum install s3cmd -y</code></p>
</li>
<li><p>配置s3</p>
<p>s3cmd –configure</p>
</li>
<li><p>创建bucket</p>
<p><code>s3cmd mb s3://s3cmd-demo</code></p>
<p>如果出现</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201003181705.png" alt="image-20201003152448833" style="zoom:50%;" />

<p>则修改s3配置文件中的</p>
<p>signature_v2的属性为True</p>
</li>
<li><p>上传文件</p>
<p><code>s3cmd put &#123;文件&#125; s3://&#123;桶名称&#125;</code></p>
</li>
<li><p>下载文件</p>
<p><code>s3cmd get 桶的名称 &#123;目标文件名称&#125;  </code></p>
</li>
<li><p>删除文件</p>
<p><code>s3cmd rm 桶的名称/&#123;目标文件名称&#125;  </code></p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -p 9000:9000 --name minio -d --restart=always -e &quot;MINIO_ACCESS_KEY=admin&quot; </span><br><span class="line">-e &quot;MINIO_SECRET_KEY=admin123456&quot; \</span><br><span class="line">minio/minio server /data</span><br></pre></td></tr></table></figure>

<ol start="10">
<li><p>对象网关daemon的删除</p>
<p>先将对应的rgw进程kill</p>
<p>再<code>cd /var/lib/ceph/radosgw</code></p>
<p>找到对应的rgw文件将其删除即可</p>
</li>
<li><p>radosgw无法起来可能是因为pg数量不够，不足以创建对应的pool，必须要调整对应pool的数量才行</p>
<p>自己创建对应的pool指定pg和pgp数量</p>
</li>
<li><p><font color=red>rgw网关默认的web服务器已经不支持fastcgi、fcgi、beast</font></p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210316160933.png" alt="image-20210316160924126"></p>
</li>
</ol>
<p>老版本的可以参阅这篇文章<a href="https://www.jianshu.com/p/af611ad7c9c2?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation">https://www.jianshu.com/p/af611ad7c9c2?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation</a></p>
<p>当然这里的fastCGI和civetweb都是服务器，可以处理请求转发请求等，都是利用socket与内部的rados进行通信，而Apache与Nginx需要以独立的进程进行存在，对RGW注册的端口进行监听，这些端口就是fastCGI、civetweb这些服务器注册暴露的。</p>
<ol start="13">
<li><p>查询rgw缓存命中率</p>
<p><code>ceph --admin-daemon ceph-client.rgw.ceph119.2198988.94410876256936.asok perf dump|grep cache</code></p>
</li>
<li><p>rgw清除策略</p>
<p>rgw清除bucket中的数据不会立刻清除，而是等到GC来到的时候才会真正去清理</p>
<p>例如：</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210422101016.PNG" alt="IMG_1582" style="zoom:50%;" />

<p>实际上，关键就在这里。<br>上面time字段的含义是，rados object对象真正过期的时间。这也正是当前RGW GC垃圾回收机制的设计思想之一。 在Ceph RGW<br>中存在rgw_gc_obj_min_wait配置项,正是该配置项决定了上面的time字段的值。该配置项用于控制对象在能被GC删除之前需要等<br>待的最小时间，这主要是考虑到，当删除一个对象时， 可能会有其他服务正在读取对应的象数据信息，为了保证不对其他服务的操作<br>处理造成影响，因此在删除对象数据后,需要等待一-段时间， 才能真正的对对象数据进行删除。<br>有了上面对time字段的说明，相信大家已经能够联想到radosgw-admin gc process不生效的原因了。<br>是的，实际上并不是radosgw-admin gc process不生效，而是执行该命令时，只能删除已经过期了的,但是还没有到gc处理周期进<br>行删除的对象数据，即当前时间已经超过了上面time字段执行的时间，但还没有被删除的tail object数据。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>ceph</category>
      </categories>
      <tags>
        <tag>ceph</tag>
      </tags>
  </entry>
  <entry>
    <title>排除</title>
    <url>/2022/01/07/Ceph/%E6%8E%92%E9%94%99/</url>
    <content><![CDATA[<ol>
<li><p>查看出错的详细信息</p>
<p><code>ceph health detail</code></p>
</li>
<li><p>启用资源服务(主要的设置资源池种类，方便做好分类)</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201003141036.png" alt="image-20201003141032367" style="zoom:50%;" /></li>
<li><p> 查看资源池的分类</p>
</li>
</ol>
<p>   <code>ceph osd pool application get demo</code></p>
<ol start="4">
<li><p>查看crash的情况</p>
<p><code>ceph crash ls</code></p>
<p>查看具体的crash情况</p>
<p><code>ceph crash info &lt;id&gt;</code></p>
<p>删除crash报警（如果是误报的话）</p>
<p><code>ceph crash archive &lt;id&gt;</code></p>
<p><code>ceph crash archive all</code></p>
<p>直接删除crash</p>
<p><code>ceph crash rm &#123;crash-id&#125; </code></p>
</li>
<li><p>解决时间偏移警告</p>
<ul>
<li><p>查看当前对应结点时间</p>
<p><code>ntpd -pn</code></p>
</li>
<li><p>先停掉时钟同步</p>
<p><code>systemctl stop ntpd</code></p>
</li>
<li><p>更新时间</p>
<p><code>npdate &#123;第一步的结果&#125;</code></p>
</li>
<li><p>写入到硬时钟，以便机器重启时读取</p>
<p><code>hwclock -w</code></p>
</li>
<li><p>重启时钟服务</p>
<p><code>systemctl restart ntpd</code></p>
</li>
</ul>
</li>
<li><p><a href="http://docs.ceph.org.cn/rados/troubleshooting/log-and-debug/#id5">代码调试</a></p>
<p>如上命令可能会导致执行失败</p>
<p>用以下的命令</p>
<p>其实.asok文件在</p>
<p><code>/var/run/ceph/</code>文件下</p>
<p><code>ceph --admin-daemon  ceph-client.rgw.ceph119.2198988.94410876256936.asok config show|grep ssl</code></p>
<p><code>ceph --admin-daemon  ceph-client.rgw.ceph119.2198988.94410876256936.asok config set debug_rgw 20 </code></p>
<p><font color=red>注意加上 ” –admin-daemon “</font></p>
</li>
<li><p>认证出现问题一定要查看下客户端与集群内部时间是否一致</p>
<p>集群內部时间查看：就是看ceph的log信息打印的日志时间</p>
<p>客户端时间查看：就是当前linux主机的时间 <code>date -R</code></p>
<p><font color=red>两者如果不一致将会导致很多错误，这说明两个ntp服务对于分布式存储来说十分重要</font></p>
<p>比如下面的情况就是因为集群与客户端时间不一致这样引起的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2021-05-08 06:02:53.930 7fb56f405700  5 req 534476 0.000s :list_metadata Failed the auth strategy, reason=-2012</span><br><span class="line">2021-05-08 06:03:09.728 7fb5c44af700 20 req 534711 0.000s :list_metadata rgw::auth::s3::LocalEngine denied with reason=-2012</span><br><span class="line">2021-05-08 06:03:09.728 7fb5c44af700 20 req 534711 0.000s :list_metadata rgw::auth::s3::AWSAuthStrategy denied with reason=-2012</span><br><span class="line">2021-05-08 06:03:09.728 7fb5c44af700 20 req 534711 0.000s :list_metadata rgw::auth::s3::LocalEngine denied with reason=-2012</span><br><span class="line">2021-05-08 06:03:09.728 7fb5c44af700 20 req 534711 0.000s :list_metadata rgw::auth::s3::AWSAuthStrategy denied with reason=-2012</span><br><span class="line">2021-05-08 06:03:09.728 7fb5c44af700  5 req 534711 0.000s :list_metadata Failed the auth strategy, reason=-2012</span><br><span class="line">2021-05-08 06:04:51.089 7fb5e8cf8700 20 req 536010 0.001s :list_metadata rgw::auth::s3::LocalEngine denied with reason=-2012</span><br><span class="line">2021-05-08 06:04:51.089 7fb5e8cf8700 20 req 536010 0.001s :list_metadata rgw::auth::s3::AWSAuthStrategy denied with reason=-2012</span><br><span class="line">2021-05-08 06:04:51.089 7fb5e8cf8700 20 req 536010 0.001s :list_metadata rgw::auth::s3::LocalEngine denied with reason=-2012</span><br><span class="line">2021-05-08 06:04:51.089 7fb5e8cf8700 20 req 536010 0.001s :list_metadata rgw::auth::s3::AWSAuthStrategy denied with reason=-2012</span><br><span class="line">2021-05-08 06:04:51.089 7fb5e8cf8700  5 req 536010 0.001s :list_metadata Failed the auth strategy, reason=-2012</span><br><span class="line">2021-05-08 06:08:24.204 7fb5ecd00700 20 req 537737 0.000s :list_metadata rgw::auth::s3::LocalEngine denied with reason=-2012</span><br><span class="line">2021-05-08 06:08:24.204 7fb5ecd00700 20 req 537737 0.000s :list_metadata rgw::auth::s3::AWSAuthStrategy denied with reason=-2012</span><br><span class="line">2021-05-08 06:08:24.204 7fb5ecd00700 20 req 537737 0.000s :list_metadata rgw::auth::s3::LocalEngine denied with reason=-2012</span><br><span class="line">2021-05-08 06:08:24.204 7fb5ecd00700 20 req 537737 0.000s :list_metadata rgw::auth::s3::AWSAuthStrategy denied with reason=-2012</span><br><span class="line">2021-05-08 06:08:24.204 7fb5ecd00700  5 req 537737 0.000s :list_metadata Failed the auth strategy, reason=-2012</span><br></pre></td></tr></table></figure></li>
<li><p>user创建不了有可能是因为其email地址与其他user重复了</p>
</li>
</ol>
]]></content>
      <categories>
        <category>ceph</category>
      </categories>
      <tags>
        <tag>ceph</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建高可用的rgw集群</title>
    <url>/2022/01/07/Ceph/%E6%90%AD%E5%BB%BA%E9%AB%98%E5%8F%AF%E7%94%A8%E7%9A%84rgw%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<h4 id="安装keepalived（集群中的所有主机都安装）"><a href="#安装keepalived（集群中的所有主机都安装）" class="headerlink" title="安装keepalived（集群中的所有主机都安装）"></a>安装keepalived（集群中的所有主机都安装）</h4><p>​    keepalived: 一种高性能的服务器高可用或热备解决方案</p>
<ol>
<li><p><code>yum install keepalived -y</code></p>
</li>
<li><ul>
<li>修改配置文件（master节点）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     acassen@firewall.loc</span><br><span class="line">     failover@firewall.loc</span><br><span class="line">     sysadmin@firewall.loc</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line">   smtp_server 192.168.200.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id LVS_DEVEL</span><br><span class="line">   vrrp_skip_check_adv_addr</span><br><span class="line"> <span class="comment">#  vrrp_strict  #此处需要修改，否则可以会出现端口无法访问的情况</span></span><br><span class="line">   vrrp_garp_interval 0</span><br><span class="line">   vrrp_gna_interval 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换脚本  如果haproxy服务掉线，会将该主机的权重-2，使得backup成为master</span></span><br><span class="line">vrrp_script chk_haproxy &#123;</span><br><span class="line">	script <span class="string">&quot;killall -0 haproxy&quot;</span></span><br><span class="line">	interval 2</span><br><span class="line">	weight -2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance RGW &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens37 <span class="comment">#vip配置的网卡  这个必须要真实存在  （也就是从现有的网卡中挑选一块）</span></span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.100.104/24 <span class="comment">#vip地址，虚拟ip地址，配置之后自动在interface选择的网卡中生成</span></span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">				chk_haproxy <span class="comment">#脚本</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>备用节点其他都一样，就是将 state MASTER字段改为state BACKUP</li>
</ul>
</li>
<li><p>启动服务</p>
<p><code>systemctl restart keepalived</code></p>
</li>
<li><p>查看日志(报错正常，因为我们haproxy未启动)</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201004202056.png" alt="image-20201004202051674" style="zoom:50%;" /></li>
</ol>
<h4 id="安装haproxy（集群中的主机都安装）"><a href="#安装haproxy（集群中的主机都安装）" class="headerlink" title="安装haproxy（集群中的主机都安装）"></a>安装haproxy（集群中的主机都安装）</h4><p>haproxy：提供高可用性、负载均衡以及基于TCP和HTTP应用的代理，支持虚拟主机，它是免费、快速并且可靠的一种解决方案</p>
<ol>
<li><p><code>yum install haproxy -y</code></p>
</li>
<li><p>修改配置文件(主要修改frontend和backend内容)</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201004202211.png" alt="image-20201004202206105"></p>
<p>frontend我是和ceph中的rgw集成，因此使用htpp协议，代理端口设置为80。</p>
<p>backend是设置rgw的ip地址和暴露的端口号（rgw默认端口为7480，在ceph.conf中我修改为了81）</p>
<p>这样就完成了代理。</p>
</li>
<li><p>启动haproxy服务</p>
<p><code>systemctl restart haproxy</code></p>
</li>
<li><p>查看状态</p>
<p><code>systemctl status haproxy</code></p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201004202734.png" alt="image-20201004202730060" style="zoom:50%;" /></li>
</ol>
<h4 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h4><ol>
<li>我们可以看到虚拟ip已经添加到ens37网卡上了</li>
</ol>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201004204530.png" alt="image-20201004203856577" style="zoom:50%;" />

<ol start="2">
<li><p>s3客户端也可以进行访问</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201004204525.png" alt="image-20201004204015207" style="zoom:50%;" /></li>
<li><p>如果我们此时停止node1(Keepalived初始的master节点)的haproxy服务</p>
<p><code>systemctl stop haproxy</code></p>
<p>我们可以看到当前node1的ens37中已经没有192.168.100.104(vip)了</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201004204520.png" alt="image-20201004204351389" style="zoom:50%;" />

<p>node2我们可以看到vip已经转移到此节点</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201004205008.png" alt="image-20201004204455435" style="zoom:50%;" />

<p>至此完成了vip漂移</p>
</li>
<li><p>如果配置了s3客户端，我们需要对其配置文件进行修改，使其指向我们配置的keepalived配置的vip</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201004205548.png" alt="image-20201004205543347" style="zoom:50%;" /></li>
</ol>
<h4 id="完成高可用rgw集群的搭建"><a href="#完成高可用rgw集群的搭建" class="headerlink" title="完成高可用rgw集群的搭建"></a>完成高可用rgw集群的搭建</h4>]]></content>
      <categories>
        <category>ceph</category>
      </categories>
      <tags>
        <tag>ceph</tag>
      </tags>
  </entry>
  <entry>
    <title>文件存储</title>
    <url>/2022/01/07/Ceph/%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8/</url>
    <content><![CDATA[<h4 id="内核级别挂载，性能高"><a href="#内核级别挂载，性能高" class="headerlink" title="内核级别挂载，性能高"></a>内核级别挂载，性能高</h4><ol>
<li><p>创建mds服务</p>
<p><code>ceph-deploy --overwrite-conf mds create node1</code></p>
<p>为了保证高可用需要部署多个mds服务</p>
<p><code>ceph-deploy --overwrite-conf mds create node2</code></p>
<p><code>ceph-deploy --overwrite-conf mds create node3</code></p>
</li>
<li><p>创建fs的元数据池和数据池</p>
<p><code>ceph osd pool create cephfs_metadata &#123;pg_num&#125; &#123;pgp_num&#125;</code></p>
<p><code>ceph osd pool create cephfs_data &#123;pg_num&#125; &#123;pgp_num&#125;</code></p>
</li>
<li><p>创建文件系统</p>
<p><code>ceph fs new cephfs-demo cephfs_metadata cephfs_data</code></p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201003181642.png" alt="image-20201003181637649" style="zoom:50%;" /></li>
<li><p>挂载</p>
<ul>
<li><p>创建挂载点</p>
<p><code>mkdir /mnt/cephfs</code></p>
</li>
<li><p>挂载(此处是挂载在node1的整个目录上)</p>
<p><code>mount -t ceph 192.168.236.121:6789:/ /mnt/cephfs/ -o name=admin</code></p>
</li>
</ul>
</li>
<li><p>之后就可以在挂载点即/mnt/cephfs下使用该cephfs系统</p>
</li>
</ol>
<h4 id="用户空间挂载"><a href="#用户空间挂载" class="headerlink" title="用户空间挂载"></a>用户空间挂载</h4><ol>
<li><p>安装客户端</p>
<p><code>yum install ceph-fuse</code></p>
</li>
<li><p>挂载</p>
</li>
</ol>
]]></content>
      <categories>
        <category>ceph</category>
      </categories>
      <tags>
        <tag>ceph</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次Minon ComposeObject无法再Ceph上合并的异常</title>
    <url>/2022/01/07/Ceph/%E8%AE%B0%E4%B8%80%E6%AC%A1Minio-ComposeObject%E6%97%A0%E6%B3%95%E5%9C%A8ceph%E4%B8%8A%E5%90%88%E5%B9%B6%E6%96%87%E4%BB%B6%E7%9A%84%E5%BC%82%E5%B8%B8%E8%BF%90%E7%BB%B4/</url>
    <content><![CDATA[<h3 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h3><ol>
<li><p>直接使用minio java sdk（8.3.3版本）对ceph集群中的compose桶中的已存在的多个文件（test1,test2）进行合并(test)，代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">     MinioClient minioClient =</span><br><span class="line">                MinioClient.builder()</span><br><span class="line">                        .endpoint(<span class="string">&quot;http://172.23.27.119:7480&quot;</span>)</span><br><span class="line">                        .credentials(<span class="string">&quot;4S897Y9XN9DBR27LAI1L&quot;</span>, <span class="string">&quot;WmZ6JRoMNxmtE9WtXM9Jrz8BhEdZnwzzAYcE6b1z&quot;</span>)</span><br><span class="line">                        .build();</span><br><span class="line"></span><br><span class="line"> 	composeObject(minioClient,<span class="string">&quot;compose&quot;</span>,<span class="string">&quot;compose&quot;</span>,List.of(<span class="string">&quot;test1&quot;</span>,<span class="string">&quot;test2&quot;</span>),<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">boolean</span> <span class="title">composeObject</span><span class="params">(MinioClient minioClient,String chunkBucKetName, String composeBucketName, List&lt;String&gt; chunkNames, String objectName)</span> <span class="keyword">throws</span> ServerException, InsufficientDataException, ErrorResponseException, IOException, NoSuchAlgorithmException, InvalidKeyException, InvalidResponseException, XmlParserException, InternalException </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;ComposeSource&gt; sourceObjectList = <span class="keyword">new</span> ArrayList&lt;&gt;(chunkNames.size());</span><br><span class="line">        <span class="keyword">for</span> (String chunk : chunkNames)&#123;</span><br><span class="line">            sourceObjectList.add(</span><br><span class="line">                    ComposeSource.builder()</span><br><span class="line">                            .bucket(chunkBucKetName)</span><br><span class="line">                            .object(chunk)</span><br><span class="line">                            .build()</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">        minioClient.composeObject(</span><br><span class="line">                ComposeObjectArgs.builder()</span><br><span class="line">                        .bucket(composeBucketName)</span><br><span class="line">                        .object(objectName)</span><br><span class="line">                        .sources(sourceObjectList)</span><br><span class="line">                        .build()</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>运行报错</p>
<p>报错为400，BadDigest</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20211104143125.png" alt="image-20211104143112561"></p>
<p>完全一脸懵逼o((⊙﹏⊙))o，说好的兼容S3呢？</p>
</li>
</ol>
<h3 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h3><h4 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h4><ol>
<li><p>第一点想到的就是查看rgw日志，看看究竟出错是什么原因</p>
<p>日志如下：（在此只截取了部分日志）</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20211104143433.png" alt="image-20211104143431795"></p>
<p>日志经过分析之后，之前的两次head request（获取test1和test2的元数据信息）以及init multipartUpload都是成功的，但是最终在第一次上传第一块的时候出现了错误（也就是test1），报了400的错误，op状态码为-2005，报了等于没有报错，这不搞笑吗？我咋知道-2005啥意思？</p>
</li>
<li><p>不行，去看看rgw源码中-2005究竟是啥（唉，笔者C++只知道一些语法，不太会，以下都是随机分析的结果，有点破案的感觉）</p>
<ol>
<li><p>最终在rgw下面的</p>
<p>好家伙，终于找到2005这个错误码</p>
</li>
</ol>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20211104144056.png" alt="image-20211104144053320" style="zoom:50%;" />



<p>​                    成功了一半了，哈哈哈哈（现在回过头来看看还是自己太年轻了。。。。）</p>
<ol start="2">
<li><p>继续跟踪<code>ERR_BAD_DIGEST</code>,出现的位置</p>
<p>最终在rgw_op.cc下面找到了藏身之处，看名字，嗯，应该是处理上传的代码，一共出现了4次，要排查的地方还不多，内心暗自高兴</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20211104144418.png" alt="image-20211104144411842" style="zoom:50%;" /></li>
<li><p>首先看到了第三处和第四处，发现如果是这两处报错的，一定会有对应的日志输出，但是明显之前的rgw日志值没有对应的错误日志，因此排除</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20211104144626.png" alt="image-20211104144621243" style="zoom:50%;" /></li>
<li><p>那么剩下的只剩下第一处和第二处，这两处代码几乎都是一致的，如下</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (supplied_md5_b64 &amp;&amp; <span class="built_in">strcmp</span>(calc_md5, supplied_md5)) &#123;</span><br><span class="line">  op_ret = -ERR_BAD_DIGEST;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>貌似是在对提供的md5（supplied，命名有点意思）进行校验，但是不太确定</p>
</li>
<li><p>随后我仔细看了一下两处所在对应的方法</p>
<img src="C:\Users\Cooper\AppData\Roaming\Typora\typora-user-images\image-20211104145132572.png" alt="image-20211104145132572" style="zoom:50%;" />

<p>可以很明显的看到第一处为Put，第二处为Post，而我的rgw日志是Put请求，因此锁定在第一处（就快要找到真相了）</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20211104145216.png" alt="image-20211104145215146"></p>
</li>
<li><p>继续分析第一处的代码</p>
<p>发现这个东西</p>
<img src="C:\Users\Cooper\AppData\Roaming\Typora\typora-user-images\image-20211104145527793.png" alt="image-20211104145527793" style="zoom:50%;" />



<p>由于这几处都是出现在一起的，第一个是supplied_md5_b64,但是还是不太确定是不是<code>Content-MD5</code>，但是下面的几个和请求头中的非常像</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20211104145705.png" alt="image-20211104145703581"></p>
<p>因此我就怀疑是请求头中的MD5了</p>
</li>
</ol>
</li>
</ol>
<h4 id="对比日志"><a href="#对比日志" class="headerlink" title="对比日志"></a>对比日志</h4><ol>
<li><p>为了有对比参考的样本，和报错的rgw日志比较，我决定使用aws s3的sdk进行一次实验，原理和minio的一样，也是将compose中原本存在test1,test2进行合并,<strong>需要注意点就是partNumber是从1开始的，不是从0开始，从0开始会报错</strong>，别问我为啥知道，因为踩过坑了。。。。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String bucketName = <span class="string">&quot;compose&quot;</span>;</span><br><span class="line">        String keyName = <span class="string">&quot;test&quot;</span>;</span><br><span class="line"></span><br><span class="line">        AWSCredentials awsCredentials = <span class="keyword">new</span> BasicAWSCredentials(<span class="string">&quot;4S897Y9XN9DBR27LAI1L&quot;</span>,<span class="string">&quot;WmZ6JRoMNxmtE9WtXM9Jrz8BhEdZnwzzAYcE6b1z&quot;</span>);</span><br><span class="line">        AmazonS3 s3Client = AmazonS3ClientBuilder.standard().withCredentials(<span class="keyword">new</span> AWSStaticCredentialsProvider(awsCredentials))</span><br><span class="line">                .withEndpointConfiguration(<span class="keyword">new</span> AwsClientBuilder.EndpointConfiguration(<span class="string">&quot;http://172.23.27.119:7480&quot;</span>,<span class="string">&quot;&quot;</span>))</span><br><span class="line">                .withPathStyleAccessEnabled(<span class="keyword">true</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        InitiateMultipartUploadRequest initRequest  = <span class="keyword">new</span> InitiateMultipartUploadRequest(<span class="string">&quot;compose&quot;</span>,<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        InitiateMultipartUploadResult  initResponse  = s3Client.initiateMultipartUpload(initRequest);</span><br><span class="line"></span><br><span class="line">        List&lt;PartETag&gt; partETags = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;String&gt; list = List.of(<span class="string">&quot;test1&quot;</span>,<span class="string">&quot;test2&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            CopyPartRequest request = <span class="keyword">new</span> CopyPartRequest()</span><br><span class="line">                    .withDestinationBucketName(bucketName)</span><br><span class="line">                    .withPartNumber(i+<span class="number">1</span>)</span><br><span class="line">                    .withUploadId(initResponse.getUploadId())</span><br><span class="line">                    .withDestinationKey(keyName)</span><br><span class="line">                    .withSourceBucketName(bucketName)</span><br><span class="line">                    .withSourceKey(list.get(i));</span><br><span class="line">            partETags.add(s3Client.copyPart(request).getPartETag());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        CompleteMultipartUploadRequest compRequest = <span class="keyword">new</span> CompleteMultipartUploadRequest(bucketName, keyName,</span><br><span class="line">                initResponse.getUploadId(), partETags);</span><br><span class="line">        s3Client.completeMultipartUpload(compRequest);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>日志如下</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20211104151330.png" alt="image-20211104151329411"></p>
<p>可以看到成功了，但是眼尖的我看到了不一样的地方</p>
</li>
<li><p>不同之处的查找</p>
<p>minio</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20211104150634.png" alt="image-20211104150632478"></p>
<p>aws</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20211104152602.png" alt="image-20211104152559579"></p>
<p>可以看到aws这里没有minio绿色箭头执行的日志，</p>
</li>
<li><p>再次查看rgw代码</p>
<p>可以看到在第一处之前确实有这行代码</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20211104153535.png" alt="image-20211104153529886" style="zoom:50%;" />

<p>  到此为止可以确定一点，那就是minio那边在Put操作的时候携带了一个请求头，可能是md5</p>
</li>
</ol>
<h4 id="抓包进行分析"><a href="#抓包进行分析" class="headerlink" title="抓包进行分析"></a>抓包进行分析</h4><ol>
<li><p>对minio的请求进行分析</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20220109172429.png" alt="image-20211104153958551" style="zoom:50%;" />

<p>确实有一个Content-MD5请求，突然间我发现这个md5好像有点眼熟，又经过一次不同的请求测试，发现这家伙没变！！</p>
<p>后来发现，这玩意儿是<code>&#39;&#39;</code>的md5之后进行base64的请求结果，难怪不同请求都一样，原来发送的body都是空，因此计算md5的时候才会有这东西</p>
<p>下面这个<code>x-amz-content-sha256: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855</code>,也是代表发送的body为空，难怪每次都一致</p>
</li>
</ol>
<h4 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h4><p>minio每次发送Put请求，为了数据安全都会加上md5的请求头，但是composeObject该动作本身上传的body就是空的（本质是复制copyPart操作），因此本地的请求body为空，因此md5值与ceph在接收到该md5与自己计算出来的md5值不一致，那么就导致了合并失败。</p>
<h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><h5 id="minio代码验证"><a href="#minio代码验证" class="headerlink" title="minio代码验证"></a>minio代码验证</h5><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20211104154830.png" alt="image-20211104154824847" style="zoom:50%;" />

<p>​    可以看到minio在构造请求的时候，始终会带上md5</p>
<h5 id="修改源码-（对S3Base-java进行修改）"><a href="#修改源码-（对S3Base-java进行修改）" class="headerlink" title="修改源码 （对S3Base.java进行修改）"></a>修改源码 （对S3Base.java进行修改）</h5><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20211104155238.png" alt="image-20211104155202616" style="zoom:50%;" />

<p>为了将md5值不强制发送，这两处进行注释掉之后再进行composeObject，最终测试结果成功！</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>说实话，这是第一次排查过程我感觉自己成长了很多，也算是第一次这么仔细地看源码吧，也是真的就是在源码面前，一切bug都能够找到原因。</p>
<p>总之能够找到原因还是非常高兴的。</p>
<p>不过仔细想想也没有错，minio和ceph两者是竞争关系，你用minio的sdk去操作ceph，难免会出现bug，为啥我要贴合你呢？我有我的规则你有你的规则</p>
]]></content>
      <categories>
        <category>ceph</category>
      </categories>
      <tags>
        <tag>ceph</tag>
        <tag>运维</tag>
        <tag>minio</tag>
      </tags>
  </entry>
  <entry>
    <title>高可用测试</title>
    <url>/2022/01/07/Ceph/%E9%AB%98%E5%8F%AF%E7%94%A8%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p>暂停ceph中的某个服务</p>
<p>systemctl stop ceph-{种类}@结点名称</p>
<ol>
<li><p>mon结点因为是Paxos算法，所以必须保证一半以上的结点可以用才行</p>
</li>
<li><p>mds（也就是文件系统）只需要保证一个结点可以使用就行</p>
</li>
<li><p>rgw需要搭载负载均衡才能在一个挂掉的情况下进行访问，否则指向挂掉的那个结点是无法进行访问的</p>
</li>
<li><p>当关掉osd集群中的一部分结点时是可以正常进行读写的，但是在osd比较少的情况下，比如有6个osd，你关掉了4个，那么可以对集群的访问是比较卡的，但是实际上是可以进行读写操作的。</p>
</li>
<li><p>读写测试(一般来说numjobs最好和cpu的核数相同，iodepth是2的倍数)</p>
<ol>
<li><p>4K<strong>随机写</strong>-iops  </p>
<p><code>fio -fifilename=/mnt/rbd-test/fifio.img -direct=1 -iodepth 32 -thread -rw=randwrite -ioengine=libaio -bs=4k -size=200m -numjobs=8 -runtime=60 -group_reporting -name=mytest</code></p>
</li>
<li><p>4k<strong>随机读</strong>-iops </p>
<p><code>fio -fifilename=/mnt/rbd-test/fifio.img -direct=1 -iodepth 32 -thread -rw=randread -ioengine=libaio -bs=4k -size=200m -numjobs=8 -runtime=60 -group_reporting -name=mytest</code></p>
</li>
<li><p>4k<strong>随机读写</strong>-iops  </p>
<p><code>fio -fifilename=/mnt/rbd-test/fifio.img -direct=1 -iodepth 32 -thread -rw=randrw -rwmixread=70 -ioengine=libaio -bs=4k -size=200m -numjobs=8 -runtime=60 -group_reporting -name=mytest</code></p>
</li>
<li><p>1M<strong>顺序写</strong>-吞吐 </p>
<p><code>fio -fifilename=/mnt/rbd-test/fifio.img -direct=1 -iodepth 32 -thread -rw=write -ioengine=libaio -bs=1M -size=200m -numjobs=8 -runtime=60 -group_reporting -name=mytest</code></p>
</li>
</ol>
<p>观测性能的指令</p>
<ul>
<li><p>查看性能</p>
<p><code>iostate -x 1</code>查看</p>
</li>
<li><p>读写延迟情况</p>
<p><code>ceph osd perf</code> </p>
</li>
</ul>
<ol start="5">
<li>也可以使用ceph自带的工具  rbd bench以及rados bench</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>ceph</category>
      </categories>
      <tags>
        <tag>ceph</tag>
      </tags>
  </entry>
  <entry>
    <title>缓存</title>
    <url>/2022/01/07/Django/Django%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<h2 id="缓存类型"><a href="#缓存类型" class="headerlink" title="缓存类型"></a>缓存类型</h2><h3 id="数据库缓存"><a href="#数据库缓存" class="headerlink" title="数据库缓存"></a>数据库缓存</h3><p>将缓存的数据存储在数据库中</p>
<p>说明：胫骨存储介质没有更换，但是当把一次负责查询的结果直接存储到表里，比如多个条件的过滤查询结果，可避免重复进行复杂的查询，提升效率</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210709091012.png" alt="image-20210709091008269" style="zoom:50%;" />

<p>里面的my_cache_table需要我们自己手动创建出来</p>
<p><code>python3 manage.py createcachetable</code></p>
<h3 id="本地内存缓存"><a href="#本地内存缓存" class="headerlink" title="本地内存缓存"></a>本地内存缓存</h3><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210709091208.png" alt="image-20210709091204034" style="zoom:50%;" />



<h3 id="文件系统缓存"><a href="#文件系统缓存" class="headerlink" title="文件系统缓存"></a>文件系统缓存</h3><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210709091300.png" alt="image-20210709091256239" style="zoom:50%;" />





<h2 id="使用缓存"><a href="#使用缓存" class="headerlink" title="使用缓存"></a>使用缓存</h2><h3 id="视图函数中使用缓存"><a href="#视图函数中使用缓存" class="headerlink" title="视图函数中使用缓存"></a>视图函数中使用缓存</h3><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210709091740.png" alt="image-20210709091736232" style="zoom:50%;" />



<h3 id="路由中使用缓存"><a href="#路由中使用缓存" class="headerlink" title="路由中使用缓存"></a>路由中使用缓存</h3><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210709091816.png" alt="image-20210709091811854" style="zoom:50%;" />



<p>注意：</p>
<p>django不光光是在数据库中存储了缓存的数据，同时也在响应头中加入了</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210709093443.png" alt="image-20210709093436516" style="zoom:50%;" />

<p>但是局部缓存没有</p>
<p><font color=red>缺点</font></p>
<p>是全局缓存，不够灵活</p>
<h2 id="局部缓存"><a href="#局部缓存" class="headerlink" title="局部缓存"></a>局部缓存</h2><h3 id="缓存API的使用"><a href="#缓存API的使用" class="headerlink" title="缓存API的使用"></a>缓存API的使用</h3><ul>
<li><p>方式1 使用caches[‘CACHE配置KEY’]导入具体的对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.cache <span class="keyword">import</span> caches</span><br><span class="line">cache1 = caches[<span class="string">&#x27;myalias&#x27;</span>]</span><br><span class="line">cache2 = caches[<span class="string">&#x27;myalias2&#x27;</span>]</span><br></pre></td></tr></table></figure></li>
<li><p>方式2</p>
<p>from django.core.cache import cache 相当于直接引入CACAES配置项中的default项</p>
</li>
</ul>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ul>
<li><p>存</p>
<ul>
<li><p>cache.set(key,value,timeout)</p>
<p>timeout不设置的话有一个默认值就是300s</p>
</li>
<li><p>cache.add(key,value)</p>
<p>存储缓存，只在key不存在时生效</p>
<p>返回值为bool类型</p>
</li>
</ul>
</li>
<li><p>取</p>
<p>cache.get(key)</p>
</li>
<li><p>如果未获取到数据就执行set操作</p>
<p>cache.get_or_set(key,value,timeout)</p>
</li>
<li><p>批量存储缓存</p>
<p>caceh.set_many(dict,timeout)</p>
<p>dict为key和value的字典</p>
</li>
<li><p>批量获取缓存数据</p>
<p>cache.get_many(key_list)</p>
<p>key_list：包含key的数组</p>
</li>
<li><p>删除缓存</p>
<p>Cache.delete(key)</p>
</li>
<li><p>批量删除</p>
<p>Cache.delete_many(key_list)</p>
</li>
</ul>
<h2 id="缓存类型-1"><a href="#缓存类型-1" class="headerlink" title="缓存类型"></a>缓存类型</h2><h3 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h3><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210709093911.png" alt="image-20210709093907615" style="zoom:50%;" />



<h3 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h3><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210709093946.png" alt="image-20210709093942541" style="zoom:50%;" />

<ul>
<li><p>方法一  （速度快）</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210709094043.png" alt="image-20210709094037475" style="zoom:50%;" /></li>
<li><p>方法二 （精准度高）</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210709094115.png" alt="image-20210709094111275" style="zoom:50%;" /></li>
</ul>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>models （数据库）</title>
    <url>/2022/01/07/Django/Models/</url>
    <content><![CDATA[<h4 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h4><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708124530.png" alt="image-20210708124530628" style="zoom:50%;" />



<h4 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h4><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708124635.png" alt="image-20210708124635591" style="zoom:50%;" />

<p>生成模型类：</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708124919.png" alt="image-20210708124919503" style="zoom:50%;" />





<p>创建完模型类之后将其映射到数据库中，也就是在数据库中建立该表</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708125255.png" alt="image-20210708125255418" style="zoom:50%;" />



<p>如果需要修改表中的字段，可以直接在模型类中进行添加或者删除，然后执行数据库迁移的操作</p>
<h4 id="model的字段类型"><a href="#model的字段类型" class="headerlink" title="model的字段类型"></a>model的字段类型</h4><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708125613.png" alt="image-20210708125612992" style="zoom:50%;" />

<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708125643.png" alt="image-20210708125643273" style="zoom:50%;" />

<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708125820.png" alt="image-20210708125820379" style="zoom:50%;" />

<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708125849.png" alt="image-20210708125849391" style="zoom:50%;" />

<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708125920.png" alt="image-20210708125919793" style="zoom:50%;" />

<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708125938.png" alt="image-20210708125938519" style="zoom:50%;" />

<h4 id="Meta类"><a href="#Meta类" class="headerlink" title="Meta类"></a>Meta类</h4><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708130525.png" alt="image-20210708130525158" style="zoom:50%;" />



<h4 id="Django-migrations表"><a href="#Django-migrations表" class="headerlink" title="Django_migrations表"></a>Django_migrations表</h4><p>该表记录了migrate的全过程，项目中的各个migrate文件与之对应，否则migrate会报错</p>
<p>如果数据库的迁移文件混乱，解决办法如下：</p>
<ul>
<li><p>删除所有migrations里所有的000?_xxxx.py</p>
<p><em>init</em>.py不要删除</p>
</li>
<li><p>删除数据库</p>
</li>
<li><p>重新创建数据库</p>
</li>
<li><p>重新生成migrations里面所有的000？<em>xxxx.py</em></p>
<p>python3 manage.py makemigrations</p>
</li>
<li><p>重新更新数据库</p>
<p>python3 manage.py migrate</p>
</li>
</ul>
<h3 id="增删改查增"><a href="#增删改查增" class="headerlink" title="增删改查增"></a>增删改查增</h3><h4 id="增"><a href="#增" class="headerlink" title="增"></a>增</h4><ul>
<li><p>方法1</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708165006.png" alt="image-20210708165000106" style="zoom:50%;" /></li>
<li><p> 方法2</p>
</li>
</ul>
  <img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708165038.png" alt="image-20210708165032060" style="zoom:50%;" />



<h4 id="查"><a href="#查" class="headerlink" title="查"></a>查</h4><ul>
<li><p>all()</p>
<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210708165133502.png" alt="image-20210708165133502" style="zoom:50%;" />

<p>小技巧：类似于java类中的toString</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708165401.png" alt="image-20210708165355593" style="zoom:50%;" /></li>
<li><p>列查询（values（））</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708165621.png" alt="image-20210708165615752" style="zoom:50%;" /></li>
</ul>
<p>例子：</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708165825.png" alt="image-20210708165820040" style="zoom:50%;" />

<ul>
<li><p>value_list()</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708165900.png" alt="image-20210708165854535" style="zoom:50%;" /></li>
</ul>
<p>例子：</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708165927.png" alt="image-20210708165921922" style="zoom:50%;" />

<ul>
<li><p>order_by()</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708170034.png" alt="image-20210708170029270" style="zoom:50%;" /></li>
<li><p>Filter 相当于是where</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708170350.png" alt="image-20210708170345008" style="zoom:50%;" /></li>
<li><p>get </p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708170514.png" alt="image-20210708170510032" style="zoom:50%;" />

<p>注意：返回的结果&gt;1或者=0都会报错</p>
</li>
<li><p>查询谓词</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708170727.png" alt="image-20210708170722971" style="zoom:50%;" /></li>
</ul>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708170744.png" alt="image-20210708170739296" style="zoom:50%;" />

<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708170814.png" alt="image-20210708170809875" style="zoom:50%;" />

<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708170835.png" alt="image-20210708170830784" style="zoom:50%;" />

<h4 id="改"><a href="#改" class="headerlink" title="改"></a>改</h4><ul>
<li><p>单个数据更新</p>
<p>先查再save</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708171114.png" alt="image-20210708171109902" style="zoom:50%;" /></li>
<li><p>批量修改</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708171208.png" alt="image-20210708171202125" style="zoom:50%;" /></li>
</ul>
<h4 id="删"><a href="#删" class="headerlink" title="删"></a>删</h4><ul>
<li><p>单个数据删除</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708171439.png" alt="image-20210708171433776" style="zoom:50%;" /></li>
<li><p>批量删除</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708171504.png" alt="image-20210708171500170" style="zoom:50%;" /></li>
</ul>
<h3 id="F对象和Q对象"><a href="#F对象和Q对象" class="headerlink" title="F对象和Q对象"></a>F对象和Q对象</h3><h4 id="F对象"><a href="#F对象" class="headerlink" title="F对象"></a>F对象</h4><p>F对象就是为了获取对象原来列所表示的值，也就是当前字段的值</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708172020.png" alt="image-20210708172015138" style="zoom:50%;" />

<h4 id="Q对象"><a href="#Q对象" class="headerlink" title="Q对象"></a>Q对象</h4><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708172537.png" alt="image-20210708172533245" style="zoom:50%;" />

<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708172615.png" alt="image-20210708172611008" style="zoom:50%;" />



<h3 id="聚合查询和原生数据库操作"><a href="#聚合查询和原生数据库操作" class="headerlink" title="聚合查询和原生数据库操作"></a>聚合查询和原生数据库操作</h3><h4 id="聚合查询-（整表聚合）"><a href="#聚合查询-（整表聚合）" class="headerlink" title="聚合查询 （整表聚合）"></a>聚合查询 （整表聚合）</h4><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708172924.png" alt="image-20210708172920533" style="zoom:50%;" />

<h4 id="分组聚合"><a href="#分组聚合" class="headerlink" title="分组聚合"></a>分组聚合</h4><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708173125.png" alt="image-20210708173121209" style="zoom:50%;" />

<p>例子：</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708173352.png" alt="image-20210708173347032" style="zoom:50%;" />

<h4 id="原生数据库操作"><a href="#原生数据库操作" class="headerlink" title="原生数据库操作"></a>原生数据库操作</h4><ul>
<li>方法1</li>
</ul>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708173706.png" alt="image-20210708173700679" style="zoom:50%;" />

<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708174024.png" alt="image-20210708174019434" style="zoom:50%;" />

<ul>
<li><p>方法2</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708174124.png" alt="image-20210708174120046" style="zoom:50%;" />

<p>例子：</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708174213.png" alt="image-20210708174208331" style="zoom:50%;" /></li>
</ul>
<h3 id="关系映射"><a href="#关系映射" class="headerlink" title="关系映射"></a>关系映射</h3><ul>
<li><p>一对一</p>
<p>OneToOneField</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params">model.Model</span>):</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params">model.Model</span>):</span></span><br><span class="line">    属性 = models.oneToOneField(A,on_delete=xxxx)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>on_delete —级联删除</p>
<ul>
<li><p>models.CASCAED</p>
<p>级联删除，Diango模拟SQL约束On delete cascade的行为，并删除包含外键的对象</p>
</li>
<li><p>models.PROTECT</p>
<p>抛出ProtectError以阻止被引用对象的删除</p>
</li>
<li><p>SET_NULL</p>
<p>设置foreignkey null；需要指定null=True</p>
</li>
</ul>
</li>
</ul>
<p>例子：</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708211555.png" alt="image-20210708211554722" style="zoom:50%;" />
- 创建数据

<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708211851.png" alt="image-20210708211851484" style="zoom:50%;" />
- 查询数据（根据一个查询另外一个）

<ul>
<li><p>正向查询</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708212326.png" alt="image-20210708212326252" style="zoom:50%;" /></li>
<li><p>反向查询</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708212345.png" alt="image-20210708212345494" style="zoom:50%;" /></li>
</ul>
</li>
<li><p>一对多</p>
<p>当一个对象可以关联多个对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params">model.Model</span>):</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params">model.Model</span>):</span></span><br><span class="line">    属性 = models.ForeignKey(<span class="string">&quot;一&quot;</span>的模型类,on_delete=xxxx)</span><br></pre></td></tr></table></figure>

<p>注意：ForeignKey必须指定on_delete模式</p>
<p>例子：</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708212709.png" alt="image-20210708212708922" style="zoom:50%;" /></li>
</ul>
<p>其他的创建、查询和一对一类似</p>
<p>其中反向查询需要注意一下：</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708212950.png" alt="image-20210708212949657" style="zoom:50%;" />



<ul>
<li><p>多对多</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    ...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    ...</span><br><span class="line">    authors = model.ManyToManyField(Author)</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708213351.png" alt="image-20210708213351560" style="zoom:50%;" />
- 创建数据

  <img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708213443.png" alt="image-20210708213443103" style="zoom:50%;" /></li>
</ul>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>views</title>
    <url>/2022/01/07/Django/Views/</url>
    <content><![CDATA[<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>类似于SpringBoot中的Controller</p>
<p><font color=red>在urls.py中是按照从上往下的路由规则进行执行的</font></p>
<h4 id="路由转换器"><a href="#路由转换器" class="headerlink" title="路由转换器"></a>路由转换器</h4><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708093533.png" alt="image-20210708093525777" style="zoom:50%;" />

<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708093629.png" alt="image-20210708093629163" style="zoom:50%;" />

<pre><code> 后端对应的View视图为：
</code></pre>
<p>​    <img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708093925.png" alt="image-20210708093925397" style="zoom:50%;" /></p>
<p>这样就可以拿到对应的pg</p>
<p>例子：计算器</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708094222.png" alt="image-20210708094222249" style="zoom:50%;" />



<h4 id="repath"><a href="#repath" class="headerlink" title="repath"></a>repath</h4><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708094609.png" alt="image-20210708094609096" style="zoom:50%;" />

<p>​    例子1</p>
<p>​    <img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708094720.png" alt="image-20210708094719842"></p>
<p>其中r’^……$是正则的写法，必须加上</p>
<p>​    例子2</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708095248.png" alt="image-20210708095248646" style="zoom:50%;" />

]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>admin用户</title>
    <url>/2022/01/07/Django/admin/</url>
    <content><![CDATA[<h3 id="创建admin用户"><a href="#创建admin用户" class="headerlink" title="创建admin用户"></a>创建admin用户</h3><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708204149.png" alt="image-20210708204148677" style="zoom:50%;" />

<p>​            访问地址：<a href="http://127.0.0.1/admin/">http://127.0.0.1/admin/</a></p>
<h3 id="在admin页面创建自己的类"><a href="#在admin页面创建自己的类" class="headerlink" title="在admin页面创建自己的类"></a>在admin页面创建自己的类</h3><h4 id="注册自己的Model类"><a href="#注册自己的Model类" class="headerlink" title="注册自己的Model类"></a>注册自己的Model类</h4><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708210106.png" alt="image-20210708210106451" style="zoom:50%;" />



<p>例子：</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708210313.png" alt="image-20210708210313351" style="zoom:50%;" />



<h4 id="模型管理器类"><a href="#模型管理器类" class="headerlink" title="模型管理器类"></a>模型管理器类</h4><ul>
<li><p>作用</p>
<p>为后台管理界面添加便于操作的新功能</p>
</li>
<li><p>说明</p>
<p>后台管理器类必须继承自django.contrib.admin里的ModelAdmin类</p>
</li>
<li><p>使用方法</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708210556.png" alt="image-20210708210556355" style="zoom:50%;" />

<p>例子：</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708210641.png" alt="image-20210708210640894" style="zoom:50%;" /></li>
</ul>
<h4 id="添加其他功能"><a href="#添加其他功能" class="headerlink" title="添加其他功能"></a>添加其他功能</h4><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708205703.png" alt="image-20210708205703004" style="zoom:50%;" />



<p>例子：</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708210025.png" alt="image-20210708210025513" style="zoom:50%;" />





<h4 id="Meta类"><a href="#Meta类" class="headerlink" title="Meta类"></a>Meta类</h4><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708205828.png" alt="image-20210708205827519" style="zoom:50%;" />

<p>效果如下：</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708205922.png" alt="image-20210708205922786" style="zoom:50%;" />

]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>中间件类型</title>
    <url>/2022/01/07/Django/%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="中间件类型"><a href="#中间件类型" class="headerlink" title="中间件类型"></a>中间件类型</h3><p>中间件需要继承自django.utils.drprecation.MiddlewareMixin类</p>
<p>中间件必须实现下面五个方法中的一个或者多个</p>
<ul>
<li><p>process_request(self,request)</p>
<p>执行路由之前被调用，在每个请求上调用，返回None（通过）或者HttpResponse对象（不通过）</p>
</li>
<li><p>process_view(self,rquest,callback,callback_args，callback_kwargs)</p>
<p>调用视图之前被调用，在每个请求上调用，返回None或HttpResponse对象</p>
</li>
<li><p>process_response(self,rquest,response)</p>
<p>所有响应返回浏览器被调用，在每个请求上调用，返回HttpResponse对象</p>
</li>
<li><p>process_exception(self,rquest,exception)</p>
<p>当处理过程中抛出异常时调用，返回一个HttpResponse对象</p>
</li>
<li><p>Process_template_response(self,request,response)</p>
<p>在视图函数执行完毕且视图返回的对象中包含render方法时被调用。该方法需要返回实现了render方法的响应对象</p>
</li>
</ul>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210709095311.png" alt="image-20210709095306939" style="zoom:50%;" />



<h3 id="注册中间件"><a href="#注册中间件" class="headerlink" title="注册中间件"></a>注册中间件</h3><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210709095426.png" alt="image-20210709095422156" style="zoom:50%;" />

]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>分页</title>
    <url>/2022/01/07/Django/%E5%88%86%E9%A1%B5/</url>
    <content><![CDATA[<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210709100908.png" alt="image-20210709100904543" style="zoom:50%;" />



<h4 id="Paginator属性"><a href="#Paginator属性" class="headerlink" title="Paginator属性"></a>Paginator属性</h4><ul>
<li>count: 需要分页数据的对象总数</li>
<li>num_pages: 分页后的页面总数</li>
<li>page_range: 从1开始的range对象，用于记录当前页码数</li>
<li>per_page 每页数据的个数</li>
</ul>
<h4 id="Paginator方法"><a href="#Paginator方法" class="headerlink" title="Paginator方法"></a>Paginator方法</h4><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210709101416.png" alt="image-20210709101412739" style="zoom:50%;" />



<h4 id="Paginator方法异常"><a href="#Paginator方法异常" class="headerlink" title="Paginator方法异常"></a>Paginator方法异常</h4><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210709101613.png" alt="image-20210709101607436" style="zoom:50%;" />



<h4 id="page对象定义"><a href="#page对象定义" class="headerlink" title="page对象定义"></a>page对象定义</h4><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210709101650.png" alt="image-20210709101646734" style="zoom:50%;" />

 

<h4 id="pgae对象方法"><a href="#pgae对象方法" class="headerlink" title="pgae对象方法"></a>pgae对象方法</h4><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210709101755.png" alt="image-20210709101750499" style="zoom:50%;" />



<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210709102145.png" alt="image-20210709102139928" style="zoom:50%;" />

]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>应用及分布式路由</title>
    <url>/2022/01/07/Django/%E5%BA%94%E7%94%A8%E5%8F%8A%E5%88%86%E5%B8%83%E5%BC%8F%E8%B7%AF%E7%94%B1/</url>
    <content><![CDATA[<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>因为不可能一个项目中只有一个功能，肯定是包含多个功能的，比如用户部分的功能，新闻部分的功能等等，这些都需要按照模块来进行划分，因此需要做不同的模块</p>
<ol>
<li><p>命令</p>
<p><code>python3 manage.py startapp &#123;module name&#125;</code></p>
</li>
<li><p>在setting.yaml中声明模块</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708120531.png" alt="image-20210708120531240" style="zoom:50%;" /></li>
</ol>
<h3 id="分布式路由"><a href="#分布式路由" class="headerlink" title="分布式路由"></a>分布式路由</h3><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708123941.png" alt="image-20210708123941056" style="zoom:50%;" />

<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708124034.png" alt="image-20210708124034464" style="zoom:50%;" />

]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>请求</title>
    <url>/2022/01/07/Django/%E8%AF%B7%E6%B1%82/</url>
    <content><![CDATA[<h4 id="Get"><a href="#Get" class="headerlink" title="Get"></a>Get</h4><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708100552.png" alt="image-20210708100552056" style="zoom:50%;" />

<p>例子：</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708100637.png" alt="image-20210708100636872" style="zoom:50%;" />



<h4 id="Post"><a href="#Post" class="headerlink" title="Post"></a>Post</h4><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708100827.png" alt="image-20210708100827417" style="zoom:50%;" />

<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210708101115.png" alt="image-20210708101115195" style="zoom:50%;" />

]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker常用命令</title>
    <url>/2022/01/07/Docker/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h4 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h4><h5 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h5><ul>
<li><p>查看镜像</p>
<p>docker images </p>
</li>
<li><p>删除镜像  </p>
<p>先停止该镜像的服务并删除容器才能删除该镜像</p>
<p>docker  rmi  ID</p>
</li>
<li><p>搜索镜像</p>
<p>docker search name</p>
</li>
<li><p>下载镜像</p>
<p>docker pull imageName</p>
<p>docker会进行分层下载，相同镜像不同版本之间相同的东西只需要下载一次即可</p>
</li>
<li><p>docker 删除所有的容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rm -f $(docker ps -a)</span><br></pre></td></tr></table></figure></li>
</ul>
<p>容器</p>
<ul>
<li><p>容器退出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span> <span class="comment">#直接退出容器并停止</span></span><br><span class="line">Ctrl + P + Q <span class="comment">#退出但容器不停止</span></span><br></pre></td></tr></table></figure></li>
<li><p>启动和停止容器操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker start 容器id #启动容器</span><br><span class="line">docker stop 容器id #停止容器</span><br><span class="line">docker restart 容器id #重启容器</span><br><span class="line">docker kill 容器id #强制停止正在运行的容器</span><br></pre></td></tr></table></figure></li>
<li><p>查看容器</p>
<p>docker ps -a</p>
</li>
<li><p>删除容器</p>
<p>docker rm ID</p>
</li>
<li><p>容器运行</p>
<p>docker run -d –name 应用自定义名称 -p 宿主机端口号:容器内部端口 镜像名称</p>
</li>
<li><p>查看容器运行内存占用情况</p>
<p>docker stats</p>
</li>
</ul>
<h5 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h5><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200908214754.png" alt="image-20200908214746588" style="zoom:50%;" />



<pre><code>- 查看镜像的元数据
</code></pre>
<p>​        docker inspect 镜像id</p>
<ul>
<li><p>进入当前正在运行的容器</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200908215540.png" alt="image-20200908215531669" style="zoom:50%;" /></li>
</ul>
<p>​                </p>
<ul>
<li><p>从容器内拷贝文件到主机</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200908220007.png" alt="image-20200908215958148" style="zoom:50%;" /></li>
<li><p>commit镜像</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200909093102.png" alt="image-20200909093055112" style="zoom:50%;" />

<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200909092946.png" alt="image-20200909092941153" style="zoom:50%;" /></li>
</ul>
<h4 id="进阶命令"><a href="#进阶命令" class="headerlink" title="进阶命令"></a>进阶命令</h4><h5 id="挂载数据卷"><a href="#挂载数据卷" class="headerlink" title="挂载数据卷"></a>挂载数据卷</h5><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200909110158.png" alt="image-20200909110153164" style="zoom:50%;" />

<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200909110934.png" alt="image-20200909110928232" style="zoom:50%;" />



<h5 id="mysql持久化"><a href="#mysql持久化" class="headerlink" title="mysql持久化"></a>mysql持久化</h5><img src="/Users/cooper/Library/Application Support/typora-user-images/image-20200909160305077.png" alt="image-20200909160305077" style="zoom:50%;" />

<p>​                即使我们将容器删除了，数据也会保留到本地。</p>
<h5 id="匿名挂载和具名挂载"><a href="#匿名挂载和具名挂载" class="headerlink" title="匿名挂载和具名挂载"></a>匿名挂载和具名挂载</h5><p>​    <img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200909163546.png" alt="image-20200909163541812" style="zoom:50%;" /></p>
<p>​    <img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200909163634.png" alt="image-20200909163629399" style="zoom:50%;" /></p>
<h5 id="自己编写的镜像"><a href="#自己编写的镜像" class="headerlink" title="自己编写的镜像"></a>自己编写的镜像</h5><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200911092452.png" alt="image-20200911092446985" style="zoom:50%;" />

<p>声明volume之后，对应的卷就会匿名挂载到主机上</p>
<h5 id="容器数据卷共享"><a href="#容器数据卷共享" class="headerlink" title="容器数据卷共享"></a>容器数据卷共享</h5><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200911101457.png" alt="image-20200911094132756" style="zoom:50%;" />

<p>只要在挂载的时候声明一下 –volumes-from + 容器名称 即可</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200911093732.png" alt="image-20200911093602185" style="zoom:50%;" />

<p><strong><font color=red>如果父容器卷被删除了，也不会影响依靠他挂载容器卷的容器</font></strong></p>
<p>结论：</p>
<ul>
<li>容器之间配置信息的传递，数据卷容器生命周期一直持续到没有容器使用为止。</li>
<li>一旦持久化到本地之后，到这个时候，本地的数据是不会被删除的！</li>
</ul>
<h4 id="DockerFiler"><a href="#DockerFiler" class="headerlink" title="DockerFiler"></a>DockerFiler</h4><p>dockfile是用来构建docker镜像的文件，命令参数脚本。</p>
<h5 id="基本名词定义"><a href="#基本名词定义" class="headerlink" title="基本名词定义"></a>基本名词定义</h5><ul>
<li><p>DockerFile：构建文件，定义一切的步骤和源代码</p>
</li>
<li><p>DockerImages：通过DockerFile构建生成的镜像，最终发布和运行的产品</p>
</li>
<li><p>Docker容器：镜像运行起来提供的服务器</p>
</li>
</ul>
<h5 id="构建步骤："><a href="#构建步骤：" class="headerlink" title="构建步骤："></a>构建步骤：</h5><ul>
<li>编写一个dockerfile文件</li>
<li>docker build 构建成为一个镜像</li>
<li>docker run 运行镜像</li>
<li>docker push 发布镜像（DockerHub，阿里云镜像仓库）</li>
</ul>
<h5 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h5><ul>
<li>每个关键字必须是大写字母</li>
<li>执行顺序是从上往下</li>
<li>‘#’ 表示注释</li>
<li>每一个指令都会创建并提交一个新的镜像层，并提交</li>
</ul>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200911102718.png" alt="image-20200911102513228" style="zoom:50%;" />



<h5 id="DockerFile指令"><a href="#DockerFile指令" class="headerlink" title="DockerFile指令"></a>DockerFile指令</h5><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200911103937.png" alt="image-20200911103540477" style="zoom:50%;" />



<p>docker history + 镜像名称 可以查看变更历史，从而了解其dockerfile是如何编写的</p>
<p>编写dockerfile文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">MAINTAINER Cooper&lt;1789023580@qq.com&gt;</span><br><span class="line"></span><br><span class="line">ENV MYPATH /user/local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">CMD echo $MYPATH</span><br><span class="line">CMD echo &quot;---end---&quot;</span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure>



<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200911105025.png" alt="image-20200911105020615" style="zoom:50%;" />

<p>注意：</p>
<p>docker build -f mydockerfile_centos -t mycentos:0.1 <strong><font color=red>.</font></strong> 最后面的小点不能忘记写，这是镜像生成到哪里的目录</p>
<h5 id="提交镜像"><a href="#提交镜像" class="headerlink" title="提交镜像"></a>提交镜像</h5><p>docker push</p>
<h4 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h4><h5 id="docker间内部网络通信原理"><a href="#docker间内部网络通信原理" class="headerlink" title="docker间内部网络通信原理"></a>docker间内部网络通信原理</h5><p>docker0相当于是路由器，可以转发各个容器之间的消息，而并非是两个容器之间相互直接传递消息</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200911150628.png" alt="image-20200911150622189" style="zoom:50%;" />



<h5 id="–link"><a href="#–link" class="headerlink" title="–link"></a>–link</h5><p>作用：使用名称来访问容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name nginx02 -p 81:80 -d --link nginx01 nginx</span><br></pre></td></tr></table></figure>

<p>该作用的命令是将nginx01的网络地址写到nginx02的hosts文件中</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200918094641.png" alt="image-20200918094630665" style="zoom:50%;" />

<p><strong><font color=red>但是nginx01却不能ping nginx02 因为没有绑定nginx02的ip地址到ngin02上</font></strong></p>
<h5 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h5><ul>
<li>查看所有的docker网络</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network ls</span><br></pre></td></tr></table></figure>

<ul>
<li><p>网络模式</p>
<ul>
<li>bridge : 桥接模式 docker默认的模式（就是如果两个网络之间连不通，可以通过一座桥来连接对方）</li>
<li>none： 不配置网络</li>
<li>host：和宿主机共享网络</li>
<li>container：容器网络联通（用的少，局限大）</li>
</ul>
</li>
<li><p>创建自定义网络</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> dievr:网络模式</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> subnet:子网</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> gateway:网关</span></span><br><span class="line">docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet</span><br></pre></td></tr></table></figure></li>
<li><p>将容器启动到该网络中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -P --name tomcat-01-mynet --net mynet tomcat</span><br></pre></td></tr></table></figure></li>
<li><p>查看网络中的容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network inspect mynet</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200918101530.png" alt="image-20200918101524772" style="zoom:50%;" /></li>
<li><p>容器之间相互ping</p>
<p><code>docker exec -it tomcat-01-mynet ping tomcat-02-mynet</code></p>
<p>此处并没有将其主机地址写入到对方的hosts文件中，只是因为在同一个网段下所有可以ping通</p>
</li>
<li><p>好处</p>
<p>不同的集群使用不同的网络，可以保护集群之间的相互健康和安全</p>
</li>
</ul>
<h5 id="网络连通"><a href="#网络连通" class="headerlink" title="网络连通"></a>网络连通</h5><ul>
<li><p>命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network connect mynet tomcat</span><br></pre></td></tr></table></figure></li>
<li><p>原理</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200918125826.png" alt="image-20200918110746670" style="zoom:50%;" /></li>
</ul>
<p>相当于将tomcat分配了一个mynet中的内网地址，tomcat也就有了两个地址，一个是外网地址，一个是内网地址</p>
<h5 id="redis集群部署实战"><a href="#redis集群部署实战" class="headerlink" title="redis集群部署实战"></a>redis集群部署实战</h5><ol>
<li><p>创建集群网络</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network create --driver bridge --subnet 172.38.0.0/16 --gateway 172.38.0.1 redis</span><br></pre></td></tr></table></figure></li>
<li><p>通过脚本创建六个redis配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for port in $(seq 1 6);</span><br><span class="line">do</span><br><span class="line">mkdir -p /Users/cooper/Desktop/redis/node-$&#123;port&#125;/conf</span><br><span class="line">touch /Users/cooper/Desktop/redis/node-$&#123;port&#125;/conf/redis.conf</span><br><span class="line">cat &lt;&lt; EOF &gt;&gt; /Users/cooper/Desktop/redis/node-$&#123;port&#125;/conf/redis.conf</span><br><span class="line">port 6379</span><br><span class="line">protected-mode no</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line">cluster-announce-ip 172.38.0.1$&#123;port&#125;</span><br><span class="line">cluster-announce-bus-port 16379</span><br><span class="line">appendonly yes</span><br><span class="line">EOF</span><br><span class="line">done</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">启动</span></span><br><span class="line">for port in $(seq 63 6);</span><br><span class="line">  docker run -p 6376:6379 -p 16376:16379 --name redis-6 \</span><br><span class="line">  -v /Users/cooper/Desktop/redis/node-6/data:/data \</span><br><span class="line">  -v /Users/cooper/Desktop/redis/node-6/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">  -d --net redis --ip 172.38.0.16 redis redis-server /etc/redis/redis.conf;</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">配置集群</span></span><br><span class="line">redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379 172.38.0.13:6379 172.38.0.14:6379 172.38.0.15:6379 172.38.0.16:6379 --cluster-replicas 1</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">进入redis客户端</span></span><br><span class="line">redis-cli -c</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看集群信息</span></span><br><span class="line">cluster info</span><br><span class="line">cluster nodes</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">接下来停掉其中的5个主机，仍然可以查询到存储到其中的值</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="SpringBoot微服务打包Docker镜像"><a href="#SpringBoot微服务打包Docker镜像" class="headerlink" title="SpringBoot微服务打包Docker镜像"></a>SpringBoot微服务打包Docker镜像</h4><ol>
<li><p>构建springboot项目</p>
</li>
<li><p>打包应用</p>
</li>
<li><p>编写dockerfile文件</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> *.jar /app.jar</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;--server.port=8080&quot;</span>]</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure></li>
<li><p>构建镜像(在dockerfile和jar包同级目录下)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -t &#123;name&#125; .</span><br></pre></td></tr></table></figure></li>
<li><p>发布运行</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker进阶</title>
    <url>/2022/01/07/Docker/Docker%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<h4 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker compose"></a>docker compose</h4><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">国内镜像源</span></span><br><span class="line">curl -L https://get.daocloud.io/docker/compose/releases/download/1.24.0/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta">#</span><span class="bash">赋予权限</span></span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>



<h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><p>在有docker-compose.yml的文件目录下启动docker-compose</p>
<ul>
<li><p>启动<code>docker-compose up</code></p>
</li>
<li><p>停止 <code>docker-compse down</code></p>
</li>
<li><p>重新部署打包  <code>docker-compose up --build</code></p>
</li>
</ul>
<p>docker-compose 每次启动之后都会自己创建一个网络，用于内部的通信，项目中的所有容器都在同一个网络下，这样的话彼此之间可以通过域名访问</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200923225137.png" alt="image-20200923222332638" style="zoom:50%;" />



<h5 id="yaml文件规则"><a href="#yaml文件规则" class="headerlink" title="yaml文件规则"></a>yaml文件规则</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#3层</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">版本</span> <span class="string">需要与docker引擎对应</span></span><br><span class="line"><span class="attr">service:</span> <span class="string">服务</span></span><br><span class="line">	<span class="string">服务1：web</span></span><br><span class="line">	<span class="string">服务2：redis</span></span><br><span class="line">	<span class="string">...</span></span><br><span class="line">	<span class="string">服务n：</span></span><br><span class="line">	</span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">config:</span></span><br></pre></td></tr></table></figure>



<h4 id="docker-swarm"><a href="#docker-swarm" class="headerlink" title="docker swarm"></a>docker swarm</h4><h5 id="初始化节点"><a href="#初始化节点" class="headerlink" title="初始化节点"></a>初始化节点</h5><p><code>docker swarm init</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">获取令牌</span></span><br><span class="line">docker swarm join-token manager  #作为管理者结点加入集群</span><br><span class="line">docker swarm join-token worker	#作为工作结点加入集群</span><br></pre></td></tr></table></figure>

<p>如果这些机器不在同一个内网中，需要彼此之间做认证才行</p>
<p>只有管理者节点才可以执行命令，worker节点无法执行</p>
<h5 id="Raft协议（保证大多数结点存活才可以使用）"><a href="#Raft协议（保证大多数结点存活才可以使用）" class="headerlink" title="Raft协议（保证大多数结点存活才可以使用）"></a>Raft协议（保证大多数结点存活才可以使用）</h5><p>比如双主双从，其中还只要有一个主节点挂机，那么另外一个主节点也将不可以用</p>
<p>可以将其他结点从集群中离开，只需要在该离开的结点中输入：<code>docker swarm leave</code></p>
<h4 id="service"><a href="#service" class="headerlink" title="service"></a>service</h4><p>服务可以动态的扩缩容，对于上层的调用者来说他就是一个</p>
<p><code>docker service</code></p>
<p><code>docker service ps 服务名</code></p>
<ul>
<li><code>docker service update --replicas &#123;副本数量&#125; &#123;服务名&#125;</code> 或者 <code>docker service scale &#123;服务名&#125;=&#123;副本数量&#125;</code></li>
</ul>
<p>通过该命令创建的副本会随机分布在集群的主机上，并且通过集群中的每一个节点都可以对服务进行访问，不管该节点有没有该服务</p>
<h5 id="docker-swarm-网络"><a href="#docker-swarm-网络" class="headerlink" title="docker swarm 网络"></a>docker swarm 网络</h5><p>当docker swarm 搭建集群成功之后，会自动生成一个ingress网络，该网络的类型是overlay</p>
<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20200924093337761.png" alt="image-20200924093337761" style="zoom:50%;" />

<p>overlay可以使得不同docker的内部网络相互ping通，使得集群间的网络成为了一个整体</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Go环境安装</title>
    <url>/2022/01/07/Go/Go%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="Mac环境下VScode安装Go"><a href="#Mac环境下VScode安装Go" class="headerlink" title="Mac环境下VScode安装Go"></a>Mac环境下VScode安装Go</h1><ul>
<li> <a href="https://studygolang.com/dl">下载Go SDK</a></li>
</ul>
  <img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200928145142.png" alt="pic" style="zoom:50%;" />



<ul>
<li><p>查看当前go的环境变量并根据自己的工程路径对<font color = red><em><strong>GOPath</strong></em></font>进行修改</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200928145126.png" alt="pic" style="zoom:50%;" /></li>
</ul>
<ul>
<li> 我的工程路径为</li>
</ul>
  <img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200928145047.png" alt="pic" style="zoom:50%;" />



<p>  子目录go下的工程路径为</p>
  <img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200928145116.png" alt="pic" style="zoom:50%;" />



<ul>
<li>当我们在src目录下创建main.go文件是会自动的弹出插件的下载提示，此时我们需要先对proxy进行修改（也就是刚刚在上面提到的），根据<a href="https://goproxy.io/zh/">网站</a>的提示进行修改，修改完之后就可以进行愉快的下载了</li>
</ul>
<ul>
<li><p>我们需要在src的根目录下进行mod的创建，也就是go目录下</p>
<p>  <code>go mod init mygo</code></p>
<p>此处一定要记得是在go目录下创建，如果在go的根目录Go下创建的话会有冲突</p>
</li>
</ul>
<ul>
<li><p>编写launch.json 配置文件(需要根据自己的情况进行配置也就是下面的两个GOPATH)</p>
 <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 使用 IntelliSense 了解相关属性。 </span></span><br><span class="line">    <span class="comment">// 悬停以查看现有属性的描述。</span></span><br><span class="line">    <span class="comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Launch&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;go&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;mode&quot;</span>: <span class="string">&quot;debug&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;remotePath&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;port&quot;</span>: <span class="number">2345</span>,</span><br><span class="line">            <span class="attr">&quot;host&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;program&quot;</span>: <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;env&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;GOPATH&quot;</span>: <span class="string">&quot;/Users/cooper/Documents/Code/VScode/Go&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;args&quot;</span>: [],</span><br><span class="line">            <span class="attr">&quot;showLog&quot;</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Test&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;go&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;mode&quot;</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;remotePath&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;port&quot;</span>: <span class="number">2345</span>,</span><br><span class="line">            <span class="attr">&quot;host&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;program&quot;</span>: <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;env&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;GOPATH&quot;</span>: <span class="string">&quot;/Users/cooper/Documents/Code/VScode/Go&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;args&quot;</span>: [],</span><br><span class="line">            <span class="attr">&quot;showLog&quot;</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>测试代码</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">&quot;Hello GO&quot;</span>)</span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">&quot;Hello aaaa&quot;</span>)</span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">&quot;Hello aaaa&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>测试结果：</p>
</li>
</ul>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200928144956.png" alt="pic" style="zoom:50%;" />





]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go包管理</title>
    <url>/2022/01/07/Go/go%E5%8C%85%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<ol>
<li><p>vendor</p>
<p>若项目目录中存在vendor的子目录，在导入包目录的时候，会优先在vendor中进行查找。</p>
<p>注意：</p>
<p>​    vendor机制是出在GOPATH体系中的，首先你的 项目要在GOPATH/src下，vendor才有意义。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go基础语法</title>
    <url>/2022/01/07/Go/%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h4 id="未用到的变量和包必须删除，否则无法通过编译"><a href="#未用到的变量和包必须删除，否则无法通过编译" class="headerlink" title="未用到的变量和包必须删除，否则无法通过编译"></a>未用到的变量和包必须删除，否则无法通过编译</h4><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><ol>
<li><p>如果不赋初始值的话，有默认的初始值，例如int的默认值就是0</p>
</li>
<li><p>会根据数据的具体数值进行自主推导</p>
</li>
<li><p>var i = 0 =&gt; i := 0</p>
</li>
<li><p>保小不保大，尽可能的占用小的内存</p>
</li>
<li><p>go中浮点型变量只有float类型，没有double，默认是float 64</p>
</li>
<li><p>```go<br>在go语言中没有单独的char类型<br>//单个字符输出<br>var c1  = ‘A’//一般的字符例如ascii码表中的字符0-255范围内的字符可以直接使用byte进行存储</p>
</li>
</ol>
<pre><code> var c2  int = &#39;薛&#39;//此处如果使用byte的话会导溢出
 
 fmt.Printf(&quot;%c %c \n&quot;,c1,c2)
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">7. go语言的编码统一使用utf-8</span><br><span class="line"></span><br><span class="line">   ```go</span><br><span class="line">   	//字符串</span><br><span class="line">   	var str0 string = &quot;Hello World&quot;</span><br><span class="line">   	var str1 string = `Hello \n World`//使用 ``就可以直接转移字符串中的特殊字符，比如说\n，“”等</span><br><span class="line">   	var str2 string = &quot;Hello World &quot; +</span><br><span class="line">   	&quot;my girl&quot;  //连接较长的字符串需要将“+”放到末尾，这样系统自动不给末尾添加“;”</span><br></pre></td></tr></table></figure>
</code></pre>
<ol start="8">
<li><p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201008092923.png" alt="image-20201008092921888"></p>
</li>
<li><p>```go<br>//变量类型的转换：必须使用显示转换，无法自动转换,即使类型转换了但是实际上被转类型变量本身却并没有发送变化，比如此处的t1还是float类型，并没有变成int类型</p>
<pre><code>var t1 float64 = 1
var t2 int = int(t1)
var t3 = 1.111111
fmt.Printf(&quot;t3 = %v t2 = %d&quot;,t3,t2)//%v 为相对应类型的默认格式

var t4 int32 = 1;
var t5 int64  = 2;
var t6 = int64(t4)+t5;//两个不同类型的变量是不可以相加的，正如上面所述go不会帮我们进行自动进行类型转换
//var t7 int8 = 128//直接就溢出了
fmt.Printf(&quot;%d\n&quot;,t6)
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">10. ```go</span><br><span class="line">    字符串与变量之间的相互转换</span><br><span class="line">    //变量转为字符串</span><br><span class="line">    	var t7 int64 = 12;</span><br><span class="line">    	var str string;</span><br><span class="line">    	str = fmt.Sprintf(&quot;%v&quot;,t7);</span><br><span class="line">    	fmt.Printf(&quot;%T  str = %v\n&quot;,str,str)</span><br><span class="line">    </span><br><span class="line">    	str = strconv.FormatInt(t7,10);</span><br><span class="line">    	fmt.Printf(&quot;%T  str = %v&quot;,str,str)</span><br><span class="line">    </span><br><span class="line">    //字符串转为变量</span><br><span class="line">    	var t8 int64 </span><br><span class="line">    	t8,_= strconv.ParseInt(str,10,64)  //此处有两个返回值，我们只需要第一个，如果某个返回值不需要可以使用_来代替</span><br><span class="line">    	fmt.Println(t8)</span><br></pre></td></tr></table></figure></li>
<li><p>在go中没有public和private字段</p>
<p>我们如果需要引用某一个文件中的属性，需要将该属性的首字母大写（也就是public），</p>
<p>小写代表private</p>
<p>需要在引用的文件中添加该属性所在的包</p>
<p>比如此处的utils.go中的HeroName是我需要访问的属性</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201008110913.png" alt="image-20201008110647096"></p>
<p>那么我需要在main.go中导入utils.go所在的包</p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201008110921.png" alt="image-20201008110816126"></p>
<p>​    才可以使用utils.go中的HeroName</p>
<ol start="12">
<li><p>自增</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//i++ i-- 只允许单独使用 其他情况都不允许</span></span><br><span class="line">	<span class="keyword">var</span> t9 <span class="keyword">int</span> = <span class="number">1</span>;</span><br><span class="line">	t9++;</span><br><span class="line">	<span class="comment">// ++t9;//不允许前置++或者--</span></span><br><span class="line">	<span class="built_in">println</span>(t9)</span><br></pre></td></tr></table></figure></li>
<li><p>go没有三元运算符</p>
</li>
<li><p>键盘输入</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 控制台输入</span></span><br><span class="line">	<span class="keyword">var</span> name <span class="keyword">string</span></span><br><span class="line">	<span class="keyword">var</span> age <span class="keyword">int</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;请输入姓名&quot;</span>)</span><br><span class="line">	<span class="comment">// fmt.Scanln(&amp;name)</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;请输入年龄&quot;</span>)</span><br><span class="line">	fmt.Scanln(&amp;age)</span><br><span class="line">	fmt.Scanf(<span class="string">&quot;%v %v&quot;</span>,name,age)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;name = %v age = %d\n&quot;</span>,name,age)</span><br></pre></td></tr></table></figure></li>
<li><p>if、for、rand、switch</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//if</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> age&lt;<span class="number">10</span>&#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;小于10岁&quot;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;大于10岁&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//switch</span></span><br><span class="line"><span class="keyword">switch</span> age&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">18</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;我是18岁&quot;</span>)</span><br><span class="line">		<span class="keyword">fallthrough</span> <span class="comment">//默认只能穿透一层</span></span><br><span class="line">	<span class="keyword">case</span> <span class="number">19</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;我是19岁&quot;</span>)</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;我不知道多少岁&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//for</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">0</span>;i&lt;<span class="built_in">len</span>(str);i++ &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%c&quot;</span>,str[i])</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line">    </span><br><span class="line"><span class="comment">//随机数</span></span><br><span class="line">rand.Seed(time.Now().Unix())</span><br><span class="line"><span class="keyword">var</span> num = rand.Intn(<span class="number">100</span>)</span><br><span class="line">fmt.Println(num)</span><br></pre></td></tr></table></figure></li>
<li><p>函数调用</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fb</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">1</span>||n==<span class="number">2</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> fb(n<span class="number">-1</span>)+fb(n<span class="number">-2</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>go函数支持多个返回参数</p>
</li>
<li><p>go函数不支持函数重载</p>
</li>
<li><p>函数本身也是一个数据类型</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fb</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">1</span>||n==<span class="number">2</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> fb(n<span class="number">-1</span>)+fb(n<span class="number">-2</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getFb</span><span class="params">(funvar <span class="keyword">func</span>(<span class="keyword">int</span>)</span><span class="title">int</span>,<span class="title">n</span> <span class="title">int</span>) <span class="title">int</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> funvar(n)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fmt.Println(getFb(fb,<span class="number">3</span>))</span><br></pre></td></tr></table></figure></li>
<li><p>自定义函数返回值名称，避免写return后面的名称</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">simpleOperation</span><span class="params">(a <span class="keyword">int</span>,b <span class="keyword">int</span>)</span> <span class="params">(sum <span class="keyword">int</span>,sub <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">	sum = a+b;</span><br><span class="line">	sub = a-b;</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//支持函数返回值自定义名称 ，这样可以写返回值</span></span><br><span class="line">	<span class="keyword">var</span> sum,sub = simpleOperation(<span class="number">12</span>,<span class="number">8</span>)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;sum = %v,sub = %v&quot;</span>,sum,sub)</span><br></pre></td></tr></table></figure></li>
<li><p>可变参数</p>
<p>函数有多个相同类型的参数(和java中的差不多)</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addSum</span><span class="params">(t0 <span class="keyword">int</span>,args... <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> sum = t0;</span><br><span class="line">	<span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> i = <span class="number">0</span>;i&lt;<span class="built_in">len</span>(args);i++ &#123;</span><br><span class="line">		sum+=args[i];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>自定义数据类型</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> myfunType = <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span>)</span><span class="title">int</span> //自定义数据类型</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fb</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">1</span>||n==<span class="number">2</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> fb(n<span class="number">-1</span>)+fb(n<span class="number">-2</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getFb</span><span class="params">(funvar myfunType,n <span class="keyword">int</span>)</span> <span class="title">int</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> funvar(n)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(getFb(fb,<span class="number">3</span>))</span><br></pre></td></tr></table></figure></li>
<li><p>init函数</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201008170601.png" alt="image-20201008170251969"></p>
<p>当调用其他包里面执行程序时，程序的执行顺序如下：</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201008170553.png" alt="image-20201008170552355"></p>
</li>
<li><p>匿名函数</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>(</span><br><span class="line">	<span class="comment">//funn 这是一个匿名函数</span></span><br><span class="line">	funn = <span class="function"><span class="keyword">func</span><span class="params">(a <span class="keyword">int</span>,b <span class="keyword">int</span>)</span> <span class="title">int</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> a-b</span><br><span class="line">	&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//匿名函数的调用方式</span></span><br><span class="line">	<span class="comment">//方式1</span></span><br><span class="line">	res = <span class="function"><span class="keyword">func</span><span class="params">(a <span class="keyword">int</span>,b <span class="keyword">int</span>)</span> <span class="title">int</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> a-b</span><br><span class="line">	&#125;(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">	fmt.Println(res)</span><br><span class="line">	<span class="comment">//方式2</span></span><br><span class="line">	<span class="keyword">var</span> fun = <span class="function"><span class="keyword">func</span><span class="params">(a <span class="keyword">int</span>,b <span class="keyword">int</span>)</span> <span class="title">int</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> a-b</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(fun(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line">	<span class="comment">//方式3 全局匿名函数</span></span><br><span class="line">	fmt.Println(funn(<span class="number">1</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure></li>
<li><p>闭包（好处：可以反复引用上一次传递过来的值）</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//AddUpper 闭包</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AddUpper</span><span class="params">()</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="title">int</span></span>&#123;</span><br><span class="line">	<span class="keyword">var</span> n = <span class="number">10</span></span><br><span class="line">	<span class="keyword">var</span> str = <span class="string">&quot;Hello&quot;</span></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span>&#123;</span><br><span class="line">		n = n+x;</span><br><span class="line">		str+=<span class="string">&quot;a&quot;</span></span><br><span class="line">		fmt.Println(<span class="string">&quot;str= &quot;</span>,str)</span><br><span class="line">		<span class="keyword">return</span> n</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//闭包 闭包是类，函数是操作，n为字段</span></span><br><span class="line">	<span class="keyword">var</span> f <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span>)</span><span class="title">int</span> = <span class="title">AddUpper</span><span class="params">()</span>//返回一个<span class="title">func</span><span class="params">(<span class="keyword">int</span>)</span><span class="title">int</span>类型的变量</span></span><br><span class="line">	fmt.Println(f(<span class="number">1</span>))</span><br><span class="line">	fmt.Println(f(<span class="number">2</span>))</span><br><span class="line">	fmt.Println(f(<span class="number">3</span>))</span><br></pre></td></tr></table></figure>

<p>例子：传入某文件名，如果文件后缀为.avi则直接输出文件名，如果没有后缀则追加.avi</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeSuffix</span><span class="params">(suffix <span class="keyword">string</span>)</span> <span class="title">func</span><span class="params">(<span class="keyword">string</span>)</span> <span class="title">string</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">string</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> !strings.HasSuffix(name,suffix)&#123;</span><br><span class="line">			<span class="keyword">return</span> name+suffix</span><br><span class="line">		&#125;</span><br><span class="line">			<span class="keyword">return</span> name</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> f = makeSuffix(<span class="string">&quot;.avi&quot;</span>)</span><br><span class="line">	fmt.Println(f(<span class="string">&quot;bird.avi&quot;</span>))</span><br><span class="line">	fmt.Println(f(<span class="string">&quot;girl.jpg&quot;</span>))</span><br><span class="line">	fmt.Println(f(<span class="string">&quot;boy&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>defer</p>
<p>细节：</p>
<ul>
<li><p>当go执行到defer后不会立即执行该语句，而是将defer的语句压入到一个栈中，然后继续执行下面的语句</p>
</li>
<li><p>当函数执行完之后，再从之前压入到栈中的defer语句依次从栈顶去取出元素，也就是先进后出</p>
</li>
<li><p>在defer将语句压入到栈的时候，也会将相关的值拷贝到栈中</p>
</li>
<li><p>例子</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testDefer</span><span class="params">(n1 <span class="keyword">int</span>,n2 <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">	<span class="keyword">defer</span> fmt.Println(<span class="string">&quot;这是一个defer语句 &quot;</span>,n1)</span><br><span class="line">	<span class="keyword">defer</span> fmt.Println(<span class="string">&quot;这是一个defer语句 &quot;</span>,n2)</span><br><span class="line">	fmt.Println(n1+n2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>常用的字符串函数</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201008200132.png" alt="image-20201008200127768" style="zoom:50%;" /></li>
</ol>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201008200447.png" alt="image-20201008200442422" style="zoom:50%;" />

<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201008201020.png" alt="image-20201008201015732" style="zoom:50%;" />

<ol start="23">
<li><p><font color = red>go中时间的每个单位都是有常量的，不能说想要毫秒就使用time.Second  * times 0.1,而是需要使用time.Millisecond * 100</font></p>
</li>
<li><p>new主要分配值类型，返回的是指针</p>
<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20201008203818697.png" alt="image-20201008203818697" style="zoom:50%;" />

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">num2 := <span class="built_in">new</span>(<span class="keyword">int</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;num2的类型为%T  num2的值为%v num2的地址为%v  num2这个指针指向的值为%v&quot;</span>,num2,num2,&amp;num2,*num2)</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果为</span></span><br><span class="line">num2的类型为*<span class="keyword">int</span>  num2的值为<span class="number">0xc0000140c8</span> num2的地址为<span class="number">0xc00000e030</span>  num2这个指针指向的值为<span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<ol start="25">
<li><p>异常处理</p>
<p>即使调用了该方法也不会使得程序在此处终止，而是继续执行该方法以下的内容</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//异常处理</span></span><br><span class="line"> <span class="function"><span class="keyword">func</span> <span class="title">testError</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		err:=<span class="built_in">recover</span>()</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;err = &quot;</span>,err)</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;()</span><br><span class="line">	num1 := <span class="number">10</span></span><br><span class="line">	num2 := <span class="number">0</span></span><br><span class="line">	fmt.Println(num1/num2)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>自定义异常</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201008220508.png" alt="image-20201008215948490" style="zoom:50%;" />

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testDIYError</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="params">(err error)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> name ==<span class="string">&quot;config.ini&quot;</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> errors.New(<span class="string">&quot;读取文件错误&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testDIYError2</span><span class="params">()</span></span>&#123;</span><br><span class="line">err:=testDIYError(<span class="string">&quot;config.ini1&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err!=<span class="literal">nil</span> &#123;</span><br><span class="line">	<span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;继续执行...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201008220454.png" alt="image-20201008220008361" style="zoom:50%;" /></li>
</ul>
</li>
</ol>
<ol start="26">
<li><p>数组</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组  数组是值类型，他直接指向的是数据空间而不是地址</span></span><br><span class="line">	<span class="keyword">var</span> arr [<span class="number">3</span>]<span class="keyword">int</span>;</span><br><span class="line">	fmt.Println(arr)<span class="comment">//打印出来的是每个数组元素的值</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;arr[0]的地址为 &quot;</span>,&amp;arr[<span class="number">0</span>])</span><br><span class="line">	fmt.Println(<span class="string">&quot;arr[1]的地址为 &quot;</span>,&amp;arr[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>

<ul>
<li><p>初始化</p>
<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20201009094203501.png" alt="image-20201009094203501" style="zoom:50%;" /></li>
<li><p>数组的遍历</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1  = [...]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">fmt.Println(arr1)</span><br><span class="line"><span class="keyword">for</span> _,v := <span class="keyword">range</span> arr1&#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;v=%v&quot;</span>,v)</span><br><span class="line">	fmt.Println()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>注意事项</p>
<ul>
<li><p>数组长度是固定的，不能动态添加</p>
</li>
<li><p>打印数组的首地址</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fmt.Printf(<span class="string">&quot;%p&quot;</span>,&amp;arr1)<span class="comment">//必须使用%p才能打印出来首地址，如果直接取数组名的地址的话</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>切片(<font color=red>数组和切片的最大不同之处在于数组定义时需要指定长度，切片不需要指定长度)</font></p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201009105143.png" alt="image-20201009105129176" style="zoom:50%;" />

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//切片</span></span><br><span class="line">slice:=arr1[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">fmt.Println(slice)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%p\n&quot;</span>,&amp;slice)<span class="comment">//&amp;slice是存储&amp;arr1的地址</span></span><br><span class="line">fmt.Println(&amp;arr1[<span class="number">0</span>])</span><br><span class="line">fmt.Println(&amp;slice[<span class="number">0</span>])</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><p>切片创建的三种方式</p>
<ul>
<li><p>从数组中取出切片</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">slice:=arr1[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">fmt.Println(slice)</span><br></pre></td></tr></table></figure></li>
<li><p>make切片</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> slice1 = <span class="built_in">make</span>([]<span class="keyword">int</span>,<span class="number">5</span>,<span class="number">10</span>)</span><br><span class="line">slice1[<span class="number">1</span>] = <span class="number">10</span></span><br><span class="line">slice1[<span class="number">2</span>]  =<span class="number">20</span></span><br><span class="line">fmt.Println(slice1)</span><br></pre></td></tr></table></figure></li>
<li><p>[]int</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> slice2 []<span class="keyword">int</span> = []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>,slice2)</span><br><span class="line">fmt.Println(slice2)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>切片的小细节</p>
<ul>
<li><p>对于第一种创建切片的方式而言</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//默认不写的话  ：之前就是start  ：之后就是end</span></span><br><span class="line">slice = arr1[:]</span><br><span class="line">fmt.Println(slice)</span><br><span class="line">slice = arr1[:<span class="number">3</span>]</span><br><span class="line">fmt.Println(slice)</span><br><span class="line">slice = arr1[<span class="number">0</span>:]</span><br><span class="line">fmt.Println(slice)</span><br></pre></td></tr></table></figure></li>
<li><p>切片追加 append</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201009152815.png" alt="image-20201009152806678"></p>
</li>
</ul>
<p>切片追加的方式</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//切片追加切片  （后面必须加 ...）</span></span><br><span class="line">slice3 := []<span class="keyword">int</span>&#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">slice2 = <span class="built_in">append</span>(slice2,slice3...)</span><br><span class="line">fmt.Println(slice2)</span><br><span class="line"><span class="comment">//切片追加元素</span></span><br><span class="line">slice3 = <span class="built_in">append</span>(slice3,<span class="number">100</span>,<span class="number">200</span>)</span><br><span class="line">fmt.Println(slice3)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>切片copy</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> slice4 = <span class="built_in">make</span>([]<span class="keyword">int</span>,<span class="number">10</span>,<span class="number">10</span>);</span><br><span class="line">slice5:=[]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line"><span class="built_in">copy</span>(slice4,slice5)</span><br><span class="line">fmt.Println(slice4)</span><br></pre></td></tr></table></figure>

<p>copy(target,source)</p>
<p>即使target与source的大小不一致不会报错</p>
</li>
<li><p><font color=red>切片作为参数传递的时候是引用类型</font></p>
</li>
<li><p>字符串与切片 string的底层是byte数组，因此可以利用切片对其操作</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//string和切片</span></span><br><span class="line">strSlice := <span class="string">&quot;Hello&quot;</span></span><br><span class="line"><span class="comment">//slice6:=strSlice[:]</span></span><br><span class="line"><span class="comment">// slice6[0] = &#x27;h&#x27;//这样是不可以的，因为此时的切片指向的是strSlice处的切片，因此不能够进行一个赋值操作，此处的赋值操作就相当于是对字符串进行赋值操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果需要对字符串进行修改的话</span></span><br><span class="line"><span class="comment">//byte只能处理英文字母，不能处理带汉字的字符串</span></span><br><span class="line">slice7 := []<span class="keyword">byte</span>(strSlice)</span><br><span class="line">slice7[<span class="number">0</span>] = <span class="string">&#x27;h&#x27;</span></span><br><span class="line">strSlice = <span class="keyword">string</span>(slice7)</span><br><span class="line">fmt.Println(strSlice)</span><br><span class="line"><span class="comment">//带有中文字符，需要按照字符处理</span></span><br><span class="line">slice8 := []<span class="keyword">rune</span>(strSlice)</span><br><span class="line">slice8[<span class="number">0</span>] = <span class="string">&#x27;薛&#x27;</span></span><br><span class="line">strSlice = <span class="keyword">string</span>(slice8)</span><br><span class="line">fmt.Println(strSlice)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<ol start="28">
<li><p>map</p>
<ul>
<li>map是无序的，不会给你自动按照key或者value排序</li>
<li>map变量创建之后，必须要进行make，否则map变量没有空间</li>
<li>map在作为函数参数时，是引用类型</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//map</span></span><br><span class="line"><span class="keyword">var</span> mapTest <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span></span><br><span class="line">mapTest = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>,<span class="number">10</span>)<span class="comment">//必须要make才能为map分配空间，否则不会自动分配空间</span></span><br><span class="line">mapTest[<span class="number">0</span>] = <span class="string">&quot;Cooper&quot;</span></span><br><span class="line">mapTest[<span class="number">1</span>] = <span class="string">&quot;Test&quot;</span></span><br><span class="line">mapTest[<span class="number">2</span>] = <span class="string">&quot;Marry&quot;</span></span><br><span class="line"></span><br><span class="line">fmt.Println(mapTest)</span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以在初始化的时候进行值的分配</span></span><br><span class="line">mapTest2:=<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>&#123;<span class="number">0</span>:<span class="string">&quot;shanghai&quot;</span>,<span class="number">1</span>:<span class="string">&quot;hangzhou&quot;</span>,<span class="number">2</span>:<span class="string">&quot;shenzhen&quot;</span>&#125;</span><br><span class="line">fmt.Println(mapTest2)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>双重map</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201009171814.png" alt="image-20201009171805895" style="zoom:50%;" /></li>
</ul>
<ul>
<li><p>map的crud</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除map中的某个值</span></span><br><span class="line"><span class="built_in">delete</span>(mapTest2,<span class="number">0</span>)</span><br><span class="line"><span class="comment">//因为go中没有clean清除所有map里面值的操作，因此直接将需要清空的变量make一下重新分配空间即可,原来的直接由gc回收即可</span></span><br><span class="line">mapTest = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>)</span><br><span class="line">mapTest[<span class="number">0</span>] = <span class="string">&quot;Hello&quot;</span></span><br><span class="line">fmt.Println(mapTest)</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找  val为对应的值，ok为是否查找到的标志位为bool类型</span></span><br><span class="line">val,ok := mapTest2[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">if</span> ok&#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;找到了该值 &quot;</span>,val)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;未找到该值&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>map切片</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//map切片  需要注意一下，需要make两次，因为切片需要make一次，然后map也需要make一次</span></span><br><span class="line">	<span class="keyword">var</span> newMap []<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span></span><br><span class="line">	newMap = <span class="built_in">make</span>([]<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>,<span class="number">2</span>)<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> newMap[<span class="number">0</span>]==<span class="literal">nil</span>&#123;</span><br><span class="line">		newMap[<span class="number">0</span>] = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>,<span class="number">2</span>)</span><br><span class="line">		newMap[<span class="number">0</span>][<span class="number">0</span>] = <span class="string">&quot;Hi&quot;</span></span><br><span class="line">		newMap[<span class="number">0</span>][<span class="number">1</span>] = <span class="string">&quot;Cooper&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> newMap[<span class="number">1</span>]==<span class="literal">nil</span>&#123;</span><br><span class="line">		newMap[<span class="number">1</span>] = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>,<span class="number">2</span>)</span><br><span class="line">		newMap[<span class="number">1</span>][<span class="number">0</span>] = <span class="string">&quot;Hello&quot;</span></span><br><span class="line">		newMap[<span class="number">1</span>][<span class="number">1</span>] = <span class="string">&quot;Mary&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//添加元素</span></span><br><span class="line">	<span class="keyword">var</span> newMapadd <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span></span><br><span class="line">	newMapadd = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>,<span class="number">2</span>)</span><br><span class="line">	newMapadd[<span class="number">0</span>] = <span class="string">&quot;How&quot;</span></span><br><span class="line">	newMapadd[<span class="number">1</span>] = <span class="string">&quot;are&quot;</span></span><br><span class="line">	newMap = <span class="built_in">append</span>(newMap,newMapadd)</span><br><span class="line">	fmt.Println(newMap)</span><br></pre></td></tr></table></figure></li>
<li><p>map排序</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//map排序  先将key进行排序，再利用key可以将其进行遍历输出</span></span><br><span class="line">mapSort := <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span> &#123;</span><br><span class="line">  <span class="number">10</span>:<span class="string">&quot;Beijing&quot;</span>,</span><br><span class="line">  <span class="number">1</span>:<span class="string">&quot;New York&quot;</span>,</span><br><span class="line">  <span class="number">6</span>:<span class="string">&quot;Canada&quot;</span>,</span><br><span class="line">  <span class="number">3</span>:<span class="string">&quot;Shanghai&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> keys []<span class="keyword">int</span></span><br><span class="line"><span class="keyword">for</span> k := <span class="keyword">range</span> mapSort&#123;</span><br><span class="line">  keys = <span class="built_in">append</span>(keys,k)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sort.Ints(keys)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _,i := <span class="keyword">range</span> keys&#123;</span><br><span class="line">  fmt.Println(mapSort[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>map的使用细节</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201009195818.png" alt="image-20201009195812579" style="zoom:50%;" /></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go面向对象</title>
    <url>/2022/01/07/Go/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<ol>
<li><p> 没有类这个概念，对应的是结构体</p>
</li>
<li><p>结构体</p>
<ul>
<li><p>结构体是值传递</p>
</li>
<li><p>创建结构体的三种方式</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201010111632.png" alt="image-20201010111626889" style="zoom:50%;" /></li>
<li><p>例子</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//Cat 是一个例子</span></span><br><span class="line"><span class="keyword">type</span> Cat <span class="keyword">struct</span> &#123;</span><br><span class="line">	name       <span class="keyword">string</span></span><br><span class="line">	age        <span class="keyword">int</span></span><br><span class="line">	mapAddress <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Point 点</span></span><br><span class="line"><span class="keyword">type</span> Point <span class="keyword">struct</span> &#123;</span><br><span class="line">	x <span class="keyword">int</span></span><br><span class="line">	y <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Rect 矩阵</span></span><br><span class="line"><span class="keyword">type</span> Rect <span class="keyword">struct</span> &#123;</span><br><span class="line">	left, right *Point</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Person 序列化demo</span></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name <span class="keyword">string</span> <span class="string">`json:&quot;name&quot;`</span> <span class="comment">//后面是tag 是为了方便json字符串将首字母大写改成小写 这里属性值不得不首字母大写  因为不首字母大写其他包就访问不了这个属性</span></span><br><span class="line">	Age  <span class="keyword">int</span>    <span class="string">`json:&quot;age&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">	p.Name = <span class="string">&quot;jack&quot;</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;名字是: &quot;</span>, p.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Person)</span> <span class="title">testPoint</span><span class="params">()</span></span> &#123;</span><br><span class="line">	p.Name = <span class="string">&quot;Harry&quot;</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;hello,this is a point test &quot;</span>, (*p).Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Person)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	str := fmt.Sprintf(<span class="string">&quot;name = [%v],age = [%v]&quot;</span>, p.Name, p.Age)</span><br><span class="line">	<span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> integer <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *integer)</span> <span class="title">printInt</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(*i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> cat Cat</span><br><span class="line">	cat.name = <span class="string">&quot;Tom&quot;</span></span><br><span class="line">	cat.age = <span class="number">1</span></span><br><span class="line">	cat.mapAddress = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>)</span><br><span class="line">	cat.mapAddress[<span class="number">0</span>] = <span class="string">&quot;Home&quot;</span></span><br><span class="line">	cat.mapAddress[<span class="number">1</span>] = <span class="string">&quot;Wild&quot;</span></span><br><span class="line"></span><br><span class="line">	fmt.Println(cat)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//复制过来的catCopy与本身cat没有联系</span></span><br><span class="line">	catCopy := cat</span><br><span class="line">	catCopy.age = <span class="number">2</span></span><br><span class="line">	fmt.Println(cat)</span><br><span class="line">	fmt.Println(catCopy)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//结构体初始化的几种方式</span></span><br><span class="line">	<span class="comment">//new方法产生的对象其实返回的是一个指针类型，按道理来说应该写成 （*cat1.name = &quot;T&quot;但是go底层做了优化，可以直接写成下面的方式</span></span><br><span class="line">	<span class="keyword">var</span> cat1 *Cat = <span class="built_in">new</span>(Cat)</span><br><span class="line">	cat1.name = <span class="string">&quot;T&quot;</span></span><br><span class="line">	cat1.age = <span class="number">20</span></span><br><span class="line">	fmt.Println(cat1)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> cat2 *Cat = &amp;Cat&#123;&#125;</span><br><span class="line">	cat2.name = <span class="string">&quot;OO&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//在结构体中所有的元素在内存中都是连续存在的，即使是这里的指针作为结构体内的元素指向他们的指针也是连续的，但是指针本身有可能并不是连续的，因为这是操作系统随机分配的</span></span><br><span class="line">	<span class="keyword">var</span> rect01 = Rect&#123;&amp;Point&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &amp;Point&#123;<span class="number">3</span>, <span class="number">4</span>&#125;&#125;</span><br><span class="line">	fmt.Println(rect01)</span><br><span class="line"></span><br><span class="line">	fmt.Println(*rect01.left, <span class="string">&quot; &quot;</span>, *rect01.right)</span><br><span class="line">	fmt.Println(&amp;rect01.left, <span class="string">&quot; &quot;</span>, &amp;rect01.right) <span class="comment">//结构体中的元素，也就是指向指针的指针的元素</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//结构体之间如果想要相互转换，必须结构体中的所有字段都相同（包括名字、类型、个数）</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//结构体序列化</span></span><br><span class="line">	perosn := Person&#123;<span class="string">&quot;Cooper&quot;</span>, <span class="number">23</span>&#125;</span><br><span class="line">	josnstr, _ := json.Marshal(perosn)</span><br><span class="line">	fmt.Println(<span class="keyword">string</span>(josnstr))</span><br><span class="line"></span><br><span class="line">	<span class="comment">//调用方法</span></span><br><span class="line">	perosn.test()</span><br><span class="line">	perosn.testPoint()</span><br><span class="line">	(&amp;perosn).testPoint()</span><br><span class="line"></span><br><span class="line">	<span class="comment">//不一定非要是结构体才可以绑定方法，普通的变量类型也可以绑定方法(但是必须要给变量取一个别名，这样的话go会认为这是一个用户自定义的类型)，例如</span></span><br><span class="line">	<span class="keyword">var</span> testInt integer = <span class="number">10</span></span><br><span class="line">	testInt.printInt()</span><br><span class="line"></span><br><span class="line">	<span class="comment">//结构体的toString方法</span></span><br><span class="line">	<span class="comment">//只要对结构体的String方法进行重写在fmt.Println(person)的时候就会默认调用编写的String方法</span></span><br><span class="line">	perosn1 := Person&#123;<span class="string">&quot;Cooper&quot;</span>, <span class="number">22</span>&#125;</span><br><span class="line">	fmt.Println(perosn1)</span><br><span class="line">	fmt.Println(&amp;perosn1) <span class="comment">//此处一定要添加&amp;，否则会和原来输出的一样</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//通过变量指针调用方法，依然是值传递</span></span><br><span class="line">	(&amp;perosn).test() <span class="comment">//虽然这里使用指针调用的方法，但是原来的person依旧没有改变，不信看下面p.Name还是原来的  此处可以得出一个结论就是无论外面调用者的身份是什么（指针调用还是变量调用），始终唯一的结果都和方法的参数有关，参数为值那么就是值引用，参数为指针，那么就是地址引用</span></span><br><span class="line">	fmt.Println(perosn)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>工厂模式 （相当于对象中的构造函数）</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//model包中</span></span><br><span class="line"><span class="comment">//Car this is factory method demo</span></span><br><span class="line"><span class="keyword">type</span> car <span class="keyword">struct</span>&#123;</span><br><span class="line">	Name <span class="keyword">string</span></span><br><span class="line">	Age <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//GetNewCar 获取一个Car对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetNewCar</span><span class="params">(name <span class="keyword">string</span>,age <span class="keyword">int</span>)</span> *<span class="title">car</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;car&#123;</span><br><span class="line">		Name:name,</span><br><span class="line">		Age:age,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//main包中</span></span><br><span class="line"><span class="comment">//工厂模式  不直接在包里面对struct首字母进行大写，而是选择调用方法返回指针</span></span><br><span class="line">mycar:=model.GetNewCar(<span class="string">&quot;Audio&quot;</span>,<span class="number">1</span>)</span><br><span class="line">fmt.Println(*mycar)</span><br></pre></td></tr></table></figure></li>
<li><p>继承</p>
<p>将需要继承的直接写到对应的结构体里面，然后被继承的对象里有的方法对应的继承对象里面也有</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Student is a test</span></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name <span class="keyword">string</span></span><br><span class="line">	score <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(stu *Student)</span> <span class="title">ShowInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;name = %v,score = %v\n&quot;</span>,stu.Name,stu.score)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(stu *Student)</span> <span class="title">SetScore</span><span class="params">(score <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	stu.score = score</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(stu *Student)</span> <span class="title">SetName</span><span class="params">(name <span class="keyword">string</span>)</span></span>&#123;</span><br><span class="line">	stu.Name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Pupil is a test</span></span><br><span class="line"><span class="keyword">type</span> Pupil <span class="keyword">struct</span>&#123;</span><br><span class="line">	Student</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Graduate is a test</span></span><br><span class="line"><span class="keyword">type</span> Graduate <span class="keyword">struct</span>&#123;</span><br><span class="line">	Student</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>结构体可以使用嵌套匿名字段的所有字段和方法，不管首字母是大写还是小写</p>
</li>
<li><p>结构体可以多重继承</p>
<p>如果一个结构体中嵌套了&gt;1的匿名结构体并且有匿名字段中有相同的属性，那么被继承的结构体调用该属性时需要具体点到是哪个匿名结构体的属性</p>
</li>
</ul>
</li>
<li><p>接口</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201012093345.png" alt="image-20201011145614978" style="zoom:50%;" /></li>
</ol>
<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20201012093055141.png" alt="image-20201012093055141" style="zoom:50%;" />

<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201012093930.png" alt="image-20201012093831671" style="zoom:50%;" />

<ul>
<li>接口当中不能定义函数名相同的方法</li>
</ul>
<ol start="6">
<li><p>channel</p>
<ul>
<li><p>特点：</p>
<ul>
<li><p>是一个队列</p>
</li>
<li><p>线程安全，多个goroutine访问时不需要加锁</p>
</li>
<li><p>channel是有类型的</p>
</li>
<li><p>channel是引用类型  这就说明了只要将channel传递给多个函数，那么调用的始终都是同一个channel</p>
</li>
<li><p>channel必须初始化才能写入数据，即make后才能使用  make(chan int,3)</p>
</li>
</ul>
</li>
<li><p>定义</p>
<p>var 变量名 chan 类型</p>
<p>比如 var intChan chan int 即该管道只能写入整数</p>
</li>
<li><p>操作</p>
<ul>
<li><p>写入数据</p>
<p>intChan&lt;- 10</p>
</li>
<li><p><font color=red>加入的数据不能超过其长度的，如果加入的超过本身的长度会导致死锁</font></p>
</li>
<li><p>取数据</p>
<p>Var  num int</p>
<p>num=&lt;-intChan</p>
</li>
<li><p><font color=red>在没有使用协程的情况下，如果我们的管道数据已经全部取出，再取就会报告死锁</font></p>
<p>因为此时后面的代码永远无法执行</p>
</li>
<li><p>管道内的数据可以不接受，取出来之后直接扔掉，也就是&lt;-intChan</p>
</li>
<li><p>如果想在管道内放不同的类型的变量，那么定义到时候需要使用 var allChan chan interface{}，取出来的时候记得使用类型断言</p>
</li>
<li><p>管道关闭</p>
<p>使用内置的函数close</p>
<p><font color=red>当channel关闭后，就不能再向channel写数据了，但是仍然可以从该channel读数据</font></p>
<p>close(intChan)</p>
</li>
<li><p>管道遍历</p>
<p>不要用for循环，因为管道的长度会发生变化</p>
<p><font color=red>使用for-range进行遍历,但是需要记得将管道关闭，否则最后会出现死锁</font></p>
<p>for v:=range 管道名{</p>
<p>​    fmt.Println(“v=”,v)</p>
<p>}</p>
</li>
<li><p>如果想要存放任意类型数据到管道中，那么可以将管道的类型声明为空接口，最终取出来的时候要对其使用类型断言，但是不能直接取出来用，会报错的</p>
</li>
</ul>
</li>
<li><p>注意事项</p>
<p>当管道的读写速度不匹配的时候，不会发生死锁，但是<font color=red>只有写没有读便会死锁</font></p>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>父子项目配置</title>
    <url>/2022/01/07/Gradle/%E7%88%B6%E5%AD%90%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<ol>
<li><p>在父项目的settings.gradle中设置，一般来说会自动生成</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210403161246.png" alt="image-20210403161244731"></p>
</li>
<li><p>子项目2调用子项目3</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210403161352.png" alt="image-20210403161350212"></p>
</li>
<li><p>子项目共有的配置都在父项目的配置中，子项目项目想要特殊的jar则直接在本项目中进行引入</p>
</li>
<li><p>配置文件</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;java&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sourceCompatibility = <span class="number">1.8</span> <span class="comment">//java版本</span></span><br><span class="line"></span><br><span class="line">group <span class="string">&#x27;org.cooper&#x27;</span></span><br><span class="line">version <span class="string">&#x27;1.0-SNAPSHOT&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 指定使用的仓库，mavenCentral表示使用中央仓库，此刻项目中所有的jar包都会从中央仓库进行下载到本地目录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenLocal()<span class="comment">//先去本地找jar包</span></span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    testImplementation <span class="string">&#x27;org.junit.jupiter:junit-jupiter-api:5.6.0&#x27;</span></span><br><span class="line">    testRuntimeOnly <span class="string">&#x27;org.junit.jupiter:junit-jupiter-engine&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test &#123;</span><br><span class="line">    useJUnitPlatform()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>grovvy语法    </p>
</li>
</ol>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">println(<span class="string">&quot;Hello world&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> i = <span class="number">18</span></span><br><span class="line">println(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">list&lt;&lt;<span class="number">4</span></span><br><span class="line">println(list)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> map = [<span class="string">&quot;key1&quot;</span>:<span class="string">&quot;Cooper&quot;</span>,<span class="string">&quot;key2&quot;</span>:<span class="string">&quot;foobar&quot;</span>]</span><br><span class="line">map.key3 = <span class="string">&quot;non&quot;</span></span><br><span class="line">println(map)</span><br><span class="line">println(map.get(<span class="string">&quot;key3&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//闭包</span></span><br><span class="line"><span class="comment">//定义一个闭包</span></span><br><span class="line"><span class="keyword">def</span> b1 = &#123;</span><br><span class="line">    println(<span class="string">&quot;Wowoc&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义这个方法，方法里面需要闭包类型的参数</span></span><br><span class="line"><span class="keyword">def</span> method1(Closure closure)&#123;</span><br><span class="line">    closure()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用方法method1</span></span><br><span class="line">method1(b1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个带参数的闭包</span></span><br><span class="line"><span class="keyword">def</span> b2 = &#123;</span><br><span class="line">    v-&gt;println(<span class="string">&quot;Hello $&#123;v&#125;&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">def</span> method2(Closure closure)&#123;</span><br><span class="line">    closure(<span class="string">&quot;Cooper&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">method2(b2)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Gradle</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>istio</title>
    <url>/2022/01/07/Istio/Istio/</url>
    <content><![CDATA[<h3 id="Istio架构"><a href="#Istio架构" class="headerlink" title="Istio架构"></a>Istio架构</h3><p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210823152918.png" alt="image-20210823152916610"></p>
<h3 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h3><ul>
<li>连接</li>
<li>安全</li>
<li>策略</li>
<li>观察</li>
</ul>
<h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><ul>
<li><p>Pilot</p>
<p>服务发现和路由规则</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210823160751.png" alt="image-20210823160750367"></p>
<ul>
<li><p>Platform Adapter</p>
<p>用来对接不同注册中心厂商，比如Eureka、etcd</p>
</li>
<li><p>Abstract model</p>
<p>处理Platform Adapter对接的不同平台，从特定平台细节中解耦</p>
</li>
<li><p>Envoy API</p>
<p>负责与Pod中的Envoy代理进行通信，主要包括服务发现还有流量控制规则转发给Envoy</p>
</li>
</ul>
</li>
<li><p>Mixer （在Istio架构中不是必须的）</p>
<p>控制策略，比如对服务调用限速</p>
<p>Mixer模块</p>
<ul>
<li><p>Policy</p>
<p>用于向Envoy提供准入控制策略，黑白名单控制，速率限制等策略</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210823161957.png" alt="image-20210823161956648"></p>
</li>
<li><p>Telemetry</p>
<p>为Envoy提供数据上报和日志搜集服务，以用于监控告警和日志查询</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210823161632.png" alt="image-20210823161631355"></p>
<p>​    Adapter适配的监控容器，比如普罗米修斯，就是搜集数据</p>
</li>
<li><p>Citadel （在Istio架构中不是必须的）</p>
<p>管理各个服务的密钥和证书</p>
<p>起到安全作用，可以保证服务之间的通信安全</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210823162339.png" alt="image-20210823162338760"></p>
</li>
<li><p>Envoy</p>
<p>代理，处理服务的流量</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210823165645.png" alt="image-20210823165644677"></p>
<ul>
<li><p>pilot-agent</p>
<ul>
<li><p>用于生成envoy配置</p>
</li>
<li><p>负责启动envoy</p>
</li>
<li><p>监控envoy</p>
</li>
</ul>
</li>
<li><p>envoy进程的作用</p>
<ul>
<li>负责拦截pod流量</li>
<li>从控制平面pilot获取配置和服务发现</li>
<li>上报数据给控制平面组件mixer</li>
</ul>
</li>
</ul>
</li>
<li><p>galley</p>
<p>相当于是微服务中的配置中心，给其他组件提供支持，统一管理配置文件</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210823162743.png" alt="image-20210823162740704"></p>
<ul>
<li><p>resource</p>
<p>yaml配置文件</p>
</li>
</ul>
</li>
</ul>
<p>大概的流程：</p>
<ul>
<li>流量经过Envoy</li>
<li>从Pilot中获取服务以及后端服务的负载均衡规则</li>
<li>在Citadel中获取对应的密钥（安全相关的证书等等）</li>
<li>向调用的服务发生请求</li>
<li>将数据上报至Mixer，对流量进行监控</li>
</ul>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol>
<li><p>选择版本</p>
<p><a href="https://github.com/istio/istio/releases">https://github.com/istio/istio/releases</a></p>
</li>
<li><p>下载后解压</p>
</li>
<li><p>解压后各文件作用</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210824142917.png" alt="image-20210824142915925"></p>
</li>
</ol>
<ul>
<li><p>bin</p>
<p>命令行方式与istio进行交互</p>
</li>
<li><p>manifests</p>
<p>配置文件</p>
</li>
<li><p>samples</p>
<p>例子</p>
</li>
</ul>
<ol start="4">
<li><p>配置环境变量</p>
<p>export PATH=$PATH:/root/istio-1.11.0/bin</p>
</li>
<li><p>查看istio版本</p>
<p><code>istio version</code></p>
</li>
<li><p>查看有哪些配置文件</p>
<p><code>istioctl profile list</code></p>
</li>
<li><p>查看k8s资源文件</p>
<p><code>istioctl manifest generate &gt; generate.yaml</code></p>
<p>如果想要卸载istioctl，可以直接运行</p>
<p><code>istioctl manifest generate --set profile=demo | kubectl delete -f -</code></p>
</li>
<li><p>安装</p>
<p><code>istioctl install</code></p>
<p>默认安装的是default</p>
</li>
<li><p>注意事项</p>
<ul>
<li>镜像的准备 （k8s每台机器上都安装）<ul>
<li>istio/pilot</li>
<li>istio/proxyv2</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="注入sidecar"><a href="#注入sidecar" class="headerlink" title="注入sidecar"></a>注入sidecar</h3><h4 id="手动注入sidecar"><a href="#手动注入sidecar" class="headerlink" title="手动注入sidecar"></a>手动注入sidecar</h4><ul>
<li><p>默认的情况下的yaml文件都是没有sidecar的，因此可以选择手动注入sidecar</p>
<p>比如说官方给的例子中的httpbin中的yaml文件只有一个image，当我们进行手动注入的时候</p>
<p><code>istioctl kube-inject -f httpbin-nodeport.yaml</code></p>
<p>会为当前的yaml文件添加一个代理的镜像</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210824210251.png" alt="image-20210824210237716" style="zoom:50%;" />

<p>那么我们在创建服务的时候执行</p>
<p><code>kubectl apply -f &lt;(istioctl kube-inject -f httpbin-nodeport.yaml)</code></p>
</li>
</ul>
<h4 id="自动注入sidecar"><a href="#自动注入sidecar" class="headerlink" title="自动注入sidecar"></a>自动注入sidecar</h4><p>我们可以给namespace打上标签<code>istio-injection=enabled</code>,就可以自动给创建的资源加上sidecar</p>
<ul>
<li><p>查看标签</p>
<p><code>kubectl get ns --show-labels</code></p>
</li>
<li><p>打上标签</p>
<p><code>kubectl label namespace &#123;ns名称&#125; istio-injection=enabled</code></p>
</li>
</ul>
<h5 id="查看具体情况"><a href="#查看具体情况" class="headerlink" title="查看具体情况"></a>查看具体情况</h5><ul>
<li><code>kubectl exec -it httpbin-6f76bc46f9-nckdd -c istio-proxy bash</code></li>
<li><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210824213620.png" alt="image-20210824213613768" style="zoom:50%;" /></li>
</ul>
<h3 id="Istio流量管理核心资源"><a href="#Istio流量管理核心资源" class="headerlink" title="Istio流量管理核心资源"></a>Istio流量管理核心资源</h3><h4 id="VirtualService"><a href="#VirtualService" class="headerlink" title="VirtualService"></a>VirtualService</h4><ul>
<li><p>作用</p>
<ul>
<li><p>定义路由规则</p>
</li>
<li><p>描述满足条件的请求去哪里</p>
</li>
</ul>
</li>
<li><p>图解</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210824220133.png" alt="image-20210824220126821" style="zoom:50%;" /></li>
<li><p>VirtualService案例</p>
<p>httpbin中的httpbin-gateway.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Gateway</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">httpbin-gateway</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">istio:</span> <span class="string">ingressgateway</span></span><br><span class="line">  <span class="attr">servers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span></span><br><span class="line">      <span class="attr">number:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">HTTP</span></span><br><span class="line">    <span class="attr">hosts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">VirtualService</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">httpbin</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">hosts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">  <span class="attr">gateways:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">httpbin-gateway</span></span><br><span class="line">  <span class="attr">http:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">route:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">destination:</span></span><br><span class="line">        <span class="attr">host:</span> <span class="string">httpbin</span> <span class="comment">#指定服务名称</span></span><br><span class="line">        <span class="attr">port:</span></span><br><span class="line">          <span class="attr">number:</span> <span class="number">8000</span> <span class="comment">#service端口</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>查看已经创建了的virtualService的服务</p>
<p><code>kubectl get vs</code></p>
</li>
<li><p>DestinationRule</p>
<p>定义虚拟服务路由目标的真实地址，即子集，支持多种负载均衡策略</p>
<ul>
<li>随机</li>
<li>权重</li>
<li>最小请求数</li>
</ul>
</li>
<li><p>DestinationRule例子</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span> </span><br><span class="line"><span class="attr">kind:</span> <span class="string">DestinationRule</span> </span><br><span class="line"><span class="attr">metadata:</span> </span><br><span class="line">	<span class="attr">name:</span> <span class="string">nginx</span> </span><br><span class="line"><span class="attr">spec:</span> </span><br><span class="line">	<span class="attr">host:</span> <span class="string">nginx</span> </span><br><span class="line">	<span class="attr">subsets:</span> </span><br><span class="line">	<span class="bullet">-</span> <span class="attr">name:</span> <span class="string">v1</span> </span><br><span class="line">	<span class="attr">labels:</span> </span><br><span class="line">		<span class="attr">version:</span> <span class="string">v1</span> </span><br><span class="line">	<span class="bullet">-</span> <span class="attr">name:</span> <span class="string">v2</span> </span><br><span class="line">	<span class="attr">labels:</span> </span><br><span class="line">		<span class="attr">version:</span> <span class="string">v2</span> <span class="string">I</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="gateway"><a href="#gateway" class="headerlink" title="gateway"></a>gateway</h4><ul>
<li><p>作用</p>
<p>和已经创建的服务进行绑定，将流量路由到指定的服务的sidecar上，相当于是负载均衡的作用</p>
</li>
<li><p>例子</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Gateway</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">httpbin-gateway</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">istio:</span> <span class="string">ingressgateway</span></span><br><span class="line">  <span class="attr">servers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span></span><br><span class="line">      <span class="attr">number:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">HTTP</span></span><br><span class="line">    <span class="attr">hosts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="灰度发布"><a href="#灰度发布" class="headerlink" title="灰度发布"></a>灰度发布</h3><ul>
<li><p>原理</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210825214555.png" alt="image-20210825214553040"></p>
</li>
<li><p>流程</p>
<ol>
<li>创建系统级别的ingress gateway</li>
<li>创建gateway</li>
<li>创建pods</li>
<li>创建virtualService</li>
<li>创建DestinationRule</li>
</ol>
</li>
</ul>
<h4 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h4><p>yaml文件在<code>/root/istio-1.11.0/samples/addons</code>下</p>
<ul>
<li><code>kubectl apply -f . -n istio-system</code></li>
</ul>
<p>需要注意的是：</p>
<ul>
<li>kiali的yaml文件对于镜像是Always的策略，需要改成IfNotPresent</li>
<li>需要将ClusterIP改为NodePort</li>
</ul>
<p>各个组件的作用</p>
<ul>
<li><p>tracing</p>
<p>监控链路</p>
</li>
<li><p>kiali</p>
<p>微服务Graph</p>
</li>
<li><p>grafana</p>
</li>
</ul>
]]></content>
      <categories>
        <category>istio</category>
      </categories>
      <tags>
        <tag>istio</tag>
      </tags>
  </entry>
  <entry>
    <title>服务网格起源</title>
    <url>/2022/01/07/Istio/%E6%9C%8D%E5%8A%A1%E7%BD%91%E6%A0%BC%E8%B5%B7%E6%BA%90/</url>
    <content><![CDATA[<h3 id="微服务的缺点"><a href="#微服务的缺点" class="headerlink" title="微服务的缺点"></a>微服务的缺点</h3><ul>
<li>代码侵入性太强</li>
<li>微服务拆分越细，但是维护成本太高</li>
<li>微服务是多语言调用，维护成本高</li>
<li>微服务框架不断版本升级，会导致整个系统的代码可能出现问题 （比如之前API网关是使用zuul，不是SpringCloud gateway，而后者是使用webFlux技术则有些原先的业务代码很有可能出现问题）</li>
</ul>
<h3 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h3><p>使用sidecar设计，将业务代码与通信完全分离</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210823151424.png" alt="image-20210823151423173"></p>
]]></content>
      <categories>
        <category>istio</category>
      </categories>
      <tags>
        <tag>istio</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaEE三层结构</title>
    <url>/2022/01/07/JavaWeb/JavaEE%E4%B8%89%E5%B1%82%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200719162824.png" alt="image-20200719162803545"></p>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>Web中斜杠的含义</title>
    <url>/2022/01/07/JavaWeb/Web%E4%B8%AD%E6%96%9C%E6%9D%A0%E7%9A%84%E5%90%AB%E4%B9%89/</url>
    <content><![CDATA[<p>在Web中/是一种相对路径</p>
<ul>
<li><p>如果被浏览器解析 得到的地址是<a href="http://ip:prot/">http://ip:prot/</a></p>
</li>
<li><p>如果被服务器解析  得到的地址是<a href="http://ip:port/工程路径">http://ip:port/工程路径</a></p>
<ul>
<li><p>```xml<br><url-pattern>/servlet</url-pattern></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  servletContext.getRealPath(&quot;/&quot;)</span><br></pre></td></tr></table></figure></li>
<li><pre><code class="java">request.getRequestDispatcher(&quot;/&quot;)
</code></pre>
</li>
</ul>
</li>
<li><p><strong><font color = red>特殊情况</font></strong></p>
<ul>
<li>response.sendRedirect(“/“) 把/发送给浏览器解析，得到<a href="http://ip:port/">http://ip:port/</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>中文乱码</title>
    <url>/2022/01/07/JavaWeb/%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</url>
    <content><![CDATA[<h4 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h4><h5 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h5><p>​    该情况主要发生在发送post请求时参数带有中文，get请求再次情景下不会出现乱码</p>
<h5 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h5><p>​    在doPost方法中调用setCharacterEncoding（“UTF-8”）</p>
<p>​    该方法一定要写在最前面，否则不生效。</p>
<hr>
<h4 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h4><h5 id="场景-1"><a href="#场景-1" class="headerlink" title="场景"></a>场景</h5><p>​    response传递中文字符浏览器端出现乱码</p>
<h5 id="解决办法-1"><a href="#解决办法-1" class="headerlink" title="解决办法"></a>解决办法</h5><p><font color = red><strong>以下方法必须写在获取流之前</strong></font></p>
<p>方法一：</p>
<ol>
<li><p> 设置服务器端字符集</p>
</li>
<li><p>通过响应头设置浏览器端字符集</p>
<p> resp.setHeader(“Content-type”,”text/html;charset=UTF-8”)</p>
</li>
</ol>
<p>方法二：</p>
<p>​    resp.setContentType(“text/html;charset=UTF-8”)</p>
<p>​    这一行代码同时设置客户端和服务端都使用UTF-8</p>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>表单重复提交</title>
    <url>/2022/01/07/JavaWeb/%E8%A1%A8%E5%8D%95%E9%87%8D%E5%A4%8D%E6%8F%90%E4%BA%A4/</url>
    <content><![CDATA[<h5 id="表单重复提交的场景"><a href="#表单重复提交的场景" class="headerlink" title="表单重复提交的场景"></a>表单重复提交的场景</h5><ol>
<li><p>提交完表单服务器使用请求来进行页面跳转，这个时候用户按下F5会发起最后一次请求。</p>
<p>解决方案：</p>
<p>​    使用重定向进行跳转</p>
</li>
<li><p> 用户正常提交给服务器，但是由于网络原因导致用户迟迟未收到服务器的响应，用户继续进行提交操作。</p>
</li>
<li><p>用户正常提交给服务器，服务器也没有延迟。用户回退浏览器进行重新提交。</p>
<p> 2和3的解决方案：</p>
<p> ​    使用谷歌验证码</p>
<p> 原理：</p>
<p> ​    谷歌验证码生成之后会在session存储一个值，该值就是验证码。我们需要用户根据图片输入正确的验证码，当用户输入的验证码与session中存储的验证码一致时，我们就执行对应的操作与此同时将该验证码从session中删除。</p>
<p> 使用步骤：</p>
<pre><code> 1. 导入谷歌验证码Jar包
 2. ![image-20200725214907317](https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200725214915.png)
</code></pre>
<ol start="3">
<li>在表单中使用img标签去显示验证码并使用它</li>
</ol>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200725215049.png" alt="image-20200725215048014"></p>
<p>​          4. 在服务器端获取谷歌生成的验证码与客户端发送过来的验证码进行比较。</p>
<p>​            </p>
<h5 id="验证码切换："><a href="#验证码切换：" class="headerlink" title="验证码切换："></a>验证码切换：</h5><p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200725220410.png" alt="image-20200725220227232"></p>
<h5 id="缓存对于浏览器造成的影响："><a href="#缓存对于浏览器造成的影响：" class="headerlink" title="缓存对于浏览器造成的影响："></a>缓存对于浏览器造成的影响：</h5><p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200725220402.png" alt="image-20200725220401243">    </p>
<h5 id="为了防止下面的缓存对于验证码的影响因此-url-new-Date"><a href="#为了防止下面的缓存对于验证码的影响因此-url-new-Date" class="headerlink" title="为了防止下面的缓存对于验证码的影响因此  url+new Date()"></a>为了防止下面的缓存对于验证码的影响因此  url+new Date()</h5><p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200725220328.png" alt="image-20200725220326591"></p>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>请求转发特点</title>
    <url>/2022/01/07/JavaWeb/%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91%E7%9A%84%E7%89%B9%E7%82%B9/</url>
    <content><![CDATA[<ul>
<li>地址栏不会发生变化</li>
<li>是同一次请求</li>
<li>共享request域中的数据</li>
<li>可以转发到WEB-INF目录下</li>
<li>无法访问该工程以外的资源</li>
</ul>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>请求重定向</title>
    <url>/2022/01/07/JavaWeb/%E8%AF%B7%E6%B1%82%E9%87%8D%E5%AE%9A%E5%90%91/</url>
    <content><![CDATA[<h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><p>方法一：</p>
<p>​    1. 设置状态码</p>
<p>​        resp.setStatus(302)</p>
<pre><code>2. resp.setHeader(&quot;Location&quot;,xxxxx) (xxxx为具体重定向地址)
</code></pre>
<p>方法二：</p>
<p>​    resp.setRedirect(xxxxxx)  (xxxx为具体重定向地址)</p>
<p>特点：</p>
<pre><code>- 浏览器地址栏会发生变化
- 会向服务器发送两次请求
- 不共享request域中的资源，因此两次请求request不是同一个request，所以不能共享
- 不能访问WEB-INF下的资源
- 可以访问工程以外的资源
</code></pre>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>回调函数</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p><a href="https://www.cnblogs.com/xrq730/p/6424471.html">参考</a></p>
<p>定义：</p>
<p>​    回调函数会向参数一样插入到函数中，然后在特定的时机中被调用</p>
<p>与之类似的几种调用方法：</p>
<ul>
<li><p>同步调用</p>
<p>类A的方法a()调用类B的方法b()，一直等待b()方法执行完毕，a()方法继续往下走。<strong>这种调用方式适用于方法b()执行时间不长的情况</strong>，因为b()方法执行时间一长或者直接阻塞的话，a()方法的余下代码是无法执行下去的，这样会造成整个流程的阻塞</p>
</li>
<li><p>异步调用</p>
<p>异步调用是为了解决同步调用可能出现阻塞，导致整个流程卡住而产生的一种调用方式。<strong>类A的方法方法a()通过新起线程的方式调用类B的方法b()，代码接着直接往下执行</strong>，这样无论方法b()执行时间多久，都不会阻塞住方法a()的执行。但是这种方式，由于方法a()不等待方法b()的执行完成，在方法a()需要方法b()执行结果的情况下（视具体业务而定，有些业务比如启异步线程发个微信通知、刷新一个缓存这种就没必要），必须通过一定的方式对方法b()的执行结果进行监听。</p>
</li>
<li><p>回调</p>
<p>在面向对象的语言中，<strong>回调则是通过接口或抽象类来实现的</strong>，我们把实现这种接口的类称为回调类，回调类的对象称为回调对象。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>类加载器</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/</url>
    <content><![CDATA[<p>类加载器的层次结构</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200712211035.png" alt="image-20200712211034088"></p>
<p>类的加载模式：</p>
<p>代理模式：交给其他加载器加载指定的类</p>
<p><strong>一般类的加载模式都是双亲委托机制</strong></p>
<p>双亲委托机制：</p>
<p>​    某个特定的类加载器接收到加载某个类的请求之后，自己不会立刻去加载这个类，而是先去自己的父类加载器去查看其父类加载器是否可以对该类进行加载，依次往上传递，直到最顶层的父类。</p>
<p>​    <strong>目的：为了保护Java核心库的安全</strong></p>
<p>tomact服务器加载类的话与传统的类加载器的加载顺序不同，它是先调用自己的类加载器，如果不合适的话会传递给其父类类加载器。与传统的类加载器加载方向相反。</p>
<p><strong>不同类加载器加载同一个类会被JVM认为是两个不同的类</strong></p>
<p>未来安全起见，可以将类进行加密操作，然后在类加载器中对该类进行解密重新进行加载。常见的操作比如：取反</p>
<h3 id="常见双亲委托加载机制的缺陷以及解决办法："><a href="#常见双亲委托加载机制的缺陷以及解决办法：" class="headerlink" title="常见双亲委托加载机制的缺陷以及解决办法："></a>常见双亲委托加载机制的缺陷以及解决办法：</h3><p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200713100553.png" alt="image-20200713100406838"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>类的初始化</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/%E7%B1%BB%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
    <content><![CDATA[<h3 id="类的初始化"><a href="#类的初始化" class="headerlink" title="类的初始化"></a>类的初始化</h3><p><a href="https://www.cnblogs.com/zhguang/p/3154584.html">参考</a></p>
<p>步骤：</p>
<h4 id="加载-gt-链接-gt-初始化"><a href="#加载-gt-链接-gt-初始化" class="headerlink" title="加载-&gt;链接-&gt;初始化"></a>加载-&gt;链接-&gt;初始化</h4><h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><p>由类加载器执行，查找字节码，并创建一个Class对象（只是创建）</p>
<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><ol>
<li><p>验证</p>
<ul>
<li>验证加载类的信息是否符合JVM规范，又没有安全方面的问题。</li>
</ul>
</li>
<li><p>准备</p>
<ul>
<li>为类变量（static变量）分配内存设置初始值（**不是类中指定的初始值，而是0，null这种初始值 **），该内存在方法区中分配。</li>
</ul>
</li>
<li><p>解析</p>
<ul>
<li><p>将虚拟机常量池中的符号引用替换为直接引用</p>
<p><strong>解析的过程就是对类中的接口、类、方法、变量的符号引用进行解析并定位，解析成直接引用（符号引用就是编码是用字符串表示某个变量、接口的位置，直接引用就是根据符号引用翻译出来的地址），并保证这些类被正确的找到</strong>。</p>
</li>
</ul>
</li>
</ol>
<h3 id="过程详解"><a href="#过程详解" class="headerlink" title="过程详解"></a>过程详解</h3><p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200712143521.png" alt="image-20200712143417217"></p>
<p>首先先要对Demo01进行加载：</p>
<ul>
<li><p>在方法区中加载Demo01运行的数据，主要包括：</p>
<ul>
<li>静态变量、静态方法</li>
<li>常量池</li>
<li>类的代码</li>
</ul>
</li>
<li><p>于此同时在堆中生成该类的对象，也可以说是该类的反射对象</p>
<p>通过该对象可以访问到该类在方法区存放的结构</p>
</li>
<li><p>然后加载A类，过程和Demo01差不多</p>
</li>
<li><p>Demo01的main方法执行时会形成一个栈，然后会有一个a变量存储，但是此时</p>
<p>a = null，接着new A（）会调用A的构造器并将该构造器压栈（因为构造器本身来说也是一个方法），执行完之后会在堆中生成A的一个对象，然后将该对象的地址赋值给a</p>
</li>
<li><p>在加载完成并且连链接成功后，A会在初始化的时候调用静态方法和静态变量</p>
</li>
</ul>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p><strong>类只加载一次</strong></p>
<ol>
<li>初始化阶段执行类的构造器<clinit>（）的过程，该构造器是由编译器自动收集类中的所有变量赋值动作和静态语句块合并而成。</li>
<li>当初始化一个类的时候如果发现该类的父类还未进行初始化，那么就需要先对其父类进行初始化</li>
<li>虚拟机会保证一个类的<clinit>（）方法在多线程环境中正确的加锁同步</li>
<li>当访问一个类的静态域时，只有真正声明这个域的类才会被初始化</li>
</ol>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200712151438.png" alt="image-20200712151435227"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Controller</title>
    <url>/2022/01/07/K8S/Controller/</url>
    <content><![CDATA[<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>在集群上管理和运行容器的对象</p>
<h3 id="Pod和Controller的关系"><a href="#Pod和Controller的关系" class="headerlink" title="Pod和Controller的关系"></a>Pod和Controller的关系</h3><p>Pod是通过Controller实现应用的运维。比如伸缩、滚动升级等等</p>
<p>Pod和Controller之间通过label标签建立关系</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210704124442.png" alt="image-20210701212049980"></p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210704124458.png" alt="image-20210701212403947"></p>
<h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><p>本质上是replicas的升级版本，他是在replicas的基础上做的</p>
<h3 id="Deployment应用场景"><a href="#Deployment应用场景" class="headerlink" title="Deployment应用场景"></a>Deployment应用场景</h3><ul>
<li>部署无状态应用（web服务，微服务）</li>
<li>管理Pod和ReplicateSet</li>
<li>部署，滚动升级等功能</li>
</ul>
<h3 id="Deployment发布过程"><a href="#Deployment发布过程" class="headerlink" title="Deployment发布过程"></a>Deployment发布过程</h3><ol>
<li><p>导出yaml文件</p>
<p><code>kubectl create deployment &#123;name&#125; --image=&#123;image name&#125; -o ymal --dry-run &gt; yaml文件地址</code></p>
</li>
<li><p>使用yaml文件部署应用</p>
<p><code>kubectl apply -f &#123;yaml文件&#125;</code></p>
</li>
<li><p>对外发布（暴露对外端口号）</p>
<p><code>kubectl expose deployment &#123;deployment name&#125; --port=&#123;应用内部自己的端口号&#125; --type=NodePort --targte-port=&#123;对外访问目标端口号&#125; --name=&#123;name&#125; -o yaml &gt; yaml文件地址 </code></p>
<p><code>kubectl apply -f &#123;yaml文件&#125;</code></p>
</li>
</ol>
<h3 id="应用升级、回滚和弹性伸缩"><a href="#应用升级、回滚和弹性伸缩" class="headerlink" title="应用升级、回滚和弹性伸缩"></a>应用升级、回滚和弹性伸缩</h3><ul>
<li><p>升级</p>
<ul>
<li><p>应用升级</p>
<p><code>kubectl set image deployment &#123;name&#125; nginx = nginx:1.15</code></p>
</li>
<li><p>查看升级版本</p>
<p><code>kubectl rollout history deployment &#123;name&#125;</code></p>
</li>
<li><p>查看升级状态</p>
<p><code>kubectl rollout status depolyment &#123;name&#125;</code></p>
</li>
</ul>
</li>
<li><p>回滚</p>
<ul>
<li><p>回滚到上一个版本</p>
<p><code>kubectk rollout undo deployment &#123;name&#125;</code></p>
</li>
<li><p>回滚到指定的版本</p>
<p><code>kubectk rollout undo deployment &#123;name&#125; --to-version = &#123;version 编号&#125;</code></p>
</li>
</ul>
</li>
<li><p>弹性伸缩</p>
<p><code>kubectl scale deployment &#123;name&#125; --replicas=&#123;数量&#125;</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>K8S</category>
      </categories>
      <tags>
        <tag>K8S</tag>
      </tags>
  </entry>
  <entry>
    <title>DaemonSet</title>
    <url>/2022/01/07/K8S/DaemonSet/</url>
    <content><![CDATA[<h2 id="DaemonSet-简介"><a href="#DaemonSet-简介" class="headerlink" title="DaemonSet 简介"></a>DaemonSet 简介</h2><p><em>DaemonSet</em> 确保全部（或者一些）Node 上运行一个 Pod 的副本。当有 Node 加入集群时，也会为他们新增一个 Pod 。当有 Node 从集群移除时，这些 Pod 也会被回收。删除 DaemonSet 将会删除它创建的所有 Pod。</p>
<p>使用 DaemonSet 的一些典型用法：</p>
<ul>
<li>运行集群存储 daemon，例如在每个 Node 上运行 <code>glusterd</code>、<code>ceph</code>。</li>
<li>在每个 Node 上运行日志收集 daemon，例如<code>fluentd</code>、<code>logstash</code>。</li>
<li>在每个 Node 上运行监控 daemon，例如 Prometheus Node Exporter、<code>collectd</code>、Datadog 代理、New Relic 代理，或 Ganglia <code>gmond</code>。</li>
</ul>
<p>一个简单的用法是，在所有的 Node 上都存在一个 DaemonSet，将被作为每种类型的 daemon 使用。 一个稍微复杂的用法可能是，对单独的每种类型的 daemon 使用多个 DaemonSet，但具有不同的标志，和/或对不同硬件类型具有不同的内存、CPU要求。</p>
]]></content>
      <categories>
        <category>K8S</category>
      </categories>
      <tags>
        <tag>K8S</tag>
      </tags>
  </entry>
  <entry>
    <title>Ingress</title>
    <url>/2022/01/07/K8S/Ingress/</url>
    <content><![CDATA[<h3 id="出现的原因"><a href="#出现的原因" class="headerlink" title="出现的原因"></a>出现的原因</h3><ol>
<li><p>使用Service自带的NodePort方式对外暴露服务比较难以管理，特别是当port比较多的时候</p>
</li>
<li><p>实际访问中都是使用域名，根据不同域名跳转到不同端口服务</p>
</li>
<li><p>普通的servcie无法利用https进行访问</p>
</li>
</ol>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>将服务以域名的方式暴露对外访问</p>
<h3 id="Ingress与Pod的关系"><a href="#Ingress与Pod的关系" class="headerlink" title="Ingress与Pod的关系"></a>Ingress与Pod的关系</h3><ul>
<li><p>Pod和Ingress是通过Service关联的</p>
</li>
<li><p>Ingress作为同意入口，由Service关联一组Pod</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210704123929.png" alt="image-20210702140743176" style="zoom:50%;" /></li>
<li><p>最终是将ingress定义的规则转化为nginx里面的配置文件（对于nginx实现的ingress来说）</p>
</li>
</ul>
<h3 id="部署流程"><a href="#部署流程" class="headerlink" title="部署流程"></a>部署流程</h3><ol>
<li><p>创建应用（以Nginx为例），对外暴露端口使用NodePort</p>
<p><code>kubectl create depolyment web --image=nginx</code></p>
<p><code>kubectl expose deployment web --port=80 --target-port=80 --type=NodePort</code></p>
</li>
<li><p>部署ingress controller</p>
<p>下载对应的yaml文件，因为实现的方式各有不同，k8s官方没有提供实现，而是由各个厂商自己实现的，该例子是nginx实现的。</p>
<p>利用的官方的需要注意：</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210704123937.png" alt="image-20210702141341845" style="zoom:50%;" />

<p>hostNetwork需要是true</p>
<ol start="3">
<li><p>创建ingress规则，也是yaml文件，最后apply一下</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210704123945.png" alt="image-20210702141553084" style="zoom:50%;" /></li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>K8S</category>
      </categories>
      <tags>
        <tag>K8S</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s安全机制</title>
    <url>/2022/01/07/K8S/K8S%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ol>
<li><p>访问k8s集群的时候，需要经过三个步骤完成具体的操作</p>
<ol>
<li>认证</li>
<li>鉴权（授权）</li>
<li>准入控制</li>
</ol>
</li>
<li><p>在进行访问的时候，过程中都需要经过apiServer，apiServer做统一协调，就像门卫。</p>
<p>访问过程中需要证书，token，或者有用户名+密码，如果访问Pod，需要serviceAccount</p>
</li>
</ol>
<h3 id="详细过程"><a href="#详细过程" class="headerlink" title="详细过程"></a>详细过程</h3><ol>
<li><p>认证</p>
<ul>
<li><p>传输安全</p>
<p>对外不暴露8080端口，只能内部访问，对外使用端口6443</p>
</li>
<li><p>认证</p>
<p>客户端身份认证常用方式：</p>
<ul>
<li>https 证书认证，基于CA证书</li>
<li>http token认证，通过token识别用户</li>
<li>http 基本认证，通过用户名+密码识别用户</li>
</ul>
</li>
</ul>
</li>
<li><p>鉴权（授权）</p>
<p>基于RBAC进行鉴权操作（基于角色访问控制）</p>
<p>过程：</p>
<ol>
<li><p>创建命名空间</p>
</li>
<li><p>在新的命名空间中创建pod</p>
</li>
<li><p>创建角色</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210704124616.png" alt="image-20210702111337440" style="zoom:50%;" /></li>
<li><p>查看角色</p>
<p><code>kubectl get role -n &#123;namespace&#125;</code></p>
</li>
<li><p>创建角色绑定</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210704124623.png" alt="image-20210702111508939" style="zoom:50%;" /></li>
<li><p>查看角色绑定</p>
<p><code>kubectl get role,rolebinding -n &#123;namespace&#125;</code></p>
</li>
<li><p>使用证书识别身份</p>
<p>这个需要上网自己查找对应的格式</p>
</li>
</ol>
</li>
<li><p>准入控制</p>
<p>就是准入控制器的列表，如果列表有请求内容则通过，没有就拒绝</p>
</li>
</ol>
]]></content>
      <categories>
        <category>K8S</category>
      </categories>
      <tags>
        <tag>K8S</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s安装metrics</title>
    <url>/2022/01/07/K8S/K8S%E5%AE%89%E8%A3%85metrics/</url>
    <content><![CDATA[<ol>
<li><p>下载yaml文件</p>
<p><code>kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/download/v0.5.0/components.yaml</code></p>
</li>
<li><p>下载镜像</p>
<p><code>docker pull docker.io/bitnami/metrics-server:0.5.0 </code></p>
</li>
</ol>
<p>遇到的问题</p>
<ol>
<li><p>无法绑定443端口 (pod需要监听1000以下的端口需要root权限)</p>
<p>将对应的yaml文件中的</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">--secure-port=443</span>		<span class="string">修改为</span>	<span class="bullet">-</span> <span class="string">--secure-port=4443</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">443</span>	<span class="string">修改为</span>	<span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">4443</span></span><br></pre></td></tr></table></figure></li>
<li><p>Error from server (ServiceUnavailable): the server is currently unable to handle the request (get nodes.metrics.k8s.io)</p>
<ul>
<li><p>先使用logs查看报错原因如果有查询解决</p>
</li>
<li><p>如果logs没有保存，则使用</p>
<p><code>kubectl describe apiservice v1beta1.metrics.k8s.io</code></p>
<p>查看是否报错</p>
<p>一般出现的错误如下：</p>
<p>FailedDiscoveryCheck</p>
</li>
</ul>
</li>
<li><p>如果出现FailedDiscoveryCheck错误</p>
<ol>
<li><p>检查是否可以ping通对应svc的ip</p>
<p>如果无法ping通，则</p>
<ol>
<li><p>kubectl edit cm kube-proxy -n kube-system</p>
</li>
<li><p>修改mode为 mode: “ipvs”</p>
</li>
<li><p>添加ipvs的模块</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;EOF</span><br><span class="line"><span class="meta"> #</span><span class="bash">!/bin/bash</span> </span><br><span class="line"> modprobe -- ip_vs </span><br><span class="line"> modprobe -- ip_vs_rr </span><br><span class="line"> modprobe -- ip_vs_wrr </span><br><span class="line"> modprobe -- ip_vs_sh </span><br><span class="line"> modprobe -- nf_conntrack_ipv4 </span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li>
<li><p>```shell<br>chmod 755 /etc/sysconfig/modules/ipvs.modules &amp;&amp; bash /etc/sysconfig/modules/ipvs.modules &amp;&amp; lsmod | grep -e ip_vs -e nf_conntrack_ipv4</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">5. 重启proxy的pod</span><br><span class="line"></span><br><span class="line">   ```shell</span><br><span class="line">    kubectl get pod -n kube-system | grep kube-proxy |awk &#x27;&#123;system(&quot;kubectl delete pod &quot;$1&quot; -n kube-system&quot;)&#125;&#x27;</span><br></pre></td></tr></table></figure></li>
<li><p>再次尝试，应该可以ping通了</p>
</li>
</ol>
<p>详情见：<a href="https://blog.csdn.net/qq_29274865/article/details/108454912">https://blog.csdn.net/qq_29274865/article/details/108454912</a></p>
</li>
<li><p>检查是否可以执行<code>kubectl top nodes</code></p>
</li>
<li><p>如果还是不行</p>
<ol>
<li><p>检查 API Server 是否开启了 Aggregator Routing：查看 API Server 是否具有 –enable-aggregator-routing=true 选项</p>
<p><code>ps -ef | grep apiserver* |grep enable-aggregator-routing</code></p>
<p>如果没有显示则说明没有开启</p>
</li>
<li><p>修改每个 API Server 的 kube-apiserver.yaml(一般就是master节点下面有这个文件) 配置开启 Aggregator Routing：修改 manifests 配置后 API Server 会自动重启生效</p>
<p>在command下添加<code>- --enable-aggregator-routing=true </code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">cat</span> <span class="string">/etc/kubernetes/manifests/kube-apiserver.yaml</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">kubeadm.kubernetes.io/kube-apiserver.advertise-address.endpoint:</span> <span class="number">192.168</span><span class="number">.200</span><span class="number">.3</span><span class="string">:6443</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">component:</span> <span class="string">kube-apiserver</span></span><br><span class="line">    <span class="attr">tier:</span> <span class="string">control-plane</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kube-apiserver</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">command:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">kube-apiserver</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--advertise-address=192.168.200.3</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--allow-privileged=true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--authorization-mode=Node,RBAC</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--client-ca-file=/etc/kubernetes/pki/ca.crt</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--enable-admission-plugins=NodeRestriction</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--enable-bootstrap-token-auth=true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--enable-aggregator-routing=true</span>            <span class="comment"># 添加本行</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--etcd-servers=https://127.0.0.1:2379</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--insecure-port=0</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--requestheader-allowed-names=front-proxy-client</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--requestheader-extra-headers-prefix=X-Remote-Extra-</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--requestheader-group-headers=X-Remote-Group</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--requestheader-username-headers=X-Remote-User</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--secure-port=6443</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--service-account-key-file=/etc/kubernetes/pki/sa.pub</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--service-cluster-ip-range=10.96.0.0/12</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--tls-cert-file=/etc/kubernetes/pki/apiserver.crt</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--tls-private-key-file=/etc/kubernetes/pki/apiserver.key</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">k8s.gcr.io/kube-apiserver:v1.18.2</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">    <span class="attr">livenessProbe:</span></span><br><span class="line">      <span class="attr">failureThreshold:</span> <span class="number">8</span></span><br><span class="line">      <span class="attr">httpGet:</span></span><br><span class="line">        <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.200</span><span class="number">.3</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/healthz</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">6443</span></span><br><span class="line">        <span class="attr">scheme:</span> <span class="string">HTTPS</span></span><br><span class="line">      <span class="attr">initialDelaySeconds:</span> <span class="number">15</span></span><br><span class="line">      <span class="attr">timeoutSeconds:</span> <span class="number">15</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">kube-apiserver</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">requests:</span></span><br><span class="line">        <span class="attr">cpu:</span> <span class="string">250m</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/etc/ssl/certs</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">ca-certs</span></span><br><span class="line">      <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/etc/pki</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">etc-pki</span></span><br><span class="line">      <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/etc/kubernetes/pki</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">k8s-certs</span></span><br><span class="line">      <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hostNetwork:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">priorityClassName:</span> <span class="string">system-cluster-critical</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">hostPath:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/etc/ssl/certs</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">DirectoryOrCreate</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ca-certs</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">hostPath:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/etc/pki</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">DirectoryOrCreate</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">etc-pki</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">hostPath:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/etc/kubernetes/pki</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">DirectoryOrCreate</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">k8s-certs</span></span><br><span class="line"><span class="attr">status:</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<ol start="4">
<li><p>完成，执行<code>kubectl top nodes</code></p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210830115957.png" alt="image-20210830115955808"></p>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>K8S</category>
      </categories>
      <tags>
        <tag>K8S</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s组件</title>
    <url>/2022/01/07/K8S/K8S%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="Master节点"><a href="#Master节点" class="headerlink" title="Master节点"></a>Master节点</h3><ul>
<li><p>apiserver</p>
<p>集群的统一入口，以restful方式，交给etcd存储</p>
</li>
<li><p>scheduler</p>
<p>节点调度，选择node节点部署应用</p>
</li>
<li><p>controller-manager</p>
<p>处理集群中常规后台任务，一个资源对应一个控制器</p>
</li>
<li><p>etcd</p>
<p>存储系统，用于保存集群相关的数据</p>
</li>
</ul>
<h3 id="Node节点"><a href="#Node节点" class="headerlink" title="Node节点"></a>Node节点</h3><ul>
<li><p>kubelet</p>
<p>master节点派到node节点的代表，管理本机容器</p>
</li>
<li><p>kube-proxy</p>
<p>提供网络代理，负载均衡等操作</p>
</li>
</ul>
<h3 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h3><ul>
<li><p>pod</p>
<ul>
<li>概念<ul>
<li>最小部署单元</li>
<li>一组容器的集合</li>
<li>共享网络</li>
<li>生命周期是短暂的</li>
</ul>
</li>
<li><font color=red>存在的意义</font><ul>
<li>创建容器使用docker，一个docker对应一个容器，一个容器有一个进程，一个容器运行一个应用程序</li>
<li>Pod是多进程设置，运行多个应用程序，一个pod可以有多个容器，一个容器里面运行一个应用程序</li>
<li>Pod存在为了亲密性应用<ul>
<li>方便两个应用之间方便交互</li>
<li>网络之间调用方法，可以不使用ip调用，直接使用socket调用或者127.0.0.1</li>
<li>两个应用需要频繁调用（比如数据库的增删改查）</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>controller</p>
<ul>
<li>确保预期的pod副本数量</li>
<li>无状态应用部署</li>
<li>有状态应用部署</li>
<li>确保所有的node运行用一个pod</li>
<li>一次性任务和定时任务</li>
</ul>
</li>
<li><p>Service</p>
<ul>
<li>定义一组pod的访问规则</li>
</ul>
</li>
</ul>
<ol>
<li><p>coredns</p>
<p>coredns以daemonset形式运行</p>
<p>名称解析，不需要ip，只需要服务名称即可调用</p>
</li>
<li><p>kube-proxy</p>
<p>kube-proxy以daemonset形式运行</p>
<p>将容器中的应用暴露给外部集群使用</p>
</li>
</ol>
]]></content>
      <categories>
        <category>K8S</category>
      </categories>
      <tags>
        <tag>K8S</tag>
      </tags>
  </entry>
  <entry>
    <title>Pod</title>
    <url>/2022/01/07/K8S/Pod/</url>
    <content><![CDATA[<h3 id="概念和存在意义"><a href="#概念和存在意义" class="headerlink" title="概念和存在意义"></a>概念和存在意义</h3><ul>
<li>概念<ul>
<li>最小部署单元</li>
<li>一组容器的集合</li>
<li>共享网络</li>
<li>生命周期是短暂的</li>
</ul>
</li>
<li><font color=red>存在的意义</font><ul>
<li>创建容器使用docker，一个docker对应一个容器，一个容器有一个进程，一个容器运行一个应用程序</li>
<li>Pod是多进程设置，运行多个应用程序，一个pod可以有多个容器，一个容器里面运行一个应用程序</li>
<li>Pod存在为了亲密性应用<ul>
<li>方便两个应用之间方便交互</li>
<li>网络之间调用方法，可以不使用ip调用，直接使用socket调用或者127.0.0.1</li>
<li>两个应用需要频繁调用（比如数据库的增删改查）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Pod共享网络与共享存储"><a href="#Pod共享网络与共享存储" class="headerlink" title="Pod共享网络与共享存储"></a>Pod共享网络与共享存储</h3><ul>
<li><p>共享网络</p>
<p>通过Pause容器，将其他业务容器加入到Pause容器里面，让所有业务容器在同一个名称空间中，可以实现网络共享</p>
</li>
<li><p>共享存储</p>
<p>引入数据卷概念Volume，使用数据卷进行持久化存储</p>
</li>
</ul>
<h3 id="Pod中镜像拉取"><a href="#Pod中镜像拉取" class="headerlink" title="Pod中镜像拉取"></a>Pod中镜像拉取</h3><p>拉取镜像策略</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210704124717.png" alt="image-20210701142413377" style="zoom:50%;" />



<h3 id="Pod资源限制和要求"><a href="#Pod资源限制和要求" class="headerlink" title="Pod资源限制和要求"></a>Pod资源限制和要求</h3><p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210704124722.png" alt="image-20210701143035733"></p>
<p>注：资源的限制是由docker做到的，而不是由pod做到的 </p>
<p>在没有设置限制的时候，Pod会将宿主机的资源占用完</p>
<p>如果Pod内存不够，但是同时也其本身Pod的内存被限制那么会导致OOMKilled</p>
<h5 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h5><ul>
<li><p>requests和limits资源定义推荐不超过1:2，避免分配过多资源而出现资源争抢，发生 OOM; </p>
</li>
<li><p>pod中默认没有定义resource，推荐给namespace定义一个limitrange，确保pod能分到资源;</p>
</li>
<li><p>防止node上资源过度而出现机器hang住或者0OM，建议node上设置保留和驱逐资源， 如</p>
<ul>
<li><p>保留资源–system-reserved=cpu=200m,memory=1Gi</p>
</li>
<li><p>驱逐条件–eviction hard=memory.available&lt;500Mi</p>
<p>是在/etc/sysconfig/kubelet这个文件中进行定义这些参数</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210705104555.png" alt="image-20210705104553991"></p>
</li>
</ul>
</li>
</ul>
<h3 id="Pod重启策略"><a href="#Pod重启策略" class="headerlink" title="Pod重启策略"></a>Pod重启策略</h3><p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210704124729.png" alt="image-20210701144656026"></p>
<ul>
<li><p>Always （<font color=red>默认策略</font>）</p>
<p>不管是正常退出还是非正常退出都会重启</p>
</li>
<li><p>OnFailure</p>
<p>非正常退出会进行重启</p>
</li>
<li><p>Never</p>
<p>不会重启</p>
</li>
</ul>
<p>每次重启之后都会有一个延迟，以指数后退延迟（10秒、20秒、40秒…）重新启动，以5分钟为上限，并在成功执行10分钟后重置。</p>
<h3 id="Pod健康状态检测"><a href="#Pod健康状态检测" class="headerlink" title="Pod健康状态检测"></a>Pod健康状态检测</h3><p>因为有时候仅仅看pod的状态是无法判断当前pod是否可以接受服务的，比如java的堆内存溢出，Pod依然还是Running状态，但是实际上该应用服务已经不可以使用了，因此需要进一步进行检查</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210704124742.png" alt="image-20210701145407929"></p>
<h3 id="Pod创建与调度"><a href="#Pod创建与调度" class="headerlink" title="Pod创建与调度"></a>Pod创建与调度</h3><h4 id="Pod创建过程"><a href="#Pod创建过程" class="headerlink" title="Pod创建过程"></a>Pod创建过程</h4><p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210704124735.png" alt="image-20210701151103798"></p>
<h4 id="Pod调度"><a href="#Pod调度" class="headerlink" title="Pod调度"></a>Pod调度</h4><p>​    Pod调度主要会受到以下几方面的影响</p>
<ol>
<li><p>Pod资源限制和要求对Pod调用会产生影响</p>
</li>
<li><p>节点选择器标签影响Pod调度</p>
<p><code>kubectl label node &#123;node name&#125; &#123;label_name&#125; = &#123;label_value&#125;</code></p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210704124758.png" alt="image-20210701150941404"></p>
</li>
<li><p>收到节点亲和性影响（和selector差不多，支持多个value选择）</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210704124751.png" alt="image-20210701151604389"></p>
</li>
<li><p>污点和污点容忍</p>
<ul>
<li><p>Taint污点：节点不做普通分配调度，是节点属性</p>
</li>
<li><p>场景</p>
<ul>
<li>专用节点</li>
<li>配置特定硬件节点</li>
<li>基于Taint驱逐</li>
</ul>
</li>
<li><p>污点值有三种</p>
<ul>
<li>NoSchedule：一定不被调度</li>
<li>PreferNoSchedule：尽量不被调度</li>
<li>NoExecute：不会调度，并且还会驱逐Node已有的Pod</li>
</ul>
</li>
<li><p>污点操作</p>
<ul>
<li><p>查看节点污点情况</p>
<p><code>kubectl describe node &#123;node name&#125;|grep Taint</code></p>
</li>
<li><p>为节点添加污点</p>
<p><code>kubectl taint node [node] key = value &#123;value为污点三个值&#125;</code></p>
</li>
<li><p>删除污点</p>
<p><code>kubectl taint node [node] key = value &#123;value为污点三个值+“-”&#125;</code></p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210704124803.png" alt="image-20210701154758469" style="zoom:50%;" /></li>
</ul>
</li>
<li><p>污点容忍</p>
<p>指的是即使当前节点有污点，也会有一定可能性被调度到</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210704124807.png" alt="image-20210701154641654" style="zoom:50%;" /></li>
</ul>
</li>
</ol>
<h3 id="QoS"><a href="#QoS" class="headerlink" title="QoS"></a>QoS</h3><p><strong>定义</strong></p>
<p>QoS主要用于Pod调度和驱逐时参考的重要因素，不同的QoS其服务质量不同，对应不同的优先级</p>
<p>如果Pod的优先级比较低，是有可能被驱逐的</p>
<p>k8s中的Pod在宿主机中是有优先级的</p>
<p>一共有三种优先级</p>
<ul>
<li><p>Burstable （优先级第二）</p>
<p>只要在资源中resource设置了requests和limits的时候(request&lt;limits)，k8s会将其默认设置为Brustable类型的资源，<font color=red>k8s会保证其分配到的资源会在requests和limits中波动</font></p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210705102517.png" alt="image-20210705102516033"></p>
</li>
<li><p>Guaranteed（优先级第一（最高））</p>
<p>只要在资源中resource设置了requests和limits的时候(request==limits)，k8s会将其默认设置为Brustable类型的资源，<font color=red>k8s会保证其分配到的资源为requests</font></p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210705102919.png" alt="image-20210705102918058"></p>
</li>
<li><p>BestEffort</p>
<p>没有在资源yaml文件中定义resources，k8s会尽自己的最大努力分配资源给他，但是一旦该Pod影响到了其他优先级比他高的Pod，那么调度器会将该Pod进行驱逐</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210705103156.png" alt="image-20210705103150891" style="zoom:50%;" /></li>
</ul>
<p><font color=red>注意：</font></p>
<p>如果一个Pod中有多个容器，那么该容器的优先级是根据该Pod中的容器的最高等级进行制定的，比如有一个Pod中有2个容器，一个容器优先级为Burstable，一个为BestEffort，那么该Pod的优先级为Burstable</p>
]]></content>
      <categories>
        <category>K8S</category>
      </categories>
      <tags>
        <tag>K8S</tag>
      </tags>
  </entry>
  <entry>
    <title>Probe（探针）</title>
    <url>/2022/01/07/K8S/Probe/</url>
    <content><![CDATA[<h3 id="存活性探针"><a href="#存活性探针" class="headerlink" title="存活性探针"></a>存活性探针</h3><h4 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h4><p>格式如下：</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210705114338.png" alt="image-20210705114335491"></p>
<h4 id="httpGet"><a href="#httpGet" class="headerlink" title="httpGet"></a>httpGet</h4><p>格式如下：</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210705110339.png" alt="image-20210705110336040" style="zoom:50%;" />



<h4 id="tcpSocketProbe"><a href="#tcpSocketProbe" class="headerlink" title="tcpSocketProbe"></a>tcpSocketProbe</h4><p>格式如下：</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210705110557.png" alt="image-20210705110551551"></p>
<h3 id="就绪探针（尤其是和Service结合使用的时候）"><a href="#就绪探针（尤其是和Service结合使用的时候）" class="headerlink" title="就绪探针（尤其是和Service结合使用的时候）"></a>就绪探针（尤其是和Service结合使用的时候）</h3><p>出现原因：有一些程序启动需要时间，比如springboot，加入就绪探针之后该容器在启动期间不会加入到Service中，也就是不会被调度到，当其就绪完毕时才会加入Service中，当探测到异常的时候会被从Service中摘除掉</p>
<p>格式如下：</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210705113845.png" alt="image-20210705113811757" style="zoom:50%;" />

<p>​    其探测方式和存活性探针一样，有httpGet、tcpSocket、exec</p>
<h3 id="启动性探针"><a href="#启动性探针" class="headerlink" title="启动性探针"></a>启动性探针</h3><p>防止应用程序启动非常慢，比如说初始化一些环境等等</p>
<p>格式如下：</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210705115016.png" alt="image-20210705115011265" style="zoom:50%;" />



<p>他会不断的去探测，如果30次都失败了才会根据restartPolicy进行操作，也就是说启动时间为periodSeconds*failureThreshold</p>
]]></content>
      <categories>
        <category>K8S</category>
      </categories>
      <tags>
        <tag>K8S</tag>
      </tags>
  </entry>
  <entry>
    <title>Secret和ConfigMap</title>
    <url>/2022/01/07/K8S/Secret%E4%B8%8EConfigMap/</url>
    <content><![CDATA[<h2 id="Secret"><a href="#Secret" class="headerlink" title="Secret"></a>Secret</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>Secret也是一种资源形式</p>
<p>作用：加密数据存在etcd中，让Pod容器以挂载Volume方式进行访问</p>
<p>场景：凭证</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul>
<li><p>yaml文件（值都需要使用base64进行编码）</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210704124822.png" alt="image-20210702103049355" style="zoom:50%;" /></li>
<li><p>挂载（下面的mysecret都是利用yaml文件创建的Secret资源的name）</p>
<ul>
<li><p>以变量形式挂载到Pod容器中</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210704124827.png" alt="image-20210702103321257" style="zoom:50%;" /></li>
<li><p>以Volume形式挂载到Pod容器中</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210704124832.png" alt="image-20210702103442139" style="zoom:50%;" /></li>
</ul>
</li>
</ul>
<h2 id="ConfigMap"><a href="#ConfigMap" class="headerlink" title="ConfigMap"></a>ConfigMap</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>存储不加密的数据到etcd，让Pod以变量或者Volume挂载到容器中</p>
<p>场景：配置文件</p>
<h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><ul>
<li><p>创建配置文件</p>
<p>就是平常写的properties、json、yaml文件</p>
</li>
<li><p>创建configMap</p>
<p><code>kubectl create configmap &#123;configmap name&#125; --from-file=&#123;配置文件&#125;</code></p>
<p><code>kubectl get cm</code></p>
<p><code>kubectl describe cm &#123;configmap name&#125;</code></p>
</li>
<li><p>挂载和Secret类似</p>
<ul>
<li><p>变量形式挂载</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210704124837.png" alt="image-20210702104757012" style="zoom:50%;" /></li>
<li><p>Volume形式挂载</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210704124843.png" alt="image-20210702104852597" style="zoom:50%;" /></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>K8S</category>
      </categories>
      <tags>
        <tag>K8S</tag>
      </tags>
  </entry>
  <entry>
    <title>Service</title>
    <url>/2022/01/07/K8S/Service/</url>
    <content><![CDATA[<h3 id="Service的作用"><a href="#Service的作用" class="headerlink" title="Service的作用"></a>Service的作用</h3><ol>
<li><p>防止Pod失联，也就是服务发现</p>
<p>因为对于pod来说它的ip总是不断变化的，因此如果一个服务想要访问一个pod，那么根据pod的ip是无法做到的，因此需要使用servcie进行服务发现</p>
</li>
<li><p>定义一组Pod访问策略（负载均衡,也就是VIP的作用）</p>
<p>Service也可以起到负载均衡的作用，选择调度服务向多个同一种Pod中的一个进行发送请求</p>
</li>
</ol>
<h3 id="Pod和Service的关系"><a href="#Pod和Service的关系" class="headerlink" title="Pod和Service的关系"></a>Pod和Service的关系</h3><p>Pod和Service之间是通过标签建立联系的，Service自己也有Ip，但是它的Ip是VIp，也就是虚拟Ip，是会漂移的</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210704124857.png" alt="image-20210702083928264"></p>
<h3 id="Service的四种类型"><a href="#Service的四种类型" class="headerlink" title="Service的四种类型"></a>Service的四种类型</h3><ol>
<li><p>ClusterIP：集群内部使用</p>
</li>
<li><p>NodePort：对外访问应用使用</p>
</li>
<li><p>LoadBalancer：对外访问应用使用，公有云 (好处：主要是为了防止k8s中的node经常添加或者删除，它也是一层lvs，是根据NodePort做的lvs)</p>
</li>
<li><p>ExternalName:  访问外部环境使用的，比如说外部有一个数据库（不在当前k8s集群中），可以通过ExternalName进行访问</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210706222940.png" alt="image-20210706222940757"></p>
 <img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210706222854.png" alt="image-20210706222831229" style="zoom:50%;" /></li>
</ol>
<p>注意：node内外部署应用，外网一般不能访问到，解决方法如下：</p>
<ul>
<li>使用NodePort，找到一台可以进行外网访问的机器，安装nginx，反向代理，手动将可以访问节点添加到nginx中</li>
<li>使用LoadBalancer，利用公有云</li>
</ul>
]]></content>
      <categories>
        <category>K8S</category>
      </categories>
      <tags>
        <tag>K8S</tag>
      </tags>
  </entry>
  <entry>
    <title>helm</title>
    <url>/2022/01/07/K8S/helm/</url>
    <content><![CDATA[<h3 id="Helm的好处"><a href="#Helm的好处" class="headerlink" title="Helm的好处"></a>Helm的好处</h3><ol>
<li>使用helm可以将yaml作为一个整体管理</li>
<li>实现yaml的高效复用</li>
<li>使用helm应用级别的版本管理</li>
</ol>
<h3 id="Helm的概念"><a href="#Helm的概念" class="headerlink" title="Helm的概念"></a>Helm的概念</h3><ul>
<li><p>helm</p>
<p>命令行客户端工具</p>
</li>
<li><p>Chart</p>
<p>把yaml打包，是yaml集合</p>
</li>
<li><p>Release</p>
<p>基于chart部署实体，应用级别的版本管理</p>
</li>
</ul>
<p>版本架构</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210704212623.png" alt="image-20210702152813824"></p>
<h3 id="Helm命令"><a href="#Helm命令" class="headerlink" title="Helm命令"></a>Helm命令</h3><ul>
<li><p>添加存储库</p>
<p><code>helm repo add &#123;name&#125; &#123;地址&#125;</code></p>
</li>
<li><p>更新仓库</p>
<p><code>helm repo update</code></p>
</li>
<li><p>查看配置的存储库</p>
<p><code>helm repo list</code></p>
</li>
<li><p>删除存储库</p>
<p><code>helm repo remove &#123;name&#125;</code></p>
</li>
<li><p>搜索应用</p>
<p><code>helm search repo &#123;app name&#125;</code></p>
</li>
<li><p>安装</p>
<p><code>helm install &#123;自定义应用名称&#125; &#123;搜索应用找到的app&#125;</code></p>
</li>
<li><p>查看安装的应用</p>
<p><code>helm list</code></p>
</li>
<li><p>查看应用状态</p>
<p><code>helm status &#123;name&#125;</code></p>
</li>
</ul>
<h4 id="Chart相关"><a href="#Chart相关" class="headerlink" title="Chart相关"></a>Chart相关</h4><ul>
<li><p>创建chart</p>
<p><code>helm create chart &#123;name&#125;</code></p>
<p>生成的文件夹下由如下文件：</p>
<ul>
<li><p>Chart.yaml</p>
<p>当前chart属性配置信息</p>
</li>
<li><p>templates</p>
<p>编写yaml文件存放到这个目录下</p>
</li>
<li><p>values.yaml</p>
<p>yaml文件可以使用全局变量</p>
</li>
</ul>
</li>
<li><p>安装chart</p>
<p><code>helm install &#123;name&#125; &#123;自定义的chart文件夹，也就是上一步创建的yaml文件夹&#125;</code></p>
</li>
<li><p>更新</p>
<p><code>helm update &#123;name&#125; &#123;自定义的chart文件夹，也就是上一步创建的yaml文件夹&#125;</code></p>
</li>
<li><p>高效复用yaml文件</p>
<p>通过传递参数，动态渲染模板，yaml内容动态传入参数生成</p>
<p>在chart中有values.yaml文件，定义yaml文件全局变量</p>
<p>yaml文件大体主要有以下几个方面不同：</p>
<ul>
<li>image</li>
<li>tag</li>
<li>label</li>
<li>port</li>
<li>replicas</li>
</ul>
<p>流程：</p>
<ol>
<li><p>在values.yaml中定义变量和值</p>
</li>
<li><p>在具体的yaml文件获取定义的变量值</p>
<ul>
<li><p>通过表达式使用全局变量</p>
<p><code>&#123;&#123; .Values.变量名称 &#125;&#125;</code></p>
</li>
<li><p>应用发布编号（自动生成）</p>
<p><code>&#123;&#123;  .Release.Name &#125;&#125;</code></p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210704124547.png" alt="image-20210702155003574"></p>
</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>K8S</category>
      </categories>
      <tags>
        <tag>K8S</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s命令</title>
    <url>/2022/01/07/K8S/k8s%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h4 id="k8s添加节点"><a href="#k8s添加节点" class="headerlink" title="k8s添加节点"></a>k8s添加节点</h4><p>65证书文件为/root/.kube/config文件</p>
<p>添加节点</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210704124700.png" alt="image-20210628222235000"></p>
<h4 id="查看node状态"><a href="#查看node状态" class="headerlink" title="查看node状态"></a>查看node状态</h4><p><code>kubectl get nodes</code></p>
<h4 id="查看component-状态"><a href="#查看component-状态" class="headerlink" title="查看component 状态"></a>查看component 状态</h4><p><code>kubectl get cs</code></p>
<h4 id="查看daemonsets服务"><a href="#查看daemonsets服务" class="headerlink" title="查看daemonsets服务"></a>查看daemonsets服务</h4><p><code>kubectl get daemonsets -n kube-system</code></p>
<h4 id="查看k8s中的资源对象"><a href="#查看k8s中的资源对象" class="headerlink" title="查看k8s中的资源对象"></a>查看k8s中的资源对象</h4><p><code>kubectl api-resources</code></p>
<h4 id="查看deployment资源对象"><a href="#查看deployment资源对象" class="headerlink" title="查看deployment资源对象"></a>查看deployment资源对象</h4><p><code>kubectl get deployments</code></p>
<h4 id="查看pod状态"><a href="#查看pod状态" class="headerlink" title="查看pod状态"></a>查看pod状态</h4><p><code>kubectl describe &#123;类型&#125;  &#123;pod name&#125;</code></p>
<h4 id="扩容pod"><a href="#扩容pod" class="headerlink" title="扩容pod"></a>扩容pod</h4><p><code>kubectl scale &#123;容器类型&#125; --replicas=&#123;count&#125; &#123;name&#125;</code></p>
<h4 id="修改pod资源"><a href="#修改pod资源" class="headerlink" title="修改pod资源"></a>修改pod资源</h4><p><code>kubectl edit &#123;资源类型&#125; &#123;资源名称&#125;</code></p>
<h4 id="替换资源的镜像"><a href="#替换资源的镜像" class="headerlink" title="替换资源的镜像"></a>替换资源的镜像</h4><p><code>kubectl set image  &#123;资源类型&#125; &#123;name&#125; &#123;image&#125;=&#123;new image&#125;</code></p>
<h4 id="查看集群角色"><a href="#查看集群角色" class="headerlink" title="查看集群角色"></a>查看集群角色</h4><p><code>kubectl get clusterrole</code></p>
<h4 id="删除yaml文件生成的资源"><a href="#删除yaml文件生成的资源" class="headerlink" title="删除yaml文件生成的资源"></a>删除yaml文件生成的资源</h4><p><code>kubectl delete -f &#123;yaml文件&#125;</code></p>
<h4 id="根据字段进行过滤"><a href="#根据字段进行过滤" class="headerlink" title="根据字段进行过滤"></a>根据字段进行过滤</h4><p><code>kubectl get pods --field-selector=&#123;xxxx.xxxx&#125; = &#123;xxxx&#125;,&#123;xxxxx.xxxxx&#125; = &#123;xxxx&#125;</code></p>
<h4 id="查询字段含义"><a href="#查询字段含义" class="headerlink" title="查询字段含义"></a>查询字段含义</h4><p><code>kubectl explain &#123;资源类型&#125;.&#123;字段&#125;.&#123;字段&#125;...</code></p>
<h4 id="查询pod中的运行的容器"><a href="#查询pod中的运行的容器" class="headerlink" title="查询pod中的运行的容器"></a>查询pod中的运行的容器</h4><p><code>kubectl get pods POD_NAME_HERE -o jsonpath=&#39;&#123;.spec.containers[*].name&#125;&#39; -n &#123;ns&#125;</code></p>
]]></content>
      <categories>
        <category>K8S</category>
      </categories>
      <tags>
        <tag>K8S</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s命令补全</title>
    <url>/2022/01/07/K8S/k8s%E5%91%BD%E4%BB%A4%E8%A1%A5%E5%85%A8/</url>
    <content><![CDATA[<ol>
<li><p>查看是否含有该包</p>
<p><code>rpm qa|grep completion</code></p>
</li>
<li><p>安装该包</p>
<p><code>yum install bash-completion</code></p>
</li>
<li><p><code>source /usr/share/bash-completion/bash_completion</code></p>
</li>
<li><p><code>source &lt;(kubectl completion bash)</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>K8S</category>
      </categories>
      <tags>
        <tag>K8S</tag>
      </tags>
  </entry>
  <entry>
    <title>K8S安装</title>
    <url>/2022/01/07/K8S/k8s%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h4 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h4><ol>
<li>主节点免密登录从节点</li>
</ol>
<h4 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h4><ol>
<li><p>MiniKube</p>
<p>相当于是一个模拟器，单机环境</p>
</li>
<li><p>二进制安装，将编译好的二进制文件进行安装，需要设置参数，安装难度较大</p>
</li>
<li><p>Kubeadm </p>
<p>自动化安装工具，以镜像的方式进行部署，镜像在谷歌仓库，容易失败</p>
</li>
</ol>
<h4 id="以Kubeadm为例"><a href="#以Kubeadm为例" class="headerlink" title="以Kubeadm为例"></a>以Kubeadm为例</h4><h5 id="安装Container-runtimes"><a href="#安装Container-runtimes" class="headerlink" title="安装Container runtimes"></a>安装Container runtimes</h5><p>该组件是运行容器使用的，除了docker之外有多种选择</p>
<ol>
<li><p>设置镜像源</p>
<p>设置docker-ce源 <a href="https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo">阿里云镜像源</a></p>
<p>在/etc/yum.repos.d目录下</p>
<p><code>curl -o docker -ce.repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code></p>
<p>下载下来之后将其拷贝到另外两台节点上面去</p>
<p>(有必要的话基础的源也需要指向国内，就是使用镜像的源，比如centos的源)</p>
</li>
<li><p>安装docker（每个机器上面都要安装）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum update -y &amp;&amp; sudo yum install -y \</span><br><span class="line">  containerd.io-1.2.13 \</span><br><span class="line">  docker-ce-19.03.11 \</span><br><span class="line">  docker-ce-cli-19.03.11</span><br></pre></td></tr></table></figure>

<p>重新docker服务并设置开机生效</p>
<p><code>systemctl restart docker &amp;&amp; systemctl enable docker</code></p>
<p>查看docker服务启动状况</p>
<p><code>systemctl status docker</code></p>
<p>查看引擎详情(看cgroup driver是否是systemd，不是的需要进行修改)</p>
<p><code>docker info</code></p>
<p>生成docker配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF | sudo tee /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class="line">  &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class="line">  &quot;log-opts&quot;: &#123;</span><br><span class="line">    &quot;max-size&quot;: &quot;100m&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;storage-driver&quot;: &quot;overlay2&quot;,</span><br><span class="line">  &quot;storage-opts&quot;: [</span><br><span class="line">    &quot;overlay2.override_kernel_check=true&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>重启docker服务</p>
<p><code>systemctl restart docker</code></p>
<p>将该文件复制到其余节点上,同时重启docker 服务</p>
<p><code>scp /etc/docker/daemon.json &#123;node&#125;:/etc/docker/</code></p>
</li>
</ol>
<h5 id="安装kubeadm（保证机器配置最起码2G内存和2核心）"><a href="#安装kubeadm（保证机器配置最起码2G内存和2核心）" class="headerlink" title="安装kubeadm（保证机器配置最起码2G内存和2核心）"></a>安装kubeadm（保证机器配置最起码2G内存和2核心）</h5><ol>
<li><p>将ipatbles和bridged traffic 结合起来 (每台机器都要)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;<span class="string">EOF | sudo tee /etc/sysctl.d/k8s.conf</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">sudo sysctl --system</span><br></pre></td></tr></table></figure>

<p>查看状态</p>
<p>sysctl -a|grep net.bridge.bridge-nf</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201122210000.png" alt="image-20201122205954540" style="zoom:50%;" /></li>
<li><p>放开对应的端口</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201122204655.png" alt="image-20201122204641520" style="zoom:50%;" />

<p>如果方便的话直接将防火墙关闭掉</p>
<p><code>systemctl disable firewalld &amp;&amp; systemctl stop firewalld</code></p>
<p>还有selinux也需要关掉    </p>
<ol start="3">
<li><p>安装kubeadm（部署k8s集群）、安装kubelet（管理容器的）、安装kubectl（命令行工具）</p>
<p>部署源(节点都需要布置)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p> 安装(每个节点都需要安装)</p>
<p><code>yum install kubeadm kubelet kubectl -y</code></p>
<p><font color=red>安装完毕之后强拉kubelet服务的话是不行的，因为环境没有准备好了</font></p>
<p>将kubelet服务开机启动,否则下次开机的话无法启动k8s服务</p>
<p><code>systemctl enable kubelet</code></p>
</li>
<li><p>初始化</p>
<p>指定pod网络进行初始化(必须要指定16位)</p>
<p><code>kubeadm init --pod-network-cidr 192.168.0.0/16</code> （这里千万要注意，不能与主机所在的网段冲突）</p>
<p><a href="https://github.com/kubernetes/kubernetes/issues/54918#issuecomment-385162637">遇到问题请点击</a></p>
<p>会遇到错误，因为swap是不支持的</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201122215157.png" alt="image-20201122215155883"></p>
<p>需要禁用swap</p>
<ol>
<li><p>安装工具包</p>
<p> <code>yum install util-linux</code></p>
</li>
</ol>
<pre><code>2.  查看swap空间位置

`cat /etc/fstab`

3. 禁用swap空间(每台机器都需要)

`swapoff /dev/mapper/centos-swap`

将/etc/fstab 文件中的swap注释掉，否则下次开机会自动启用swap空间

![image-20201122215650622](https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201122215736.png)
</code></pre>
</li>
</ol>
<p>​    再次执行<code>kubeadm init --pod-network-cidr 192.168.0.0/16</code></p>
<p>​    但是还是会失败，<font color=red>因为它会自动拉取google的镜像</font></p>
<p>​    <font color=red>注意：只需要在master节点上执行该命令即可</font></p>
<p>​    两种方法解决<a href="https://segmentfault.com/a/1190000038248999">方法</a></p>
<p>​    查看需要的镜像命令 <code>kubeadm config images list</code></p>
<p>​    <font color=red>一定要版本对应</font></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@node3 ~]# docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.19.4 k8s.gcr.io/kube-apiserver:v1.19.4</span><br><span class="line"></span><br><span class="line">[root@node3 ~]# docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.19.4 k8s.gcr.io/kube-controller-manager:v1.19.4</span><br><span class="line"></span><br><span class="line">[root@node3 ~]# docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.19.4 k8s.gcr.io/kube-scheduler:v1.19.4</span><br><span class="line"></span><br><span class="line">[root@node3 ~]# docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.19.4 k8s.gcr.io/kube-proxy:v1.19.4</span><br><span class="line"></span><br><span class="line">[root@node3 ~]# docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.4.3-0 k8s.gcr.io/etcd:3.4.3-0</span><br><span class="line"></span><br><span class="line">[root@node3 ~]# docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.6.7 k8s.gcr.io/coredns:1.6.7</span><br><span class="line"></span><br><span class="line">[root@node3 ~]# docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.2 k8s.gcr.io/pause:3.2</span><br></pre></td></tr></table></figure>

<p>镜像导入成功之后再次执行<code>kubeadm init --pod-network-cidr 192.168.0.0/16</code></p>
<p>执行成功之后需要记录下信息</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201122230411.png" alt="image-20201122230410476"></p>
<p>可能遇到的问题 </p>
<p>查看当前节点：<code>kbuectl get nodes</code></p>
<p>The connection to the server localhost:8080 was refused - did you specify the right host or port?</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201122230227.png" alt="image-20201122230225816"></p>
<p>原因：kubenetes master没有与本机绑定，集群初始化的时候没有设置</p>
<p>解决办法： <code>export KUBECONFIG=/etc/kubernetes/admin.conf</code></p>
</li>
<li><p>其他节点加入集群</p>
<p>查看ip_forward是否开启，确保其开启</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201122231040.png" alt="image-20201122231039260"></p>
<p>输入之前成功初始化的命令</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201122231012.png" alt="image-20201122231011415"></p>
<p>查看集群情况</p>
<p><code>kubectl get nodes</code></p>
</li>
<li><p>安装网络插件 （让宿主机之间都联系起来）</p>
<p>获取yaml文件</p>
<p><code>curl https://docs.projectcalico.org/manifests/calico-etcd.yaml -o calico.yaml</code></p>
<p>执行</p>
<p><code>kubectl apply -f calico.yaml</code></p>
<p>查看集群健康状态</p>
<p><code>kubectl get ds n kube-system</code></p>
<p><code>kubectl get pods -o wide -n kube-system</code></p>
<p><code>kubectl get cs</code></p>
</li>
<li><p>命令补全</p>
<p>安装包</p>
<p><code>yum install bash-completion</code></p>
<p><code>source /usr/share/bash-completion/bash_completion</code></p>
<p>配置包</p>
<p><code>kubectl completion bash &gt;/etc/profile.d/kubectl.sh</code></p>
<p>加载配置文件</p>
<p><code>source /etc/profile.d/kubectl.sh</code></p>
<p><code>vim /root/.bashrc</code>  在里面添加上面这句话，这样的话每次开机就可以生效</p>
<p>完成！</p>
</li>
</ol>
<h3 id="K8S卸载"><a href="#K8S卸载" class="headerlink" title="K8S卸载"></a>K8S卸载</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo kubeadm reset -f</span><br><span class="line">sudo rm -rvf $HOME/.kube</span><br><span class="line">sudo rm -rvf ~/.kube/</span><br><span class="line">sudo rm -rvf /etc/kubernetes/</span><br><span class="line">sudo rm -rvf /etc/systemd/system/kubelet.service.d</span><br><span class="line">sudo rm -rvf /etc/systemd/system/kubelet.service</span><br><span class="line">sudo rm -rvf /usr/bin/kube*</span><br><span class="line">sudo rm -rvf /etc/cni</span><br><span class="line">sudo rm -rvf /opt/cni</span><br><span class="line">sudo rm -rvf /var/lib/etcd</span><br><span class="line">sudo rm -rvf /var/etcd</span><br><span class="line">sudo apt-get remove kube*</span><br></pre></td></tr></table></figure>



<h3 id="遇到镜像不可用看这里"><a href="#遇到镜像不可用看这里" class="headerlink" title="遇到镜像不可用看这里"></a>遇到镜像不可用看这里</h3><ol>
<li><p>先利用自己的网络将镜像下载下来，具体地址看这里<a href="https://segmentfault.com/a/1190000038248999">方法</a></p>
</li>
<li><p>将下载并tag好的镜像推送到harbor上</p>
</li>
<li><p>将harbor上的镜像下载到机器中并打开k8s开头的tag</p>
</li>
<li><p>tag好之后将每一个镜像都save下来</p>
<p><code>docker save k8s.gcr.io/coredns/coredns:v1.8.0 -o coredns.tar</code></p>
<p>就像上面这种操作</p>
</li>
<li><p>存放到包里面之后将整个包scp到其他的从机上面</p>
</li>
<li><p>从机将镜像导入到docker中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for i in `ls`;do docker image load -i $&#123;i&#125;;done</span><br></pre></td></tr></table></figure></li>
<li><p>不要忘记将calico的镜像也下载下来</p>
</li>
</ol>
<h3 id="指定安装k8s版本"><a href="#指定安装k8s版本" class="headerlink" title="指定安装k8s版本"></a>指定安装k8s版本</h3><ul>
<li><p>kubeadm、kubelet等指定版本</p>
<p><code>yum install kubeadm-&#123;版本&#125; kubelet-&#123;版本&#125; -y</code></p>
</li>
<li><p>指定k8s组件版本</p>
<p>在kubeadm init ，，，，最后加上<code>--kubernetes-version= &#123;版本&#125;</code></p>
</li>
</ul>
<h2 id="如果calico无法使用看这里"><a href="#如果calico无法使用看这里" class="headerlink" title="如果calico无法使用看这里"></a>如果calico无法使用看这里</h2><p>因为calico需要将配置信息存储到etcd中，因此需要对etcd进行一个客户端的访问，但是etcd默认需要使用https进行访问的，因此必须在calico.yaml文件中对其进行一个配置。</p>
<p><a href="https://www.jianshu.com/p/5d760511b640">参考</a></p>
<h3 id="报错1"><a href="#报错1" class="headerlink" title="报错1:"></a>报错1:</h3><h4 id="calico-node-服务-报错信息如下"><a href="#calico-node-服务-报错信息如下" class="headerlink" title="calico-node 服务 报错信息如下:"></a>calico-node 服务 报错信息如下:</h4><ul>
<li><code>Liveness probe failed: calico/node is not ready: bird/confd is not live: exit status 1</code></li>
<li><code>Felix is not live: Get &quot;http://localhost:9099/liveness&quot;: dial tcp [::1]:9099: connect: connection refused</code></li>
<li><code>Readiness probe failed: calico/node is not ready: BIRD is not ready: Failed to stat() nodename file: stat /var/lib/calico/nodename: no such file or directory</code></li>
</ul>
<h4 id="calico-kube-controllers-报错信息如下："><a href="#calico-kube-controllers-报错信息如下：" class="headerlink" title="calico-kube-controllers 报错信息如下："></a>calico-kube-controllers 报错信息如下：</h4><ul>
<li><code>Readiness probe errored: rpc error: code = Unknown desc = container not running</code></li>
<li><code>Readiness probe failed: Failed to read status file /status/status.json: unexpected end of JSON input</code></li>
</ul>
<h4 id="报错1-解决"><a href="#报错1-解决" class="headerlink" title="报错1-解决:"></a>报错1-解决:</h4><p><font color=red>配置ETCD服务地址与SSL证书相关</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ETCD 地址</span></span><br><span class="line">ETCD_ENDPOINTS=<span class="string">&quot;https://192.168.10.216:2379&quot;</span> <span class="comment">#这里记得换成宿主机的地址</span></span><br><span class="line">sed -i <span class="string">&quot;s#.*etcd_endpoints:.*#  etcd_endpoints: \&quot;<span class="variable">$&#123;ETCD_ENDPOINTS&#125;</span>\&quot;#g&quot;</span> calico.yaml</span><br><span class="line">sed -i <span class="string">&quot;s#__ETCD_ENDPOINTS__#<span class="variable">$&#123;ETCD_ENDPOINTS&#125;</span>#g&quot;</span> calico.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># ETCD 证书信息</span></span><br><span class="line">ETCD_CA=`cat /etc/kubernetes/pki/etcd/ca.crt | base64 | tr -d <span class="string">&#x27;\n&#x27;</span>`</span><br><span class="line">ETCD_CERT=`cat /etc/kubernetes/pki/etcd/server.crt | base64 | tr -d <span class="string">&#x27;\n&#x27;</span>`</span><br><span class="line">ETCD_KEY=`cat /etc/kubernetes/pki/etcd/server.key | base64 | tr -d <span class="string">&#x27;\n&#x27;</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换修改</span></span><br><span class="line">sed -i <span class="string">&quot;s#.*etcd-ca:.*#  etcd-ca: <span class="variable">$&#123;ETCD_CA&#125;</span>#g&quot;</span> calico.yaml</span><br><span class="line">sed -i <span class="string">&quot;s#.*etcd-cert:.*#  etcd-cert: <span class="variable">$&#123;ETCD_CERT&#125;</span>#g&quot;</span> calico.yaml</span><br><span class="line">sed -i <span class="string">&quot;s#.*etcd-key:.*#  etcd-key: <span class="variable">$&#123;ETCD_KEY&#125;</span>#g&quot;</span> calico.yaml</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&#x27;s#.*etcd_ca:.*#  etcd_ca: &quot;/calico-secrets/etcd-ca&quot;#g&#x27;</span> calico.yaml</span><br><span class="line">sed -i <span class="string">&#x27;s#.*etcd_cert:.*#  etcd_cert: &quot;/calico-secrets/etcd-cert&quot;#g&#x27;</span> calico.yaml</span><br><span class="line">sed -i <span class="string">&#x27;s#.*etcd_key:.*#  etcd_key: &quot;/calico-secrets/etcd-key&quot;#g&#x27;</span> calico.yaml</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;s#__ETCD_CA_CERT_FILE__#/etc/kubernetes/pki/etcd/ca.crt#g&quot;</span> calico.yaml</span><br><span class="line">sed -i <span class="string">&quot;s#__ETCD_CERT_FILE__#/etc/kubernetes/pki/etcd/server.crt#g&quot;</span> calico.yaml</span><br><span class="line">sed -i <span class="string">&quot;s#__ETCD_KEY_FILE__#/etc/kubernetes/pki/etcd/server.key#g&quot;</span> calico.yaml</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;s#__KUBECONFIG_FILEPATH__#/etc/cni/net.d/calico-kubeconfig#g&quot;</span> calico.yaml</span><br></pre></td></tr></table></figure>

<h3 id="报错2"><a href="#报错2" class="headerlink" title="报错2"></a>报错2</h3><h4 id="calico-kube-controllers-报错信息如下"><a href="#calico-kube-controllers-报错信息如下" class="headerlink" title="calico-kube-controllers 报错信息如下:"></a>calico-kube-controllers 报错信息如下:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Failed to start error=failed to build Calico client: could not initialize etcdv3 client: open /calico-secrets/etcd-cert: permission denied</span><br></pre></td></tr></table></figure>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master ~]<span class="comment"># kubectl -n kube-system logs -f  calico-kube-controllers-5b49c7597b-n2wwl</span></span><br><span class="line">2021-01-28 04:52:53.331 [INFO][1] main.go 88: Loaded configuration from environment config=&amp;config.Config&#123;LogLevel:<span class="string">&quot;info&quot;</span>, WorkloadEndpointWorkers:1, ProfileWorkers:1, PolicyWorkers:1, NodeWorkers:1, Kubeconfig:<span class="string">&quot;&quot;</span>, DatastoreType:<span class="string">&quot;etcdv3&quot;</span>&#125;</span><br><span class="line">2021-01-28 04:52:53.331 [FATAL][1] main.go 101: Failed to start error=failed to build Calico client: could not initialize etcdv3 client: open /calico-secrets/etcd-cert: permission denied</span><br></pre></td></tr></table></figure>

<h4 id="报错2解决"><a href="#报错2解决" class="headerlink" title="报错2解决:"></a>报错2解决:</h4><p>参考: <a href="https://links.jianshu.com/go?to=https://github.com/kubernetes/website/issues/25587">https://github.com/kubernetes/website/issues/25587</a><br> <code>defaultMode: 0400</code> 修改成 <code>defaultMode: 0040</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="comment"># Mount in the etcd TLS secrets with mode 400.</span></span><br><span class="line">  <span class="comment"># See https://kubernetes.io/docs/concepts/configuration/secret/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">etcd-certs</span></span><br><span class="line">    <span class="attr">secret:</span></span><br><span class="line">      <span class="attr">secretName:</span> <span class="string">calico-etcd-secrets</span></span><br><span class="line">      <span class="attr">defaultMode:</span> <span class="number">0040</span></span><br><span class="line">      <span class="comment">#defaultMode: 0400</span></span><br></pre></td></tr></table></figure>

<h3 id="calico网络插件-运行成功"><a href="#calico网络插件-运行成功" class="headerlink" title="calico网络插件-运行成功"></a>calico网络插件-运行成功</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master ~]<span class="comment"># kubectl -n kube-system get pod  | grep calico</span></span><br><span class="line">calico-kube-controllers-6c749f5bb6-8gf6h   1/1     Running             0          2m54s</span><br><span class="line">calico-node-9cxs4                          1/1     Running             0          38m</span><br><span class="line">calico-node-l9vph                          1/1     Running             0          38m</span><br><span class="line">calico-node-swxq9                          1/1     Running             0          38m</span><br></pre></td></tr></table></figure>

<h3 id="报错3-coredns启动报错"><a href="#报错3-coredns启动报错" class="headerlink" title="报错3. coredns启动报错"></a>报错3. coredns启动报错</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master ~]<span class="comment"># kubectl -n kube-system get pod | grep coredns</span></span><br><span class="line">coredns-6d56c8448f-c6x7h                   0/1     ContainerCreating   0          15s</span><br><span class="line">coredns-6d56c8448f-prs5c                   0/1     ContainerCreating   0          15s</span><br></pre></td></tr></table></figure>

<h4 id="coredns报错信息"><a href="#coredns报错信息" class="headerlink" title="coredns报错信息:"></a>coredns报错信息:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Warning FailedCreatePodSandBox 14s (x4 over 17s) kubelet, k8s-work2 (combined from similar events): Failed to create pod sandbox: rpc error: code = Unknown desc = failed to set up sandbox container &quot;266213ee3ba95ea42c067702990b81f6b5ee1857c6bdee6d247464dfb0a85dc7&quot; network for pod &quot;coredns-6d56c8448f-c6x7h&quot;: networkPlugin cni failed to set up pod &quot;coredns-6d56c8448f-c6x7h_kube-system&quot; network: could not initialize etcdv3 client: open /etc/kubernetes/pki/etcd/server.crt: no such file or directory</span><br></pre></td></tr></table></figure>

<h4 id="报错3-解决"><a href="#报错3-解决" class="headerlink" title="报错3.解决"></a>报错3.解决</h4><p>原因: 找不到ssl证书</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置主机密钥对信任,从master节点同步ssl证书到work节点</span></span><br><span class="line">ssh-keygen -t rsa </span><br><span class="line">ssh-copy-id root@k8s-work1</span><br><span class="line">ssh-copy-id root@k8s-work1</span><br><span class="line">scp -r /etc/kubernetes/pki/etcd root@k8s-work1:/etc/kubernetes/pki/etcd</span><br><span class="line">scp -r /etc/kubernetes/pki/etcd root@k8s-work2:/etc/kubernetes/pki/etcd</span><br></pre></td></tr></table></figure>

<h4 id="全部POD运行正常"><a href="#全部POD运行正常" class="headerlink" title="全部POD运行正常"></a>全部POD运行正常</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master ~]<span class="comment"># kubectl -n kube-system get pod</span></span><br><span class="line">NAME                                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">calico-kube-controllers-6c749f5bb6-8xsc5   1/1     Running   0          14m</span><br><span class="line">calico-node-5knwk                          1/1     Running   0          17m</span><br><span class="line">calico-node-qrcw4                          1/1     Running   0          17m</span><br><span class="line">calico-node-t9cxh                          1/1     Running   0          17m</span><br><span class="line">coredns-6d56c8448f-c6x7h                   1/1     Running   0          12m</span><br><span class="line">coredns-6d56c8448f-prs5c                   1/1     Running   0          12m</span><br><span class="line">etcd-k8s-master                            1/1     Running   1          24h</span><br><span class="line">kube-apiserver-k8s-master                  1/1     Running   1          24h</span><br><span class="line">kube-controller-manager-k8s-master         1/1     Running   3          24h</span><br><span class="line">kube-proxy-6kf4f                           1/1     Running   1          23h</span><br><span class="line">kube-proxy-gfg2n                           1/1     Running   1          23h</span><br><span class="line">kube-proxy-hxxzn                           1/1     Running   1          24h</span><br><span class="line">kube-scheduler-k8s-master                  1/1     Running   3          24h</span><br></pre></td></tr></table></figure>



<h3 id="报错四"><a href="#报错四" class="headerlink" title="报错四"></a>报错四</h3><p>calico/node is not ready: BIRD is not ready: BGP not established withxxx</p>
<p><a href="https://blog.csdn.net/m0_51368852/article/details/114630418?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-0&spm=1001.2101.3001.4242">参考1</a></p>
<p><a href="https://blog.csdn.net/u011327801/article/details/100579803">参考2</a></p>
<p>注意：calicao中的ALICO_IPV4POOL_CIDR需要和kubeadm init中的地址保持一直，默认是192.168.0.0</p>
<h4 id="报错五"><a href="#报错五" class="headerlink" title="报错五"></a>报错五</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get cs  </span><br><span class="line"></span><br><span class="line">NAME                 STATUS      MESSAGE                    ERROR                               </span><br><span class="line">controller-manager   Unhealthy   Get http://127.0.0.1:10252/healthz: dial tcp 127.0.0.1:10252: connect: connection refused   </span><br><span class="line">scheduler            Unhealthy   Get http://127.0.0.1:10251/healthz: dial tcp 127.0.0.1:10251: connect: connection refused   </span><br><span class="line">etcd-0               Healthy     &#123;&quot;health&quot;:&quot;true&quot;&#125;    </span><br></pre></td></tr></table></figure>

<p><a href="https://www.jianshu.com/p/a08a9b9a3457">参考1</a></p>
<p><a href="https://www.cnblogs.com/potato-chip/p/13973760.html">参考2</a></p>
<h4 id="报错六"><a href="#报错六" class="headerlink" title="报错六"></a>报错六</h4><p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210707113643.png" alt="image-20210707113641443"></p>
<p>在从节点访问</p>
<p>解决方法</p>
<p>找到/etc/kubernetes/ 下面的conf文件</p>
<p>将其写入到环境变量中</p>
<p><code>echo &quot;export KUBECONFIG=/etc/kubernetes/xxx.conf&quot; &gt;&gt; /etc/profile</code></p>
<p><code>source /etc/profile</code></p>
<h4 id="报错7"><a href="#报错7" class="headerlink" title="报错7"></a>报错7</h4><p>coredns一直处于初始化状态</p>
<p>查看coredns服务在哪个机器上，有可能所在的机器并不是master，因此需要将master下面的/etc/kubernetes/pki/etcd/复制过去</p>
]]></content>
      <categories>
        <category>K8S</category>
      </categories>
      <tags>
        <tag>K8S</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s高可用</title>
    <url>/2022/01/07/K8S/k8s%E9%AB%98%E5%8F%AF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210704124639.png" alt="image-20210628230709001"></p>
<p>对于三个核心组件来说：</p>
<ul>
<li><p>apiserver</p>
<p>本身无状态化，因此直接利用nginx来进行负载均衡就可以实现</p>
</li>
<li><p>controller-manager和scheduler</p>
<p>每次选举一个即可</p>
</li>
<li><p>etcd</p>
<p>本身具有高可用机制</p>
</li>
</ul>
<p>当集群比较大的时候，可以考虑将etcd单独部署</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210704124651.png" alt="image-20210628230957691"></p>
]]></content>
      <categories>
        <category>K8S</category>
      </categories>
      <tags>
        <tag>K8S</tag>
      </tags>
  </entry>
  <entry>
    <title>namespace</title>
    <url>/2022/01/07/K8S/namespace/</url>
    <content><![CDATA[<h3 id="namespace作用"><a href="#namespace作用" class="headerlink" title="namespace作用"></a>namespace作用</h3><p>隔离资源</p>
<p>有一些资源是没有namespace的，比如系统的资源，存储等等，namespace属性是为false的</p>
<h3 id="创建namespace"><a href="#创建namespace" class="headerlink" title="创建namespace"></a>创建namespace</h3><p><code>kubectl create ns &#123;name&#125;</code>–dry-run -o yaml &gt; {name.yaml} </p>
<p><code>kubectl apply -f &#123;name.yaml&#125;</code></p>
]]></content>
      <categories>
        <category>K8S</category>
      </categories>
      <tags>
        <tag>K8S</tag>
      </tags>
  </entry>
  <entry>
    <title>yaml文件</title>
    <url>/2022/01/07/K8S/yaml%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="yam文件组成以及各个字段含义"><a href="#yam文件组成以及各个字段含义" class="headerlink" title="yam文件组成以及各个字段含义"></a>yam文件组成以及各个字段含义</h3><ol>
<li><p>组成</p>
<ul>
<li>控制器定义</li>
<li>被控制对象</li>
</ul>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210704124904.png" alt="image-20210701133735491" style="zoom:50%;" /></li>
<li><p>yaml文件各个字段含义</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210704124909.png" alt="image-20210701133817520" style="zoom:50%;" /></li>
</ol>
<p>​    对于containers中的command和args分别相当于是docker中的entrypoint和cmd</p>
<p>​    <img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210705091718.png" alt="image-20210705091710532" style="zoom:50%;" /></p>
<p>​    具体策略如下：</p>
<ol>
<li><p> 如果没有提供command和args，那么会使用docker镜像默认的</p>
</li>
<li><p> 如果提供了command但是没有提供args，那么生效的是command，docker images默认的cmd和entrypoint会被忽略</p>
</li>
<li><p> 如果只提供了args，docker image默认的entrypoint会执行你提供的args，默认的args会被忽略</p>
</li>
<li><p>如果你提供了command和args，默认的entrypoint和cmd会被忽略，你的cmd和args会生效</p>
</li>
</ol>
<h3 id="快速生成yaml文件"><a href="#快速生成yaml文件" class="headerlink" title="快速生成yaml文件"></a>快速生成yaml文件</h3><ol>
<li><p>当应用还没有生成的时候</p>
<p><code>kubectl create &#123;资源类型，比如deployment&#125; &#123;name&#125; --image=&#123;iamge name&#125; -o yaml --dry-run &gt; 生成yaml位置</code></p>
<p>其中–dry-run一定要加上</p>
</li>
<li><p>当应用已经生成了，导出他的yaml文件</p>
<p><code>kubectl get &#123;资源类型，比如deploy&#125; &#123;资源名称&#125; -o=yaml --export &gt; yaml文件位置</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>K8S</category>
      </categories>
      <tags>
        <tag>K8S</tag>
      </tags>
  </entry>
  <entry>
    <title>发布策略</title>
    <url>/2022/01/07/K8S/%E5%8F%91%E5%B8%83%E7%AD%96%E7%95%A5/</url>
    <content><![CDATA[<h3 id="蓝绿发布"><a href="#蓝绿发布" class="headerlink" title="蓝绿发布"></a>蓝绿发布</h3><p>对于相同的资源yaml文件复制一份，然后将按照需要进行修改，最后将前一个资源对应的 Service中的label改为指向修改过后的资源即可。</p>
<h3 id="滚动升级"><a href="#滚动升级" class="headerlink" title="滚动升级"></a>滚动升级</h3><p>原理：逐个进行替换</p>
<p>在资源文件中设置相应的策略</p>
<h3 id="金丝雀发布"><a href="#金丝雀发布" class="headerlink" title="金丝雀发布"></a>金丝雀发布</h3><p>原理：多版本共存,就是先派一个进行测试，没有问题的话就进行完全发布更新</p>
<p>操作：</p>
<ol>
<li><p>手动更新镜像并停止滚动发布</p>
<p><code>kubectl set image &#123;资源类型&#125; &#123;name&#125; &#123;镜像&#125; = &#123;镜像版本&#125; &amp;&amp; kubectl rollout pause &#123;资源类型&#125; &#123;name&#125;</code></p>
</li>
<li><p>如果发现没有问题则完全发布</p>
<p><code>kubectl rollout resume &#123;资源类型&#125; &#123;name&#125; &amp;&amp;kubectl rollout pause &#123;资源类型&#125; &#123;name&#125;</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>K8S</category>
      </categories>
      <tags>
        <tag>K8S</tag>
      </tags>
  </entry>
  <entry>
    <title>安装dashboard</title>
    <url>/2022/01/07/K8S/%E5%AE%89%E8%A3%85dashboard/</url>
    <content><![CDATA[<ol>
<li><p>下载资源文件</p>
<p><code>wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Copyright 2017 The Kubernetes Authors.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment"># you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"># You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"># See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"># limitations under the License.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">443</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8443</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard-certs</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard-csrf</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">csrf:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard-key-holder</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard-settings</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="comment"># Allow Dashboard to get, update and delete Dashboard exclusive secrets.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;secrets&quot;</span>]</span><br><span class="line">    <span class="attr">resourceNames:</span> [<span class="string">&quot;kubernetes-dashboard-key-holder&quot;</span>, <span class="string">&quot;kubernetes-dashboard-certs&quot;</span>, <span class="string">&quot;kubernetes-dashboard-csrf&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;update&quot;</span>, <span class="string">&quot;delete&quot;</span>]</span><br><span class="line">    <span class="comment"># Allow Dashboard to get and update &#x27;kubernetes-dashboard-settings&#x27; config map.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;configmaps&quot;</span>]</span><br><span class="line">    <span class="attr">resourceNames:</span> [<span class="string">&quot;kubernetes-dashboard-settings&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;update&quot;</span>]</span><br><span class="line">    <span class="comment"># Allow Dashboard to get metrics.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;services&quot;</span>]</span><br><span class="line">    <span class="attr">resourceNames:</span> [<span class="string">&quot;heapster&quot;</span>, <span class="string">&quot;dashboard-metrics-scraper&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;proxy&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;services/proxy&quot;</span>]</span><br><span class="line">    <span class="attr">resourceNames:</span> [<span class="string">&quot;heapster&quot;</span>, <span class="string">&quot;http:heapster:&quot;</span>, <span class="string">&quot;https:heapster:&quot;</span>, <span class="string">&quot;dashboard-metrics-scraper&quot;</span>, <span class="string">&quot;http:dashboard-metrics-scraper&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="comment"># Allow Metrics Scraper to get metrics from the Metrics server</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;metrics.k8s.io&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;pods&quot;</span>, <span class="string">&quot;nodes&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">revisionHistoryLimit:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">kubernetesui/dashboard:v2.0.0</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8443</span></span><br><span class="line">              <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--auto-generate-certificates</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--namespace=kubernetes-dashboard</span></span><br><span class="line">            <span class="comment"># Uncomment the following line to manually specify Kubernetes API server Host</span></span><br><span class="line">            <span class="comment"># If not specified, Dashboard will attempt to auto discover the API server and connect</span></span><br><span class="line">            <span class="comment"># to it. Uncomment only if the default does not work.</span></span><br><span class="line">            <span class="comment"># - --apiserver-host=http://my-address:port</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">kubernetes-dashboard-certs</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/certs</span></span><br><span class="line">              <span class="comment"># Create on-disk volume to store exec logs</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/tmp</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">tmp-volume</span></span><br><span class="line">          <span class="attr">livenessProbe:</span></span><br><span class="line">            <span class="attr">httpGet:</span></span><br><span class="line">              <span class="attr">scheme:</span> <span class="string">HTTPS</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">              <span class="attr">port:</span> <span class="number">8443</span></span><br><span class="line">            <span class="attr">initialDelaySeconds:</span> <span class="number">30</span></span><br><span class="line">            <span class="attr">timeoutSeconds:</span> <span class="number">30</span></span><br><span class="line">          <span class="attr">securityContext:</span></span><br><span class="line">            <span class="attr">allowPrivilegeEscalation:</span> <span class="literal">false</span></span><br><span class="line">            <span class="attr">readOnlyRootFilesystem:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">runAsUser:</span> <span class="number">1001</span></span><br><span class="line">            <span class="attr">runAsGroup:</span> <span class="number">2001</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">kubernetes-dashboard-certs</span></span><br><span class="line">          <span class="attr">secret:</span></span><br><span class="line">            <span class="attr">secretName:</span> <span class="string">kubernetes-dashboard-certs</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tmp-volume</span></span><br><span class="line">          <span class="attr">emptyDir:</span> &#123;&#125;</span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">      <span class="attr">nodeSelector:</span></span><br><span class="line">        <span class="attr">&quot;kubernetes.io/os&quot;:</span> <span class="string">linux</span></span><br><span class="line">      <span class="comment"># Comment the following tolerations if Dashboard must not be deployed on master</span></span><br><span class="line">      <span class="attr">tolerations:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">node-role.kubernetes.io/master</span></span><br><span class="line">          <span class="attr">effect:</span> <span class="string">NoSchedule</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">dashboard-metrics-scraper</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">dashboard-metrics-scraper</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8000</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">dashboard-metrics-scraper</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">dashboard-metrics-scraper</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">dashboard-metrics-scraper</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">revisionHistoryLimit:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">k8s-app:</span> <span class="string">dashboard-metrics-scraper</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">k8s-app:</span> <span class="string">dashboard-metrics-scraper</span></span><br><span class="line">      <span class="attr">annotations:</span></span><br><span class="line">        <span class="attr">seccomp.security.alpha.kubernetes.io/pod:</span> <span class="string">&#x27;runtime/default&#x27;</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">dashboard-metrics-scraper</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">kubernetesui/metrics-scraper:v1.0.4</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8000</span></span><br><span class="line">              <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">          <span class="attr">livenessProbe:</span></span><br><span class="line">            <span class="attr">httpGet:</span></span><br><span class="line">              <span class="attr">scheme:</span> <span class="string">HTTP</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">              <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line">            <span class="attr">initialDelaySeconds:</span> <span class="number">30</span></span><br><span class="line">            <span class="attr">timeoutSeconds:</span> <span class="number">30</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/tmp</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">tmp-volume</span></span><br><span class="line">          <span class="attr">securityContext:</span></span><br><span class="line">            <span class="attr">allowPrivilegeEscalation:</span> <span class="literal">false</span></span><br><span class="line">            <span class="attr">readOnlyRootFilesystem:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">runAsUser:</span> <span class="number">1001</span></span><br><span class="line">            <span class="attr">runAsGroup:</span> <span class="number">2001</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">      <span class="attr">nodeSelector:</span></span><br><span class="line">        <span class="attr">&quot;kubernetes.io/os&quot;:</span> <span class="string">linux</span></span><br><span class="line">      <span class="comment"># Comment the following tolerations if Dashboard must not be deployed on master</span></span><br><span class="line">      <span class="attr">tolerations:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">node-role.kubernetes.io/master</span></span><br><span class="line">          <span class="attr">effect:</span> <span class="string">NoSchedule</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tmp-volume</span></span><br><span class="line">          <span class="attr">emptyDir:</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>创建资源</p>
<p><code>kubectl get apply -f recommended.yaml</code></p>
</li>
<li><p>修改资源的svc为NodePort形式</p>
</li>
<li><p>因为一开始创建dashboard的时候默认创建的是一个最小权限的用户，因此我们需要自己去创建一个角色用户进行登录</p>
<ul>
<li><p>创建ServiceAccount资源</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span> </span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span> </span><br><span class="line"><span class="attr">metadata:</span> </span><br><span class="line">	<span class="attr">name:</span> <span class="string">admin-user</span> </span><br><span class="line">	<span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br></pre></td></tr></table></figure></li>
<li><p>创建角色绑定资源</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span> </span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cluster-admin</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br></pre></td></tr></table></figure>

<p>注意：cluster-admin是k8s自己创建的角色</p>
</li>
<li><p>创建总的资源文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span> </span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span> </span><br><span class="line"><span class="attr">metadata:</span> </span><br><span class="line">	<span class="attr">name:</span> <span class="string">admin-user</span> </span><br><span class="line">	<span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span> </span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cluster-admin</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br></pre></td></tr></table></figure></li>
<li><p>创建两种资源</p>
<p><code>kubectl apply -f &#123;file&#125;</code></p>
</li>
</ul>
</li>
<li><p>查看创建账户的token</p>
<p><code>kubectl get secrets -n kubernetes-dashboard</code></p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210704173532.png" alt="image-20210704173531428"></p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210704173615.png" alt="image-20210704173614192"></p>
<p>注意：需要将token进行base64进行解密</p>
</li>
</ol>
]]></content>
      <categories>
        <category>K8S</category>
      </categories>
      <tags>
        <tag>K8S</tag>
      </tags>
  </entry>
  <entry>
    <title>安装网络插件</title>
    <url>/2022/01/07/K8S/%E5%AE%89%E8%A3%85%E7%BD%91%E7%BB%9C%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="CNI网络插件"><a href="#CNI网络插件" class="headerlink" title="CNI网络插件"></a>CNI网络插件</h3><p>定义：Container NetWork Interface</p>
<p>主要需要符合以下三个节点：</p>
<ol>
<li>node与node互通</li>
<li>pod与pod互通</li>
<li>node与pod互通</li>
</ol>
<p>官方现在支持以下几种CNI插件</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210704124356.png" alt="image-20210628222753740"></p>
<p>安装插件的步骤：</p>
<ol>
<li><p>wget下yaml文件</p>
</li>
<li><p><code>kubectl apply -f calico.yaml</code></p>
</li>
<li><p>只有安装CNI插件之后才能使得node变为ready状态</p>
</li>
</ol>
]]></content>
      <categories>
        <category>K8S</category>
      </categories>
      <tags>
        <tag>K8S</tag>
      </tags>
  </entry>
  <entry>
    <title>有状态应用</title>
    <url>/2022/01/07/K8S/%E6%9C%89%E7%8A%B6%E6%80%81%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h3 id="无状态和有状态区别"><a href="#无状态和有状态区别" class="headerlink" title="无状态和有状态区别"></a>无状态和有状态区别</h3><ul>
<li><p>无状态</p>
<ul>
<li>认为Pod都是一样的</li>
<li>没有顺序要求</li>
<li>不用考虑在哪个node运行</li>
<li>可以随意进行伸缩和扩展</li>
</ul>
</li>
<li><p>有状态</p>
<ul>
<li><p>上面因素都需要考虑到</p>
</li>
<li><p>让每一个Pod独立，保持Pod启动顺序和唯一性</p>
<ul>
<li><p>唯一性</p>
<p>唯一的网络表示，持久化存储</p>
</li>
<li><p>有序</p>
<p>mysql主从</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="部署有状态应用"><a href="#部署有状态应用" class="headerlink" title="部署有状态应用"></a>部署有状态应用</h3><ul>
<li><p>无头Service</p>
<p>表现形式就是ClusterIP：None</p>
</li>
<li><p>StatefulSet部署有状态应用</p>
<p>Service：</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210704124414.png" alt="image-20210702091329560" style="zoom:50%;" />



<p>StatefulSet：</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210704124420.png" alt="image-20210702091231843" style="zoom:50%;" />



<p>查看无头Service：</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210704124425.png" alt="image-20210702091404930" style="zoom:50%;" /></li>
</ul>
<h3 id="Deployment和StatefulSet区别：有身份的（唯一标识的）"><a href="#Deployment和StatefulSet区别：有身份的（唯一标识的）" class="headerlink" title="Deployment和StatefulSet区别：有身份的（唯一标识的）"></a>Deployment和StatefulSet区别：有身份的（唯一标识的）</h3><ul>
<li><p>根据主机名+按照一定规则生成域名</p>
</li>
<li><p>每一个Pod都有唯一的主机名</p>
</li>
<li><p>每一个Pod都有唯一的域名</p>
<p>域名格式：</p>
<p>主机名称.service名称.名称空间.svc.cluster.local</p>
</li>
</ul>
]]></content>
      <categories>
        <category>K8S</category>
      </categories>
      <tags>
        <tag>K8S</tag>
      </tags>
  </entry>
  <entry>
    <title>查看etcd中的数据</title>
    <url>/2022/01/07/K8S/%E6%9F%A5%E7%9C%8Betcd%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><p>进入k8s中的etcd容器，然后执行</p>
<p><code>etcdctl --cacert=/etc/kubernetes/pki/etcd/ca.crt --cert=/etc/kubernetes/pki/etcd/healthcheck-client.crt --key=/etc/kubernetes/pki/etcd/healthcheck-client.key get  /registry/services/endpoints/bookinfo/details  &gt; /tmp/test.json</code></p>
<h2 id="可视化界面"><a href="#可视化界面" class="headerlink" title="可视化界面"></a>可视化界面</h2><ol>
<li><p>在使用etcd-keeper的时候需要会发生超时的错误，主要原因是没有修改etcdkeeper下面的index.html中的超时时间，需要设置长一些</p>
</li>
<li><p>具体参考</p>
<p><a href="https://www.cnblogs.com/lp19910807/p/14959250.html">https://www.cnblogs.com/lp19910807/p/14959250.html</a></p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=etcdkeeper service</span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/opt/etcdkeeper/etcdkeeper -h 172.23.27.224 -p 8800 -cacert /etc/kubernetes/pki/etcd/ca.crt -cert /etc/kubernetes/pki/etcd/server.crt -key /etc/kubernetes/pki/etcd/server.key  -timeout 300000 -usetls</span><br><span class="line">ExecReload=/bin/kill -HUP $MAINPID</span><br><span class="line">KillMode=process</span><br><span class="line">Restart=on-failure</span><br><span class="line">PrivateTmp=true</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>K8S</category>
      </categories>
      <tags>
        <tag>K8S</tag>
      </tags>
  </entry>
  <entry>
    <title>安装</title>
    <url>/2022/01/07/Kafka/Kafka%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<ol>
<li><p>安装zookeeper并启动</p>
</li>
<li><p> 启动脚本</p>
</li>
</ol>
   <img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210120194702.png" alt="image-20210120194658530" style="zoom:50%;" />

]]></content>
      <categories>
        <category>Kafka</category>
      </categories>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>几个概念</title>
    <url>/2022/01/07/Kafka/%E5%87%A0%E4%B8%AA%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h2 id="Kafka架构图"><a href="#Kafka架构图" class="headerlink" title="Kafka架构图"></a>Kafka架构图</h2><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210120192301.png" alt="image-20210120192249683" style="zoom:50%;" />

<ol>
<li><p>kafka集群中只有leader与生成者进行连接，follower只是作为副本使用的</p>
</li>
<li><p>同一个topic只能被同一个消费组里消费者进行消费，但是可以被不同组的消费者组中的一个进行消费</p>
</li>
<li><p>当消费者突然挂掉的话，会将当前消费者消费信息的进度</p>
<ul>
<li><p>保存在zookeeper里面（0.9之前）</p>
</li>
<li><p>存储在kafka本地（磁盘，默认存7天）中（0.9以及其之后）</p>
<p>改变的原因：持续不断的对zk进行访问拉取对系统不太友好</p>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Kafka</category>
      </categories>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>命令</title>
    <url>/2022/01/07/Kafka/%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="topic"><a href="#topic" class="headerlink" title="topic"></a>topic</h3><ul>
<li><p>list</p>
<p>Bin/kafka-top</p>
</li>
<li><p>创建的副本数不能多于机器数量，与hdfs不一样，hdfs是最大副本数，比如有三台机器，副本数为10，那么现在增加一台机器就会使得原来的副本+1，也是3-&gt;4</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Kafka</category>
      </categories>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>wget</title>
    <url>/2022/01/07/Linux/wget/</url>
    <content><![CDATA[<ol>
<li><p>下载某一url目录下的所有文件</p>
<p>wget -c -r -np -k -L -p <a href="http://www.xxx.org/pub/path/">www.xxx.org/pub/path/</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>定时任务</title>
    <url>/2022/01/07/Linux/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<ol>
<li><p>基本语法</p>
<ul>
<li><p>crontab -e</p>
<p>加入定时任务</p>
</li>
<li><p>crontab -l</p>
<p>查看是任务列表</p>
</li>
<li><p>crontab -r</p>
<p>删除全部的定时任务</p>
</li>
</ul>
</li>
<li><p>查看crontab执行日志</p>
<p><code>/var/log/cron</code></p>
</li>
<li><p>设置定时任务</p>
<ul>
<li><p>编写脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">这两句话需要添加，因为有时候日志显示执行了但是实际上定时任务并没有生效因此需要写这两句话，以防万一</span></span><br><span class="line">source /etc/profile</span><br><span class="line">PATH=/usr/local/bin:$PATH</span><br><span class="line"></span><br><span class="line">ps aux|grep /usr/local/services/mongodb/bin/shared01.conf|grep -v grep</span><br><span class="line">if [ $? -ne 0 ]</span><br><span class="line">then</span><br><span class="line">sh /usr/local/services/mongodb/bin/start-shared01.sh</span><br><span class="line">echo &quot;shared01 start......&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;shared01 is runing.....&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">ps aux|grep /usr/local/services/mongodb/bin/shared02.conf|grep -v grep</span><br><span class="line">if [ $? -ne 0 ]</span><br><span class="line">then</span><br><span class="line">sh /usr/local/services/mongodb/bin/start-shared02.sh</span><br><span class="line">echo &quot;shared02 start......&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;shared02 is runing.....&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">ps aux|grep /usr/local/services/mongodb/bin/shared03.conf|grep -v grep</span><br><span class="line">if [ $? -ne 0 ]</span><br><span class="line">then</span><br><span class="line">sh /usr/local/services/mongodb/bin/start-shared03.sh</span><br><span class="line">echo &quot;shared03 start......&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;shared03 is runing.....&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>设置定时任务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br><span class="line"><span class="meta">#</span><span class="bash">进入到编辑页面，添加定时任务</span></span><br><span class="line">*/2 * * * * /bin/sh &#123;脚本路径&#125;   #每两分钟执行一次脚本</span><br></pre></td></tr></table></figure>

<p><a href="https://www.jianshu.com/p/d93e2b177814">参考</a></p>
</li>
<li><p>启动定时任务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemcatl start crond  #启动</span><br><span class="line">systemcatl restart crond  #重启</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>BLGC</title>
    <url>/2022/01/07/MySQL/BLGC/</url>
    <content><![CDATA[<h3 id="事务是如何提交的？事务提交先写binlog还是redo-log？如何保证这两部分的日志做到顺序一致性？"><a href="#事务是如何提交的？事务提交先写binlog还是redo-log？如何保证这两部分的日志做到顺序一致性？" class="headerlink" title="事务是如何提交的？事务提交先写binlog还是redo log？如何保证这两部分的日志做到顺序一致性？"></a>事务是如何提交的？事务提交先写binlog还是redo log？如何保证这两部分的日志做到顺序一致性？</h3><h4 id="MySQL没有开启Binary-log的情况下？"><a href="#MySQL没有开启Binary-log的情况下？" class="headerlink" title="MySQL没有开启Binary log的情况下？"></a>MySQL没有开启Binary log的情况下？</h4><p>Innodb通过Redo Log和Undo Log可以保证以上两点。为了保证严格的CrashSafe，必须要在每个事务提交的时候，将Redo Log写入硬件存储。这样做会牺牲一些性能，但是可靠性最好。为了平衡两者，InnoDB提供了一个innodb_flush_log_at_trx_commit系统变量，用户可以根据应用的需求自行调整。</p>
<p>通过redo日志将所有已经在存储引擎内部提交的事务应用redo log恢复，所有已经prepare但是没有commit的transactions将会应用undo log做rollback。然后客户端连接时就能看到已经提交的数据存在数据库内，未提交被回滚地数据需要重新执行。</p>
<h4 id="MySQL开启Binary-log的情况下？"><a href="#MySQL开启Binary-log的情况下？" class="headerlink" title="MySQL开启Binary log的情况下？"></a>MySQL开启Binary log的情况下？</h4><p>MySQL为了保证master和slave的数据一致性，就必须保证binlog和InnoDB redo日志的一致性（因为备库通过二进制日志重放主库提交的事务，而主库binlog写入在commit之前，如果写完binlog主库crash，再次启动时会回滚事务。但此时从库已经执行，则会造成主备数据不一致）。所以在开启Binlog后，如何保证binlog和InnoDB redo日志的一致性呢？为此，MySQL引入二阶段提交（two phase commit or 2pc），MySQL内部会自动将普通事务当做一个XA事务（内部分布式事物）来处理：</p>
<ol>
<li><p>准备阶段（Storage Engine（InnoDB） Transaction Prepare Phase）</p>
<p>此时SQL已经成功执行，并生成xid信息及redo和undo的内存日志。然后调用prepare方法完成第一阶段，papare方法实际上什么也没做，将事务状态设为TRX_PREPARED，并将redo log刷磁盘。</p>
</li>
<li><p>提交阶段(Storage Engine（InnoDB）Commit Phase)</p>
<ol>
<li><p>记录协调者日志，即Binlog日志。</p>
<p>如果事务涉及的所有存储引擎的prepare都执行成功，则调用TC_LOG_BINLOG::log_xid方法将SQL语句写到binlog（<font color=red>write()将binary log内存日志数据写入文件系统缓存，fsync()将binary log文件系统缓存日志数据永久写入磁盘</font>）。此时，事务已经铁定要提交了。否则，调用ha_rollback_trans方法回滚事务，而SQL语句实际上也不会写到binlog。</p>
</li>
<li><p>告诉引擎做commit。</p>
<p>最后，调用引擎的commit完成事务的提交。会清除undo信息，刷redo日志，将事务设为TRX_NOT_STARTED状态。</p>
<p><font color=red>记录Binlog是在InnoDB引擎Prepare（即Redo Log写入磁盘）之后，这点至关重要。</font></p>
</li>
</ol>
<p>由上面的二阶段提交流程可以看出，一旦步骤2中的操作完成，就确保了事务的提交，即使在执行步骤3时数据库发送了宕机。此外需要注意的是，每个步骤都需要进行一次fsync操作才能保证上下两层数据的一致性。步骤2的fsync参数由sync_binlog=1控制，步骤3的fsync由参数innodb_flush_log_at_trx_commit=1控制，俗称“双1”，是保证CrashSafe的根本。</p>
</li>
</ol>
<p><strong>原理</strong>：</p>
<p>事务的两阶段提交协议保证了无论在任何情况下，事务要么同时存在于存储引擎和binlog中，要么两个里面都不存在，这就保证了主库与从库之间数据的一致性。如果数据库系统发生崩溃，当数据库系统重新启动时会进行崩溃恢复操作，存储引擎中处于prepare状态的事务会去查询该事务是否也同时存在于binlog中，如果存在就在存储引擎内部提交该事务（因为此时从库可能已经获取了对应的binlog内容），如果binlog中没有该事务，就回滚该事务。例如：当崩溃发生在第一步和第二步之间时，明显处于prepare状态的事务还没来得及写入到binlog中，所以该事务会在存储引擎内部进行回滚，这样该事务在存储引擎和binlog中都不会存在；当崩溃发生在第二步和第三步之间时，处于prepare状态的事务存在于binlog中，那么该事务会在存储引擎内部进行提交，这样该事务就同时存在于存储引擎和binlog中。</p>
<h4 id="为了保障主从复制安全，故障恢复是如何做的？"><a href="#为了保障主从复制安全，故障恢复是如何做的？" class="headerlink" title="为了保障主从复制安全，故障恢复是如何做的？"></a>为了保障主从复制安全，故障恢复是如何做的？</h4><p>开启Binary log的MySQL在crash recovery时：MySQL在prepare阶段会生成xid，然后会在commit阶段写入到binlog中。在进行恢复时事务要提交还是回滚，是由Binlog来决定的。</p>
<p><font color=red>一个事务在prepare阶段中落盘成功，并在MySQL Server层中的binlog也写入成功，那这个事务必定commit成功</font></p>
<h4 id="为什么需要保证二进制日志的写入顺序和InnoDB层事务提交顺序一致性呢？"><a href="#为什么需要保证二进制日志的写入顺序和InnoDB层事务提交顺序一致性呢？" class="headerlink" title="为什么需要保证二进制日志的写入顺序和InnoDB层事务提交顺序一致性呢？"></a>为什么需要保证二进制日志的写入顺序和InnoDB层事务提交顺序一致性呢？</h4><img src="https://img-service.csdnimg.cn/img_convert/2e8f31646e4e70ce2fb70e071d4c4171.png" alt="img" style="zoom:50%;" />

<p>如上图，事务按照T1、T2、T3顺序开始执行，将二进制日志（按照T1、T2、T3顺序）写入日志文件系统缓冲，调用fsync()进行一次group commit将日志文件永久写入磁盘，但是存储引擎提交的顺序为T2、T3、T1(也就是顺序不一致)。当T2、T3提交事务之后，若通过在线物理备份进行数据库恢复来建立复制时，因为在InnoDB存储引擎层会检测事务T3在上下两层都完成了事务提交（他不会去检查T1是否已经提交了），不需要在进行恢复了，此时主备数据不一致（搭建Slave时，change master to的日志偏移量记录T3在事务位置之后）。</p>
<h3 id="BLGC（Binary-Log-Group-Commit）"><a href="#BLGC（Binary-Log-Group-Commit）" class="headerlink" title="BLGC（Binary Log Group Commit）"></a>BLGC（Binary Log Group Commit）</h3><h3 id="组提交后如何保证事务记录到binlog的顺序和-事务提交到存储引擎的一致性呢？"><a href="#组提交后如何保证事务记录到binlog的顺序和-事务提交到存储引擎的一致性呢？" class="headerlink" title="组提交后如何保证事务记录到binlog的顺序和 事务提交到存储引擎的一致性呢？"></a>组提交后如何保证事务记录到binlog的顺序和 事务提交到存储引擎的一致性呢？</h3><p>MySQL 5.6 BLGC技术出现后，在这种情况下，不但MySQL数据库上层二进制日志写入是group commit的，InnoDB存储引擎层也是group commit的。此外还移除了原先的锁prepare_commit_mutex，从而大大提高了数据库的整体性。其事务的提交（commit）过程分成三个阶段，Flush stage、Sync stage、Commit stage。</p>
<p><strong>Binlog组提交的基本思想是，引入队列机制保证Innodb commit顺序与binlog落盘顺序一致</strong>，并将事务分组，组内的binlog刷盘动作交给一个事务进行，实现组提交目的。在MySQL数据库上层进行提交时首先按顺序将其放入一个队列中，队列中的第一个事务称为leader，其他事务称为follow，leader控制着follow的行为。</p>
<p>当一个事务来到一个stage是一个空队列，那么他就是leader，后面来的事务就是follower，leader控制队列中follower的行为。如果<font color=red>leader带着自己的follower去下一个stage</font>，是非空队列，那么leader变成follower。但是follower不会变成leader。</p>
<img src="https://img-service.csdnimg.cn/img_convert/af22285b3cdd1b247a426105c59ff5d2.png" alt="img" style="zoom:50%;" />

<p>从上图可以看出，每个阶段都有一个队列，每个队列有一个mutex保护，约定进入队列第一个线程为leader，其他线程为follower，所有事情交由leader去做，leader做完所有动作后，通知follower刷盘结束。BLGC就是将事务提交分为了3个阶段，FLUSH阶段，SYNC阶段和COMMIT阶段。</p>
<ul>
<li>Flush Stage</li>
</ul>
<p>将每个事务的二进制日志写入内存中。</p>
<ol>
<li><p>持有Lock_log mutex [leader持有，follower等待]。</p>
</li>
<li><p>获取队列中的一组binlog(队列中的所有事务)。</p>
</li>
<li><p>将binlog buffer到I/O cache。</p>
</li>
<li><p>通知dump线程dump binlog。</p>
</li>
</ol>
<ul>
<li>Sync Stage</li>
</ul>
<p>将内存中的二进制日志刷新到磁盘，若队列中有多个事务，那么仅一次fsync操作就完成了二进制日志的写入，这就是BLGC。</p>
<ol>
<li><p>释放Lock_log mutex，持有Lock_sync mutex[leader持有，follower等待]。</p>
</li>
<li><p>将一组binlog 落盘(sync动作，最耗时，假设sync_binlog为1)。</p>
</li>
</ol>
<ul>
<li>Commit Stage</li>
</ul>
<p><strong>leader根据顺序调用存储引擎层事务的提交</strong>，Innodb本身就支持group commit，因此修复了原先由于锁prepare_commit_mutex导致group commit失效的问题。</p>
<ol>
<li><p>释放Lock_sync mutex，持有Lock_commit mutex[leader持有，follower等待]。</p>
</li>
<li><p>遍历队列中的事务，逐一进行innodb commit。</p>
</li>
<li><p>释放Lock_commit mutex。</p>
</li>
<li><p>唤醒队列中等待的线程。</p>
</li>
</ol>
<p>说明：由于有多个队列，每个队列各自有mutex保护，队列之间是顺序的，约定进入队列的一个线程为leader，因此FLUSH阶段的leader可能是SYNC阶段的follower，但是follower永远是follower。</p>
<p>当有一组事务在进行commit阶段时，其他新事物可以进行Flush阶段，从而使group commit不断生效。当然group commit的效果由队列中事务的数量决定，若每次队列中仅有一个事务，那么可能效果和之前差不多，甚至会更差。但当提交的事务越多时，group commit的效果越明显，数据库性能的提升也就越大。</p>
<p>MySQL提供了一个参数binlog_max_flush_queue_time（MySQL 5.7.9版本失效），默认值为0，用来控制MySQL 5.6新增的BLGC（binary log group commit），就是二进制日志组提交中Flush阶段中等待的时间，即使之前的一组事务完成提交，当前一组的事务也不马上进入Sync阶段，而是至少需要等待一段时间，这样做的好处是group commit的事务数量更多，然而这也可能会导致事务的响应时间变慢。该参数默认为0表示不等待，且推荐设置依然为0。除非用户的MySQL数据库系统中有大量的连接（如100个连接），并且不断地在进行事务的写入或更新操作。</p>
<p><a href="https://www.cnblogs.com/xibuhaohao/p/10899586.html">参考</a></p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>InnoDB技术探究</tag>
      </tags>
  </entry>
  <entry>
    <title>CheckPoint</title>
    <url>/2022/01/07/MySQL/CheckPoint/</url>
    <content><![CDATA[<h3 id="检查点的作用"><a href="#检查点的作用" class="headerlink" title="检查点的作用"></a>检查点的作用</h3><ul>
<li>缩短数据库的恢复时间</li>
<li>缓冲池不够用时，将脏页刷新到磁盘</li>
<li>重做日志不可用时，刷新脏页</li>
</ul>
<h3 id="CheckPoint的种类"><a href="#CheckPoint的种类" class="headerlink" title="CheckPoint的种类"></a>CheckPoint的种类</h3><ul>
<li><p>Sharp Checkpoint</p>
<p>数据库关闭时会将所有的脏页都刷新会磁盘</p>
<p>对应参数：innodb_fast_shutdown = 1</p>
</li>
<li><p>Fuzzy Checkpoint</p>
<p>只刷新一部分脏页</p>
<p>触发时机：</p>
<ul>
<li><p>master thread checkpoint</p>
<p>每秒或者每10秒的速度从缓冲池的脏页列表刷新一定比例的页回磁盘 （异步）</p>
</li>
<li><p>Flush_LRU_LIST checkpoint</p>
<p>InnoDB需要保证LRU列表中需要有100个空闲页可供使用，如果小于该数字，则需要将LRU列表尾端的页移除，如果其中存在脏页，那么需要Checkpoint</p>
<p>该检查被放到Page Cleaner线程中进行</p>
<p>对应参数：innodb_lru_scan_depth</p>
<p><code>show variables like &#39;innodb_lru_scan_depth&#39;;</code></p>
</li>
<li><p>Async/Sync Flush Checkpoint</p>
<p>发生在重做日志不可用的情况，需要强制将一些页刷新会磁盘，而此时脏页是从脏页列表中选取的，这可以保证重做日志文件可循环使用（因为重做日志大小是有限的）</p>
<p>触发的时机如下：</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210714110708.png" alt="image-20210714110636273"></p>
<p>​        可以通过<code>show engine innodb status\G</code></p>
<p>​        中的async flush 和 sync flush查看</p>
</li>
<li><p>Dirty Page too much Checkpoint</p>
<p>当脏页太多时触发</p>
<p>对应参数innodb_max_dirty_pages_pct</p>
<p>当缓冲池中的脏页数量的占比达到75%的时候会触发CheckPoint</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>InnoDB技术探究</tag>
      </tags>
  </entry>
  <entry>
    <title>InnoDB</title>
    <url>/2022/01/07/MySQL/InnoDB/</url>
    <content><![CDATA[<h3 id="InnoDB体系架构"><a href="#InnoDB体系架构" class="headerlink" title="InnoDB体系架构"></a>InnoDB体系架构</h3><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210713093309.png" alt="image-20210713093304615" style="zoom:50%;" />

<p>后台线程的作用</p>
<ul>
<li>负责刷新内存池中的数据，保存缓冲池中的内存缓存是最近的数据</li>
<li>将已经修改 大数据文件刷新到磁盘文件</li>
<li>保证数据库发生异常能够恢复</li>
</ul>
<h4 id="后台线程类型"><a href="#后台线程类型" class="headerlink" title="后台线程类型"></a>后台线程类型</h4><ul>
<li><p>Master Thread （核心线程）</p>
<p>==作用==</p>
<ul>
<li>将缓冲池中的数据异步刷新到磁盘，保证数据一致性</li>
</ul>
<p><strong>Matser Thread优先级是最高的</strong></p>
<p>==组成：==</p>
<ul>
<li><p>主循环 loop （主要状态）</p>
<ul>
<li><p>每秒操作</p>
<ul>
<li><p>日志缓冲刷新到磁盘，即使没有提交 （总是）</p>
</li>
<li><p>合并缓冲 （可能）</p>
<p>当前一秒内IO操作次数&lt;5 执行该操作</p>
</li>
<li><p>至多刷新100个InnoDB的缓冲池中的脏页到磁盘 （可能）</p>
<p>当前缓冲池中的脏页比例&gt;对应参数innodb_max_dirty_pages_pct 执行该操作</p>
</li>
<li><p>如果没有当前用户活动，切换至backgroup loop （可能）</p>
</li>
</ul>
</li>
<li><p>每10s操作</p>
<ul>
<li><p>刷新100个脏页到磁盘（可能）</p>
<p>当前10s内IO次数&lt;200 执行该操作</p>
</li>
<li><p>合并至多5个插入缓冲区（总是）</p>
</li>
<li><p>将日志缓冲刷新到磁盘（总是）</p>
</li>
<li><p>删除无用的Undo页（总是）</p>
<p>full page操作</p>
<p>最多尝试回收20个undo页</p>
</li>
<li><p>刷新100个或者10个脏页到磁盘（总是）</p>
<p>脏页比例&gt;70% 刷新100个到磁盘</p>
<p>脏页比例&lt;70% 刷新10个到磁盘</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>后台循环 backgroup loop</p>
<ul>
<li>删除无用的undo页（总是）</li>
<li>合并20个插入缓冲区 （总是）</li>
<li>跳回到主循环（总是）</li>
<li>不断刷新100个页直到符合条件 （可能跳转到flush loop中完成）</li>
</ul>
</li>
<li><p>刷新循环 flush loop</p>
</li>
<li><p>暂停循环 suspend loop</p>
</li>
</ul>
<p>==切换状态==</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210715095737.png" alt="image-20210715095730533"></p>
<p>==Master Thread的更新==</p>
<ul>
<li><p>添加了可以自定义的数值Innodb_io_capacity</p>
<ul>
<li>在合并插入缓冲时（insert buffer），合并插入缓冲的数量为innodb_io_capacity的5%</li>
<li>从缓冲区刷新脏页时，刷新脏页的数量为innodb_io_capacity</li>
</ul>
</li>
<li><p>添加了innodb_adaptive_flushing参数</p>
<p>该参数开启之后可以通过一个函数来判断需要刷新脏页最合适的数量，相当于一个自适应的参数开启，而不是靠原来innodb_max_dirty_pages_pct的参数决定刷新脏页的数量</p>
<p>该函数是通过判断重做日志的速度来决定最适合的刷新脏页的数量</p>
<p><strong>注意：开启该参数之后当脏页比例小于innodb_max_dirty_pages_pct的时候也会刷新一定量的脏页</strong></p>
</li>
<li><p>添加了参数innodb_purge_batch_size</p>
<p>可以通过修改该参数控制full purge时回收Undo页的数量</p>
</li>
<li><p>刷新脏页的操作从master thread分离到一个单独的page cleaner thread</p>
</li>
</ul>
<p>==查看系统的负载==</p>
<p>可以通过<code>show engine innodb status\G </code>中的srv_main_thread loop中的1_seconds和sleeps中的差值来反映当前数据库的负载压力</p>
</li>
<li><p>IO Thread</p>
<ul>
<li><p>作用：</p>
<ul>
<li>负责IO请求的回调</li>
</ul>
</li>
<li><p>IO种类：</p>
<ul>
<li>read</li>
<li>write</li>
<li>insert buffer</li>
<li>log IO thread</li>
</ul>
<p><strong>注意：在MySQL5.1.X之前linux下IO Thread数量不能调整，但是现在版本在linux上可以根据CPU核心数进行调整，之前和现在的在windows平台下可以调整</strong></p>
<p>现在版本的InnoDB中的read和write已经分别增大到了4个</p>
<p><a href="https://blog.csdn.net/weixin_40901788/article/details/84969375">IO Thread的个数参考</a></p>
</li>
<li><p>相关命令</p>
<ul>
<li><p>查看InnoDB版本</p>
<p><code>show variables like &#39;innodb_version&#39;\G</code></p>
</li>
<li><p>查看read和write线程数量</p>
<p><code>show variables like &#39;innodb_%io_threads&#39;\G</code></p>
</li>
<li><p>查看当前各个线程状态</p>
<p><code>show engine innodb status\G</code></p>
<p>可以看到总的线程状态为：</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210713094949.png" alt="image-20210713094947694"></p>
<p>其中insert buffer thread数量为1，log thread数量为1，read和write分别为4</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Purge Thread</p>
<p>事物被提交之后其所使用过的undolog可能不再需要，因此需要PurgeThread来回收已经使用并分配到undo页</p>
<p>之前的版本purge操作都是在master thread中完成的，从1.1版本开始purge thread可以独立到单独的线程中进行 </p>
<ul>
<li><p>如何启用独立的purge thread？</p>
<p>在配置文件中添加如下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">innodb_purge_threads = 1 #1.1版本只能有1个，之后版本可以设置为多个</span><br></pre></td></tr></table></figure></li>
<li><p>查看purge thread数量</p>
<p><code> show variables like &#39;innodb_purge_threads&#39;\G</code></p>
</li>
</ul>
</li>
<li><p>Page Cleaner Thread</p>
<ul>
<li><p>作用</p>
<p>将之前版本中的脏页的刷新操作放入到单独的线程中完成</p>
</li>
</ul>
</li>
</ul>
<h4 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h4><ul>
<li><p>页从缓冲区刷新回磁盘的操作并不是每次页发生变更时触发的，而是通过一种成为Checkpoint的机制刷新回磁盘</p>
</li>
<li><p>内存结构</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210713104018.png" alt="image-20210713104013265" style="zoom:50%;" /></li>
<li><p>缓冲池相关指令</p>
<ul>
<li><p>查看缓冲池大小 (单位为字节，除以三个1024单位为G)</p>
<p><code>show variables like &#39;innodb_buffer_pool_size&#39;\G</code></p>
</li>
</ul>
</li>
<li><p>缓冲池实例</p>
<p>InnoDB允许有多个缓冲池实例，每个页根据哈希值平均分配到不同的缓冲池实例中，这样可以减少数据库内部资源竞争，增加数据库的并发</p>
<ul>
<li><p>缓冲池实例指令</p>
<ul>
<li><p>查看缓冲池实例个数</p>
<p><code>show variables like &#39;innodb_buffer_pool_instances&#39;\G</code></p>
</li>
<li><p>查看每个缓冲池的状态</p>
<p><code>show engine innodb status\G</code></p>
<p>在INDIVIDUAL BUFFER POOL INFO标签下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use information_schema;</span><br><span class="line">select pool_id,pool_size,free_buffers,database_pages from INNODB_BUFFER_POOL_STATS\G</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>缓冲池配置注意事项</p>
<p>要启用多个缓冲池实例，请将innodb_buffer_pool_instances配置选项设置为 大于1(默认)的值，最大为64(最大)。仅当您将innodb_buffer_pool_size大小设置为1GB或更大时，此选项才生效 。您指定的总大小将分配给所有缓冲池。为了获得最佳效率，指定的组合 innodb_buffer_pool_instances 和innodb_buffer_pool_size，使得每个缓冲池实例是至少为1GB。</p>
</li>
</ul>
</li>
<li><p>LRU List</p>
<ul>
<li><p>缓冲区的管理策略为LRU：频繁使用的页放在前端，最少使用的页放在后端</p>
</li>
<li><p>默认缓冲区中的每页大小为16K</p>
</li>
<li><p>LRU的优化</p>
<p>新加入的页面不是立刻放入LRU页表的首部，而是放在LRU列表的midpoint位置</p>
<p>该位置查询指令</p>
<p><code>show variables like &#39;innodb_old_blocks_pct&#39;\G</code></p>
<p>指的是距离LTU列表尾端多少的百分比</p>
<p>在 midpoint之前的为new表，之后的为old表</p>
<p>优化的原因：</p>
<p>因为有些操作需要表中的许多数据，比如说是索引，数据扫描（select * ）操作只是在一次操作中使用到，但并非是真正的热点操作。</p>
</li>
<li><p>相关参数</p>
<ul>
<li><p>innodb_old_blocks_pct</p>
<p>可以看到，参数innodb_old_blocks_pct 默认值是37，表示新读取的页插入到LRU列表尾端的37%的位置（差不多3/8的位置）。在innodb存储引擎中，把midpoint之后的列表称为old列表，之前的列表称为new列表。可以简单理解为new列表中的页都是最为活跃的热点数据。</p>
<p>innodb的37%的空间是可以让人来刷的。（意思就是内存的37%拿出来让人刷，就是冷数据区的大小）；<br>建议innodb_old_blocks_pct 调成20%（调整内存参数）：</p>
<p><code>set global innodb_old_blocks_pct = 20;</code></p>
<p>即，一个64G的物理内存，80%给数据库，数据库的80%给热数据区，即40.96G给了热数据区。</p>
</li>
</ul>
<ul>
<li><p>innodb_old_blocks_time</p>
<p>这个参数用来表示 页读取到mid位置后，需要等待多久才会被加入到LRU列表的热端。<br>使LRU列表中的热点数据不被刷出：</p>
<p><code>set global innodb_old_blocks_time=1000；</code></p>
<p>放在冷热数据交界处，默认1000ms，过了这1s，还能存活下去，就调到热数据区了。</p>
</li>
</ul>
</li>
<li><p>查看当前LRU列表情况</p>
<p>命令</p>
<p><code>show engine innodb status\G</code></p>
<ul>
<li><p>free buffers</p>
<p>当前free列表中页的数量</p>
</li>
<li><p>database pages</p>
<p>LRU列表中的数量</p>
<p>注意：有可能free buffers+database pages!=buffer pool size,因为有可能页会被分配给自适应哈希索引，Lock信息，Insert Buffer等页</p>
</li>
<li><p>pages made young</p>
<p>LRU列表中页移动到前端的次数</p>
</li>
<li><p>buffer pool hit rate</p>
<p>缓冲池的命中率 如果&lt;95%则效果不太好，正常都是&gt;95%</p>
</li>
<li><p>查看每个LRU列表中的每个页的具体信息</p>
<p><code>select table_name,space,page_number,page_type from INNODB_BUFFER_PAGE_LRU where space = 1;</code></p>
</li>
</ul>
</li>
<li><p>LRU列表中的压缩页</p>
<p>支持压缩页的功能，将原来的16K压缩为1K，2K，4K和8K</p>
<p>对于非16K的页是通过unzip_LRU进行管理的</p>
<p>这些压缩页的分配策略是伙伴算法</p>
<p>查看压缩页指令</p>
<p><code>select table_name,space,page_number,compresed_size from INNODB_BUFFER_PAGE_LRU where compresed_size != 0;</code></p>
</li>
<li><p>LRU表中的脏页</p>
<ul>
<li><p>定义</p>
<p>当LRU表中页被修改了之后成为脏页，数据库会在checkpoint时机将其刷新回磁盘</p>
</li>
<li><p>脏页所在地点</p>
<p>flush list中的页就是脏页列表</p>
<p>脏页不仅存在于flush list中，同样也存在于LRU 列表中（因为不可能每次都将脏页存放到flush list中）</p>
<p>flush list用来管理将脏页写回到磁盘</p>
</li>
<li><p>脏页相关命令</p>
<ul>
<li><p>查看脏页</p>
<p><code>select table_name,space,page_number,page_type from INNODB_BUFFER_PAGE_LRU where OLDEST_MODIFICATION&gt;0;</code></p>
<p>或者是</p>
<p><code>show engine innodb status\G</code></p>
<p>中的Modified db pages</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>重做日志缓冲</p>
<ul>
<li><p>定义</p>
<p>首先将重做日志信息存放到这个缓冲区，然后按照一定频率将其刷新到重做日志文件</p>
</li>
<li><p>刷新到重做日志文件时机</p>
<ul>
<li>Master thread每一秒将其刷新到重做日志</li>
<li>每个事物提交时会将重做日志刷新到重做日志</li>
<li>当重做日志缓冲池剩余空间小于1/2时，重做日志缓冲刷新到重做日志文件</li>
</ul>
</li>
<li><p>重做日志缓冲区大小</p>
<ul>
<li><p>只需要保证每秒产生的事务量在这个缓冲区大小之内即可</p>
</li>
<li><p>一般默认是8M，满足绝大部分应用</p>
</li>
<li><p>查看指令</p>
<p><code>show variables like &#39;innodb_log_buffer_size&#39;\G</code></p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>额外内存池</p>
<p>InnoDB对内存管理是内存堆的方式进行</p>
<p>innodb_buffer_pool_size:主要针对InnoDB表性能影响最大的一个参数。功能与Key_buffer_size一样。InnoDB占用的内存，除innodb_buffer_pool_size用于存储页面缓存数据外，另外正常情况下还有大约8%的开销，主要用在每个缓存页帧的描述、adaptive hash、缓冲控制对象等数据结构，如果不是安全关闭，启动时还要恢复的话，还要另开大约12%的内存用于恢复，两者相加就有差不多21%的开销。</p>
<p>因此在申请了很大的InnoDB缓冲池时，也应考虑相应增加这个值</p>
</li>
</ul>
<h3 id="启动、恢复与关闭"><a href="#启动、恢复与关闭" class="headerlink" title="启动、恢复与关闭"></a>启动、恢复与关闭</h3><h4 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h4><ul>
<li><p>对应参数</p>
<p>innodb_fast_shutdown</p>
</li>
<li><p>参数选项</p>
<ul>
<li><p>0</p>
<p>数据库关闭时，InnoDB需要完成所有的full purge和merge Insert buffer，并且将脏页刷新会磁盘</p>
<p>在进行InnoDB升级时，必须将该参数调为0，在关闭数据库</p>
</li>
<li><p>1（默认值）</p>
<p>不需要完成full purge和merge Insert buffer操作，但是缓冲池的数据脏页会刷新会磁盘</p>
</li>
<li><p>2</p>
<p>不完成full purge和merge Insert buffer操作，也不将缓冲池中的数据脏页写回磁盘，而是将日志都写入日志文件，下次数据库启动时会进行恢复操作</p>
</li>
</ul>
</li>
</ul>
<h4 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h4><ul>
<li><p>对应参数</p>
<p>innodb_force_recovery</p>
</li>
<li><p>参数选项</p>
<ul>
<li><p>0 （默认）</p>
<p>进行所有的恢复操作</p>
</li>
<li><p>1</p>
<p>忽略检查到的corrupt页</p>
</li>
<li><p>2</p>
<p>阻止Master Thread线程的运行</p>
</li>
<li><p>3</p>
<p>不进行事务的回滚操作</p>
</li>
<li><p>4</p>
<p>不进行插入缓冲的合并操作</p>
</li>
<li><p>5</p>
<p>不查看撤销日志（undo_log），InnoDB存储引擎会将未提交的事务视为已提交</p>
</li>
<li><p>6</p>
<p>不进行前滚操作</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>InnoDB技术探究</tag>
      </tags>
  </entry>
  <entry>
    <title>InnoDB存储引擎文件</title>
    <url>/2022/01/07/MySQL/InnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h4 id="表空间文件"><a href="#表空间文件" class="headerlink" title="表空间文件"></a>表空间文件</h4><ul>
<li><p>系统表空间包含数据字典，双写缓冲，变更缓冲区、undo日志，以及在系统表空间创建的表的数据和索引。</p>
</li>
<li><p>名字为ibdata1</p>
</li>
</ul>
<h4 id="独立表空间文件"><a href="#独立表空间文件" class="headerlink" title="独立表空间文件"></a>独立表空间文件</h4><ul>
<li>存储该表的数据、索引和插入缓冲BITMAP等信息</li>
<li>名字为表名.ibd</li>
</ul>
<h4 id="重做日志文件"><a href="#重做日志文件" class="headerlink" title="重做日志文件"></a>重做日志文件</h4><ul>
<li><p>名字</p>
<p>ib_logfile0和ib_logfile1</p>
</li>
<li><p>每个InnoDB存储引擎至少有一个重做日志文件组，每个文件组下至少有2个重做日志文件（默认的ib_logfile0和ib_logfile1）。</p>
<p>可以根据需要设置多个镜像日志组，将不同的文件组放到不同的磁盘上。</p>
<p>日志组中的每个重做日志文件大小一致，并以写循环的方式运行。当重做日志1写满之后会往重做日志2写，最终2写满会往1写</p>
</li>
<li><p>对应参数</p>
<ul>
<li><p>innodb_log_file_size</p>
<p>这个参数对于存储引擎的性能影响十分大</p>
<ul>
<li>一方面不能设置的很大，否则恢复时间很长</li>
<li>不能设置很小，否则会经常切换</li>
</ul>
</li>
<li><p>innodb_log_files_in_group</p>
</li>
<li><p>innodb_mirrored_log_groups</p>
</li>
<li><p>innodb_log_group_home_dir</p>
</li>
</ul>
</li>
<li><p>与二进制文件的不同点</p>
<ul>
<li><p>对象不同</p>
<p>二进制日志记录所有MySQL有关的日志记录，包括其他引擎的，但redo log只记录该引擎本身的事务日志</p>
</li>
<li><p>内容不同</p>
<p>二进制日志记录的是逻辑日志，redo log记录的是关于每个页的更改的物理情况</p>
</li>
<li><p>时机不同</p>
<p>二进制日志在事务提交前提交，redo log记录的是在事务进行过程中，不断有重做日志记录到redo log中</p>
</li>
</ul>
</li>
<li><p>写入时机</p>
<ul>
<li><p>master thread 每秒将重做日志缓冲写入磁盘的重做日志文件中，不论事务是否已经提交</p>
</li>
<li><p>根据<code>innodb_flush_log_at_trx_commit</code>控制在commit操作时，处理重做日志的方式</p>
<ul>
<li><p>0</p>
<p>提交事务时，不将事务的重做日志写入到磁盘文件中，而是等待master thread的刷新</p>
</li>
<li><p>1</p>
<p>提交事务时将日志缓冲同步写到磁盘，伴有fsync操作</p>
</li>
<li><p>2</p>
<p>和1相比，没有fsync操作</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>InnoDB技术探究</tag>
      </tags>
  </entry>
  <entry>
    <title>InnoDB数据页结构</title>
    <url>/2022/01/07/MySQL/InnoDB%E6%95%B0%E6%8D%AE%E9%A1%B5%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h3 id="数据页结构"><a href="#数据页结构" class="headerlink" title="数据页结构"></a>数据页结构</h3><ul>
<li><p>结构</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210804114435.png" alt="image.png"></p>
</li>
<li><p>参考</p>
<ul>
<li><p><a href="http://blog.itpub.net/70000438/viewspace-2783582/">http://blog.itpub.net/70000438/viewspace-2783582/</a></p>
</li>
<li><p><a href="https://juejin.cn/post/6974225353371975693">https://juejin.cn/post/6974225353371975693</a></p>
</li>
</ul>
</li>
</ul>
<h4 id="File-Header"><a href="#File-Header" class="headerlink" title="File Header"></a>File Header</h4><ul>
<li><p>功能</p>
<p>记录页的一些头信息</p>
</li>
<li><p>结构</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210804100947.png" alt="image-20210804100945854"></p>
</li>
</ul>
<h4 id="Page-Header"><a href="#Page-Header" class="headerlink" title="Page Header"></a>Page Header</h4><ul>
<li><p>功能</p>
<p>记录数据页的状态信息</p>
</li>
<li><p>结构</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210804101018.png" alt="image-20210804101016996"></p>
</li>
</ul>
<h4 id="行记录"><a href="#行记录" class="headerlink" title="行记录"></a>行记录</h4><h5 id="Infimum-amp-Supremum-Records"><a href="#Infimum-amp-Supremum-Records" class="headerlink" title="Infimum&amp;Supremum Records"></a>Infimum&amp;Supremum Records</h5><ul>
<li><p>功能</p>
<p>限定记录的边界</p>
</li>
<li><p>创建时机</p>
<p>在数据页被初始化的时候，就会在数据页最后(当然在checksum之前)创建两个数据目录，分别指向最小和最大记录</p>
</li>
<li><p>Infimum Record</p>
<p>比任何主键值都要小的值</p>
</li>
<li><p>Supremum Record</p>
<p>比任何主键值都要大的值</p>
</li>
</ul>
<h5 id="User-Records"><a href="#User-Records" class="headerlink" title="User Records"></a>User Records</h5><p>实际存储行记录的内容</p>
<h5 id="Free-Space"><a href="#Free-Space" class="headerlink" title="Free Space"></a>Free Space</h5><ul>
<li><p>每当插入一条记录，就会从<code>Free Space</code>部分中申请一个记录大小的空间到<code>User Records</code>部分，当 Free Space 部分的空间用完之后，这个页也就使用完了。</p>
</li>
<li><p>在一条记录被删除后，该空间会被加入到空闲链表(Free Space)中</p>
</li>
</ul>
<h4 id="Page-Directory"><a href="#Page-Directory" class="headerlink" title="Page Directory"></a>Page Directory</h4><p>用户的记录是从低地址向高地址扩展，而数据目录则相反。在数据页被初始化的时候，就会在数据页最后(当然在checksum之前)创建两个数据目录，分别指向最大和最小记录。之后插入新的数据的时候，需要维护这个目录，例如必要的时候增加目录的个数。每个数据目录占用两个字节，存储对应记录的页内偏移量。假设目录N，这个目录N管理目录N-1(不包括)和目录N之间的记录，我们称目录N own 这些记录。在目录N指向的记录中，会有字段记录own记录的数量。由此可见，目录own的记录不能太多，因为太多的话，即意味着目录太过稀疏，不能很好的提高查询效率，但同时也不能own太少，这会导致目录数量变多，占用过多的空间。在InnoDB的实现中，目录own的记录数量在4-8之间，包括4和8，平均是6个记录。如果超过这个数量，就需要重新均衡目录的数量。目录的增加和删除可能需要进行内存拷贝，但是由于目录占用的总体空间很小，开销可以忽略不计。</p>
<p><font color=red>注意：B+树索引本身并不能具体的找到一条记录，能找到的只是该记录所在的页。数据库找到页之后将其载入到内存中，然后通过Page Directory再进行二分查找，由于这部分查找很快因为通常忽略不计。</font></p>
<ul>
<li><p>例子</p>
<p>比方说我们想找主键值为6的记录</p>
<ol>
<li><p>计算中间槽的位置：(0+4)/2=2，所以查看槽2对应记录的主键值为8，又因为8 &gt; 6，所以设置high=2，low保持不变。</p>
</li>
<li><p>重新计算中间槽的位置：(0+2)/2=1，所以查看槽1对应的主键值为4，又因为4 &lt; 6，所以设置low=1，high保持不变。</p>
</li>
<li><p>因为high - low的值为1，所以确定主键值为6的记录在槽2对应的组中。此刻我们需要找到槽2中主键值最小的那条记录，然后沿着单向链表遍历槽2中的记录。</p>
</li>
<li><p>我们可以拿到槽1对应的记录（主键值为4），该条记录的下一条记录就是槽2中主键值最小的记录，该记录的主键值为5。所以我们可以从这条主键值为5的记录出发，遍历槽2中的各条记录，直到找到主键值为6的那条记录即可。由于一个组中包含的记录条数只能是1~8条，所以遍历一个组中的记录的代价是很小的。</p>
</li>
</ol>
</li>
</ul>
<h4 id="File-Trailer"><a href="#File-Trailer" class="headerlink" title="File Trailer"></a>File Trailer</h4><ul>
<li><p>功能</p>
<p>检测页是否已经完整的写入磁盘，在默认配置下每从磁盘读取一个页就会检测该页的完整性，可以通过<code>innodb_checksums</code>将该功能关闭</p>
</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>InnoDB技术探究</tag>
      </tags>
  </entry>
  <entry>
    <title>InnoDB特性</title>
    <url>/2022/01/07/MySQL/InnoDB%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h3 id="Insert-Buffer-（不是缓存的一部分，而是物理页，是B-tree）"><a href="#Insert-Buffer-（不是缓存的一部分，而是物理页，是B-tree）" class="headerlink" title="Insert Buffer （不是缓存的一部分，而是物理页，是B+ tree）"></a>Insert Buffer （不是缓存的一部分，而是物理页，是B+ tree）</h3><h4 id="出现原因"><a href="#出现原因" class="headerlink" title="出现原因"></a>出现原因</h4><p>对于一般的只有一个主键并且该主键为递增的情况下，其插入聚集索引一般都是按照顺序的，不需要磁盘随机读取。但是对于有些情况下，一张表会有多个辅助索引，并且这些辅助索引不是==唯一==的，那么在进行插入操作的时候就需要离散的去访问这些非聚集索引页，那么整体的插入性能就会下降。</p>
<h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>对于非聚集索引的插入操作或者更新操作不是每一次都直接插入到对应的索引页中</p>
<p>先判断该非聚集索引页是否在缓冲池中，如果在则直接插入，如果不在则放入到一个Insert Buffer对象中，然后通过一定的频率和情况进行Insert Buffer与辅助索引子节点的合并操作</p>
<h4 id="Insert-Buffer生效场景"><a href="#Insert-Buffer生效场景" class="headerlink" title="Insert Buffer生效场景"></a>Insert Buffer生效场景</h4><p>必须要同时满足一下条件</p>
<ul>
<li><p>索引必须是辅助索引</p>
</li>
<li><p>索引不是唯一的</p>
<p>因为如果需要保证索引是唯一的话，那么需要在插入式数据库需要去查找索引页来判断插入记录的唯一性，这样和没有Insert Buffer是一样的，因此不能唯一</p>
</li>
</ul>
<h4 id="查看Insert-Buffer使用情况"><a href="#查看Insert-Buffer使用情况" class="headerlink" title="查看Insert Buffer使用情况"></a>查看Insert Buffer使用情况</h4><p><code>show engine innodb status\G</code></p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210716111822.png" alt="image-20210716111817369"></p>
<ul>
<li><p>free list 空闲列表长度</p>
</li>
<li><p>size 已经合并记录页的数量</p>
</li>
<li><p>inserts 插入记录</p>
</li>
<li><p>merged res 合并的插入记录数量</p>
</li>
<li><p>merges 合并的次数</p>
<p>该图中merges：merged res  = 1：3 表明插入缓冲对于非聚集索引页的离散IO逻辑请求降低了2/3</p>
</li>
</ul>
<h4 id="内部实现"><a href="#内部实现" class="headerlink" title="内部实现"></a>内部实现</h4><ul>
<li><p>全局只有一颗Insert Buffer B+ 树，负责对所有的表的副主索引进行Insert Buffer，存放于共享表空间中</p>
</li>
<li><p>非叶子节点存放查询的search key</p>
<table>
<thead>
<tr>
<th align="center">space</th>
<th align="center">marker</th>
<th align="center">offset</th>
</tr>
</thead>
</table>
<ul>
<li>Space 待插入记录所在表的表空间id</li>
<li>marker 兼容老版本Insert Buffer</li>
<li>offset 所在页的偏移量</li>
</ul>
</li>
<li><p>当一个副主索引要插入到页时，如果该页不在缓冲区中，那么构造一个search key，然后查询B+树，将该条记录插入到对应的Insert Buffer B+树的叶子节点中</p>
</li>
<li><p>叶子节点结构</p>
<table>
<thead>
<tr>
<th>space</th>
<th>marker</th>
<th>offset</th>
<th>metadata</th>
<th>secondary index record</th>
</tr>
</thead>
</table>
<p>metadata主要是负责记录每个record进入Insert Buffer的顺序</p>
</li>
<li><p>为了保证每次合并Insert Buffer都成功，需要用一个特殊的页来标记每个副主索引页的可用空间：Insert Buffer Bitmap</p>
<p>每个bitmap负责16384个辅助索引页，也就是256个区（每个区1M），每个bitmap位于这个256区中的第二页</p>
<p>每个辅助索引页在bitmap中占用4位</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210716115608.png" alt="image-20210716115537372"></p>
</li>
</ul>
<h4 id="Merge时机"><a href="#Merge时机" class="headerlink" title="Merge时机"></a>Merge时机</h4><ul>
<li><p>辅助索引页被读取到缓冲池中</p>
</li>
<li><p>Insert Buffer Bitmap页追踪到该辅助索引页已无可用空间</p>
<p>Insert Buffer Bitmap 页用来追踪每个辅助索引页的可用空间，并至少有1/32的空间。若插入辅助索引空间记录时检测到插入记录后可用的空间&lt;1/32页，会强制进行一个合并操作，即强制读取辅助索引页</p>
</li>
<li><p>Master Thread</p>
<p>每10s会进行一个Merge Insert Buffer的操作，每次merge的数量是不同的，她是随机选取Insert Buffer B+树中的一个页</p>
</li>
</ul>
<h4 id="相关参数"><a href="#相关参数" class="headerlink" title="相关参数"></a>相关参数</h4><p>默认情况下插入缓冲可以占到1/2的缓冲池内存</p>
<h4 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h4><ul>
<li>在写密集的场景下，插入缓冲会占用过多的缓冲池内存</li>
<li>当进行大量插入操作时，若mysql发生了宕机，势必有大量的Insert Buffer没有合并到时机的非聚集索引中区，从而导致恢复需要很长的时间</li>
</ul>
<h3 id="Change-Buffer"><a href="#Change-Buffer" class="headerlink" title="Change Buffer"></a>Change Buffer</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>Insert Buffer的升级，不光可以对Insert进行缓冲，还可以对delete、update进行缓冲</p>
<p><strong>总的来说，就是之前的Insert Buffer增加了对于delete还有update的功能，增加了几个新的Buffer（Delete Buffer、Purge Buffer）合称为Change Buffer</strong></p>
<h4 id="Change-Buffer生效场景"><a href="#Change-Buffer生效场景" class="headerlink" title="Change Buffer生效场景"></a>Change Buffer生效场景</h4><p>必须要同时满足一下条件</p>
<ul>
<li><p>索引必须是辅助索引</p>
</li>
<li><p>索引不是唯一的</p>
</li>
<li><p>change buffer的机制</p>
<p>在不影响数据一致性的前提下，InnoDB会将更新操作缓存在change buffer中，这样就不需要从磁盘中读入对应的数据页，在下次访问到这个数据页的时候将该数据叶读入内存，然后执行change buffer中与这个数据页的有关操作。</p>
<p><font color=red>注意: 如果将更新操作缓存到change buffer之后又立即对该数据页进行了访问，那么还是会触发随机读IO，将对应数据页加载到了缓存中，那么change buffer的作用也就很小</font></p>
</li>
</ul>
<h5 id="change-buffer不适用于唯一索引的原因"><a href="#change-buffer不适用于唯一索引的原因" class="headerlink" title="change buffer不适用于唯一索引的原因"></a>change buffer不适用于唯一索引的原因</h5><p>因为每次插入记录的时候需要检查该条记录的唯一性，会触发读取数据页，那么也就无法达到减少随机读IO的效果，也就导致change buffer失效</p>
<ul>
<li><p>chang buffer的使用场景</p>
<ul>
<li>写多读少的业务，页面在写完以后马上被访问的概率比较小，比如说账单类、日志类系统</li>
<li>如果所有的更新后面都马上伴随着对该记录的查询，那么应该关闭change buffer</li>
</ul>
</li>
<li><p>change buffe 更新案例</p>
<p><a href="https://juejin.cn/post/6844904041433006093">https://juejin.cn/post/6844904041433006093</a></p>
</li>
</ul>
<h4 id="update"><a href="#update" class="headerlink" title="update"></a>update</h4><p>update的过程一般分为两个</p>
<ul>
<li>将记录标记为删除</li>
<li>真正将记录删除</li>
</ul>
<h5 id="Delete-buffer"><a href="#Delete-buffer" class="headerlink" title="Delete buffer"></a>Delete buffer</h5><p>对应update的第一个过程</p>
<h5 id="Purge-buffer"><a href="#Purge-buffer" class="headerlink" title="Purge buffer"></a>Purge buffer</h5><p>对应update的第二个过程</p>
<h4 id="相关参数-1"><a href="#相关参数-1" class="headerlink" title="相关参数"></a>相关参数</h4><ul>
<li><p><code>innodb_change_buffering</code></p>
<ul>
<li><p>inserts</p>
</li>
<li><p>deletes</p>
</li>
<li><p>puregs</p>
</li>
<li><p>changes </p>
<p>等于insert+deletes</p>
</li>
<li><p>all （默认）</p>
<p>等于insert+deletes+purges</p>
</li>
<li><p>none</p>
</li>
</ul>
</li>
<li><p><code>innodb_change_buffer_max_size</code></p>
<p>默认为25，即最多使用1/4的缓存池内存空间</p>
<p>最大值为50</p>
</li>
</ul>
<h3 id="两次写"><a href="#两次写" class="headerlink" title="两次写"></a>两次写</h3><h4 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h4><p>保证数据页的可靠性</p>
<h4 id="出现原因-1"><a href="#出现原因-1" class="headerlink" title="出现原因"></a>出现原因</h4><p>　一个数据页的大小是16K，假设在把内存中的脏页写到数据库的时候，写了2K突然掉电，也就是说前2K数据是新的，后14K是旧的，那么磁盘数据库这个数据页就是不完整的，是一个坏掉的数据页。redo只能加上旧、校检完整的数据页恢复一个脏块，不能修复坏掉的数据页，所以这个数据就丢失了，可能会造成数据不一致，所以需要double write。</p>
<h4 id="double-write组成"><a href="#double-write组成" class="headerlink" title="double write组成"></a>double write组成</h4><ul>
<li><p>doublewrite buffer （内存中）</p>
<p>大小为2M</p>
</li>
<li><p>物理磁盘上共享表中间的连续的128页</p>
<p>大小为2M</p>
</li>
</ul>
<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><ul>
<li>对缓冲池中的脏页进行刷新时<strong>不直接写磁盘</strong>，通过memcpy函数将脏页复制到内存中的double write buffer</li>
<li>buffer分两次（每次1M）将其写入到共享表空间的磁盘上 （顺序写，性能高）</li>
<li>立刻调用fsync函数，同步磁盘</li>
<li>在doublewrite页的写入完成后，再将double write buffer中的页写入到各个表空间文件中</li>
</ul>
<p>如果我们直接将其写入到磁盘的话，假如发生掉电，那么就会产生坏页</p>
<p>现在有了double write，假如发生掉电，对于原来的数据页是没有运行的，即使说在写入数据页的过程中发生了掉电，也可以从已经写好的double write中进行恢复数据页</p>
<h4 id="运行情况"><a href="#运行情况" class="headerlink" title="运行情况"></a>运行情况</h4><p><code>show global status like &#39;innodb_dblwr%&#39;\G</code></p>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>如果本身文件系统就提供了写失效的防范机制，比如ZFS文件系统，在这种情况下用户就不需要启用doublewrite了。</p>
<h3 id="自适应哈希"><a href="#自适应哈希" class="headerlink" title="自适应哈希"></a>自适应哈希</h3><p>InnoDB会根据当前查询的情况自己建立hash索引</p>
<p>条件如下:</p>
<ul>
<li>对于某个页的连续访问模式必须是一样的，且访问了100次</li>
<li>对于某个页通过某一个模式访问了N次，N = 页中记录/16</li>
</ul>
<p>注意：hash索引只能查询等值条件</p>
<h3 id="异步IO"><a href="#异步IO" class="headerlink" title="异步IO"></a>异步IO</h3><ul>
<li><p>将多个IO合并为一个IO</p>
</li>
<li><p>不中断用户发送IO的请求</p>
</li>
</ul>
<p>在InnoDB中，read ahead的读取还有脏页的刷新都是AIO完成的</p>
<h3 id="刷新领接页"><a href="#刷新领接页" class="headerlink" title="刷新领接页"></a>刷新领接页</h3><p>刷新一个脏页时会检测该页所在区的所有页，如果是脏页也会一起进行刷新，可以将多个IO写入操作合并为一个IO操作</p>
<p>在机械磁盘下优势较大</p>
<h4 id="相关参数-2"><a href="#相关参数-2" class="headerlink" title="相关参数"></a>相关参数</h4><p>innodb_flush_neighbors</p>
<p>默认是开启的，如果固态硬盘有超高的IOPS，则建议将该参数设置为0，关闭此特性</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>InnoDB技术探究</tag>
      </tags>
  </entry>
  <entry>
    <title>MyCat</title>
    <url>/2022/01/07/MySQL/MyCat/</url>
    <content><![CDATA[<h4 id="mycat安装"><a href="#mycat安装" class="headerlink" title="mycat安装"></a>mycat安装</h4><p><a href="https://www.bookstack.cn/read/Conquer-Linux/Linux-Tutorial-Mycat-Install-And-Settings.md">参考</a></p>
<p><a href="https://github.com/MyCATApache/Mycat-download/tree/master/1.6-RELEASE">Mycat下载</a></p>
<h4 id="初始化mycat"><a href="#初始化mycat" class="headerlink" title="初始化mycat"></a>初始化mycat</h4><p>server.xml中主要是设置mycat的账户密码（就和数据库操作的账户密码一样）以及其他的一些信息</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210324102330.png" alt="image-20210324102329485"></p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210324102333.png" alt="image-20210323214823933"></p>
<h5 id="schema-xml模板"><a href="#schema-xml模板" class="headerlink" title="schema.xml模板"></a>schema.xml模板</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mycat</span>:schema <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;schema.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;TESTDB&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;host1&quot;</span> <span class="attr">database</span>=<span class="string">&quot;share&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;host1 &quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span>  <span class="attr">slaveThreshold</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- can have multi write hosts --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;hostM1&quot;</span> <span class="attr">url</span>=<span class="string">&quot;172.23.27.118:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                                   <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- can have multi read hosts --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;hostS1&quot;</span> <span class="attr">url</span>=<span class="string">&quot;172.23.27.119:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="分表"><a href="#分表" class="headerlink" title="分表"></a>分表</h4><ol>
<li><p>针对不同的table设置不同的DataNode</p>
<p>记得要在Mycat上对表进行创建，因为正是mycat对其做的拦截操作</p>
</li>
</ol>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210324102029.png" alt="image-20210324102027262" style="zoom:50%;" />



<h4 id="针对表设置rule"><a href="#针对表设置rule" class="headerlink" title="针对表设置rule"></a>针对表设置rule</h4><ol>
<li>schema.xml中设置rule的id</li>
<li>在rule.xml中针对1中的id进行设置</li>
</ol>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210324102055.png" alt="image-20210323220918501" style="zoom:50%;" />]]></content>
      <categories>
        <category>MyCat</category>
      </categories>
      <tags>
        <tag>MyCat</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL事物</title>
    <url>/2022/01/07/MySQL/MySQL%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<h3 id="事务的特性"><a href="#事务的特性" class="headerlink" title="事务的特性"></a>事务的特性</h3><p>ACID</p>
<p>A：原子性</p>
<p>C：一致性</p>
<p>I：隔离性</p>
<p>D: 持久性</p>
<h3 id="事务的实现"><a href="#事务的实现" class="headerlink" title="事务的实现"></a>事务的实现</h3><h4 id="redo"><a href="#redo" class="headerlink" title="redo"></a>redo</h4><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><p>重做日志用来实现事务的持久性，其包含两部分</p>
<ul>
<li>内存中的重做缓冲日志</li>
<li>重做日志文件</li>
</ul>
<h5 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h5><ul>
<li>保证事务的持久性</li>
</ul>
<h5 id="写入机制"><a href="#写入机制" class="headerlink" title="写入机制"></a>写入机制</h5><ul>
<li><p>写入策略</p>
<p>在事务提交之前就需要将该事务的所有日志写入到重做日志文件进行持久化</p>
<p>事务的日志一开始是存储在重做日志缓冲中的，写入时先写入到文件系统缓存，然后调用依次fsync操作，fsync的效率取决于磁盘，因此数据库的性能也取决于磁盘</p>
<p>当然，写入的策略存在多种选项，一般通过innodb_flush_log_at_trx_commit控制写入磁盘的策略</p>
<ul>
<li><p>1</p>
<p>事务提交时必须调用依次fsync操作</p>
</li>
<li><p>0</p>
<p>事务提交时不进行写入重做日志操作，这个操作仅在master thread完成，master thread每隔1s进行依次重做日志的fsync操作</p>
</li>
<li><p>2</p>
<p>事务提交时仅写入到文件系统缓存中，不进行fsync操作</p>
</li>
</ul>
</li>
<li><p>写入时机</p>
<p>redo log buffer根据一定的规则将内存中的log block刷新到磁盘</p>
<ul>
<li>事务提交时</li>
<li>当log buffer中有一半的内存空间已经被使用时</li>
<li>log checkpoint时</li>
</ul>
</li>
</ul>
<h5 id="redo-log组成"><a href="#redo-log组成" class="headerlink" title="redo log组成"></a>redo log组成</h5><ul>
<li><p>log block</p>
<ul>
<li><p>概念</p>
<p>重做日志都是以512字节进行保存的，如果一个页中产生的重做日志数量&gt;512字节，那么需要分割为多个重做日志进行存储</p>
<p>正是因为512字节也是磁盘扇区的大小，因此写入可以保证原子性，不需要double write技术</p>
<p>是redo log buffer的基本组成单位</p>
</li>
<li><p>组成</p>
</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>log block header(12字节)</th>
<th>log block body（实际存放数据的地方 492字节）</th>
<th>log block tail（8字节）</th>
</tr>
</thead>
</table>
<h5 id="重做日志格式"><a href="#重做日志格式" class="headerlink" title="重做日志格式"></a>重做日志格式</h5><p><font color=red>重做日志格式是基于页的</font></p>
<ul>
<li><p>结构</p>
<table>
<thead>
<tr>
<th>redo_log_type</th>
<th>space</th>
<th>page_no</th>
<th>redo log body</th>
</tr>
</thead>
</table>
<ul>
<li>redo_log_type  重做日志类型</li>
<li>space 表空间的ID</li>
<li>page_no 页的偏移量</li>
<li>redo log body 根据不同的重做日志类型会有不同的存储内容</li>
</ul>
</li>
</ul>
<h5 id="LSN"><a href="#LSN" class="headerlink" title="LSN"></a>LSN</h5><ul>
<li><p>概念</p>
<p>日志序列号，占8个字节，单调递增</p>
</li>
<li><p>含义</p>
<ul>
<li>重做日志写入的总量</li>
<li>checkpoint的位置</li>
<li>页的版本</li>
</ul>
</li>
<li><p>LSN不仅在重做日志中，还在每个页中，在每个页的头部有一个FILE_PAGE_LSN</p>
<p>数据库启动时</p>
<p>如果该页中的LSN&lt;写入重做日志中的LSN -&gt; 需要进行恢复操作 （比如修改操作，会修改内存中对应页的LSN，如果此时发生了宕机，那么内存数据页中的LSN不会被记录到磁盘对应的数据页中，如果重启数据库，会发现重做日志中对应数据页中的LSN与重做日志的LSN不同，那么就会对该数据页执行恢复操作）</p>
<p>如果该页中的LSN&gt;=写入重做日志中的LSN -&gt; 不需要重做 （这种情况出现于数据页的刷盘进度超过了日志页的刷盘进度）</p>
</li>
<li><p>详细的LSN过程如下</p>
<p>innodb从执行修改语句开始：</p>
<p>(1).首先修改内存中的数据页，并在数据页中记录LSN，暂且称之为data_in_buffer_lsn；</p>
<p>(2).并且在修改数据页的同时(几乎是同时)向redo log in buffer中写入redo log，并记录下对应的LSN，暂且称之为redo_log_in_buffer_lsn；</p>
<p>(3).写完buffer中的日志后，当触发了日志刷盘的几种规则时，会向redo log file on disk刷入重做日志，并在该文件中记下对应的LSN，暂且称之为redo_log_on_disk_lsn；</p>
<p>(4).数据页不可能永远只停留在内存中，在某些情况下，会触发checkpoint来将内存中的脏页(数据脏页和日志脏页)刷到磁盘，所以会在本次checkpoint脏页刷盘结束时，在redo log中记录checkpoint的LSN位置，暂且称之为checkpoint_lsn。</p>
<p>(5).要记录checkpoint所在位置很快，只需简单的设置一个标志即可，但是刷数据页并不一定很快，例如这一次checkpoint要刷入的数据页非常多。也就是说要刷入所有的数据页需要一定的时间来完成，中途刷入的每个数据页都会记下当前页所在的LSN，暂且称之为data_page_on_disk_lsn。</p>
</li>
</ul>
<h5 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h5><p>InnoDB存储在启动时不管上次数据库运行是否正常关闭们都会尝试进行恢复操作</p>
<p>因为记录的是物理日志，因此恢复速度比较快</p>
<p>恢复会从checkpoint表示的LSN处进行恢复</p>
<p>物理日志还有一个好处就是幂等，意思就是如果重复执行一个操作，那么最终恢复的效果都是一样的</p>
<p>比如重复插入一条记录（允许重复插入），那么最终物理日志恢复起来，始终都只有一条记录，而不是多条记录</p>
<h4 id="undo"><a href="#undo" class="headerlink" title="undo"></a>undo</h4><h5 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h5><p>回滚日志</p>
<h5 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h5><ul>
<li><p>如果用户执行的事务或者语句由于某种原因失败了或者不想要了，可以利用undo将其回滚到修改之前的样子，前提是未提交</p>
<p><font color=red>这里需要注意：undo是逻辑日志，因此只是将数据库逻辑的恢复到原来的样子，并非是原来的物理的样子，有可能数据结构和页本身在回滚前后大不相同</font></p>
</li>
<li><p>提高mvcc（多版本控制）</p>
<p>用户读取一行记录时，若该记录被其他事务占用，当前事务可以通过undo读取之前的行版本信息</p>
</li>
</ul>
<h5 id="插入机制"><a href="#插入机制" class="headerlink" title="插入机制"></a>插入机制</h5><ul>
<li><p>记录原理</p>
<p>将用户的操作按照反的方向进行记录下来</p>
<p>比如用户是insert操作，那么就记录未delete操作</p>
</li>
<li><p>存储原理</p>
<p>默认是存放在共享表空间中的</p>
<p>InnoDB对undo的管理采用段的方式。</p>
<p>InnoDB中有rollback segment，每个回滚段中记录了1024个undo log segment，在每个undo log segment段中进行undo页的申请。</p>
<ul>
<li><p>相关参数</p>
<ul>
<li><p>innodb_undo_directory</p>
<p>用于设置rollback segment文件所在路径</p>
</li>
<li><p>innodb_undo_logs</p>
<p>设置rollback_segment的个数，默认值为128</p>
</li>
<li><p>innodb_undo_tablespaces</p>
<p>设置构成rollback_segment文件的数量</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>写入原理</p>
<p>==是在事务开始之前写的undo log==</p>
<p><font color=red>注意：在undo log segment分配页并写入undo log的过程中，同样需要写入重做日志</font></p>
<p>事务提交时InnoDB会做以下两件事情</p>
<ul>
<li>将undo log放入列表中，以供之后的pruge操作</li>
<li>判断undo log所在页是否可以重用，若可以分配给下个事务使用</li>
</ul>
<p>事务提交后不能马上删除undo log以及undo log所在的页，因为可能还有其他事务需要通过undo log得到行记录之前的版本。因此事务提交时将undo log放入到链表中，是否可以最终删除undo log以及undo log所在的页有purge线程来判断</p>
<p>判断是否可以重用条件：</p>
<ul>
<li>undo页的使用空间&lt;3/4 -&gt;可以重用</li>
</ul>
<p>查看undo log的数量</p>
<p><code>show engine innodb status</code></p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210820100717.png" alt="image-20210820100715709"></p>
</li>
</ul>
<h5 id="undo-log格式"><a href="#undo-log格式" class="headerlink" title="undo log格式"></a>undo log格式</h5><ul>
<li><p>insert undo log</p>
<p>记录的是insert操作产生的undo log</p>
<p>事务提交后直接删除并。不需要进行purge操作</p>
</li>
<li><p>update undo log</p>
<p>记录的是delete与update操作产生的undo log</p>
<p>因为该log可能需要提供mvcc，因此不能在事务提交之后就进行删除，提交时需要放入到undo 链表中，等待purge线程进行最后的删除</p>
<p>delete操作并非直接删除记录，而是记录标记为已删除，真正的删除是等待purge操作中完成</p>
<p>update主键的操作分为两部</p>
<ul>
<li>将原主键记录标记为已删除</li>
<li>插入一条新的记录</li>
</ul>
</li>
</ul>
<h5 id="purge"><a href="#purge" class="headerlink" title="purge"></a>purge</h5><p>一个页上允许多个事务的undo log存在</p>
<p>有一个history链表根据事务提交的顺序将undo log进行链接：先提交的事务总在尾端</p>
<p>寻找顺序：</p>
<ul>
<li><p>history链表中找undo log，如果找到了一个事务可以被清理，那么会在该事务所在的页中继续寻找一直到没有事务。</p>
</li>
<li><p>接着继续在history链表中寻找可以被清理的事务</p>
</li>
<li><p>依次循环</p>
</li>
</ul>
<p>相关参数</p>
<ul>
<li><p><code>innodb_purge_batch_size</code></p>
<p>每次purge操作需要清理的undo page的数量</p>
</li>
<li><p><code>innodb_max_purge_lag</code></p>
<p>控制history list的长度</p>
<p>通过延缓DML操作来控制list的长度，其延缓算法为delay = （length(history_list)-innodb_max_purge_lag*10）-5</p>
<p>注意delay针对的是每行的操作，如果一个update操作为5行数据，那么总的delay就是5*delay</p>
<p>delay在每一个purge之后会进行重新计算</p>
</li>
<li><p><code>innodb_max_purge_lag_delay</code></p>
<p>控制delay的最大毫秒数，如果计算得出的delay值大于该值，则会默认为该值，避免由于purge操作缓慢导致其他sql线程出现无限制的等待</p>
</li>
</ul>
<h5 id="group-commit"><a href="#group-commit" class="headerlink" title="group commit"></a>group commit</h5><ul>
<li><p>定义</p>
<p>MYSQL处理日志的一种优化方式,主要为了解决写日志时频繁刷磁盘的问题</p>
</li>
<li><p>好处</p>
<p>一次fsync可以刷新确保多个事务日志被写入文件（redo log、binlog）</p>
</li>
<li><p>过程</p>
<ul>
<li>修改内存中事务对应的信息，并且将日志写入重做缓冲日志</li>
<li>调用fsync将确保日志都从重做日志缓冲写入磁盘</li>
</ul>
<p>因为过程2是一个时间比较长的过程，因此在此过程中其他事务可以进行步骤1的操作，从而达到将多个事务的重做日志通过一次fsync刷新到磁盘</p>
</li>
<li><p>但是对于开启二进制日志的场景下需要开启两阶段事务，也就是需要保证上层二进制日志的写入顺序和InnoDB层的事务提交顺序一致（也就是redo），如果不一致可能会导致以下情况发生：</p>
<p>事务T1、T2、T3,其中T2、T3都提交了，但是由于没有保证写入顺序和事务提交顺序一致，T1在提交时发生了中断，那么在恢复的时候会检测到事务T3上下两层都完成了提交，不需要进行恢复，则T1就会被忽略掉</p>
<p>解决方法：</p>
<ul>
<li>之前是通过添加prepare_commit_mutex以串行的方式来保证顺序性</li>
<li>现在是通过组提交的方式，也就是redo log和binlog都是组提交的方式（<a href="https://developer.aliyun.com/article/618471%EF%BC%89">https://developer.aliyun.com/article/618471）</a></li>
</ul>
</li>
</ul>
<h3 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h3><ul>
<li><p>使用分布式事务时InnoDB的事务隔离级别必须未serializable</p>
</li>
<li><p>XA事务的组成</p>
<ul>
<li><p>资源管理器</p>
<p>提供访问事务资源的方法（通常一个数据库就是一个资源管理器）</p>
</li>
<li><p>事务管理器</p>
<p>协调参与全局事务中的各个事务。需要和参与全局事务的所有资源管理器进行通信</p>
</li>
<li><p>应用程序</p>
<p>定义事务的边界，指定全局事务中的操作</p>
</li>
</ul>
</li>
<li><p>XA事务过程</p>
<p>使用两段式提交</p>
<ul>
<li><p>阶段1</p>
<p>所有参与全局事务的节点都开始准备（prepare），告诉事务管理器他们都准备好了</p>
</li>
<li><p>阶段2</p>
<p>事务管理器告诉资源管理器执行rollback还是commit。如果有任何一个节点显示不能提交则所有节点都被告知回滚</p>
</li>
</ul>
</li>
<li><p>内部事务XA</p>
<p>也就是存储引擎之间的分布式事务</p>
<p>为了保证主从一致性，当事务提交时，InnoDB会先做一个prepare操作，将事务的xid写入，接着进行二进制日志的写入。如果MySQL发生了宕机，则会重启后先检查准备的uxid事务是否已经提交，如果没有，则在存储引擎层再进行一次提交。</p>
</li>
</ul>
<h3 id="不好的事务习惯"><a href="#不好的事务习惯" class="headerlink" title="不好的事务习惯"></a>不好的事务习惯</h3><ul>
<li>开发时不要使用循环提交，尽量将多次提交转为一次提交</li>
<li>注意自动提交</li>
<li>注意自动回滚，应该在自动回滚的同时记录下错误日志</li>
</ul>
<h3 id="长事务"><a href="#长事务" class="headerlink" title="长事务"></a>长事务</h3><ul>
<li><p>含义</p>
<p>执行时间比较长的事务</p>
</li>
<li><p>处理</p>
<p>将长事务转化为小批量的事务</p>
<p>好处</p>
<ul>
<li>知道进度</li>
<li>便于回滚操作</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>InnoDB技术探究</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL分区</title>
    <url>/2022/01/07/MySQL/MySQL%E5%88%86%E5%8C%BA/</url>
    <content><![CDATA[<h4 id="分区概念"><a href="#分区概念" class="headerlink" title="分区概念"></a>分区概念</h4><p>分区的过程是将一个表或索引分解为多个更小、更可管理的部分。</p>
<h4 id="MySQL中的分区"><a href="#MySQL中的分区" class="headerlink" title="MySQL中的分区"></a>MySQL中的分区</h4><ul>
<li><p>MySQL分区</p>
<ul>
<li>只支持水平分区，也就是将同一个表中的不同行分配到不同的物理文件中</li>
<li>只支持局部分区索引即一个分区中既存放数据有存放索引</li>
</ul>
</li>
<li><p>查看分区是否开启的指令</p>
<p><code>show plugins\G</code></p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210805095032.png" alt="image-20210805095030580"></p>
</li>
<li><p>分区类型</p>
<p>​    创建分区的时候需要注意，如果表中存在主键或者唯一索引时，分区列必须是唯一索引的一个组成部分</p>
<ul>
<li><p>range</p>
<ul>
<li><p>行数据基于属于一个给定连续区间的列值被放入分区</p>
</li>
<li><p>例子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table t_range(</span><br><span class="line">    id int</span><br><span class="line">)engine=innodb</span><br><span class="line">partition by range(id)(</span><br><span class="line">    partition p0 values less than (10),</span><br><span class="line">    partition p1 values less than (20)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>可以看到该表的idb文件会有两个</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210805095558.png" alt="image-20210805095557559"></p>
</li>
<li><p>查看每个分区的情况</p>
<p><code>select * from information_schema.PARTITIONS where table_schema=database() and table_name=&#39;t_range&#39;\G</code></p>
</li>
<li><p>适用情况</p>
<p>日期列的分区</p>
</li>
<li><p>优点</p>
<ul>
<li>删除数据的时候可以直接指定分区即可</li>
<li>加快某些查询操作</li>
</ul>
</li>
<li><p>分区查询优化的要求</p>
<p>优化器只能对year(),to_days(),to_seconds(),unix_timestamp()这类函数进行查询优化</p>
</li>
</ul>
</li>
<li><p>list</p>
<ul>
<li><p>和range类型相比，list分区面向的是离散的值</p>
</li>
<li><p>例子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table t_list(</span><br><span class="line">    a int,</span><br><span class="line">    b int</span><br><span class="line">)engine=innodb</span><br><span class="line">partition by list(b)(</span><br><span class="line">    partition p0 values in (1,3,5,7,9)</span><br><span class="line">    partition p1 values in (0,2,4,6,8,)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
<li><p>不同的存储引擎对于错误的处理方式不同</p>
<ul>
<li>MyISAM会将之前的行数据都插入，错误之后的数据不会插入</li>
<li>InnoDB如果遇到错误的，整个插入数据都插入不了</li>
</ul>
</li>
</ul>
</li>
<li><p>hash</p>
<ul>
<li><p>根据用户自定义的表达式的返回值来进行分区</p>
</li>
<li><p>例子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table t_hash(</span><br><span class="line">    a int,</span><br><span class="line">    b datetime</span><br><span class="line">)engine=innodb</span><br><span class="line">partition by hash(year(b))</span><br><span class="line">partitions 4;</span><br><span class="line"></span><br><span class="line">//线性hash  线性哈希功能使用的一个线性的2的幂（powers-of-two）运算法则</span><br><span class="line">create table t_hash(</span><br><span class="line">    a int,</span><br><span class="line">    b datetime</span><br><span class="line">)engine=innodb</span><br><span class="line">partition by linear hash(year(b))</span><br><span class="line">partitions 4;</span><br></pre></td></tr></table></figure></li>
<li><p>两种hash方式比较</p>
<p>按照线性哈希分区的优点在于增加、删除、合并和拆分分区将变得更加快捷，有利于处理含有极其大量（1000吉）数据的表。它的缺点在于，与使用常规HASH分区得到的数据分布相比，各个分区间数据的分布不大可能均衡。</p>
</li>
</ul>
</li>
<li><p>key</p>
<ul>
<li><p>根据MySQL数据库提供的哈希函数来进行分区</p>
</li>
<li><p>例子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table t_hash(</span><br><span class="line">    a int,</span><br><span class="line">    b datetime</span><br><span class="line">)engine=innodb</span><br><span class="line">partition by key(b)</span><br><span class="line">partitions 4;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>columns分区</p>
<p><font color=red>前面四种分区都必须是整型，但是columns可以是浮点型，可以是日期，可以是字符串类型</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table t_columns_range(</span><br><span class="line">    a int,</span><br><span class="line">    b datetime</span><br><span class="line">)engine=innodb</span><br><span class="line">partition by range columns(b)(</span><br><span class="line">    partition p0 values less than (2009),</span><br><span class="line">    partition p1 values less than (2010)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>也支持多列分区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table rcx(</span><br><span class="line">    a int,</span><br><span class="line">    b int,</span><br><span class="line">    c char(3),</span><br><span class="line">    d int</span><br><span class="line">)engine=innodb</span><br><span class="line">partition by range columns(a,d,c)(</span><br><span class="line">    partition p0 values less than (5,10,&#x27;ggg&#x27;),</span><br><span class="line">    partition p1 values less than (10,20,&#x27;mmm&#x27;),</span><br><span class="line">    partition p1 values less than (MAXVALUE,MAXVALUE,MAXVALUE)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>子分区</p>
<p>在原来分区的基础上继续划分分区</p>
<ul>
<li><p>例子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table ts(</span><br><span class="line">    a int,</span><br><span class="line">   b date</span><br><span class="line">)engine=innodb</span><br><span class="line">partition by range(year(b))(</span><br><span class="line">    subpartition by hash(to_days(b))</span><br><span class="line">    subpartition 2 (</span><br><span class="line">    partition p0 values less than (1990),</span><br><span class="line">    partition p1 values less than (2000),</span><br><span class="line">    partition p1 values less than (MAXVALUE)</span><br><span class="line">);</span><br><span class="line">    </span><br><span class="line">//或者</span><br><span class="line">create table ts(</span><br><span class="line">    a int,</span><br><span class="line">   b date</span><br><span class="line">)engine=innodb</span><br><span class="line">partition by range(year(b))(</span><br><span class="line">    subpartition by hash(to_days(b))(</span><br><span class="line">    partition p0 values less than (1990)(</span><br><span class="line">        subpartition s0,</span><br><span class="line">        subpartition s1,</span><br><span class="line">    ),</span><br><span class="line">    partition p1 values less than (2000)(</span><br><span class="line">        subpartition s2,</span><br><span class="line">        subpartition s3,</span><br><span class="line">    ),</span><br><span class="line">    partition p1 values less than (MAXVALUE)(</span><br><span class="line">        subpartition s4,</span><br><span class="line">        subpartition s5,</span><br><span class="line">    )</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li>
<li><p>子分区可以用于特别大的表，在多个磁盘空间分别分配数据和索引</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table ts(</span><br><span class="line">    a int,</span><br><span class="line">   b date</span><br><span class="line">)engine=MYISAM</span><br><span class="line">partition by range(year(b))(</span><br><span class="line">    subpartition by hash(to_days(b))(</span><br><span class="line">    partition p0 values less than (1990)(</span><br><span class="line">        subpartition s0,</span><br><span class="line">        data directory = &#x27;/disk0/data&#x27;</span><br><span class="line">        data index = &#x27;/disk0/data&#x27;</span><br><span class="line">        subpartition s1,</span><br><span class="line">        data directory = &#x27;/disk1/data&#x27;</span><br><span class="line">        data index = &#x27;/disk1/data&#x27;</span><br><span class="line">    ),</span><br><span class="line">    partition p1 values less than (2000)(</span><br><span class="line">        subpartition s2,</span><br><span class="line">        data directory = &#x27;/disk2/data&#x27;,</span><br><span class="line">        data index = &#x27;/disk2/data&#x27;,</span><br><span class="line">        subpartition s3,</span><br><span class="line">        data directory = &#x27;/disk3/data&#x27;</span><br><span class="line">        data index = &#x27;/disk3/data&#x27;</span><br><span class="line">    ),</span><br><span class="line">    partition p1 values less than (MAXVALUE)(</span><br><span class="line">        subpartition s4,</span><br><span class="line">        data directory = &#x27;/disk4/data&#x27;</span><br><span class="line">        data index = &#x27;/disk4/data&#x27;</span><br><span class="line">        subpartition s5,</span><br><span class="line">        data directory = &#x27;/disk5/data&#x27;</span><br><span class="line">        data index = &#x27;/disk5/data&#x27;</span><br><span class="line">    )</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><font color=red>注意此处engin是myisam，因为InnoDB会使用表空间自动对数据和索引进行管理，因此会忽略<code>data directory</code>和<code>data index</code>语法</font></p>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>分区中的null值</p>
<ul>
<li><p>MySQL运行对null做分区，null值总是小于任何的一个非NULL值，注意在删除最小分区的时候NULL值也有可能被删除</p>
</li>
<li><p>对于list分区，必须声明null值存放在哪个分区</p>
</li>
<li><p>hash和key分区，任何分区函数都会将含有null值的记录返回0</p>
</li>
</ul>
</li>
<li><p>表与分区交换数据</p>
<ul>
<li>要求<ul>
<li>交换的表与分区有着相同的结构，但表不能有分区</li>
<li>非分区表中的数据必须在交换的分区定义内</li>
<li>被交换的表不能含有外键，或者其他表有对该表的外键引用</li>
<li>用户需要有对应的权限</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="MySQL分区适用场景"><a href="#MySQL分区适用场景" class="headerlink" title="MySQL分区适用场景"></a>MySQL分区适用场景</h4><ul>
<li>OLAP（在线分析处理）适用</li>
<li>OLTP（在线事务处理）<strong>不适用</strong></li>
<li>1000w行的表并不一定需要做分区，进行主键查询是有意义的（也就是分区的依据的那个键），其他的查询都会比不分区耗时更多</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>InnoDB技术探究</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL基础知识</title>
    <url>/2022/01/07/MySQL/MySQL%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h4 id="几个名词定义"><a href="#几个名词定义" class="headerlink" title="几个名词定义"></a>几个名词定义</h4><ul>
<li><p>数据库</p>
<p>物理操作系统文件或者其他形式文件的集合</p>
</li>
<li><p>实例</p>
<p>真正操作数据库的应用进程</p>
</li>
<li><p>mysql多实例</p>
<p>就是在一台服务器上开始多个MySQL服务实例</p>
</li>
</ul>
<h4 id="整体表现形式"><a href="#整体表现形式" class="headerlink" title="整体表现形式"></a>整体表现形式</h4><p>单进程多线程的应用</p>
<h3 id="mysql的连接方式"><a href="#mysql的连接方式" class="headerlink" title="mysql的连接方式"></a>mysql的连接方式</h3><ul>
<li><p>TCP/IP</p>
</li>
<li><p>命名管道</p>
</li>
<li><p>共享内存</p>
</li>
<li><p>unix域套接字</p>
<p><code>mysql -u root -p -S &#123;sock的路径&#125;</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>InnoDB技术探究</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL备份与恢复</title>
    <url>/2022/01/07/MySQL/MySQL%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/</url>
    <content><![CDATA[<h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><h4 id="几个概念"><a href="#几个概念" class="headerlink" title="几个概念"></a>几个概念</h4><ul>
<li><p>热备</p>
<p>在数据库运行中直接备份，对数据库没有任何影响</p>
</li>
<li><p>冷备</p>
<p>在数据库停止的情况下进行备份</p>
</li>
<li><p>温备</p>
<p>在数据库运行中直接备份，对数据库有一定的影响</p>
</li>
<li><p>逻辑备份</p>
<p>内容一般由sql语句组成或者由表内实际数据组成</p>
</li>
<li><p>裸文件备份</p>
<p>复制数据库的物理文件</p>
</li>
</ul>
<h3 id="逻辑备份"><a href="#逻辑备份" class="headerlink" title="逻辑备份"></a>逻辑备份</h3><h4 id="mysqldump"><a href="#mysqldump" class="headerlink" title="mysqldump"></a>mysqldump</h4><p>  <font color=red>mysqldump 无法导出视图</font></p>
<p><code>mysqldump -uroot -p &#123;参数&#125; &#123;database 名&#125; &#123;表名&#125; &gt; &#123;sql文件&#125;</code></p>
<ul>
<li><p>只生成创建表结构的语句 (-d)</p>
<p><code>mysqldump -uroot -p -d lmis md_goods_type &gt; goods_d.sql</code></p>
</li>
<li><p>只生成插入数据的语句 (-t)</p>
<p><code>mysqldump -uroot -p123456 -t lmis md_goods_type &gt; goods_t.sql </code></p>
</li>
<li><p>自动生成两个文件：一个.sql文件，创建表结构的语句；一个.txt文件，数据文件，相当于select into outfile (-t)</p>
<p><code>mysqldump -uroot -p123456 -T /tmp lmis md_goods_type </code></p>
</li>
<li><p>完整生成sql (包含表结构语句和插入数据的语句)</p>
<p><code>mysqldump -u root -p lmis &gt; goods.sql</code></p>
</li>
</ul>
<h4 id="select-…-into-outfile"><a href="#select-…-into-outfile" class="headerlink" title="select … into outfile"></a>select … into outfile</h4><p>主要作用是导出一张表中的数据，只有数据</p>
<p><code>select * into outfile &#39;/root/a.txt&#39; from a</code></p>
<p>这里需要注意一下，有可能提示The MySQL server is running with the –secure-file-priv option so it cannot execute this statement </p>
<p>一些版本的mysql对通过文件导入导出作了限制，默认不允许，</p>
<p>查看配置，执行mysql命令</p>
<p>SHOW VARIABLES LIKE “secure_file_priv”;</p>
<p>如果value值为null，则为禁止，如果有文件夹目录，则只允许改目录下文件（测试子目录也不行），如果为空，则不限制目录；</p>
<p>修改配置可修改mysql配置文件，查看是否有</p>
<p>secure_file_priv = </p>
<p>这样一行内容，如果没有，则手动添加，</p>
<p>secure_file_priv = /home </p>
<p>表示限制为/home文件夹</p>
<p>secure_file_priv = </p>
<p>表示不限制目录，等号一定要有，否则mysql无法启动</p>
<p>修改完配置文件后，重启mysql生效</p>
<h3 id="逻辑恢复"><a href="#逻辑恢复" class="headerlink" title="逻辑恢复"></a>逻辑恢复</h3><ul>
<li><p><code>mysql -u root -p &lt;xxx.sql </code>（mysql下）</p>
</li>
<li><p><code>source /home/mysql/test.sql</code>  （mysql下）</p>
</li>
<li><p><code>load data infile &#39;/var/lib/mysql-files/tt1.txt&#39; into table tt</code> （mysql下）</p>
<p>数据文件必须是<code>select ... into outfile</code> 导出的格式，同时存放的路径也必须是<code>secure_file_priv</code> 下</p>
<p>导入希望忽略对外键的检查</p>
<p><code>set @@foreign_key_checks=0</code></p>
</li>
<li><p><code>mysqlimport --use-thread=&#123;number&#125; db_name textfile1[textfile2...]</code> （shell下）</p>
<p>此处的–use-thread指的是导入时使用的线程数，并发指的是多张表同时导入，不是指一张表的并发导入</p>
</li>
<li><p>binlog的恢复</p>
<p><code>mysqlbinlog binlog.[0-10]* |mysql -u root -p</code></p>
<p>也可以将其导出成sql文件</p>
<p><code>mysqlbinlog binlog.xxx &gt; /tmp/xxx.sql</code></p>
<p>当然也可以选择指定二进制的偏移量或者日期来进行导入</p>
<ul>
<li><p>偏移量</p>
<p><code>mysqlbinlog --start-position=xxxx binlog.xxxx |mysql -u root -p</code></p>
</li>
<li><p>日期</p>
<p><code>mysqlbinlog --start-datetime=xxxx binlog.xxx |mysql -u root -p</code></p>
</li>
</ul>
</li>
</ul>
<h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><h4 id="复制的原理"><a href="#复制的原理" class="headerlink" title="复制的原理"></a>复制的原理</h4><ul>
<li>主服务器把数据更改记录到二进制日志中</li>
<li>从服务器把主服务器的二进制日志复制到自己的中继日志中</li>
<li>从服务器重做中继日志中的日志，把更改应用到自己的数据库上，已到达数据的最终一致性</li>
</ul>
<h4 id="从服务器的线程"><a href="#从服务器的线程" class="headerlink" title="从服务器的线程"></a>从服务器的线程</h4><ul>
<li><p>I/O线程</p>
<p>负责读取主服务器的二进制日志，并将其保存为中继日志</p>
</li>
<li><p>SQL线程</p>
<p>复制执行中继日志</p>
</li>
</ul>
<p><font color=red>注意：复制并非是完全实时同步的，而是异步实时的</font></p>
<h4 id="查看主从延迟程度"><a href="#查看主从延迟程度" class="headerlink" title="查看主从延迟程度"></a>查看主从延迟程度</h4><p><code>show slave status\G</code>得到<code>Read_Master_Log_Pos</code></p>
<p><code>show master status\G</code>得到<code>Position</code></p>
<p>后者减去前者得到的就是延迟</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>InnoDB技术探究</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL存储引擎</title>
    <url>/2022/01/07/MySQL/MySQL%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</url>
    <content><![CDATA[<ul>
<li><p>InnoDB</p>
<p>特点</p>
<ul>
<li>行锁设计</li>
<li>支持外键</li>
<li>读取操作不会产生锁</li>
</ul>
</li>
<li><p>MyISAM</p>
<ul>
<li>不支持事物</li>
<li>表锁设计</li>
<li>支持全文索引</li>
<li>主要面向一些olap数据库应用</li>
</ul>
</li>
<li><p>NDB</p>
<p>主要用于MySQL cluster中</p>
<p>storage 层的NDB 数据节点，也就是上面说的NDB Cluster：<br>NDB 是一个内存式存储引擎也就是说，他会将所有的数据和索引数据都load 到内存中，<br>但也会将数据持久化到存储设备上。不过，最新版本，已经支持用户自己选择数据可以不全<br>部Load 到内存中了，</p>
</li>
<li><p>Memory</p>
<p>将表中的数据都存放到内存中</p>
</li>
<li><p>Archive</p>
<p>只支持insert个select操作</p>
<p>比较适合归档存储，比如日志信息</p>
</li>
<li><p>Federated</p>
<p>存储引擎表不存放数据，只是指向一台远程mysql数据库服务器上的表</p>
</li>
<li><p>查看当前mysql支持的引擎</p>
<p><code>show engines\G</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>InnoDB技术探究</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL安装</title>
    <url>/2022/01/07/MySQL/MySQL%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul>
<li>GA版为稳定版本</li>
<li>Bit版为尝鲜版</li>
</ul>
<ol>
<li><p>下载mysql repo源</p>
<ul>
<li><p>先检查是否已经安装mysql</p>
<p>rpm -qa | grep mysql</p>
</li>
<li><p>下载mysql的repo源</p>
<p>wget <a href="http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm">http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm</a></p>
</li>
<li><p>安装</p>
<p>sudo rpm -ivh mysql-community-release-el7-5.noarch.rpm</p>
</li>
</ul>
</li>
<li><p>下载安装mysql</p>
<p><code>sudo yum install mysql-server</code></p>
</li>
<li><p>查看linux用户以及用户组</p>
<p>cat /etc/passwd|grep mysql</p>
<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210217204420096.png" alt="image-20210217204420096" style="zoom:50%;" />

<p>cat /etc/group|grep mysql</p>
</li>
<li><p>开启mysql</p>
<p><code>service mysql start</code></p>
</li>
<li><p>设置mysql密码</p>
<p><code>/usr/bin/mysqladmin -u root password 123456</code></p>
</li>
<li><p>设置mysql自启动</p>
<p><code>chkconfig mysql on</code></p>
<p>界面显示启动项</p>
<p><code>ntsysv</code></p>
</li>
<li><p>设置字符集</p>
<p>原始的字符集查询情况如下：</p>
<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210217212017370.png" alt="image-20210217212017370" style="zoom:50%;" />

<p>可以看到有些字符集为latin1，这样的话出现中文就会出现乱码</p>
<p>因此需要进行修改my.cnf</p>
<p>在mysqld中加上这两句话</p>
<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210217213212550.png" alt="image-20210217213212550" style="zoom:50%;" />

<p>最终结果为</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210217213122.png" alt="image-20210217213117464" style="zoom:50%;" />

<p>注意：</p>
<ul>
<li><p>如果在设置uft8字符集之前已经创建了库，那么整个库里面的表都不会使用utf8字符集</p>
</li>
<li><p>如果想不修改配置文件，但是要使用utf8就需要在建库的时候声明字符集</p>
<p><code>create database if not exists test03 default character set = &#39;utf8&#39;;</code></p>
</li>
</ul>
</li>
</ol>
<h3 id="相关信息"><a href="#相关信息" class="headerlink" title="相关信息"></a>相关信息</h3><ul>
<li><p>mysql创建的各个文件夹的作用</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210217210544.png" alt="image-20210217210539977" style="zoom:50%;" /></li>
<li><p>mysql的配置文件一般就是/etc/my.cnf</p>
<p>一般安装好mysql之后就会自动从/usr/share/mysql/my-default.cnf拷贝到/etc目录下，名字为my.cnf</p>
</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL逻辑架构</title>
    <url>/2022/01/07/MySQL/MySQL%E9%80%BB%E8%BE%91%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210217220732047.png" alt="image-20210217220732047" style="zoom:50%;" />

<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210217220822.png" alt="image-20210217220817623" style="zoom:50%;" />

<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210217220921.png" alt="image-20210217220915943" style="zoom:50%;" />

]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL主要配置文件</title>
    <url>/2022/01/07/MySQL/MySQL%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>MySQL主要配置文件</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210217221010.png" alt="MySQL主要配置文件"></p>
<h3 id="mysql配置文件的读取顺序"><a href="#mysql配置文件的读取顺序" class="headerlink" title="mysql配置文件的读取顺序"></a>mysql配置文件的读取顺序</h3><p><code>mysql --help|grep my.cnf</code></p>
<p>以读取到显示出来的最后一个文件为准</p>
<p>一般来说在linux上的读取顺序为</p>
<p><code>/etc/my.cnf /etc/mysql/my.cnf /usr/etc/my.cnf ~/.my.cnf</code></p>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> For advice on how to change settings please see</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> http://dev.mysql.com/doc/refman/5.6/en/server-configuration-defaults.html</span></span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># Remove leading # and set to the amount of RAM for the most important data</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cache <span class="keyword">in</span> MySQL. Start at 70% of total RAM <span class="keyword">for</span> dedicated server, <span class="keyword">else</span> 10%.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> innodb_buffer_pool_size = 128M</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># Remove leading # to turn on a very important data integrity option: logging</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> changes to the binary <span class="built_in">log</span> between backups.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> log_bin</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># Remove leading # to set options mainly useful for reporting servers.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> The server defaults are faster <span class="keyword">for</span> transactions and fast SELECTs.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Adjust sizes as needed, experiment to find the optimal values.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> join_buffer_size = 128M</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sort_buffer_size = 2M</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> read_rnd_buffer_size = 2M</span></span><br><span class="line">character_set_server=utf8</span><br><span class="line">character_set_client=utf8</span><br><span class="line">datadir=/var/lib/mysql  # 存放数据库文件的地址</span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class="line">symbolic-links=0</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Recommended <span class="keyword">in</span> standard MySQL setup</span></span><br><span class="line">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES </span><br><span class="line"></span><br><span class="line">[mysqld_safe]</span><br><span class="line">log-error=/var/log/mysqld.log</span><br><span class="line">pid-file=/var/run/mysqld/mysqld.pid</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL锁机制</title>
    <url>/2022/01/07/MySQL/MySQL%E9%94%81%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h4 id="mysql中的锁"><a href="#mysql中的锁" class="headerlink" title="mysql中的锁"></a>mysql中的锁</h4><ul>
<li><p>锁的分类</p>
<ul>
<li><p>读锁 (共享锁)</p>
<p>针对同一份数据，多个读操作可以同时进行而不会相互影响</p>
</li>
<li><p>写锁 （排他锁）</p>
<p>当前写操作未完成则会阻断其他写锁和读锁</p>
</li>
<li><p>两者兼容情况</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210811104216.png" alt="image-20210811104214216"></p>
</li>
<li><p>意向锁</p>
<p>意向锁在 InnoDB 中是表级锁，用来表达一个事务想要获取什么。</p>
<p><a href="http://www.dreamwu.com/post-5794.html">意向锁出现的原因</a></p>
<p>意向锁都是表锁</p>
<ul>
<li>意向共享锁（IS Lock）事务想要获得一张表中某几行的共享锁</li>
<li>意向排他锁（IX Lock） 事务想要获得一张表中某几行的排他锁</li>
</ul>
</li>
<li><p>兼容性情况</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210811104821.png" alt="image-20210811104819615"></p>
</li>
</ul>
</li>
<li><p>MySQL中的锁</p>
<ul>
<li><p>表锁（偏读）</p>
<p>偏向myisam存储引擎，开销小，加锁快，无死锁，锁定粒度大，发生锁冲突的概率最高，并发度最低</p>
<p>查看表上加过的锁</p>
<p>show open tables;</p>
<p>当前表添加读锁</p>
<ul>
<li><p>当前加锁表的session无法更新锁定的表，只可以进行查看，如果更新就会报错，必须解锁才能够更新</p>
</li>
<li><p>当前其他seesion可以查看当前被锁的表，可以更新其他未被锁的表，如果更新当前被锁的表则需要等待被锁表unlock才能够执行更新操作</p>
</li>
</ul>
<p>当前表添加写锁</p>
<ul>
<li>当前加锁表的session可以查看和更新锁定的表</li>
<li>当前其他seesion无法对被锁的表进行操作</li>
</ul>
<p>查看当前MySQL内部表级锁定的情况</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210224090723.png" alt="image-20210224090718173" style="zoom:50%;" />

<p>table_locks_immediate:产生表级锁定的此处，表示可以立即获取锁的查询次数，每次立即获取锁，值+1</p>
<p>table_locks_waited:出现表级锁定争用而等待的次数（不能立即获取锁的次数，每等待一次值+1）,此值越高则说明存在较严重的表级锁争用情况</p>
<p>myisam的读写锁调度是写优先，因此myisam不适合作为写为主表的引擎</p>
</li>
<li><p>行锁</p>
<ul>
<li><p>偏向InnoDB存储引擎，开销大，加锁慢，会出现死锁，锁定粒度小，发送所冲突的概率最低，并发度也最高</p>
</li>
<li><p><font color=red>InnoDB与myisam的最大两个不同点在于：1. 前者支持事务 2.前者采用行级锁</font></p>
</li>
<li><p>MySQL的隔离机制默认到达可重复读（事务级别）</p>
</li>
<li><p>索引失效时行锁会升级为表锁，比如常见的varchar类型没有添加引号</p>
</li>
<li><p>间隙锁的危害</p>
<p>间隙锁：当我们使用范围条件而不是相等条件检索数据，并请求共享或排他锁时，InnoDB会给符合条件的已有数据记录的索引项加锁，对于键值在条件范围内但并不存在的记录，叫做“间隙（GAP）”</p>
<p>危害：因为query执行过程中通过范围查找的话，它会锁定整个范围内的所有索引键值，即使这个键值并不存在。间隙锁有一个致命的弱点，就是当锁定一个范围键值之后，即使某些不存在的键值也会被无辜的锁定，而造成在锁定的时候无法插入锁定的键值范围内的任何数据。</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>mysql中查看当前锁的情况</p>
<ul>
<li><p>运行事务</p>
<p><code>select * from information_schema.INNODB_TRX;</code></p>
</li>
<li><p>每张表的上锁情况</p>
<p><code>select * from information_schema.INNODB_LOCKS;</code></p>
</li>
<li><p>等待情况</p>
<p><code>select * from information_schema.INNODB_LOCK_WAITS;</code></p>
</li>
</ul>
</li>
</ul>
<h4 id="mysql中的一些机制"><a href="#mysql中的一些机制" class="headerlink" title="mysql中的一些机制"></a>mysql中的一些机制</h4><ul>
<li><p>一致性非锁定读</p>
<ul>
<li><p>定义</p>
<p>InnoDB通过行多版本控制来读取当前执行时间数据库中行的数据。如果读取的行正在执行delete或update操作，这时读取操作不会因此等待行上锁的释放。相反它会去读取行的一个快照数据。</p>
<p><font color=red>重点：不会去等待行锁的释放，而是直接读取行的快照数据</font></p>
</li>
<li><p>不同隔离程度下的效果</p>
<ul>
<li><p>read committed</p>
<p>对于快照数据，总是读取被锁定行的最新一份快照数据</p>
</li>
<li><p>repeatable read</p>
<p>对于快照数据，总是读取事务开始时的行数据版本</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>一致性锁定读</p>
<ul>
<li><p>select … for update</p>
<p>对读取的行记录加一个x锁</p>
</li>
<li><p>select …lock in share mode</p>
<p>对读取的行记录加一个s锁</p>
</li>
</ul>
</li>
<li><p>自增长</p>
<ul>
<li><p>定义</p>
<p>就是auto——increasement</p>
</li>
<li><p>实现机制</p>
<ul>
<li><p>5.1.22版本之前</p>
<p>实现方式为auto_inc locking</p>
<p>为了提高插入性能，锁不是在一个事务完成之后才释放的，而是在完成对自增长值插入的sql语句立即释放</p>
</li>
<li><p>51.22版本以及之后</p>
<p>提供了一种轻量级的互斥量的自增长实现机制，它会使用互斥量去对内存中的计数器进行累加操作</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>外键和锁</p>
<p>对于外键，如果该列没有添加索引，那么会自动添加一个索引</p>
<p>对于外键的插入或者更新，需要先select父表中的数据。这个select操作不是使用一致性非锁定读，而是使用<strong>一致性锁定读中的select …lock in share mode</strong>方式主动添加一个S锁。</p>
</li>
</ul>
<h4 id="锁带来的问题"><a href="#锁带来的问题" class="headerlink" title="锁带来的问题"></a>锁带来的问题</h4><ul>
<li><p>脏读</p>
<ul>
<li><p>发生场景</p>
<p>在read uncommitted的隔离级别下，会发生脏读</p>
<p>在READ UNCOMMITTED级别, 事务中的修改, 即使还没有提交, 对其他事务也都是可见的; 也就是说事务可以读取未提交的数据, 这也就造成了 <code>脏读(Dirty Read)</code> 的出现。</p>
</li>
<li><p>定义</p>
<p>读取到了脏数据，也就是未提交的数据</p>
</li>
<li><p>原因</p>
<p><code>READ UNCOMMITTED</code>隔离级别下, 读不会加任何锁。而写会加排他锁，并到事务结束之后释放。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">在 READ UNCOMMITTED 级别运行的事务不会发出共享锁来防止其他事务修改当前事务读取的数据, 既然不加共享锁了, 那么当前事务所读取的数据自然就可以被其他事务来修改。</span><br><span class="line">而且当前事务要读取其他事务未提交的修改, 也不会被排他锁阻止, 因为排他锁会阻止其他事务再对其锁定的数据加读写锁, <span class="strong">**但是可笑的是, 事务在该隔离级别下去读数据的话根本什么锁都不加, 这就让排他锁无法排它了, 因为它连锁都没有**</span>。</span><br><span class="line">这就导致了事务可以读取未提交的修改, 称为脏读。</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>不可重复读</p>
<ul>
<li><p>发生场景</p>
<p>read commited隔离级别下</p>
</li>
<li><p>定义</p>
<p>在一个事务内多次读取到同一数据的集合</p>
</li>
<li><p>原因</p>
<p>未添加next-key lock</p>
</li>
</ul>
</li>
<li><p>丢失更新</p>
<ul>
<li><p>发生场景</p>
<p>理论上在任何隔离级别下都不会发生导致数据库理论意义上的丢失更新</p>
</li>
<li><p>定义</p>
<p>一个事务的更新操作会被另一个事务的更新操作所覆盖</p>
</li>
<li><p>例子</p>
<p>程序员登录到公司的内部员工系统中进行打卡下班，忽然发现自己信息的性别入职时误写成了“女”，于是顺手修改自己的信息，就在这时HR在浏览全公司的名单发现该程序员的部门录入有误，也开始修改该程序员的信息，就在这时，程序员和HR同时点击了提交（HR比程序员稍微慢一点点）。再次刷新，程序员发现明明自己已经提交成功了，为什么自己的性别怎么还是“女”？</p>
<p>在这个事例中，程序员事务和HR事务都读取了数据，程序员事务修改后先提交了，接着HR事务也修改了并提交。这时程序员这个事务再次查询发现自己刚才做的修改无效，就好像是刚才的更新丢失了，这是因为<font color=red>HR这个事务修改的数据是在HR事务查询到数据的基础上修改的</font>，所以后一次的更新覆盖了前一次的更新。</p>
</li>
<li><p>解决方法</p>
<p>在select的时候加上X锁，例如</p>
<p><code>select ... for update</code></p>
<p>这里注意，一般丢失更新都是发生在查询的基础上，因此在查询到时候需要加上X锁</p>
</li>
</ul>
</li>
</ul>
<h4 id="所带来的现象"><a href="#所带来的现象" class="headerlink" title="所带来的现象"></a>所带来的现象</h4><ul>
<li><p>阻塞</p>
<ul>
<li><p>定义</p>
<p>一个事务需要等待另一个事务中的锁释放</p>
</li>
<li><p>对应参数</p>
<p><code>innodb_lock_wait_timeout</code> -&gt;控制等待的时间（可以在数据库运行时进行调整）</p>
<p><code>innodb_rollback_on_timeout</code>-&gt;是否等待超时时对进行中的事务进行回滚操作（只能在启动前进行修改）</p>
</li>
<li><p>注意事项</p>
<p>在一个事务中，如果有两个操作，其中操作1执行成功，操作2阻塞超时，那么会导致最终的</p>
</li>
</ul>
</li>
<li><p>死锁</p>
<ul>
<li><p>解决死锁的方法</p>
<ul>
<li><p>超时主动放弃，根据FIFO顺序选择回滚对象</p>
</li>
<li><p>等待图主动检索死锁</p>
<p>策略：根据锁的信息链表还有事务等待链表构造出一张图，若该图中存在回路则说明出现了死锁。</p>
<p>检测回路，使用的是非递归的方式，因为效率比递归要高。</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>锁升级</p>
<ul>
<li><p>定义</p>
<p>将锁的粒度降低</p>
</li>
<li><p>InnoDB不存在锁升级问题，因为它不是根据每个记录产生行锁，而是根据每个事务访问的每个页对锁进行管理，采用的是位图的方式。因此不管一个事务锁住页中一个记录还是多个记录，开销都是一样的</p>
<p>行锁在InnoDB中的数据结构如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">lock_rec_struct</span>        <span class="title">lock_rec_t</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">lock_rec_struct</span>&#123;</span></span><br><span class="line">    ulint space;    <span class="comment">/*space id*/</span></span><br><span class="line">    ulint page_no;  <span class="comment">/*page number*/</span></span><br><span class="line">    unint n_bits;   <span class="comment">/*number of bits in the lock bitmap*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>InnoDB中根据页的组织形式进行锁管理，并使用位图记录锁信息。<br>n_bits变量表示位图占用的字节数，它后面紧跟着一个bitmap，bitmap占用的字节为：1 + (nbits-1)/8，bitmap中的每一位标识对应的行记录是否加锁。<br>因此，lock_rec_struct占用的实际存储空间为：sizeof(lock_rec_struct) + 1 + (nbits-1)/8。</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>基础知识</title>
    <url>/2022/01/07/MySQL/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<ol>
<li><p>reference（参考范围）一般和foreign key 一起使用</p>
<p>比如说当前有2个表，一为customer表，二为order表</p>
<p>为了确保所有的order都是来自于customer表中的名单，因此需要加上foreign key(customer_name) references customer(name)</p>
<p><font color=red> <strong>InnoDB仅当指定为单独的FOREIGN KEY规范的一部分时才接受REFERENCES子句。</strong></font></p>
</li>
<li><p>any 和 all 适用于子查询的场景  </p>
<p>any与all后面必须加上子查询的语句</p>
</li>
<li><p>exists</p>
<p>先进行外部父查询，然后针对父查询的结果集进行子查询，如子查询为true则输出，为false则放弃</p>
<p>一般来说not exists都要比not in效率高</p>
<p>exist和in比较如下：</p>
<p>所以如果父查询所查询的表中的数据越大那么 子查询查询的次数就会越多，这样对效率就很慢，</p>
<p><font color=red>子查询需要对父查询中的每一条记录进行查询判断</font></p>
<p>   例如:</p>
<p>​    <strong>1表a中100000条数据,表b中100条数据，查询数据库次数=1(表a查一次)+100000(子查询：查询表b的次数) ，一共</strong> <strong>100001次</strong></p>
<p>​     <strong>2 表a中 100条数据，表b100000条，查询数据库次数=1(表a查一次)+100(子查询次数)，一共 101次</strong></p>
<p>​     <strong>可见只有当子查询的表数量远远大于外部表数据的是否用exist查询效率好</strong></p>
</li>
<li><p>集合运算</p>
<ul>
<li><p>union和union all</p>
<p>UNION：将多个查询结果合并起来时，系统自动去掉重复元组<br>UNION ALL：将多个查询结果合并起来时，保留重复元组     </p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span>  <span class="keyword">from</span> Student <span class="keyword">where</span> age<span class="operator">&gt;</span><span class="number">22</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> Student <span class="keyword">where</span> age<span class="operator">=</span><span class="number">22</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>INTERSECT 交集</li>
<li>EXCEPT差集</li>
</ul>
</li>
<li><p>约束条件</p>
<ul>
<li><p>CREATE TABLE时定义属性上的约束条件</p>
<ul>
<li>列值非空（NOT NULL）</li>
<li>列值唯一（UNIQUE）</li>
<li>检查列值是否满足一个条件表达式（CHECK）</li>
</ul>
</li>
<li><p>在CREATE TABLE时可以用CHECK短语定义元组上的约束条件，即元组级的限制<br>同属性值限制相比，元组级的限制可以设置不同属性之间的取值的相互约束条件 </p>
<p>例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Student</span><br><span class="line">         (  Sno    <span class="type">CHAR</span>(<span class="number">9</span>), </span><br><span class="line">            Sname  <span class="type">CHAR</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>，</span><br><span class="line">            Ssex    <span class="type">CHAR</span>(<span class="number">2</span>),</span><br><span class="line">            Sage   <span class="type">SMALLINT</span>,</span><br><span class="line">            Sdept  <span class="type">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">            <span class="keyword">PRIMARY</span> KEY (Sno),</span><br><span class="line">            <span class="keyword">CHECK</span> (Ssex<span class="operator">=</span><span class="string">&#x27;女&#x27;</span> <span class="keyword">OR</span> Sname <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">&#x27;Ms.%&#x27;</span>)</span><br><span class="line">            <span class="comment">/*定义了元组中Sname和 Ssex两个属性值之间的约束条件*/</span></span><br><span class="line">          );</span><br><span class="line"><span class="comment">/*性别是女性的元组都能通过该项检查，因为Ssex=‘女’成立;</span></span><br><span class="line"><span class="comment">当性别是男性时，要通过检查则名字一定不能以Ms.打头*/</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<ul>
<li><p>完整性约束命名子句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CONSTRAINT</span> <span class="operator">&lt;</span>完整性约束条件名<span class="operator">&gt;</span><span class="operator">&lt;</span>完整性约束条件<span class="operator">&gt;</span></span><br><span class="line"><span class="comment">-- &lt;完整性约束条件&gt;包括NOT NULL、UNIQUE、PRIMARY KEY短语、FOREIGN KEY短语、CHECK短语等</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 例如</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Student</span><br><span class="line">      (   Sno  <span class="type">NUMERIC</span>(<span class="number">6</span>)</span><br><span class="line">          <span class="keyword">CONSTRAINT</span> C1 <span class="keyword">CHECK</span> (Sno <span class="keyword">BETWEEN</span> <span class="number">90000</span> <span class="keyword">AND</span> <span class="number">99999</span>),</span><br><span class="line">          Sname  <span class="type">CHAR</span>(<span class="number">20</span>)  </span><br><span class="line">          <span class="keyword">CONSTRAINT</span> C2 <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">          Sage  <span class="type">NUMERIC</span>(<span class="number">3</span>)</span><br><span class="line">          <span class="keyword">CONSTRAINT</span> C3 <span class="keyword">CHECK</span> (Sage <span class="operator">&lt;</span> <span class="number">30</span>),</span><br><span class="line">          Ssex  <span class="type">CHAR</span>(<span class="number">2</span>)</span><br><span class="line">          <span class="keyword">CONSTRAINT</span> C4 <span class="keyword">CHECK</span> (Ssex <span class="keyword">IN</span> ( ‘男’,<span class="string">&#x27;女&#x27;</span>)),</span><br><span class="line">          <span class="keyword">CONSTRAINT</span> StudentKey <span class="keyword">PRIMARY</span> KEY(Sno)</span><br><span class="line">        );</span><br><span class="line"><span class="comment">-- 在Student表上建立了5个约束条件，包括主码约束（命名为StudentKey）以及C1、C2、C3、C4四个列级约束。</span></span><br></pre></td></tr></table></figure>

<p>最为主要的作用就是可以在任何时候使用<font color=red>删除</font>完整性约束命名子句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Student <span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> C4;</span><br></pre></td></tr></table></figure>

<p>也可以<font color=red>增加</font>完整性约束命名子句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Student <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> C1 <span class="keyword">CHECK</span> (Sno <span class="keyword">BETWEEN</span> <span class="number">900000</span> <span class="keyword">AND</span> <span class="number">999999</span>),</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="6">
<li><p>实体完整性与参照完整性</p>
<ul>
<li><p>实体完整性 （主码）</p>
<ol>
<li><p>检查主码值是否唯一，如果不唯一则拒绝插入或修改 </p>
<p>两者方法：1.全表扫描 2.创建索引（B+树索引）</p>
</li>
<li><p>检查主码的各个属性是否为空，只要有一个为空就拒绝插入或修改</p>
</li>
</ol>
</li>
<li><p>参照完整性 （外码 foreign key与references配合使用）</p>
<p>违约处理：</p>
<ul>
<li>拒绝执行</li>
<li>级联操作</li>
<li>设置为空值</li>
</ul>
</li>
<li><p>用户定义完整性</p>
<p>违约处理</p>
<ul>
<li>不满足则操作拒绝执行</li>
</ul>
</li>
</ul>
</li>
<li><p>左右连接</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210223090129.png" alt="img"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>并发控制</title>
    <url>/2022/01/07/MySQL/%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<ol>
<li><p>并发引起的问题</p>
<p>丢失修改、不可重复读、读脏数据</p>
</li>
<li><p>几个概念</p>
<ul>
<li><p>事务</p>
<p>一个读ri(x) / 写wi(x) 操作序列</p>
</li>
<li><p>调度</p>
<p>一个或多个事务的重要操作按时间顺序执行的一个序列</p>
</li>
<li><p>串行调度</p>
<p>不同事务在执行过程中没有交叉的调度（一定是正确的调度）</p>
</li>
<li><p><font color=red>可串行性</font></p>
<p>多个事务的并发执行是正确的，当且仅当其结果与按某一次序串行地执行它们时的结果相同</p>
<p><strong>是并发事务操作正确与否的判别准则</strong></p>
</li>
</ul>
</li>
<li><p>优先图</p>
<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210105192437014.png" alt="image-20210105192437014" style="zoom:50%;" />

<p>牢记一点：</p>
<p><strong>可画弧T<sub>i</sub>$\rightarrow$T<sub>j</sub>的要求是同时全部满足下面的条件</strong></p>
<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210105192619568.png" alt="image-20210105192619568" style="zoom:50%;" />

<p><strong>尤其需要注意两个写操作，不能忘掉</strong></p>
<ul>
<li><p>例题：</p>
<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210105192722375.png" alt="image-20210105192722375" style="zoom:50%;" />

<p>​            <img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210105192837102.png" alt="image-20210105192837102" style="zoom:50%;" /></p>
<p>​            <img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210105192903384.png" alt="image-20210105192903384" style="zoom:50%;" /></p>
<p>详细过程以下面的例题为例：</p>
<p>​        S4 = r3(B) r2(A) w3(B) r2(B) r1(A) w2(B) r1(B) w2(A) 是否冲突可串行化？</p>
<ol>
<li><p>将所有的同一对象的事务按照顺序写到一起</p>
<p>   r3(B)w3(B)r2(B)w2(B) r1(B)</p>
<p>   r2(A)r1(A)w2(A)</p>
<pre><code>  2. 按照规则建立关系
</code></pre>
</li>
</ol>
<pre><code>  T&lt;sub&gt;3&lt;/sub&gt;$\rightarrow$T&lt;sub&gt;2&lt;/sub&gt;  r3(B)w2(B)

  T&lt;sub&gt;3&lt;/sub&gt;$\rightarrow$T&lt;sub&gt;1&lt;/sub&gt; w3(B) r1(B)

  T&lt;sub&gt;2&lt;/sub&gt;$\rightarrow$T&lt;sub&gt;1&lt;/sub&gt; w2(B) r1(B)

  T&lt;sub&gt;1&lt;/sub&gt;$\rightarrow$T&lt;sub&gt;2&lt;/sub&gt; r1(A)w2(A)

        3. 画图

  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR;    T3--&gt;T1;    T3--&gt;T2;    T2--&gt;T1; T1--&gt;T2;</span><br></pre></td></tr></table></figure>

  从图中可以发现存在环，因此不可以冲突串行化

  
</code></pre>
</li>
</ul>
</li>
<li><p>并发控制的主要技术</p>
<ul>
<li><p>封锁技术</p>
<p>加锁</p>
<p>解锁</p>
<p>事务在读写数据元素之前必须申请加锁(lock)，事后要解锁(unlock)</p>
<p>任何两个事务不能同时封锁同一元素</p>
<ul>
<li><p>两者锁</p>
<p>共享锁（读锁，S锁）<br>排它锁   (写锁，X锁)</p>
</li>
<li><p>两者锁的调度</p>
<ul>
<li>如果对A加S锁出现在调度中，则在后面不能再对A加X锁，除非先释放再加锁。但是可以加S锁。</li>
<li>如果对A加X锁出现在调度中，则在后面不能再对A加X锁或S锁，除非先释放再加锁。</li>
</ul>
</li>
<li><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210105195831.png" alt="image-20210105195825710" style="zoom:50%;" /></li>
</ul>
</li>
<li><p>时间戳技术</p>
</li>
<li><p>有效性检查技术</p>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL性能分析</title>
    <url>/2022/01/07/MySQL/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h2><ol>
<li><p>性能下降的原因</p>
<ul>
<li>查询语句烂</li>
<li>索引失效</li>
<li>关联查询太多的join</li>
<li>服务器调优及各个参数设置（缓存、线程数等）</li>
</ul>
</li>
<li><p>性能优化</p>
<p> MySQL的常见瓶颈：</p>
<ul>
<li><p>CPU</p>
<p>CPU在饱和的时候一般发送在数据装入内存或从磁盘上读取数据的时候</p>
</li>
<li><p>IO</p>
<p>磁盘I/O瓶颈发送在装入数据远大于内存容量的时候</p>
</li>
<li><p>服务器硬件的性能瓶颈</p>
<p>top,free,iostat和vmstat来查看系统的性能状态</p>
</li>
</ul>
</li>
</ol>
<h3 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h3><ol>
<li><p>体现</p>
<ul>
<li>表的读取顺序</li>
<li>数据读取操作的操作类型</li>
<li>哪些索引可以使用</li>
<li>哪些索引可以被实际使用</li>
<li>表之间的引用</li>
<li>每张表有多少行被优化器查询</li>
</ul>
</li>
<li><p>explain表头</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210221214028.png" alt="image-20210221214023521" style="zoom:50%;" />

<ul>
<li><p>id</p>
<ul>
<li>id值相同则按照从上往下的顺序依次执行</li>
<li>id值不同，id值越大则执行优先级越高，越先被执行</li>
</ul>
</li>
<li><p>select_type</p>
<ul>
<li><p>simpe</p>
<p>简单的select查询，查询中不包含子查询或者union</p>
</li>
<li><p>primary</p>
<p>查询中若包含任何复杂的子查询部分，则最外层的查询标记为primary</p>
</li>
<li><p>subquery</p>
<p>在select或where列表中包含了子查询</p>
</li>
<li><p>derived</p>
<p>在from列表中包含的子查询被标记为derived（衍生），MySQL会递归执行这些子查询，把结果放在临时表里</p>
</li>
<li><p>union</p>
<ul>
<li><p>若第二个select出现在union之后，则被标记为union</p>
</li>
<li><p>若union包含在from子句的子查询中，外层select将被标记为derived</p>
</li>
</ul>
</li>
<li><p>union result</p>
<p>从union表获取结果的select</p>
</li>
</ul>
</li>
<li><p>table</p>
<p>表</p>
</li>
<li><p>type</p>
<p>从最好到最差的顺序为：</p>
<p>system&gt;const&gt;eq_ref&gt;ref&gt;range&gt;index&gt;ALL</p>
<p>一般来说，得保证查询至少达到range级别，最好达到ref</p>
<ul>
<li><p>system</p>
<p>表只有一行记录（等于系统表），这是const类型的特例，平时不会出现，可以忽略不计</p>
</li>
<li><p>const</p>
<p>表示通过索引一次就找到了，const用于比较primary key或者unique索引。因为只匹配一行数据，所以很快</p>
<p>如将主键置于where列表中，MySQL就能将该查询转换为一个常量</p>
<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210221222922269.png" alt="image-20210221222922269" style="zoom:50%;" /></li>
<li><p>eq_ref</p>
<p>唯一性索引扫描，对于每一个索引键，表中只有一条记录与之匹配，常见于主键或唯一索引扫描</p>
<p>什么情况下结果集只有一个呢！那便是使用了主键或者唯一性索引进行查找的情况</p>
</li>
<li><p>ref</p>
<p>非唯一性索引扫描，返回匹配某个单独值的所有行</p>
<p>本质上也是一种<font color=red>索引访问</font>，它返回所有匹配某个单独值的行，然后它可能会找到多个符合条件的行，所以他应该属于查找和扫描的混合体</p>
<p>出现该连接类型的条件是： 查找条件列使用了索引而且不为主键和unique。其实，意思就是虽然使用了索引，但该索引列的值并不唯一，有重复。这样即使使用索引快速查找到了第一条数据，仍然不能停止，要进行目标值附近的小范围扫描。但它的好处是它并不需要扫全表，因为索引是有序的，即便有重复值，也是在一个非常小的范围内扫描。下面为了演示这种情形，给employee表中的name列添加一个普通的key（值允许重复）</p>
</li>
<li><p>range</p>
<p>range指的是有范围的索引扫描，相对于index的全索引扫描，它有范围限制，因此要优于index。关于range比较容易理解，需要记住的是出现了range，则一定是<font color=red>基于索引</font>的。同时除了显而易见的between，and以及’&gt;’,’&lt;’外，in和or也是索引范围扫描。</p>
<p>它避免了全表扫描，只需要开始于索引的某一点到另一点，不要全部扫描索引</p>
</li>
<li><p>index</p>
<p>遍历索引数</p>
</li>
<li><p>all</p>
<p>全表扫描</p>
</li>
</ul>
</li>
<li><p>possible_keys</p>
<p>可能应用在这张表中的索引，一个或者多个</p>
<p>查询涉及到的字段上若存在索引，则该索引将被列出，<font color=red>但是不一定被实际查询使用</font></p>
</li>
<li><p>key</p>
<p>实际使用的索引，如果为NULL，则没有使用索引</p>
<p>查询中若使用了覆盖索引，则该索引<font color=red>仅</font>出现在key列表中</p>
</li>
<li><p>key_len</p>
<p>表示索引中使用的字节数，可以通过该列计算查询中使用的索引的长度。在不损失精确性的情况下，长度越短越好</p>
<p>key_len显示的值为索引字段的最大可能长度，并非实际使用长度，即key_len是根据表定义计算而得，不是通过表内检索出的</p>
</li>
<li><p>ref</p>
<p>显示索引的哪一列被使用了，如果可能的话，是一个常数。哪些列或常量被用于查找索引列上的值</p>
</li>
<li><p>rows</p>
<p>根据表统计信息及索引选用情况，大致估算出找到所需的记录所需要读取的行数</p>
</li>
<li><p>extra</p>
<p>包含不适合在其他列中显示但十分重要的额外信息</p>
<ul>
<li><p>using filesort （<font color=red>出现这个表示很危险！！</font>）<br>说明MySQL会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取。MySQL中无法利用索引完成的排序操作称为“文件排序”</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210222141839.png" alt="Snipaste_2021-02-22_14-16-24" style="zoom:50%;" /></li>
<li><p>using temporary （<font color=red>出现这个表示非常危险！！</font>）</p>
<p>使用了临时表保存中间结果，MySQL在对查询结果排序时使用临时表。</p>
<p>常见于排序order by和分组查询group by</p>
</li>
<li><p>using index</p>
<p>表示相应的select操作中使用了覆盖索引，避免访问了表的数据行，效率不错。</p>
<p>如果同时出现了using where，表明索引被用来执行索引键值的查找</p>
<p>如果没有同时出现using where，表明索引用来读取数据而非执行查找动作</p>
<p>覆盖索引：<font color=red>查询列要被所建的索引覆盖</font></p>
</li>
<li><p>using index condition</p>
<p>Using index condition 会过滤索引后找到所有符合索引条件的数据行，随后用 where子句中的其他条件去过滤这些数据行，用到了ICP</p>
<p>关闭ICP是这样的：1. 从索引里面取出下一条pid=14的记录，然后利用主键字段读取整个行。2. 然后对这个完整的行利用其余的条件这个进行判断看是否符合条件，在Server层进行过滤和处理。开启ICP是这样的：1. 从索引里面取出下一条pid=14的记录，然后利用这个索引的其他字段条件进行判断，如果条件成立，执行第2步。在引擎层上进行过滤和处理。2. 在上一步中筛选出来符合条件的才会利用主键索引里面找到这个完整行，返回。</p>
</li>
<li><p>using where</p>
<p>MySQL将对存储引擎层提取的结果进行过滤，过滤条件字段无索引。有可能产生回表。只有在使用了索引，且Extra是Using where的情况下，才代表回表查询数据</p>
</li>
<li><p>using join buffer</p>
<p>使用了连接缓存</p>
<p>如果join比较多了，可以调大配置中的join buffer</p>
</li>
<li><p>impossible where</p>
<p>where子句的值总是false，不能用来获取任何元组</p>
</li>
<li><p>select tables optimized away</p>
<p>在没有groupby子句的情况下，基于索引优化min/max操作获取或者</p>
<p>对于myisam存储引擎优化count(*)操作</p>
<p>不必等到执行阶段再进行计算，查询执行计划生成的阶段即完成了优化</p>
</li>
<li><p>distinct</p>
<p>优化distinct操作，在找到第一匹配的元组后即停止找同样值的动作</p>
</li>
</ul>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库恢复</title>
    <url>/2022/01/07/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%81%A2%E5%A4%8D/</url>
    <content><![CDATA[<h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><blockquote>
<p>定义</p>
</blockquote>
<ul>
<li><p>用户定义的一个对数据库读写操作序列</p>
</li>
<li><p>数据库中不可分割的执行单位</p>
</li>
<li><p>数据库恢复和并发控制的基本单位</p>
</li>
<li><p>数据库系统中通常有多个事务并行运行</p>
</li>
</ul>
<blockquote>
<p>事务的特性</p>
</blockquote>
<ul>
<li>原子性</li>
<li>一致性 （事务执行的结果必须使得数据库从一个一致性状态变到另一个一致性状态）</li>
<li>隔离性 （相互之间不能干扰）</li>
<li>持久性 （事务一旦提交，它对于数据库的更新不会受到后续操作或故障的影响）</li>
</ul>
<h3 id="操作原语"><a href="#操作原语" class="headerlink" title="操作原语"></a>操作原语</h3><ul>
<li><p>缓存区管理器（分配、管理和回收缓冲区，决定何时将缓冲区的数据写回磁盘（立即修改/延迟修改））</p>
<ul>
<li>Input(x) 包含数据元素x的磁盘块$\rightarrow$缓冲区</li>
<li>Output(x) 包含数据元素x的缓冲区$\rightarrow$磁盘</li>
</ul>
</li>
<li><p>事务</p>
<ul>
<li><p>Read(x,t)</p>
<p>缓冲区的数据元素x $\rightarrow$事务的局部变量t，</p>
<p>如果包含x的块不在缓冲区中，则先执行input(x)</p>
</li>
<li><p>Write(x,t)</p>
<p>事务的局部变量t$\rightarrow$缓冲区的数据元素x，</p>
<p>如果包含x的块不在缓冲区中，则先执行input(x)</p>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>各个管理器的作用</p>
</blockquote>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210105180914.png" alt="image-20210105180909175" style="zoom:50%;" />

<h3 id="数据库恢复"><a href="#数据库恢复" class="headerlink" title="数据库恢复"></a>数据库恢复</h3><blockquote>
<p>常见故障</p>
</blockquote>
<ul>
<li>事务故障 </li>
<li>介质故障</li>
<li>系统故障</li>
</ul>
<blockquote>
<p>恢复技术</p>
</blockquote>
<ul>
<li><p>数据库恢复的基本原理</p>
<p><strong>利用存储在系统别处的冗余数据来重建</strong></p>
<p>主要包括：日志文件、数据备份</p>
</li>
</ul>
<blockquote>
<p>日志记录的几种形式</p>
</blockquote>
<p>Redo: 对已提交的事务进行重做</p>
<p>Undo：对未提交的事务进行撤销</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210104163152.png" alt="image-20210104163147917" style="zoom:50%;" />

<ul>
<li><p>Undo日志规则</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210104164215.png" alt="image-20210104164210273" style="zoom:50%;" /></li>
<li><p>Redo日志规则</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210104164627.png" alt="image-20210104164622379" style="zoom:50%;" /></li>
<li><p>Undo与Redo的区别</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210104164909.png" alt="image-20210104164905046" style="zoom:50%;" /></li>
</ul>
<blockquote>
<p>数据库恢复</p>
</blockquote>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210104170615.png" alt="image-20210104170440808" style="zoom:50%;" />

<p><font color=red>注意一定是先要做Undo操作，再做Redo操作！</font></p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210104170615.png" alt="image-20210104170604389" style="zoom:50%;" />



<ul>
<li><p>出现的问题</p>
<ol>
<li>搜索整个日志耗费大量的时间</li>
<li>有些日志不再需要了</li>
</ol>
</li>
<li><p>解决方法</p>
<p>检查点技术</p>
<p>非静止检查点技术（可以在建立检查点的时候运行新的事务进入）</p>
</li>
</ul>
<blockquote>
<p>参考</p>
</blockquote>
<p><a href="https://www.youtube.com/watch?v=X2ba9C9lCa4">https://www.youtube.com/watch?v=X2ba9C9lCa4</a></p>
<p><a href="https://www.youtube.com/watch?v=V1h6-PxLVz4">https://www.youtube.com/watch?v=V1h6-PxLVz4</a></p>
<p><a href="https://www.youtube.com/watch?v=PU22PPQUwkA">https://www.youtube.com/watch?v=PU22PPQUwkA</a> </p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库范式</title>
    <url>/2022/01/07/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%8C%83%E5%BC%8F/</url>
    <content><![CDATA[<ol>
<li><p>几个重要知识点</p>
<ul>
<li><p>平凡函数依赖与非平凡函数依赖</p>
<ul>
<li>X→Y，但Y⊈X则称X→Y是非平凡的函数依赖。</li>
<li>X→Y，但Y⊆X 则称X→Y是平凡的函数依赖。</li>
</ul>
</li>
<li><p>完全函数依赖与部分函数依赖</p>
<p>在R(U)中，</p>
<ul>
<li>如果X→Y，并且对于X的任何一个真子集X’, 都有 X’ ↛ Y, 则称Y对X完全函数依赖，记作X → Y。</li>
<li>若X→Y，但Y不完全函数依赖于X，则称Y对X部分函数依赖，记作X → Y</li>
</ul>
</li>
<li><p><font color=red>候选码</font></p>
<p>设K为R&lt;U,F&gt;中的属性或属性组合。若K → U，则K称为R的一个候选码(Candidate Key)。</p>
<p><font color=red>千万需要记住的是候选码与超码之间的区别</font></p>
</li>
<li><p><font color=red>超码</font></p>
<p>如果U部分函数依赖于K，即K → U,则K称为超码(Surpkey)。</p>
<p><strong>候选码是最小的超码</strong>，即K的任意一个真子集都不是候选码。</p>
</li>
<li><p><font color=red>主码</font></p>
<p>主码是候选码中的任意一个</p>
</li>
<li><p>主属性与非主属性</p>
<ul>
<li>包含在任何一个候选码中的属性 ，称为主属性（Prime attribute） </li>
<li>不包含在任何码中的属性称为非主属性（Nonprime attribute）或非码属性（Non-key attribute） </li>
</ul>
</li>
<li><p>全码</p>
<p>整个属性组是码，称为全码（All-key） </p>
</li>
</ul>
</li>
<li><p>范式</p>
<ul>
<li><p>第一范式</p>
<p>每个属性不可分割</p>
</li>
<li><p>第二范式</p>
<p>若关系模式R∈1NF，并且每一个<strong>非主属性</strong>都<strong>完全函数依赖</strong>于任何一个候选码，则R∈2NF</p>
</li>
<li><p>第三范式</p>
<p>消除非主属性对于码的传递依赖<br>若R中不存在这样的码X、属性组Y及非主属性Z（Z ⊇ Y）, 使得X→Y，Y→Z成立，<font color=red>Y ↛ X不成立</font>，则称R&lt;U,F&gt; ∈ 3NF。</p>
<p><a href="https://blog.csdn.net/sumaliqinghua/article/details/86246762">三范式分解</a></p>
</li>
<li><p>BC范式</p>
<p>消除主属性对码的部分和传递函数依赖</p>
<p>判断：在关系模式R&lt;U,F&gt;中，如果每一个决定属性集都<strong>包含候选码</strong>，则R∈BCNF。</p>
</li>
</ul>
<ol start="3">
<li><p>无损连接与保持函数依赖性</p>
<ul>
<li>无损连接</li>
</ul>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210103115115.png" alt="image-20210103115106959"></p>
<p>​    <a href="https://blog.csdn.net/nailuoch/article/details/94214673">无损连接判断</a></p>
<ul>
<li><p>保持函数依赖性</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210103115439.png" alt="image-20210103115438081"></p>
<p>分解后带到的各个集合推导出的函数依赖看是否能够推导出原来的函数依赖</p>
</li>
</ul>
</li>
</ol>
<p>​        <font color=red>一个无损连接的分解不一定具有依赖保持性，反之亦然 !</font></p>
<ol start="4">
<li><p>三范式分解(<font color=red>范式分解最终的答案并非是唯一的，和分解的顺序有关！</font>)</p>
<ul>
<li><p>三范式分解为保持函数依赖的分解</p>
<p>步骤如下：</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210103151010.png" alt="image-20210103151008580"></p>
<p>例题：</p>
<p>设R&lt;U, F&gt;，其中：</p>
<pre><code>      U=&#123;C, T, H, R, S, G, X, Y, Z&#125;, 
      F=&#123;C→T, CS→G, HR→C，HS→ R, TH→ R, C→X&#125;，  
</code></pre>
<p>​          将R 分解为3NF，且保持函数依赖。 </p>
<p>解：</p>
<ol>
<li><p>求F的最小函数依赖集</p>
<p> 该函数依赖集已经是最小化的</p>
</li>
</ol>
<pre><code>2. 查看是否有一个函数依赖X-&gt;A，且XA=R。

可以很清楚的看到，并没有这种函数依赖。

3. 查看R中的某些属性是否并不在F中出现过

可以很清楚的看到有YZ

4. 将最小函数依赖集中的每一个依赖左右两边放到一起

则分解为ρ =&#123;YZ, CTX, CSG, HRC, HSR, THR&#125;  

注：这里的CTX放到一起时因为C$\rightarrow$T，C$\rightarrow$X
</code></pre>
</li>
<li><p>三范式分解既具有无损连接性又能保持函数依赖的分解 </p>
<p><strong>非常简单！在原来的基础上加上候选码中的任意一个即可。</strong></p>
<p>例如此题中的候选码为HS</p>
<p>那么在原来的ρ中添加HS即可，但是此处需要<font color=red>注意</font></p>
<p>∵ HS⊆ HSR<br>∴ τ= ρ ={CTX, CSG, HRC, HSR, THR, YZ}为满足要求的分解</p>
</li>
</ul>
</li>
<li><p>BCNF分解(<font color=red>范式分解最终的答案并非是唯一的，和分解的顺序有关！</font>)</p>
<ul>
<li><p>如何判定BCNF范式呢？</p>
<p>很简单！就是看<font color=red>每个</font>函数依赖的左边是否包含候选码，如果其中有一个不含候选码，则不为BCNF范式。</p>
</li>
<li><p>将关系模式转换为BCNF 的无损连接的分解</p>
<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210103152046863.png" alt="image-20210103152046863" style="zoom:50%;" />

<p>​    递归下去，直到出现$\Phi$或者出现最终的一个依赖符合BCNF约束则停止分解</p>
<p>​    例子1：</p>
<p>​    已知 R (A, B, C), AB为码, 且B-&gt;C存在<br>​    可知：R不满足BCNF<br>​    设 $\alpha$ = B, $\beta$ = C<br>​    则 R 可分解为：<br>​    ($\alpha$$\bigcup$ $\beta$) = (B, C)<br>​    (R – ($\beta$ $-$$\alpha$)) = (A, B)</p>
<p>​    例子2：</p>
<p>​    <img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210103154219.png" alt="image-20210103154210971" style="zoom:50%;" />    </p>
</li>
</ul>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库复习</title>
    <url>/2022/01/07/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<ol>
<li><p>数据库系统（DBMS）</p>
<ul>
<li><p>功能</p>
<p>位于用户与操作系统之间的一层数据管理软件，用于组织、存取和维护数据。有时也被直接称为数据库系统</p>
</li>
<li><p>特点</p>
<p>数据长期存储<br>数据由DBMS统一管理<br>数据共享程度高<br>数据独立性高<br>数据整体结构化，冗余小 </p>
</li>
</ul>
</li>
<li><p>数据库三层模式</p>
<ul>
<li>外模式 (External Schema)：<pre><code>是数据库用户的数据视图，是与某一应用有关的数据表示
一个数据库可有多个外模式
</code></pre>
</li>
<li>模式（Schema)：<pre><code>逻辑级上的视图，是数据库中全体数据的逻辑结构和特征的描述
一个数据库只有一个模式
</code></pre>
</li>
<li>内模式 (Internal Schema)：<pre><code>数据物理结构和存储方式的描述，是数据在数据库内部的表示方式
一个数据库只有一个内模式
</code></pre>
</li>
</ul>
</li>
<li><p>Web数据库应用系统体系结构</p>
<ul>
<li>客户/服务器（Client/Server，C/S）模式</li>
<li>浏览器/服务器（Browser/Server，B/S）模式</li>
</ul>
</li>
<li><p>关系模型的组成要素及其优缺点</p>
<ul>
<li><p>要素</p>
<p>数据（关系）结构、数据（关系）操作、数据（关系）的完整性约束条件</p>
</li>
<li><p>优点</p>
<p>严格的数学理论根据</p>
<p>数据结构简单、清晰，用户易懂易用</p>
<p>存取路径对用户透明</p>
</li>
<li><p>缺点</p>
<p>查询效率不如非关系模型，为了提高性能，必须对用户的查询进行优化，增加了开发数据库管理系统的负担</p>
</li>
</ul>
</li>
<li><p>数据库恢复故障</p>
<p><strong>各类故障对数据库的可能影响</strong> </p>
<p>• <strong>数据库本身</strong>被破坏，使数据库中全部或部分数据丢失 </p>
<p>–<strong>如系统故障、介质故障等</strong> </p>
<p>• <strong>数据库没有被破坏，但因事务的运行被非正常</strong> </p>
<p>终止而使数据库数据失去一致性(正确性)</p>
<p>–<strong>如事务内部故障、系统故障等</strong></p>
</li>
<li><p>可串行化调度的定义</p>
<p>多个事务的并发执行是正确的，当且仅当其结果与按某一次序串行地执行它们时的结果相同</p>
</li>
<li><p>冲突可串行化调度的定义</p>
<p>如果一个调度冲突等价于一个串行调度，我们说该调度是冲突可串行化的</p>
</li>
<li><p>trigger</p>
<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210114100911829.png" alt="image-20210114100911829" style="zoom:50%;" /></li>
</ol>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>文件</title>
    <url>/2022/01/07/MySQL/%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="日志文件"><a href="#日志文件" class="headerlink" title="日志文件"></a>日志文件</h3><h4 id="错误日志"><a href="#错误日志" class="headerlink" title="错误日志"></a>错误日志</h4><ul>
<li><p>位置查询</p>
<p><code>show variables like &#39;log_error&#39;\G</code></p>
</li>
</ul>
<h4 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h4><ul>
<li><p>相关指令</p>
<ul>
<li><p>查看mysql 慢查询相关信息</p>
<p><code>show variables like &#39;%slow%&#39;;</code></p>
</li>
<li><p>慢查询时间标准 (只有&gt;该时间会被记录)</p>
<p><code>show variables like &#39;long_query_time&#39;\G</code></p>
</li>
<li><p>查询慢查询</p>
<p><code>show variables like &#39;log_slow_queries&#39;\G</code></p>
</li>
<li><p>开启记录未使用索引的sql的功能</p>
<p><code>show variables like &#39;log_queries_not_using_indexes&#39;\G</code></p>
<p>如果开启了，那么会将没有使用索引的sql也添加到慢查询日志中去</p>
</li>
<li><p>设置允许记录到慢查询日志中每分钟未使用索引sql的语句次数</p>
<p><code>show variables like &#39;log_throttle_queries_not_using_indexes&#39;\G</code></p>
<p>默认为0，表示无限制</p>
</li>
<li><p>开启mysql慢查询</p>
<p><a href="https://www.cnblogs.com/afeige/p/10896389.html">https://www.cnblogs.com/afeige/p/10896389.html</a></p>
<p>注意：对应的目录需要给mysql用户权限</p>
</li>
<li><p>输出日志格式设置 (是可以动态进行调整的，并且是全局有效的)</p>
<p><code>show variables like &#39;log_output&#39;\G</code></p>
<p>默认是file</p>
<p>可以改为table</p>
<p><code>set global log_output=&#39;table&#39;;</code></p>
<p>测试 select sleep(11);</p>
<p><code>show create table slow_query.log\G</code> （可以看到默认的表的引擎是CSV，用户可以自己进行设置）</p>
<p><code>select * from mysql.slow_log\G</code></p>
</li>
</ul>
</li>
<li><p>有条件的查询慢sql</p>
<p><code>mysqldumpslow -s al -n 10 xxx.log</code></p>
<p>查询执行时间最长的10条sql语句</p>
</li>
<li><p>不止可以根据运行时间记录slow log,还可以根据指定的逻辑IO次数将对应的sql语句加入到slow log中</p>
</li>
</ul>
<h4 id="查询日志"><a href="#查询日志" class="headerlink" title="查询日志"></a>查询日志</h4><ul>
<li><p>mysql所有的查询都会记录在此处，默认是不开启的</p>
</li>
<li><p>相关命令</p>
<p><code>show variables like &#39;log_output&#39;;</code></p>
</li>
<li><p><a href="https://www.cnblogs.com/kerrycode/p/7130403.html">参考</a></p>
</li>
</ul>
<h4 id="二进制日志"><a href="#二进制日志" class="headerlink" title="二进制日志"></a>二进制日志</h4><p><font color=red>二进制日志记录了对MySQL数据库执行更改的所有操作，但是其中不包含select和show操作，如果更改操作并没有真正使得数据库发生了改变，同样也有可能记录到数据中</font></p>
<ul>
<li><p>作用</p>
<ul>
<li>恢复</li>
<li>复制</li>
<li>审计</li>
</ul>
</li>
<li><p>开启二进制日志 <strong>默认是不开启的</strong></p>
<ul>
<li><p>在配置文件中添加参数</p>
<p>log_bin = {name} (如果不指定name的话则默认二进制文件名为主机名)</p>
</li>
<li><p>重启mysql</p>
</li>
<li><p>查看是否开启</p>
<p><code>show variables like &#39;log_bin&#39;;</code></p>
</li>
</ul>
</li>
<li><p>二进制日志配置的相关参数</p>
<ul>
<li><p>max_binlog_cache  </p>
<p>单个日志文件的最大大小，达到就产生新的二进制日志文件</p>
</li>
<li><p>binlog_cache_size</p>
<p>缓存中二进制日志大小，每个session都会自动分配一个大小为binlog_cache_size的缓存，当一个事务的记录大于该值时会将缓冲中的日志写入到一个临时文件中</p>
</li>
<li><p>sync_binlog</p>
<p>设置同步磁盘的策略</p>
<p>sync_binlog[N] 表示每写多少次缓冲就同步到磁盘</p>
</li>
<li><p>binlog_format （<a href="https://blog.csdn.net/weixin_42351363/article/details/113424251">参考</a>）</p>
<ul>
<li><p>查看当前格式的内容</p>
<p><code> show variables like &#39;binlog_format&#39;;</code></p>
</li>
<li><p>statement </p>
<p>将对应的sql记录下来</p>
<p><font color=red>注意：statement在read committed事务隔离级别下会产生主从逻辑顺序不一致的现象。比如开启了一个事务（删除记录a &lt;5）但是没有提交，这时候提交了另外一个事务(插入记录a=5)，虽然在master上是先执行了删除，然后插入，但是在从服务器上记录的就是单纯的sql，也就是先插后删，从而导致主从不一致</font></p>
</li>
<li><p>row (貌似默认是row格式)</p>
<p>将每一行被影响的过程记录下来</p>
<p><strong>强烈推荐使用row格式记录二进制日志</strong></p>
</li>
<li><p>mixed</p>
<p>自动根据SQL采用statement或者row的日志格式策略</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>查看二进制日志文件记录的内容</p>
<ul>
<li><p>找到当前记录的位置</p>
<p><code>show master status</code></p>
</li>
<li><p>查看</p>
<ul>
<li><p>statement格式记录的</p>
<p><code>mysqlbinlog --start-position=203 &#123;binlog file name&#125;</code></p>
</li>
<li><p>row格式记录的</p>
<p><code>mysqlbinlog -vv --start-position=203 &#123;binlog file name&#125;</code></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="pid文件"><a href="#pid文件" class="headerlink" title="pid文件"></a>pid文件</h4><ul>
<li><p>作用</p>
<p>将当前mysql进程的进程ID写入到该文件中</p>
<p>MySQL pid 文件的作用是：在数据文件是同一份，但端口不同的情况下，防止同一个数据库被启动多次。</p>
</li>
<li><p>查看pid文件位置</p>
<p><code>show variables like &#39;pid_file&#39;;</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>InnoDB技术探究</tag>
      </tags>
  </entry>
  <entry>
    <title>查询处理优化</title>
    <url>/2022/01/07/MySQL/%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h2 id="查询处理步骤"><a href="#查询处理步骤" class="headerlink" title="查询处理步骤"></a>查询处理步骤</h2><ol>
<li><p>语法分析和翻译</p>
<p>主要是语法与权限检查以及将SQL语句转化为等价的内部表示形式</p>
</li>
<li><p>优化</p>
<p>选择高效执行的查询执行计划</p>
</li>
<li><p>执行</p>
</li>
</ol>
<h2 id="查询树的表示"><a href="#查询树的表示" class="headerlink" title="查询树的表示"></a>查询树的表示</h2><h3 id="最初语法树"><a href="#最初语法树" class="headerlink" title="最初语法树"></a>最初语法树</h3><p><font color=red>最重要的一点就是自下而上写</font></p>
<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210104151854521.png" alt="image-20210104151854521" style="zoom:50%;" />

<p>几个名词：</p>
<ul>
<li>投影：project</li>
<li>选择：select</li>
<li>连接：join</li>
</ul>
<h3 id="关系代数语法树"><a href="#关系代数语法树" class="headerlink" title="关系代数语法树"></a>关系代数语法树</h3><p>​    <img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210104152133295.png" alt="image-20210104152133295" style="zoom:50%;" /></p>
<h3 id="优化查询树"><a href="#优化查询树" class="headerlink" title="优化查询树"></a>优化查询树</h3><p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210104152917.png" alt="image-20210104152916371"></p>
<h2 id="查询树的启发式优化"><a href="#查询树的启发式优化" class="headerlink" title="查询树的启发式优化"></a>查询树的启发式优化</h2><ul>
<li><p><font color=red>选择运算应尽可能先做</font><br>在优化策略中这是最重要、最基本的一条。</p>
</li>
<li><p>把投影运算和选择运算同时进行<br>如有若干投影和选择运算，并且它们都对同一个关系操作，则可以在扫描此关系的同时完成所有的这些运算以避免重复扫描关系。</p>
</li>
<li><p>把投影同其前或其后的双目运算结合起来，没有必要为了去掉某些字段而扫描一遍关系。</p>
</li>
<li><p>把某些选择同在它前面要执行的笛卡尔积结合起来成为一个连接运算，连接特别是等值连接运算要比同样关系上的笛卡尔积省很多时间。</p>
</li>
<li><p>找出公共子表达式<br>如果这种重复出现的子表达式的结果不是很大的关系并且从外存中读入这个关系比计算该子表达式的时间少得多，则先计算一次公共子表达式并把结果写入中间文件是合算的。<br>当查询的是视图时，定义视图的表达式就是公共子表达式的情况</p>
</li>
</ul>
<p>  <a href="https://www.bilibili.com/video/BV18E41137Cm?from=search&seid=6874889460109418968">参考</a></p>
<h2 id="物理优化"><a href="#物理优化" class="headerlink" title="物理优化"></a>物理优化</h2><ol>
<li><p>基于启发式规则的存取路径选择优化</p>
<ul>
<li>选择操作的启发式规则</li>
<li>连接操作的启发式规则</li>
</ul>
</li>
<li><p>基于代价的优化</p>
</li>
</ol>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>查询截取分析</title>
    <url>/2022/01/07/MySQL/%E6%9F%A5%E8%AF%A2%E6%88%AA%E5%8F%96%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h2><ol>
<li>观察，至少跑一天，查看生产 的慢SQL情况</li>
<li>开启慢查询日志，设置阈值，比如超过5s的就是慢SQL，将其抓取出来</li>
<li>explain+慢SQL分析</li>
<li>show profile</li>
<li>进行sql数据库服务器的参数调优</li>
</ol>
<h3 id="查询优化"><a href="#查询优化" class="headerlink" title="查询优化"></a>查询优化</h3><ul>
<li><p>永远小表驱动大表</p>
<ul>
<li><p>exits</p>
<p>将主查询的数据，放到子查询中做条件验证，根据验证结果（true或false）来决定主查询的数据结构是否得以保留</p>
</li>
</ul>
</li>
<li><p>order by关键字优化</p>
<ul>
<li><p>order by子句，尽量使用Index方式排序，避免使用filesort方式排序</p>
<p>排序如果按照顺序一升一降排序，也会导致最终的使用filesort</p>
</li>
<li><p>尽可能在索引列上完成排序操作，遵照索引建立的最佳左前缀</p>
</li>
<li><p>如果不在索引列上，filesort有两种算法：MySQL会启动双路排序和单路排序</p>
<ul>
<li><p>双路排序</p>
<p>MySQL4.1之前使用双路排序，字面意思是两次扫描磁盘，最终得到数据</p>
</li>
<li><p>单路排序</p>
<p>MySQL4.1之后使用单路排序，从磁盘读取查询需要的列，按照order by列在buffer对他们进行排序，然后扫描排序后的列表进行输出，它的效率更快一些，避免了第二次读取数据，并且把随机io变成了顺序io，但是它会使用更多的 空间，因为它把每一行都保存在唉内存中了。</p>
</li>
<li><p>两者比较</p>
<p>总体而言，单路排序好于双路排序，但是单路排序如果无法一次完成，则需要多次io，而双路排序是稳定的，始终都是两次io</p>
<p>在sort_buffer中，单路排序比双路排序多占用很多空间，有可能取出的数据总大小超过了sort_buffer的容量，导致每次只能取sort_buffer容量大小的数据进行排序，排序完再取sort_buffer的容量大小，再排序…从而导致多次io</p>
</li>
</ul>
</li>
<li><p>优化策略</p>
<ul>
<li><p>增大sort_buffer_size参数设置</p>
</li>
<li><p>增大max_length_for_sort_data参数设置</p>
</li>
<li><p>尽一切可能在使用order by的时候不要使用select *</p>
<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210223210831823.png" alt="image-20210223210831823" style="zoom:50%;" /></li>
</ul>
</li>
</ul>
</li>
<li><p>group by</p>
<p>group by的实质是先排序后分组</p>
<p>其他与order by一样，多了一条如下：</p>
<p>where 高于having，能写在where限定的条件就不要去having限定</p>
</li>
</ul>
<h3 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h3><p>默认情况下MySQL没有开启慢查询日志，需要我们手动设置该参数</p>
<p>如果不是调优需要，则不要开启该功能</p>
<ul>
<li><p>开启慢查询日志</p>
<ul>
<li><p>查看</p>
<p>show variables like ‘%slow_query_log%’;</p>
</li>
<li><p>开启</p>
<p>set global slow_query_log=1;</p>
<p>只会对当前数据库生效，重启MySQL就会失效</p>
<p>如果想要永久生效</p>
<p>则需要在my.cnf中的[mysqld]下增加或修改参数</p>
<p>slow_query_log=1</p>
<p>slow_query_log_file =  /var/lib/mysql/VM-12-5-centos-slow.log</p>
<p>重启MySQL即可</p>
</li>
<li><p>查看对应的阈值</p>
<p>show variables like ‘long_query_time%’</p>
<p>假如运行时间正好等于long_query_time的情况则不会被记录下来</p>
<p>如果想要其他阈值，可以直接修改 :set long_query_time = 3;(<font color=red>注意</font>：直接修改的话看不到long_query_time有变化，需要重新登录MySQL才会看到修改的值,也可以通过show global variables like ‘long_query_time%’查看)</p>
<p>也可以通过my.cnf进行修改</p>
</li>
<li><p>查看</p>
<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210223213433512.png" alt="image-20210223213433512" style="zoom:50%;" /></li>
<li><p>查看有多少慢SQL</p>
<p>show global status like ‘%Slow_queries’;</p>
</li>
<li><p>配置</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210223213655.png" alt="image-20210223213650510" style="zoom:50%;" /></li>
</ul>
</li>
<li><p>日志分析工具</p>
<p>mysqldumpslow  –help 可以查看其用法</p>
<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210223214027917.png" alt="image-20210223214027917" style="zoom:50%;" /></li>
</ul>
<h3 id="show-profile"><a href="#show-profile" class="headerlink" title="show profile"></a>show profile</h3><p>MySQL提供可以用来分析当前会话中语句执行的资源消耗情况</p>
<ul>
<li><p>默认情况下show profile是处于关闭状态的，只保存最近15次 的运行结果</p>
<ul>
<li><p>是否支持</p>
<p>show variables like ‘profiling’;</p>
</li>
<li><p>开启功能</p>
<p>set profiling = on; (也只是暂时生效，重启就会失效)</p>
</li>
<li><p>运行SQL</p>
</li>
<li><p>查看结果 show profiles</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210223220853.png" alt="image-20210223220847797" style="zoom:50%;" /></li>
<li><p>诊断SQL，show profile cpu,block io for query 上一步前面的问题SQL数字号码</p>
<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210223220953798.png" alt="image-20210223220953798" style="zoom:50%;" />

<p>当然除了cpu、io也可以查看其它的，如下</p>
<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210223221057082.png" alt="image-20210223221057082" style="zoom:50%;" /></li>
<li><p>日常开发需要注意的结论</p>
<p>出现了一下字眼则说明该SQL比较危险</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210223221307.png" alt="image-20210223221302953" style="zoom:50%;" /></li>
</ul>
</li>
</ul>
<h3 id="全局查询日志"><a href="#全局查询日志" class="headerlink" title="全局查询日志"></a>全局查询日志</h3><p>主要是用于测试环境，将所有的SQL抓取出来查看</p>
<ul>
<li><p>配置启用</p>
<p>在my.cnf中设置如下：</p>
<p>general_log = 1</p>
<p>General_log_file = {path}</p>
<p>Log_output =FILE</p>
</li>
<li><p>命令启用</p>
<p>set global general_log = 1;</p>
<p>set global log_output = ‘TABLE’</p>
<p>这样开启之后我们所有的SQL语句都会被记录到mysql库中 的general_log表中，查看如下</p>
<p>select * from mysql.general_log;</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210223222510.png" alt="image-20210223222503338" style="zoom:50%;" /></li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>索引</title>
    <url>/2022/01/07/MySQL/%E7%B4%A2%E5%BC%95/</url>
    <content><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>索引是一种帮助数据库高效获取数据的数据结构</p>
<p>排好序的快速查找数据结构</p>
<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul>
<li>排序</li>
<li>查找</li>
</ul>
<h2 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h2><ol>
<li>不是索引越多越好</li>
<li>不要对经常变动的数据添加索引</li>
<li>小数据量的表不需要添加索引</li>
<li>索引一般加在经常需要查询的字段上</li>
</ol>
<h2 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h2><ul>
<li>占用磁盘空间</li>
<li>虽然提升了查询速度，但是会降低表的更新速度，如对表进行INSERT、UPDATE和DELETE。因为每次更新表都需要重新对索引进行调整</li>
</ul>
<p><font color=red>注意：索引是需要不停的分析，逐步优化出来的</font></p>
<h2 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h2><ul>
<li><p>单值索引：该索引只包含一个字段</p>
</li>
<li><p>唯一索引：索引列的值必须是唯一的，但是允许有空值</p>
</li>
<li><p>复合索引 （联合索引）</p>
<p><font color=red>最重要的一点在于最左匹配原则，不能跳索引</font></p>
<p>因为对于联合索引来说构建二叉树是按照键值的顺序来进行插入的，比如说是（a,b）这2个字段构建的联合索引</p>
</li>
</ul>
<p>​       <img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210810093211.png" alt="image-20210810093201946" style="zoom:50%;" /></p>
<p>​        可以看到是排序是按照a然后b，因此需要按照最左匹配原则进行查询</p>
<p>​       联合索引的一个好处是对第二个键值已经进行了排序，如果查询时a为一个固定值来说的话</p>
<ul>
<li><p>聚集索引</p>
<p>按照每张表的主键构造一棵B+树，同时==叶子==节点中存放的即为==整张表==的行记录数据（这里指的不是单个叶子节点，单个叶子节点只是一部分表的行记录数据，这里指的是所有叶子节点加起来就是整张表的行记录数据），也将聚簇索引的叶子节点称为数据页</p>
<ul>
<li><p>组成</p>
<ul>
<li>非数据页的索引页存放的仅仅是键值以及指向数据页的偏移量，<font color=red>而不是一个完整的行记录</font></li>
<li>数据页的存放是完整的行记录</li>
</ul>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210808100250.png" alt="image-20210808100241025"></p>
</li>
</ul>
</li>
<li><p>辅助索引</p>
<p>辅助索引的非叶子节点包含对应的辅助索引键值，叶子节点不同于聚集索引，<font color=red>不含行数据</font>，而是包含了一个<font color=red>聚集索引键（主键）</font>，通过查找非聚集索引B+树找到其叶子节点上的主键，然后再去聚集索引B+树上去查找对应的行数据。其树高一般也是2~4层，故查询次数较聚集索引多了一倍（因为有两次查询过程，先是辅助索引-&gt;聚集索引，然后是聚集索引-&gt;辅助索引，<strong>相当于是查找了2棵树</strong>）。</p>
<ul>
<li><p>组成</p>
<ul>
<li><p>非叶子节点是辅助索引键值（辅助索引，聚集索引）</p>
</li>
<li><p>叶子节点是聚集索引键值</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210808102448.png" alt="image-20210808102446193"></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>自适应哈希索引</p>
<p>该索引是InnoDB自己建立的。经常访问的辅助索引数据会自动被生成到hash索引里面去(最近连续被访问三次的数据)，自适应哈希索引通过缓冲池的B+树构造而来，因此建立的速度很快。</p>
<p>它会占用InnoDB buffer pool</p>
<p>缺点：只能用于等值查询</p>
<p>查看是否开启：<code>show variables like &#39;innodb_adaptive_hash_index;</code></p>
</li>
</ul>
<h2 id="索引创建"><a href="#索引创建" class="headerlink" title="索引创建"></a>索引创建</h2><ul>
<li><p>fast index creation</p>
<ul>
<li><p>辅助索引创建</p>
<ul>
<li><p>5.5之前</p>
<p>重建表</p>
</li>
<li><p>5.5</p>
<p>InnoDB引擎会对创建索引的表加上一个S锁，在创建的过程中不需要重建表，因此只能进行<font color=red>读操作</font></p>
</li>
<li><p>5.6及其之后</p>
<p>允许在辅助索引创建或删除的同时进行增删改查</p>
<p>几种在创建和删除辅助索引时的加锁方案：</p>
<ul>
<li><p>None</p>
<p>不添加任何锁</p>
</li>
<li><p>share</p>
<p>添加s锁，只允许读，写操作会被阻塞</p>
</li>
<li><p>exclusive</p>
<p>添加x锁，阻塞所有线程</p>
</li>
<li><p>default</p>
<p>通过判断事务的最大并发性来选择加锁方案</p>
</li>
</ul>
<p><strong>原理</strong></p>
<p>执行辅助索引创建或删除的时候的同时将DML操作(增删改)日志写入到一个缓存中，待索引完成创建之后重做应用到表上。</p>
<p>缓存的大小由参数<code>innodb_online_alter_log_max_size</code>,默认大小为欸128M</p>
<p><font color=red>注意：在索引创建的过程中，不会使用到正在创建的索引</font></p>
</li>
</ul>
</li>
<li><p>对于主键的创建和删除需要重建一张表，其过程如下</p>
<ol>
<li><p>创建一张新的临时表</p>
</li>
<li><p>将原表数据导入到临时表</p>
</li>
<li><p>删除原表</p>
</li>
<li><p>临时表重命名为原来的表名</p>
<p><font color=red>注意：临时表的创建路径是通过tmpdir进行设置的，因此需要保证tmpdir要有足够的空间可以存放临时表</font></p>
<p><strong>索引最好提前创建，尤其是主键索引</strong></p>
</li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="索引语法"><a href="#索引语法" class="headerlink" title="索引语法"></a>索引语法</h2><ul>
<li><p>创建索引</p>
<p>CREATE [unique] INDEX BKNameIdx ON books (bookname);</p>
<p>alter mytable add [unique] index [indexname] on [columnname]</p>
</li>
<li><p>删除索引</p>
<p>drop index [indexname] on mytable</p>
</li>
<li><p>show index from tablename</p>
</li>
<li><p>可以只对当前字段前n个字节构建索引</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table t add key idx_b(b(100)) #表示只对b字段的前100个字节构成辅助索引</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="索引的数据结构"><a href="#索引的数据结构" class="headerlink" title="索引的数据结构"></a>索引的数据结构</h2><ul>
<li><p>BTree</p>
<p><font color=red>B+树索引并不能找到一个给定键值的具体行，找到的只是被查找数据行所在的页，然后数据库将页读取到内存中，在内存中进行查找</font></p>
</li>
<li><p>Hash索引</p>
<p>InnoDB的哈希索引是自适应的，也就是说InnoDB会根据当前的表的使用情况，自动判断是否是生产哈希索引好一些，如果建立哈希索引能够提高查询效率，那么会建立哈希索引，如果不能则不建立该索引</p>
</li>
<li><p>full-text索引</p>
</li>
<li><p>R-Tree索引</p>
</li>
</ul>
<h2 id="建立索引的情况"><a href="#建立索引的情况" class="headerlink" title="建立索引的情况"></a>建立索引的情况</h2><ol>
<li>主键自动建立唯一索引</li>
<li>频繁作为查询条件的字段应该作为索引</li>
<li>查询中与其他表关联的字段，外键关系建立索引</li>
<li>查询中排序字段，排序字段若通过索引去访问将大大提高排序速度</li>
<li>查询中统计或分组的字段</li>
<li>字段具有高选择性，也就是该字段包含的值有很多种，例如性别只有两种字段就不应该建立索引</li>
</ol>
<h2 id="不建立索引的情况"><a href="#不建立索引的情况" class="headerlink" title="不建立索引的情况"></a>不建立索引的情况</h2><ol>
<li><p>表记录比较少（一般以300w为界限，虽然官方文档上说支持500w-600w）</p>
</li>
<li><p>经常增删改的表</p>
</li>
<li><p>如果某个数据列包含许多重复的内容，为他建立索引就没有太大的实际效果</p>
<p>按照下面的原则来判断：</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210221212309.png" alt="image-20210221212257372" style="zoom:50%;" /></li>
</ol>
<h2 id="索引失效-（注意MySQL版本的不同可能导致以下情况发生变化）"><a href="#索引失效-（注意MySQL版本的不同可能导致以下情况发生变化）" class="headerlink" title="索引失效 （注意MySQL版本的不同可能导致以下情况发生变化）"></a>索引失效 （<font color=red>注意MySQL版本的不同可能导致以下情况发生变化</font>）</h2><p>索引所建立的顺序用不上了</p>
<p>常见索引失效的原因如下：</p>
<ul>
<li><p>未遵守最左前缀法则  （where后面的条件）</p>
<p>最左前缀法则：查询从索引的最左前列开始并且<font color=red>不跳过索引中的列</font>（<font color=red>一定要按照顺序</font>）</p>
</li>
<li><p>不能在索引列上做任何操作（计算、函数、（自动or手动）类型转换），会导致索引失效而转向全表扫描</p>
</li>
<li><p>存储引擎不能使用索引中范围条件右边的列</p>
<img src="/Volumes/共享文件夹/Snipaste_2021-02-23_09-30-58.png" alt="Snipaste_2021-02-23_09-30-58" style="zoom:50%;" />

<p>​    最下面的查询在索引列上使用了范围导致后面的pos索引失效了</p>
</li>
<li><p>尽量使用索引覆盖（只访问索引的查询（索引列和查询列一致）），减少select *</p>
</li>
<li><p>MySQL在使用不等于（！=或者&lt;&gt;）的时候无法使用索引会导致全表扫描</p>
<p>MySQL 8.0用到了索引，type是range，之前的版本type是ALL</p>
</li>
<li><p>is null，is not null 也无法使用索引</p>
</li>
<li><p>like以通配符开头（’%abc’）mysql索引失效会变成全表扫描</p>
<p>主要%在最左边，则出现全表扫描</p>
<p>解决方法：</p>
<p>查询的字段为遵循覆盖索引原则</p>
</li>
<li><p>字符串不加单引号会导致索引失效</p>
<p>因为MySQL底层会帮我们进行转换，也就是变相在索引列上进行了操作，导致索引失效</p>
</li>
<li><p>少用or，用它来连接时索引会失效</p>
</li>
<li><p>group by基本上都需要进行排序，会有临时表产生</p>
</li>
</ul>
<h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210223100444.png" alt="Snipaste_2021-02-23_10-04-09" style="zoom:50%;" />



<h2 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h2><ul>
<li><p>left join</p>
<p>右表建立索引</p>
</li>
<li><p>left join</p>
<p>左表建立索引</p>
</li>
<li><p>对于单键索引，尽量选择针对当前query过滤性更好的索引</p>
</li>
<li><p>在选择组合索引的时候，当前query中过滤性最好的字段在索引字段顺序中，位置越靠前越好</p>
</li>
<li><p>在选择组合索引的时候，尽量选择可以包含当前query中的where子句中更多的索引字段</p>
</li>
<li><p>尽可能通过分析统计信息和调整query的写法来达到选择合适索引的目的</p>
</li>
<li><p>order by 字段需要按照建立索引的顺序</p>
<p>例如索引为index_abc,则order by a ,b,c 最为合适</p>
<p>如果order by a ,c,b 则可能会用到using filesort</p>
<p>如果c为常量则不会产生影响</p>
</li>
<li><p>对于应用程序的几张核心表，可以在非高峰时间执行<code>analyze table &#123;table name&#125;</code>,能够是优化器和索引更好的为我们工作，因为执行该命令会对Cardinality进行更新，而<strong>优化器会根据这个值来判断是否使用这个索引</strong></p>
<p><font color=red>Cardinality这个值对于索引来说很重要，因为它表示索引中不重复记录数量的预估值</font></p>
<p>该值的更新策略为</p>
<ul>
<li>表中的1/16的数据已经发生了变化</li>
<li>stat_modified_counter&gt;2000000000</li>
</ul>
<p>每次更新时是对索引B+树中的叶子节点进行随机采样，每次采取8页，具体采取的页数通过参数<code>innodb_stats_sample_pages</code>进行控制</p>
</li>
</ul>
<h2 id="索引的使用"><a href="#索引的使用" class="headerlink" title="索引的使用"></a>索引的使用</h2><ul>
<li><p>覆盖索引 （<a href="https://www.cnblogs.com/myseries/p/11265849.html%EF%BC%89">https://www.cnblogs.com/myseries/p/11265849.html）</a></p>
<ul>
<li><p>覆盖索引的定义</p>
<p>从辅助索引中就可查询得到记录，而不需要查询聚集索引中的记录</p>
</li>
<li><p>好处</p>
<p>因为一般的对于辅助索引的查询会导致回表查询，也就是先查辅助索引，再找主键索引，最终查询到具体的数据，可以大大减少IO操作</p>
</li>
<li><p>查看是否出发覆盖索引</p>
<p>explain的输出结果Extra字段为<strong>Using index</strong>时，能够触发索引覆盖</p>
</li>
<li><p>注意</p>
<p><font color=red>对于SQL的统计操作，有时候是可以利用到覆盖索引信息的</font></p>
<p>比如对于辅助索引（id，date）</p>
<p>执行select count(*) from table where date&gt;=’2021-1-1’ and date&lt;=’2021-8-10’</p>
<p>通过辅助索引就可以查询成功，因为查询到日期之后，可以通过id进行统计</p>
</li>
</ul>
</li>
<li><p>索引提示</p>
<p>强制告诉mysql使用哪个索引去查询</p>
<p><code>select * from table use index(a) where a = 1 and b = 2 </code></p>
<p><code>select * from force table use index(a) where a = 1 and b = 2 </code></p>
<p>第二个更可靠，第一个有可能还是会使用优化器自己选择的索引</p>
</li>
<li><p>multi-range read （MRR）</p>
<ul>
<li><p>好处</p>
<ul>
<li>使得数据访问变得较为顺序</li>
<li>减少缓冲池中页被替换的次数</li>
<li>批量处理对键值的查询操作</li>
</ul>
</li>
<li><p>优化场景</p>
<ul>
<li>range</li>
<li>ref</li>
<li>eq_ref</li>
</ul>
</li>
<li><p>本质上来说是空间换时间</p>
</li>
</ul>
</li>
<li><p>index condition pushdown （ICP）</p>
<ul>
<li><p>好处</p>
<p>在取出索引的同时会判断是否可以进行where条件的过滤（如果索引中有字段在where条件中）</p>
</li>
<li><p>例子</p>
<p>比如有一个联合索引为（zip_code,last_name,first_name）</p>
<p>查询如下：</p>
<p><code>select * from people where zip_code=&#39;123&#39; and last_name like &#39;%hello%&#39; and first_name like &#39;%world%&#39;;</code></p>
<p>如果不开启ICP，则会先过滤出所有的zipcode=123的记录，然后再过滤where之后的两个条件，如果支持ICP，则会在索引取出的同时进行where条件的过滤</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>经典SQL查询语句</title>
    <url>/2022/01/07/MySQL/%E7%BB%8F%E5%85%B8SQL%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<h4 id="查询不重复"><a href="#查询不重复" class="headerlink" title="查询不重复"></a>查询不重复</h4><p>select distinct Depart from teacher;</p>
<h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><p>select * from Score where Degree in (85,86,88);</p>
<h4 id="按照顺序查询"><a href="#按照顺序查询" class="headerlink" title="按照顺序查询"></a>按照顺序查询</h4><p>select * from Score order by Cno asc,Degree desc;  (sql默认是升序)</p>
<h4 id="查询Score表中的最高分的学生学号和课程号。（子查询或者排序）"><a href="#查询Score表中的最高分的学生学号和课程号。（子查询或者排序）" class="headerlink" title="查询Score表中的最高分的学生学号和课程号。（子查询或者排序）"></a>查询Score表中的最高分的学生学号和课程号。（子查询或者排序）</h4><p>select Sno,Cno from Score where Degree = ( select max(Degree) from Score); </p>
<p>or</p>
<p>select Sno,Cno from Score order by Degree desc limit 0,1;</p>
<h4 id="查询分数大于70，小于90的Sno列"><a href="#查询分数大于70，小于90的Sno列" class="headerlink" title="查询分数大于70，小于90的Sno列"></a>查询分数大于70，小于90的Sno列</h4><p>此处需要与上面的区间比较：这里不是标准的区间，而是&gt;70 and &lt;90，因此需要写成</p>
<p>select Sno from Score where Degree &gt;70 and Degree &lt; 90;</p>
<h4 id="多表连接"><a href="#多表连接" class="headerlink" title="多表连接"></a>多表连接</h4><ul>
<li><p>内连接 inner join</p>
<p>select Sname,Cno,Degree from Student inner join Score on Student.Sno=Score.Sno;</p>
<p>select Sname,Cname,Degree from Student inner join Score on Student.Sno=Score.Sno inner join  Course on Score.Cno=Course.Cno;</p>
</li>
<li><p>外连接 left join</p>
<p>select Sname,Cno,Degree from Student left join Score on Student.Sno=Score.Sno;</p>
</li>
<li><p><a href="https://www.cnblogs.com/tinyj/p/10035143.html">外连接与内连接的区别在于</a></p>
</li>
<li><p>where</p>
<p>select Sname,Cno,Degree from Student,Score where Student.Sno=Score.Sno;</p>
<p>select Sname,Cname,Degree from student,course,score where student.Sno=score.Sno and course.Cno=score.Cno;</p>
</li>
</ul>
<h4 id="查询成绩比该课程平均成绩低的同学的成绩表"><a href="#查询成绩比该课程平均成绩低的同学的成绩表" class="headerlink" title="查询成绩比该课程平均成绩低的同学的成绩表"></a>查询成绩比该课程平均成绩低的同学的成绩表</h4><p>select * from score a  where degree &lt; ( select avg(degree) from score b where b.cno=a.cno);</p>
<h4 id="查询所有任课教师的Tname和Depart"><a href="#查询所有任课教师的Tname和Depart" class="headerlink" title="查询所有任课教师的Tname和Depart"></a>查询所有任课教师的Tname和Depart</h4><p>select Tname,Depart from Teacher where Tno in ( select Tno from Course);</p>
<h4 id="查询所有未讲课的教师的Tname和Depart"><a href="#查询所有未讲课的教师的Tname和Depart" class="headerlink" title="查询所有未讲课的教师的Tname和Depart"></a>查询所有未讲课的教师的Tname和Depart</h4><p>select Tname,Depart from Teacher where Tno not in ( select Tno from Course where Cno in ( select Cno from Score ));</p>
<h4 id="查询至少有2名男生的班号"><a href="#查询至少有2名男生的班号" class="headerlink" title="查询至少有2名男生的班号"></a>查询至少有2名男生的班号</h4><p>select Class from Student where Ssex = ‘男’ group by Class  having count(Ssex) &gt;1;</p>
<h4 id="查询Student表中每个学生的姓名和年龄"><a href="#查询Student表中每个学生的姓名和年龄" class="headerlink" title="查询Student表中每个学生的姓名和年龄"></a>查询Student表中每个学生的姓名和年龄</h4><p>select Sname,year(now())-year(Sbirthday) from Student;</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>表</title>
    <url>/2022/01/07/MySQL/%E8%A1%A8/</url>
    <content><![CDATA[<h4 id="索引组织表"><a href="#索引组织表" class="headerlink" title="索引组织表"></a>索引组织表</h4><ul>
<li><p>定义</p>
<p>表根据主键顺序组织存放</p>
</li>
<li><p>主键的选择与创建</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210729105959.png" alt="image-20210729105957948"></p>
</li>
</ul>
<h4 id="InnoDB逻辑存储结构"><a href="#InnoDB逻辑存储结构" class="headerlink" title="InnoDB逻辑存储结构"></a>InnoDB逻辑存储结构</h4><ul>
<li><p>表空间</p>
<ul>
<li><p>共享表空间</p>
<p>回滚信息、插入缓冲索引页、系统事务信息、二次写缓存等</p>
</li>
<li><p>单独表空间 （如果不开启则所有的数据都会存放到共享表空间中，默认是开启的）</p>
<p>对应的参数为innodb_file_per_table</p>
<p>数据、索引和插入缓冲Bitmap页</p>
</li>
</ul>
</li>
<li><p>组成</p>
<ul>
<li>段<ul>
<li>表空间是由段组成的</li>
<li>数据段为B+树叶子节点</li>
<li>索引段为B+树非叶子节点</li>
<li>段由区组成</li>
</ul>
</li>
<li>区<ul>
<li>区是由连续页组成的空间，区的大小为1M</li>
<li>为了保证连续性，InnoDB一次从磁盘中申请4~5个区</li>
<li>默认情况下一个区（1M）有64页（16K）</li>
</ul>
</li>
<li>页<ul>
<li>页的大小默认为16K，可以通过参数innodb_page_size修改</li>
</ul>
</li>
</ul>
</li>
<li><p>单独表空间申请空间流程</p>
<ul>
<li>创建的表默认为96K</li>
<li><font color=red>每个段</font>开始时使用32个页大小的碎片页存放数据，比如数据段使用了32个碎片页了，那么下一次申请就会直接申请一个区，索引段使用了32个碎片页了，那么下一次申请就会是一个区</li>
<li>碎片页使用完之后才是64个连续页的申请，也就是采用区的方式进行空间申请</li>
</ul>
<p>好处:节省空间</p>
</li>
<li><p>行</p>
<p>InnoDB每页最多存放16K/2 - 200行记录</p>
<p>/2是因为每个记录至少包含2个字节</p>
<p>200是为系统预留的</p>
</li>
</ul>
<h4 id="InnoDB行记录格式"><a href="#InnoDB行记录格式" class="headerlink" title="InnoDB行记录格式"></a>InnoDB行记录格式</h4><ul>
<li><p>查看表的格式</p>
<p><code>show table status like &#39;&#123;表名&#125;&#39;</code></p>
</li>
<li><p>行记录采用单链表的方式组成页</p>
</li>
</ul>
<h5 id="Compact"><a href="#Compact" class="headerlink" title="Compact"></a>Compact</h5><ul>
<li><p>格式</p>
<table>
<thead>
<tr>
<th>变长字段长度列表</th>
<th>NULL标志位</th>
<th>记录头信息</th>
<th>列1数据</th>
<th>列2数据</th>
<th>….</th>
</tr>
</thead>
</table>
<ul>
<li><p>变长字段长度列表 （<font color=red>注意是变长字段，像char这种定长字段是不在这里显示的</font>）</p>
<p>按照列的顺序逆序放置，长度为</p>
<ul>
<li>若列长度&lt;255 使用1字节表示</li>
<li>若长度&gt;255 使用2字节表示 （暗示varchar最长不能超过2^16-1）</li>
</ul>
</li>
<li><p>NULL标志位 （1字节）</p>
<p>该位表示该行数据中是否含有NULL值，有则使用1表示</p>
<p>例如该标志位的值是06，转为二进制表示为0000 0110，则代表第三列和第二列为NULL（为1）</p>
<p>NULL标志位：NULL标志位可以看作是NULL值列表，在表中的某些列中是可能存储NULL值的，如果把这些NULL值放到记录的真实数据中存储是很占用空间的，所以MySQL中Compact行格式会把这些列值为NULL的列统一进行管理并存储到NULL值列表中和变长字段长度列表一样它也是<strong>逆序存储</strong>的NULL值列表的存储不占用真实存储空间只占用NULL值列表，如果<strong>当前列为NULL值则用二进位1表示，当前列不为NULL值则用二进制位0表示，</strong>如果当前行中所有列都为NOT NULL则不会分配NULL列表的存储空间，在实际开发中创建表时都会设置为NOT NULL因为这样可以节省空间、提高整体的效率</p>
</li>
<li><p>记录头信息 （5字节）</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210730110653.png" alt="image-20210730110651436"></p>
</li>
<li><p><font color=red>对于varchar与char中的NULL值都不会占用空间</font></p>
</li>
<li><p>当char字段未能完全占用其长度空间时，会用0x20进行填充</p>
</li>
<li><p>每行存在两个隐藏列</p>
<ul>
<li>transactionID</li>
<li>Roll Pointer</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="Redundant"><a href="#Redundant" class="headerlink" title="Redundant"></a>Redundant</h5><ul>
<li><p>格式</p>
<table>
<thead>
<tr>
<th>字段长度偏移列表</th>
<th>记录头信息</th>
<th>列1数据</th>
<th>列2数据</th>
<th>….</th>
</tr>
</thead>
</table>
</li>
<li><p>字段长度偏移列表</p>
<p>按照列的顺序逆序放置的，其中有三个隐藏列</p>
</li>
<li><p>记录头信息 （48位）</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210730112024.png" alt="image-20210730112019701"></p>
<ul>
<li><p>n_fields</p>
<p>表示当前列中的数量，一共有10位，也就代表一行最多有1023列</p>
</li>
<li><p><font color=red>对于varchar中的NULL值不会占用空间，对于char中的NULL值会占用空间</font></p>
</li>
<li><p>每行存在三个隐藏列</p>
</li>
</ul>
</li>
</ul>
<h4 id="行溢出数据"><a href="#行溢出数据" class="headerlink" title="行溢出数据"></a>行溢出数据</h4><ul>
<li><p>定义</p>
<p>InnoDB存储引擎会将一些记录中的数据存储在真正的页面之外</p>
<p>这其中包括了BLOB、LOB甚至varchar也有可能</p>
</li>
<li><p>varchar的最长存储长度为65535（单位为字节），但是实际建表的时候最多只能达到65532，因为还有一些别的开销</p>
<p>除此之外65535指的是所有列中varchar类型的长度总和</p>
</li>
<li><p>如果一个页面无法存下两条行记录，那么InnoDB引擎会自动将行数据存放到溢出页中，经过测试varchar类型存放到溢出页的阈值为0898，也就是当长度为8098的时候，一个页可以存下两条行记录，但是一旦超过该数值，则会存放到BLOB页上</p>
</li>
<li><p>不同行记录格式对于行溢出数据的影响</p>
<ul>
<li><p>redundant或compact</p>
<p><strong>如果blob列值长度</strong> <strong>&lt;= 768 bytes，不会发生行溢出(page overflow)，内容都在数据页(B-tree Node)；如果列值长度** **&gt; 768字节，那么前768字节依然在数据页，而剩余的则放在溢出页(off-page)，如下图：</strong></p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210803142442.png" alt="3629077771-5c244c8393a92_articlex.png"></p>
</li>
<li><p>compressed或dynamic</p>
<p><strong>对blob采用完全行溢出，即聚集索引记录（数据页）只保留20字节的指针，指向真实存放它的溢出段地址：</strong></p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210803142542.png" alt="3507325740-5c244c83a06bf_articlex.png"></p>
<p>其中compressed行记录格式可以将存储在其中的行数据以zlib算法进行压缩</p>
</li>
</ul>
</li>
<li><p><a href="https://www.cnblogs.com/DataArt/p/10223567.html">参考</a></p>
</li>
</ul>
<h4 id="char的行结构存储"><a href="#char的行结构存储" class="headerlink" title="char的行结构存储"></a>char的行结构存储</h4><ul>
<li>对于多字节编码（比如GBK、UTF-8）的char数据类型的存储，InnoDB在内部会将其视为变长字符类型，但是对于未能占满长度的字符还是填充0x20</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>InnoDB技术探究</tag>
      </tags>
  </entry>
  <entry>
    <title>导入Mybatis-plus依赖</title>
    <url>/2022/01/07/MybatisPlus/%E5%AF%BC%E5%85%A5Mybatis-plus%E4%BE%9D%E8%B5%96/</url>
    <content><![CDATA[<h4 id="导入Mybatis-plus依赖"><a href="#导入Mybatis-plus依赖" class="headerlink" title="导入Mybatis-plus依赖"></a>导入Mybatis-plus依赖</h4><p>导入依赖的时候不要再重新导入mybatis的依赖，因为两者之间可能存在冲突</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        mybatis-plus驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Mybatis-plus</category>
      </categories>
      <tags>
        <tag>Mybatis-plus</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-router</title>
    <url>/2022/01/07/Vue/Vue-router/</url>
    <content><![CDATA[<ol>
<li><p>获取vue-router包</p>
<p>npm install vue-router –save-dev</p>
</li>
<li><p>编写路由配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Content <span class="keyword">from</span> <span class="string">&quot;../src/components/Content&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Main <span class="keyword">from</span> <span class="string">&quot;../src/components/Main&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//安装路由</span></span><br><span class="line">Vue.use(VueRouter);<span class="comment">//显式声明使用vue-router，必须声明</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置导出路由</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  <span class="attr">routes</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//路由路径</span></span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/Content&#x27;</span>,</span><br><span class="line">      <span class="comment">//命名(可以不加)</span></span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Content&#x27;</span>,</span><br><span class="line">      <span class="comment">//跳转的组件</span></span><br><span class="line">      <span class="attr">component</span>: Content</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//路由路径</span></span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/main&#x27;</span>,</span><br><span class="line">      <span class="comment">//命名(可以不加)</span></span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;main&#x27;</span>,</span><br><span class="line">      <span class="comment">//跳转的组件</span></span><br><span class="line">      <span class="attr">component</span>: Main</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>编写component</p>
<p>Content.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;内容页&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Content&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>Main.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;Main&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Main&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>在App.vue中配置路由</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h1&gt;HelloWorld&lt;/h1&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;&lt;!--页面中放置路由跳转的组件的地方--&gt;</span><br><span class="line">    &lt;router-link to=&quot;/Content&quot;&gt;内容页&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/main&quot;&gt;首页&lt;/router-link&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: &#x27;Avenir&#x27;, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>在main.js中配置路由</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;../router&#x27;</span><span class="comment">//自动扫描内部路由的配置</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="comment">//配置路由</span></span><br><span class="line">  router,</span><br><span class="line">  <span class="attr">components</span>: &#123; App &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;App/&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>完成</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200822214116.png" alt="image-20200822213950982" style="zoom:50%;" /></li>
<li><p>传递参数 （此处以参数为id进行考虑）</p>
<ul>
<li><p>方式一：不开启props：true</p>
<ol>
<li>对路由进行配置</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">routes:[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//路由路径</span></span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/Content/:id&#x27;</span>,</span><br><span class="line">    <span class="comment">//命名(可以不加)</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Content&#x27;</span>,</span><br><span class="line">    <span class="comment">//跳转的组件</span></span><br><span class="line">    <span class="attr">component</span>: Content,</span><br><span class="line">    <span class="comment">//props: true//开启接受参数</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>视图中对route-link进行绑定参数，记住是绑定</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">v-bind:to</span>=<span class="string">&quot;&#123;name:&#x27;Content&#x27;,params:&#123;id:1&#125;&#125;&quot;</span>&gt;</span>内容页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在对应的组件中进行显示  （注意组件中的template要想显示内容一定要有根结点，否则不能生效，即要有<code>&lt;div&gt;&lt;/div&gt;</code>）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;$route.params.id&#125;&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>方拾二：开始props：true</p>
<p>​    1.对路由进行配置，要对props进行开启</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">//路由路径</span></span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/Content/:id&#x27;</span>,</span><br><span class="line">  <span class="comment">//命名(可以不加)</span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Content&#x27;</span>,</span><br><span class="line">  <span class="comment">//跳转的组件</span></span><br><span class="line">  <span class="attr">component</span>: Content,</span><br><span class="line">  <span class="attr">props</span>: <span class="literal">true</span><span class="comment">//开启接受参数</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>在相应的组件中进行配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Content&quot;,</span><br><span class="line">  props: [&#x27;id&#x27;]//接受参数</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;id&#125;&#125;//直接在template中调用参数</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
</li>
<li><p>创建404页面</p>
<p>创建一个404组件，然后再route中进行注册即可，需要写到最后，因为地址是从上往下进行寻找路由</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: NotFound</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>创建第一个Vue程序</title>
    <url>/2022/01/07/Vue/%E5%88%9B%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AAVue%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<ol>
<li>下载node.js</li>
</ol>
<ol start="2">
<li><p>安装淘宝镜像源（需要管理员权限）否则下面下载很卡</p>
<p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p>
</li>
<li><p>安装vue脚手架</p>
<p><code>cnpm install vue-cli -g</code></p>
</li>
<li><p>安装webpack</p>
<p><code>cnpm install webpack -g</code></p>
</li>
<li><p>创建一个空的文件夹并cd到该文件夹下</p>
<p><code>vue init webpack &#123;projectName&#125;</code></p>
<p>弹出的选项根据自己的需要进行安装</p>
</li>
<li><p>安装依赖的模块</p>
<p><code>cnpm install</code></p>
</li>
<li><p>运行项目</p>
<p><code>cnpm run dev</code></p>
</li>
<li><p>成功</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200822171613.png" alt="image-20200822171121672" style="zoom:50%;" /></li>
</ol>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vo_pojo_dto</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/vo_pojo_dto/</url>
    <content><![CDATA[<ul>
<li><p>vo</p>
<p>前端发送给后端的参数</p>
</li>
<li><p>后端从Service发生给controller的数据为dto</p>
</li>
<li><p>后端Service与dao层交换的是pojo</p>
</li>
</ul>
]]></content>
      <categories>
        <category>后端知识</category>
      </categories>
      <tags>
        <tag>后端知识</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue基本语法</title>
    <url>/2022/01/07/Vue/Vue%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h4 id="Vue的核心优势"><a href="#Vue的核心优势" class="headerlink" title="Vue的核心优势"></a>Vue的核心优势</h4><p>​    可以动态的监听数据的变化，不需要刷新页面即可对数据进行局部刷新</p>
<p>​    数据双向绑定</p>
<p>​    组件（Component）</p>
<h4 id="引入Vue的cdn才能够使用Vue的语法"><a href="#引入Vue的cdn才能够使用Vue的语法" class="headerlink" title="引入Vue的cdn才能够使用Vue的语法"></a>引入Vue的cdn才能够使用Vue的语法</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcss.com/element-ui/2.6.1/theme-chalk/index.css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/vue/2.5.2/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/vue-router/3.0.1/vue-router.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/element-ui/2.4.0/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="Vue基本语法"><a href="#Vue基本语法" class="headerlink" title="Vue基本语法"></a>Vue基本语法</h4><ul>
<li><p>Hello,Vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">message</span>: <span class="string">&quot;HelloWorld&quot;</span>  <span class="comment">//主体</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>两种方式对数据进行绑定：</p>
<ol>
<li></li>
<li><p>v-bind</p>
<p>例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;message&quot;</span>&gt;</span>  <span class="comment">&lt;!---span是html的属性--&gt;</span></span><br><span class="line">   鼠标悬浮在此处查看绑定信息</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>&lt;span title=&quot;我这个属性只要鼠标停留在上面就会显示出来&quot;&gt;文字文字文字&lt;/span&gt;</code></p>
</li>
</ol>
</li>
<li><p>If else </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;message&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>false<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;type===&#x27;A&#x27;&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type===&#x27;B&#x27;&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>C<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">type</span>: <span class="string">&#x27;A&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">message</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>for 循环</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in items&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;item.message&#125;&#125;--&#123;&#123;index&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">items</span>: [</span></span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">message</span>: <span class="string">&#x27;A&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">message</span>: <span class="string">&#x27;B&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">message</span>: <span class="string">&#x27;C&#x27;</span>&#125;</span></span><br><span class="line"><span class="javascript">                ]</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>绑定事件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;sayhi&quot;</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">message</span>: <span class="string">&quot;HelloWorld&quot;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">sayhi</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="built_in">this</span>.message)<span class="comment">//this指当前对象</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>双向绑定</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200821210052.png" alt="image-20200821210037181" style="zoom:50%;" />

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--       &lt;input type=&quot;text&quot; v-model=&quot;message&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;span&gt;&#123;&#123;message&#125;&#125;&lt;/span&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            如果v-model表达式的初始值未能匹配任何选项，select元素将被渲染为未选择状态，在ios中这会使得用户无法选择第一个选项，因此需要添加一个空的禁用选项--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">disabled</span>&gt;</span>--请选择--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>A<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>B<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>C<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">            &#123;&#123;message&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">message</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">sayhi</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="built_in">this</span>.message)<span class="comment">//this指当前对象</span></span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>Vue组件 类似于模板</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cooper</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">v-bind:qin</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cooper</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 定义组件</span></span></span><br><span class="line"><span class="javascript">   Vue.component(<span class="string">&quot;Cooper&quot;</span>,&#123;</span></span><br><span class="line"><span class="javascript">       <span class="attr">props</span>: [<span class="string">&#x27;qin&#x27;</span>], <span class="comment">//此处必须要添加props，因为这是一个桥梁传递参数</span></span></span><br><span class="line"><span class="javascript">       <span class="attr">template</span>: <span class="string">&#x27;&lt;li&gt;&#123;&#123;qin&#125;&#125;&lt;/li&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">   &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">       <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">       <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">           <span class="attr">items</span>:[<span class="string">&quot;Java&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;C#&quot;</span>,<span class="string">&quot;Python&quot;</span>]</span></span><br><span class="line"><span class="javascript">       &#125;</span></span><br><span class="line"><span class="javascript">   &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>axios通信</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;info.name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;info.age&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;info.address.city&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;info.url&quot;</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">info</span>:&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">name</span>:<span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">age</span>:<span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">url</span>:<span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">address</span>: &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">street</span>:<span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">city</span>:<span class="literal">null</span></span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            axios.get(<span class="string">&quot;data.json&quot;</span>).then(<span class="function"><span class="params">response</span>=&gt;</span>(<span class="built_in">this</span>.info=response.data));</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;cooper&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;age&quot;</span>: <span class="string">&quot;18&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;www.baidu.com&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;address&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;street&quot;</span>: <span class="string">&quot;清华街道&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;city&quot;</span>: <span class="string">&quot;江城&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>计算属性</p>
<p>就是将一些不经常变的结果放入到缓存中，节省系统的开销</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200822142251.png" alt="image-20200822142243421" style="zoom:50%;" />



<p> 可以看到vm.function1()不断变化，但是vm.function2只要页面不刷新就不会变化，也就是存放到了内存中。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;function1()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;function2&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">message</span>: <span class="string">&quot;HelloWorld&quot;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">function1</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">Date</span>.now();</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">function2</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">Date</span>.now();</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>slot</p>
<p>将模板插入到指定的地方</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">todo</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo-title</span> <span class="attr">slot</span>=<span class="string">&quot;todo-title&quot;</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo-items</span> <span class="attr">slot</span>=<span class="string">&quot;todo-items&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">v-bind:item</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-items</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">todo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    Vue.component(&quot;todo&quot;,&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span>\</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;todo-title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    <span class="tag">&lt;<span class="name">ul</span>&gt;</span>\</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;todo-items&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>\</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;);</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    Vue.component(&quot;todo-title&quot;,&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        props: [&#x27;title&#x27;],</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">title</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;);</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    Vue.component(&quot;todo-items&quot;,&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        props: [&#x27;item&#x27;],</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        template: &#x27;<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span>&#x27;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;);</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    var vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        el: &quot;#app&quot;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        data: &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            title: &quot;编程语言&quot;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            items: [&#x27;C&#x27;,&#x27;C++&#x27;,&#x27;C#&#x27;,&#x27;Java&#x27;,&#x27;Python&#x27;]</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;);</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>自定义事件</p>
<p>通过双向绑定实现组件中的方法来调用vue实例中的方法</p>
<p><font color=red>组件中的方法不能调用直接调用vue实例中的方法</font></p>
<p>组件内绑定事件需要使用this.$emit(‘事件名’，参数)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">todo</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo-title</span> <span class="attr">slot</span>=<span class="string">&quot;todo-title&quot;</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo-items</span> <span class="attr">slot</span>=<span class="string">&quot;todo-items&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in items&quot;</span> <span class="attr">v-bind:item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">v-bind:index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">v-on:remove</span>=<span class="string">&quot;removeSingle(index)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-items</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">todo</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;todo&quot;</span>,&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;\</span></span></span><br><span class="line"><span class="string"><span class="javascript">                    &lt;slot name=&quot;todo-title&quot;&gt;&lt;/slot&gt;\</span></span></span><br><span class="line"><span class="string"><span class="javascript">                    &lt;ul&gt;\</span></span></span><br><span class="line"><span class="string"><span class="javascript">                    &lt;slot name=&quot;todo-items&quot;&gt;&lt;/slot&gt;\</span></span></span><br><span class="line"><span class="string"><span class="javascript">                    &lt;/ul&gt;\</span></span></span><br><span class="line"><span class="string"><span class="javascript">            &lt;/div&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;todo-title&quot;</span>,&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">props</span>: [<span class="string">&#x27;title&#x27;</span>],</span></span><br><span class="line"><span class="javascript">        <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;&#123;&#123;title&#125;&#125;&lt;/div&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;todo-items&quot;</span>,&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">props</span>: [<span class="string">&#x27;item&#x27;</span>,<span class="string">&#x27;index&#x27;</span>],</span></span><br><span class="line"><span class="javascript">        <span class="attr">template</span>: <span class="string">&#x27;&lt;li&gt;&#123;&#123;item&#125;&#125; &lt;button @click=&quot;removeOne&quot;&gt;删除&lt;/button&gt;&lt;/li&gt;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">//只能绑定当前组件的方法，不能绑定vue实例中的方法</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">removeOne</span>: <span class="function"><span class="keyword">function</span> (<span class="params">index</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// alert(&quot;123&quot;);</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$emit(<span class="string">&#x27;remove&#x27;</span>,index);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">title</span>: <span class="string">&quot;编程语言&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">items</span>: [<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;C++&#x27;</span>,<span class="string">&#x27;C#&#x27;</span>,<span class="string">&#x27;Java&#x27;</span>,<span class="string">&#x27;Python&#x27;</span>]</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">removeSingle</span>: <span class="function"><span class="keyword">function</span> (<span class="params">index</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&quot;删除了&quot;</span>+<span class="built_in">this</span>.items[index])</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.items.splice(index,<span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2022/01/07/http/HTTP%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h3 id="HTTP方法类别"><a href="#HTTP方法类别" class="headerlink" title="HTTP方法类别"></a>HTTP方法类别</h3><ol>
<li>GET：获取资源，可以理解为读取或者下载数据；</li>
<li>HEAD：获取资源的元信息；</li>
<li>POST：向资源提交数据，相当于写入或上传数据；</li>
<li>PUT：类似 POST；</li>
<li>DELETE：删除资源；</li>
<li>CONNECT：建立特殊的连接隧道；</li>
<li>OPTIONS：列出可对资源实行的方法；</li>
<li>TRACE：追踪请求 - 响应的传输路径。</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/01/07/http/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E6%8C%89%E4%B8%8B%E5%9B%9E%E8%BD%A6%E9%94%AE%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<ol>
<li><p>浏览器判断是不是ip地址，不是就进行域名解析，依次通过浏览器缓存，系统缓存，host文件，还是没找到的请求DNS服务器获取IP解析(解析失败的浏览器尝试换别的DNS服务器，最终失败的进入错误页面)，解析失败就会立刻返回，不会建立tcp连接</p>
</li>
<li><p>浏览器从地址栏的输入中获得服务器的 IP 地址和端口号；</p>
</li>
<li><p>建立tcp连接</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210903144654.png" alt="image-20210903144645677"></p>
</li>
<li><p>浏览器发送请求报文</p>
</li>
<li><p>服务器接收到报文后在TCP层进行确认，<font color=red>不过这个 TCP 包 HTTP 协议是看不见的。</font></p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210903145200.png" alt="image-20210903145158436"></p>
</li>
<li><p>服务器收到报文后处理请求，同样拼好报文再发给浏览器；</p>
</li>
<li><p>浏览器解析报文，渲染输出页面。</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>CAS认证</title>
    <url>/2022/01/07/jumpServer/CAS%E8%AE%A4%E8%AF%81/</url>
    <content><![CDATA[<ol>
<li><p>如果是自签的证书，域名一定要配置到hosts文件中去，并且需要保证网络通畅</p>
<p>我这里因为是宿主机的ip作为了域名，因此容器和宿主机之间的网络一定是通畅的</p>
<p>先要配置SECRET_KEY和BOOTSTRAP_TOKEN</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if [ &quot;$SECRET_KEY&quot; = &quot;&quot; ]; then SECRET_KEY=`cat /dev/urandom | tr -dc A-Za-z0-9 | head -c 50`; echo &quot;SECRET_KEY=$SECRET_KEY&quot; &gt;&gt; ~/.bashrc; echo $SECRET_KEY; else echo $SECRET_KEY; fi</span><br><span class="line"></span><br><span class="line">if [ &quot;$BOOTSTRAP_TOKEN&quot; = &quot;&quot; ]; then BOOTSTRAP_TOKEN=`cat /dev/urandom | tr -dc A-Za-z0-9 | head -c 16`; echo &quot;BOOTSTRAP_TOKEN=$BOOTSTRAP_TOKEN&quot; &gt;&gt; ~/.bashrc; echo $BOOTSTRAP_TOKEN; else echo $BOOTSTRAP_TOKEN; fi</span><br></pre></td></tr></table></figure>



<p>启动容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name jumpserver_pro -h jumpserver --restart=always      -p 81:80     -p 2223:2222     -e SECRET_KEY=$SECRET_KEY     -e BOOTSTRAP_TOKEN=$BOOTSTRAP_TOKEN     -e DB_HOST=172.23.27.120     -e DB_PORT=3306     -e DB_USER=jumpserver     -e DB_PASSWORD=&quot;abcd@1234&quot;     -e DB_NAME=jumpserver_produce     -e REDIS_HOST=172.23.27.119     -e REDIS_PORT=6379     -e REDIS_PASSWORD=&quot;123456&quot;  $(cat /etc/hosts|awk -F &#x27; &#x27; &#x27;&#123;if(NR&gt;2)&#123;print &quot;--add-host &quot;$2&quot;:&quot;$1&#125;&#125;&#x27;)  reg.un-net.com/jumpserver/jumpserver/jms_all:latest</span><br></pre></td></tr></table></figure>

<p>其中这句话</p>
<p><code>$(cat /etc/hosts|awk -F &#39; &#39; &#39;&#123;if(NR&gt;2)&#123;print &quot;--add-host &quot;$2&quot;:&quot;$1&#125;&#125;&#39;)</code>代表是将本机中的hosts文件从第三行开始写入到容器的hosts文件中（因为1-2行是本机 localhost）</p>
</li>
<li><p>编写config.yml文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">AUTH_CAS:</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">CAS_SERVER_URL:</span> <span class="string">&quot;https://testcas.com:8443/cas/&quot;</span>  <span class="comment">#CAS服务器地址</span></span><br><span class="line"><span class="attr">CAS_ROOT_PROXIED_AS:</span> <span class="string">&#x27;http://172.23.27.119:81&#x27;</span> <span class="comment">#堡垒机的地址</span></span><br><span class="line"><span class="attr">CAS_LOGOUT_COMPLETELY:</span> <span class="literal">False</span> <span class="comment">#退出一个应用是否完全退出CAS</span></span><br><span class="line"><span class="attr">CAS_VERSION:</span> <span class="number">3</span> <span class="comment">#CAS版本</span></span><br></pre></td></tr></table></figure>

<p>将该文件复制到容器内部</p>
<p><code>docker cp config.yml &#123;容器名&#125;:/opt/jumpserver/</code></p>
<p>再重新启动</p>
</li>
<li><p>查看日志</p>
<p><code>docker logs &#123;容器名&#125;</code>看到的只是启动日志</p>
<p>真正的日志需要到容器内部的<code>/opt/jumpserver/log/***</code>查看</p>
</li>
<li><p>jumpserver启动CAS认证之后可以登录就可以将原来堡垒机中的不存在的用户导入</p>
</li>
</ol>
]]></content>
      <categories>
        <category>jumpServer</category>
      </categories>
      <tags>
        <tag>jumpServer</tag>
        <tag>CAS</tag>
      </tags>
  </entry>
  <entry>
    <title>openldap</title>
    <url>/2022/01/07/ldap/openldap/</url>
    <content><![CDATA[<ol>
<li><p>安装</p>
<p><code>docker pull osixia/openldap </code></p>
</li>
<li><p>启动</p>
<p><code>docker run --name myopenldap --detach reg.un-net.com/openldap/openldap</code></p>
</li>
<li><p>名词解释</p>
<p><img src="/Users/cooper/Library/Application%20Support/typora-user-images/image-20210427165109186.png" alt="image-20210427165109186"></p>
</li>
<li><p>常用命令</p>
<p>格式</p>
<p><code>ldapmodify [ldap 服务器地址] [你的用户名] [password] [ldif 文件的地址]</code></p>
<p>测试文件 Barbara.ldif</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dn: cn=Barbara,dc=example,dc=org</span><br><span class="line">objectClass: inetOrgPerson</span><br><span class="line">cn: Barbara</span><br><span class="line">sn: Jensen</span><br><span class="line">title: Hello World!</span><br><span class="line">mail: 123456@qq.com</span><br><span class="line">uid: bjensen</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- 增</span><br><span class="line"></span><br><span class="line">  `ldapadd -x -H ldap://127.0.0.1:389 -D &quot;cn=admin,dc=example,dc=org&quot; -w admin -f barbara.ldif `</span><br><span class="line"></span><br><span class="line">- 查</span><br><span class="line"></span><br><span class="line">  `ldapsearch -x -H ldap://127.0.0.1:389 -b dc=example,dc=org  -D &quot;cn=admin,dc=example,dc=org&quot; -w admin`</span><br><span class="line"></span><br><span class="line">- 删</span><br><span class="line"></span><br><span class="line">  `ldapdelete -x -H ldap://127.0.0.1:389 -D &quot;cn=admin,dc=example,dc=org&quot; -w admin &quot;cn=Barbara,dc=example,dc=org&quot;`</span><br><span class="line"></span><br><span class="line">- 改</span><br><span class="line"></span><br><span class="line">  - 改</span><br><span class="line"></span><br><span class="line">    ```shell</span><br><span class="line">    dn: cn=Barbara,dc=example,dc=org</span><br><span class="line">    changetype: modify</span><br><span class="line">    replace: title</span><br><span class="line">    title: Modified</span><br></pre></td></tr></table></figure>

<ul>
<li><p>增</p>
<p>```shell<br>dn: cn=Barbara,dc=example,dc=org<br>changetype: add<br>replace: description<br>title: add</p>
</li>
<li><p>修改ldap用户</p>
<ul>
<li><p>新建用户</p>
<p><code>ldappasswd -x -H ldap://127.0.0.1:389 -D &quot;cn=admin,dc=example,dc=org&quot; -w admin &quot;cn=Barbara,dc=example,dc=org&quot;</code></p>
</li>
<li><p>修改用户密码</p>
<p><code>ldappasswd -x -H ldap://127.0.0.1:389 -D &quot;cn=Barbara,dc=example,dc=org&quot; -w UolFdGwM -s mima</code></p>
</li>
</ul>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>ldap</category>
      </categories>
      <tags>
        <tag>ldap</tag>
        <tag>openldap</tag>
      </tags>
  </entry>
  <entry>
    <title>phpldapadmin</title>
    <url>/2022/01/07/ldap/phpldapadmin/</url>
    <content><![CDATA[<ol>
<li><p>启动</p>
<p><code>docker run -p 6443:443 --env PHPLDAPADMIN_LDAP_HOSTS=172.23.27.119  --name phpldapadmin --detach reg.un-net.com/openldap/phpldapadmin</code></p>
<p><code>PHPLDAPADMIN_LDAP_HOSTS</code>是ldap的地址，默认是要使用https访问的</p>
</li>
</ol>
]]></content>
      <categories>
        <category>ldap</category>
      </categories>
      <tags>
        <tag>ldap</tag>
        <tag>openldap</tag>
      </tags>
  </entry>
  <entry>
    <title>AOF持久化</title>
    <url>/2022/01/07/redis/AOF%E6%8C%81%E4%B9%85%E5%8C%96/</url>
    <content><![CDATA[<h2 id="非模式"><a href="#非模式" class="headerlink" title="非模式"></a>非模式</h2><h2 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h2><p>AOF是通过保存Redis服务器所执行的写命令来记录数据库状态的，被写入AOF文件的所有命令都是以Redis的命令请求协议格式保存的</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="命令追加"><a href="#命令追加" class="headerlink" title="命令追加"></a>命令追加</h3><p>当AOF持久化功能处于打开状态时，服务器在执行完一个写命令之后会以协议格式将被执行的写命令追加到服务器状态的aof_buf缓冲区的末尾</p>
<h3 id="AOF文件的写入与同步"><a href="#AOF文件的写入与同步" class="headerlink" title="AOF文件的写入与同步"></a>AOF文件的写入与同步</h3><p>Redis服务器进程中存在一个事件循环，负责接收客户端的命令请求，服务器每次结束一个事件循环之前都会调用flushAppedOnlyFile函数，考虑是否需要将aof_buf缓冲区中的内容写入和保存到AOF文件里面。</p>
<p>保存的条件由服务器的appendfsync选项的值来确定</p>
<ul>
<li><p>always</p>
<p>将aof_buf缓冲区中的所有内容写入并同步到AOF文件中</p>
</li>
<li><p>everysec （Redis默认选项）</p>
<p>如果距离上一次AOF写入的事件距离现在超过1s，那么再次对AOF文件进行同步</p>
</li>
<li><p>只负责将aof_buf缓冲区中的内容写入到AOF文件中，但并不会对AOF文件进行同步，何时同步将有操作系统决定</p>
</li>
</ul>
<h3 id="AOF文件的载入与数据还原"><a href="#AOF文件的载入与数据还原" class="headerlink" title="AOF文件的载入与数据还原"></a>AOF文件的载入与数据还原</h3><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol>
<li>创建一个不带网络连接的伪客户端</li>
<li>从AOF文件中分析并读取一条写命令</li>
<li>使用伪客户端执行被读出的写命令</li>
<li>一直执行步骤2和步骤3，直到AOF文件中的所有写命令都被处理完毕</li>
</ol>
<h3 id="AOF重写"><a href="#AOF重写" class="headerlink" title="AOF重写"></a>AOF重写</h3><p>原理：将原来对一个键值的多个指令变成一个指令</p>
<p>当AOF不断写了之后会导致内部的AOF文件不断扩大，从而导致整个文件体积太大，因此需要对AOF进行重写。</p>
<p><font color=red>AOF重写不是读取AOF文件，而是直接读取Redis中的内容，这样就可以读取最终状态</font></p>
<p>AOF重写时，当某一个键中的记录太多时会分成多个指令记录来写，比如说某一个键里面有128个值（默认最大是64个），那么会分成两次来进行记录</p>
<h3 id="AOF后台重写"><a href="#AOF后台重写" class="headerlink" title="AOF后台重写"></a>AOF后台重写</h3><ul>
<li><p>出现问题</p>
<p>当子进程进行文件重写时，数据库中只有k1一个键，但是当子进程完成AOF文件重写之后，服务器进程的数据库中已经新设置了k2,k3,k4三个键，因此重写后的AOF文件和服务器当前的数据库状态并不一致，新的AOF文件中只有k1，但是数据库实际上却有了k1,k2,k3,k4这四个键</p>
<p><strong>此处采用子进程是为方便了父子进程共享内存中的数据，避免了加锁和内存的消耗</strong></p>
</li>
<li><p>解决方法</p>
<p>为了解决数据不一致的问题，会先将AOF的内容写入到<strong>AOF重写缓冲区</strong></p>
<p><font color=red>这里的AOF缓冲区是为普通的AOF文件准备的，而AOF重写缓冲区是为了AOF重写准备的，因为AOF重写只有在一定的条件下才会触发，因此不需要担心AOF缓冲区没有用</font></p>
<p>步骤</p>
<ol>
<li>执行客户端发来的命令</li>
<li>将执行后的写命令追加到AOF缓冲区</li>
<li>将执行后的写命令追加到AOF重写缓冲区</li>
</ol>
</li>
<li><p>当子进程完成重写工作之后，它会发送信号给父进程，父进程会调用一个信号处理函数，并执行以下工作</p>
<ol>
<li>将AOF重写缓冲区的所有内容写入到新的AOF文件中</li>
<li>对新的AOF进行改名，原子的覆盖现有的AOF文件，完成AOF文件的替换</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>RBD持久化</title>
    <url>/2022/01/07/redis/RDB%E6%8C%81%E4%B9%85%E5%8C%96/</url>
    <content><![CDATA[<h2 id="非模式"><a href="#非模式" class="headerlink" title="非模式"></a>非模式</h2><h2 id="RDB文件的创建与载入"><a href="#RDB文件的创建与载入" class="headerlink" title="RDB文件的创建与载入"></a>RDB文件的创建与载入</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><h4 id="种类"><a href="#种类" class="headerlink" title="种类"></a>种类</h4><h5 id="SAVE"><a href="#SAVE" class="headerlink" title="SAVE"></a>SAVE</h5><ul>
<li><p>指令 (强制save)</p>
<p><code>save</code></p>
</li>
<li><p>该种方式会直接阻塞服务器进程，直到RDB文件创建完毕为止</p>
</li>
<li><p>期间任何命令无法得到响应</p>
</li>
</ul>
<h5 id="BGSAVE"><a href="#BGSAVE" class="headerlink" title="BGSAVE"></a>BGSAVE</h5><ul>
<li><p>指令 </p>
<p><code>bgsave</code></p>
</li>
<li><p>该种方法会派生出一个子进程负责创建RDB文件，服务器进程继续处理命令请求</p>
</li>
</ul>
<h3 id="自动间隔性保存"><a href="#自动间隔性保存" class="headerlink" title="自动间隔性保存"></a>自动间隔性保存</h3><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>用户可以通过save选项设置多个保存条件，一旦其中某一个条件满足则会执行bgsave命令</p>
<p>比如</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">save 900 1 #900s内对数据库至少有一次修改</span><br><span class="line">save 300 10 #300s内对数据库至少有10次修改</span><br><span class="line">save 60 10000 #60s内对数据库至少有10000次修改</span><br></pre></td></tr></table></figure>



<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><ul>
<li><p>在redisServer结构中有属性</p>
<ul>
<li><p>saveparams数组 </p>
<p>该数组保存了save选项设置的保存条件</p>
<ul>
<li>seconds 秒数</li>
<li>changes 修改次数</li>
</ul>
</li>
<li><p>dirty 修改计数器</p>
<p>记录距离上次成功执行save命令或者bgsave命令之后服务器对数据库状态进行了多少次修改</p>
</li>
<li><p>lastsave 上一次执行保存的时间</p>
</li>
</ul>
</li>
<li><p>检查保存条件是否满足</p>
<p>redis服务器周期性操作函数serverCron默认每个100ms就会执行一次，其中有一项工作就是检查save选项所设置的保存条件是否已经满足，如果满足则执行bgsave</p>
</li>
</ul>
<h3 id="载入"><a href="#载入" class="headerlink" title="载入"></a>载入</h3><p>与AOF比较而言</p>
<ul>
<li><p>AOF文件的更新频率比RDB文件高</p>
</li>
<li><p>如果服务器开启了AOF持久化功能，那么服务器会优先使用AOF文件还原数据库状态</p>
</li>
<li><p>只有在AOF持久化功能处于关闭状态时，服务器才会使用RDB文件来还原数据库状态</p>
</li>
</ul>
<h2 id="RDB文件结构"><a href="#RDB文件结构" class="headerlink" title="RDB文件结构"></a>RDB文件结构</h2><h3 id="完整结构"><a href="#完整结构" class="headerlink" title="完整结构"></a>完整结构</h3><table>
<thead>
<tr>
<th>REDIS</th>
<th>db_version</th>
<th>databases</th>
<th>EOF</th>
<th>check_sum</th>
</tr>
</thead>
</table>
<ul>
<li><p>REDIS (5字节)</p>
<p>开头标识符（就是redis这个字符串），表示载入的是RDB文件</p>
</li>
<li><p>db_version （4字节）</p>
<p>RDB文件版本号</p>
</li>
<li><p>databases</p>
<p>包含0个或任意多个数据库，以及各个数据库中的键值对数据</p>
</li>
<li><p>EOF （1字节）</p>
<p>表示RDB文件正文内容结束</p>
</li>
<li><p>check_sum （8字节）</p>
<p>校验和</p>
</li>
</ul>
<h3 id="databases"><a href="#databases" class="headerlink" title="databases"></a>databases</h3><table>
<thead>
<tr>
<th>REDIS</th>
<th>db_version</th>
<th>database 0</th>
<th>database 3</th>
<th>EOF</th>
<th>check_sum</th>
</tr>
</thead>
</table>
<p>该列表表示服务器的0号数据库和3号数据库非空</p>
<h4 id="每个非空数据库的结构"><a href="#每个非空数据库的结构" class="headerlink" title="每个非空数据库的结构"></a>每个非空数据库的结构</h4><table>
<thead>
<tr>
<th>SELECTDB</th>
<th>db_number</th>
<th>key_value_pairs</th>
</tr>
</thead>
</table>
<ul>
<li><p>SELECTDB (1字节)</p>
<p>表示读取数据库操作</p>
</li>
<li><p>db_number</p>
<p>数据库号码</p>
</li>
<li><p>key_value_pairs</p>
<p>保存数据库中的所有键值对数据</p>
</li>
</ul>
<h4 id="key-value-pairs结构"><a href="#key-value-pairs结构" class="headerlink" title="key_value_pairs结构"></a>key_value_pairs结构</h4><h5 id="不带过期时间的键值对"><a href="#不带过期时间的键值对" class="headerlink" title="不带过期时间的键值对"></a>不带过期时间的键值对</h5><table>
<thead>
<tr>
<th>TYPE</th>
<th>key</th>
<th>value</th>
</tr>
</thead>
</table>
<ul>
<li><p>type</p>
<p>代表一种对象类型或者底层编码</p>
</li>
<li><p>key</p>
<p>键</p>
</li>
<li><p>value</p>
<p>值</p>
</li>
</ul>
<h5 id="带过期时间的键值对"><a href="#带过期时间的键值对" class="headerlink" title="带过期时间的键值对"></a>带过期时间的键值对</h5><table>
<thead>
<tr>
<th>EXPIRETIME_MS</th>
<th>ms</th>
<th>TYPE</th>
<th>key</th>
<th>value</th>
</tr>
</thead>
</table>
<ul>
<li><p>EXPIRETIME_MS</p>
<p>告知读取程序接下来要读入的将是一个以ms为单位的过期时间</p>
</li>
<li><p>ms</p>
<p>unix时间戳，键值对的过期时间</p>
</li>
</ul>
<h4 id="Value编码"><a href="#Value编码" class="headerlink" title="Value编码"></a>Value编码</h4><h5 id="字符串对象-（REDIS-RDB-TYPE-STRING）"><a href="#字符串对象-（REDIS-RDB-TYPE-STRING）" class="headerlink" title="字符串对象 （REDIS_RDB_TYPE_STRING）"></a>字符串对象 （REDIS_RDB_TYPE_STRING）</h5><ul>
<li><p>REDIS_ENCODING_INT</p>
<table>
<thead>
<tr>
<th>ENCODING</th>
<th>integer</th>
</tr>
</thead>
</table>
</li>
<li><p>REDIS_ENCODING_RAW</p>
<ul>
<li><p>无压缩字符串（长度&lt;=20字节）</p>
<table>
<thead>
<tr>
<th>len</th>
<th>string</th>
</tr>
</thead>
</table>
</li>
<li><p>压缩字符串（长度&gt;20字节）</p>
<table>
<thead>
<tr>
<th>REDIS_RDB_ENC_LZF</th>
<th>compressed_len</th>
<th>origin_len</th>
<th>compressed_string</th>
</tr>
</thead>
</table>
<ul>
<li><p>REDIS_RDB_ENC_LZF</p>
<p>压缩算法</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="列表对象（REDIS-RDB-TYPE-LIST）"><a href="#列表对象（REDIS-RDB-TYPE-LIST）" class="headerlink" title="列表对象（REDIS_RDB_TYPE_LIST）"></a>列表对象（REDIS_RDB_TYPE_LIST）</h5><table>
<thead>
<tr>
<th>list_length</th>
<th>item1</th>
<th>item2</th>
<th>…</th>
<th>itemN</th>
</tr>
</thead>
</table>
<h5 id="集合对象-（REDIS-RDB-TYPE-SET）"><a href="#集合对象-（REDIS-RDB-TYPE-SET）" class="headerlink" title="集合对象 （REDIS_RDB_TYPE_SET）"></a>集合对象 （REDIS_RDB_TYPE_SET）</h5><table>
<thead>
<tr>
<th>set_size</th>
<th>elem1</th>
<th>elem2</th>
<th>…</th>
<th>elemN</th>
</tr>
</thead>
</table>
<h5 id="哈希表对象-（REDIS-RDB-TYPE-HASH）"><a href="#哈希表对象-（REDIS-RDB-TYPE-HASH）" class="headerlink" title="哈希表对象 （REDIS_RDB_TYPE_HASH）"></a>哈希表对象 （REDIS_RDB_TYPE_HASH）</h5><table>
<thead>
<tr>
<th>hash_size</th>
<th>key_value_pair 1</th>
<th>key_value_pair 2</th>
<th>…</th>
<th>key_value_pair N</th>
</tr>
</thead>
</table>
<p>每个键值对的结构</p>
<table>
<thead>
<tr>
<th>key1</th>
<th>value1</th>
<th>key2</th>
<th>value2</th>
<th>…</th>
</tr>
</thead>
</table>
<h5 id="有序集合对象-（REDIS-RDB-TYPE-ZSET）"><a href="#有序集合对象-（REDIS-RDB-TYPE-ZSET）" class="headerlink" title="有序集合对象 （REDIS_RDB_TYPE_ZSET）"></a>有序集合对象 （REDIS_RDB_TYPE_ZSET）</h5><table>
<thead>
<tr>
<th>sorted_set_size</th>
<th>element1</th>
<th>element2</th>
<th>…</th>
<th>elementN</th>
</tr>
</thead>
</table>
<p>element结构</p>
<table>
<thead>
<tr>
<th>member</th>
<th>score</th>
</tr>
</thead>
</table>
<h5 id="INSET编码集合-（REDIS-RDB-TYPE-INTSET）"><a href="#INSET编码集合-（REDIS-RDB-TYPE-INTSET）" class="headerlink" title="INSET编码集合 （REDIS_RDB_TYPE_INTSET）"></a>INSET编码集合 （REDIS_RDB_TYPE_INTSET）</h5><p>先将整数集合转换为字符串对象，然后将这个字符串对象保存到RDB文件中</p>
<h5 id="ZIPLIST编码的列表、哈希表或者有序集合-（REDIS-RDB-TYPE-（LIST-HASH-ZSET-ZIPLIST"><a href="#ZIPLIST编码的列表、哈希表或者有序集合-（REDIS-RDB-TYPE-（LIST-HASH-ZSET-ZIPLIST" class="headerlink" title="ZIPLIST编码的列表、哈希表或者有序集合 （REDIS_RDB_TYPE_（LIST|HASH|ZSET)__ZIPLIST)"></a>ZIPLIST编码的列表、哈希表或者有序集合 （REDIS_RDB_TYPE_（LIST|HASH|ZSET)__ZIPLIST)</h5><p>将压缩列表转换为一个字符串对象，然后保存到RDB文件中</p>
<h3 id="分析RDB文件"><a href="#分析RDB文件" class="headerlink" title="分析RDB文件"></a>分析RDB文件</h3><ul>
<li><p>以ASCII码打开</p>
<p><code>od -c xxx.rdb</code> </p>
</li>
<li><p>以16进制打开</p>
<p><code>od -x xxx.rbd</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis客户端</title>
    <url>/2022/01/07/redis/redis%E5%AE%A2%E6%88%B7%E7%AB%AF/</url>
    <content><![CDATA[<h2 id="非模式"><a href="#非模式" class="headerlink" title="非模式"></a>非模式</h2><h2 id="Redis客户端的在服务器端的表现结构"><a href="#Redis客户端的在服务器端的表现结构" class="headerlink" title="Redis客户端的在服务器端的表现结构"></a>Redis客户端的在服务器端的表现结构</h2><p>Redis服务器结构中有一个属性为clients，是一个链表，每当有一个新的客户端与服务器进行连接时，会将该客户端添加了链表的末尾</p>
<h2 id="客户端属性"><a href="#客户端属性" class="headerlink" title="客户端属性"></a>客户端属性</h2><h3 id="套接字描述符-fd"><a href="#套接字描述符-fd" class="headerlink" title="套接字描述符  fd"></a>套接字描述符  fd</h3><ul>
<li><p>-1</p>
<p>伪客户端的命令请求来源于AOF文件或者Lua脚本，而不是网络</p>
</li>
<li><p>大于-1的整数</p>
<p>普通客户端</p>
</li>
</ul>
<p>可以使用<code>client list</code>查看当前所有连接服务器的客户端的情况</p>
<h3 id="客户端名字-name"><a href="#客户端名字-name" class="headerlink" title="客户端名字  name"></a>客户端名字  name</h3><p>可以使用<code>client setname xxx</code>给当前客户端取一个名字</p>
<h3 id="标志-flag"><a href="#标志-flag" class="headerlink" title="标志 flag"></a>标志 flag</h3><h4 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h4><p>定义了客户端的角色（比如是master还是slave）以及当前客户端所处的状态</p>
<h3 id="输入缓冲区-querybuf"><a href="#输入缓冲区-querybuf" class="headerlink" title="输入缓冲区 querybuf"></a>输入缓冲区 querybuf</h3><ul>
<li><p>功能</p>
<p>用于保存客户端发送的请求命令</p>
</li>
<li><p>限制</p>
<p>该缓冲区会根据输入内容动态地缩小或者扩容，但它的最大大小不能超过1GB，一旦超过会关闭该客户端</p>
</li>
</ul>
<h3 id="命令与命令参数"><a href="#命令与命令参数" class="headerlink" title="命令与命令参数"></a>命令与命令参数</h3><h4 id="含义-1"><a href="#含义-1" class="headerlink" title="含义"></a>含义</h4><p>服务器将客户端发送的命令请求保存到客户端状态的querybuf属性之后，服务器将对命令请求的内容进行分析，并将得出的命令参数以及命令参数的个数分别保存到客户端状态的argv属性和argc属性</p>
<h3 id="argv"><a href="#argv" class="headerlink" title="argv"></a>argv</h3><p>一个数组，数组中每一项都是一个字符串其中argv[0]为要执行的命令</p>
<h3 id="argc"><a href="#argc" class="headerlink" title="argc"></a>argc</h3><p>记录argv数组的长度</p>
<h3 id="命令实现函数"><a href="#命令实现函数" class="headerlink" title="命令实现函数"></a>命令实现函数</h3><p>服务器根据argv[0]在命令表中查找对应的实现函数</p>
<h3 id="输出缓冲区"><a href="#输出缓冲区" class="headerlink" title="输出缓冲区"></a>输出缓冲区</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>执行命令所得的回复都会被保存在客户端状态的输出缓冲区中</p>
<h4 id="输出缓冲区的种类"><a href="#输出缓冲区的种类" class="headerlink" title="输出缓冲区的种类"></a>输出缓冲区的种类</h4><ul>
<li><p>固定大小的缓冲区（默认为16KB）      buf</p>
<p>存放长度较小的回复</p>
</li>
<li><p>可变大小的缓冲区    reply  </p>
<p>存放长度比较大的回复</p>
</li>
</ul>
<h4 id="输出缓冲区的限制"><a href="#输出缓冲区的限制" class="headerlink" title="输出缓冲区的限制"></a>输出缓冲区的限制</h4><ul>
<li><p>硬性限制</p>
<p>输出缓冲区的大小一旦超过硬性限制那么该客户端就会被关闭</p>
</li>
<li><p>软性限制  obuf_soft_limit_reached_time</p>
<p>输出缓冲区介于软性限制和硬性限制之间的话，服务器会一直监视客户端，如果客户端的输出缓冲区大小在规定时间内一直处于这种状态，那么会将客户端关闭，如果在规定时间内不再超出软性限制，那么客户端就不会被关闭，同时对应的固定时间计时器会归0.</p>
</li>
</ul>
<h3 id="身份验证-authenticated"><a href="#身份验证-authenticated" class="headerlink" title="身份验证 authenticated"></a>身份验证 authenticated</h3><p>在开启身份验证的情况下</p>
<ul>
<li><p>0</p>
<p>未通过</p>
</li>
<li><p>1</p>
<p>通过</p>
</li>
</ul>
<h3 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h3><ul>
<li><p>ctime</p>
<p>客户端创建时间</p>
</li>
<li><p>lastinteraction</p>
<p>最后一个客户端与服务器进行互动的时间</p>
</li>
<li><p>obuf_soft_limit_reached_time</p>
<p>软性限制时间</p>
</li>
</ul>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>哨兵</title>
    <url>/2022/01/07/redis/Sentinel/</url>
    <content><![CDATA[<h2 id="非模式"><a href="#非模式" class="headerlink" title="非模式"></a>非模式</h2><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>Sentinel是检测redis集群中主从节点状态的系统</p>
<p>它不附属于主从节点，而是一个独立的系统</p>
<p>sentinel本质上是一个运行在特殊模式下的Redis服务器</p>
<h2 id="初始化Sentinel"><a href="#初始化Sentinel" class="headerlink" title="初始化Sentinel"></a>初始化Sentinel</h2><ul>
<li><p>初始化Sentinel</p>
<p>初始化一个特殊的Redis服务器，但是该服务器并不使用数据库，也就是说在初始化的时候不会去载入RDB文件或者AOF文件</p>
</li>
<li><p>使用Sentinel专用代码</p>
<p>将一部分普通Redis服务器使用的代码替换成Sentinel专用代码</p>
<p>比如说</p>
<ul>
<li>port从6379改为了26379</li>
<li>服务器的命令表也作出了限制，比如redis中的set、del等命令无法使用</li>
</ul>
</li>
<li><p>初始化Sentinel状态</p>
</li>
<li><p>初始化Sentinel状态的master属性</p>
<p>Sentinel状态中有一个master字典记录了所有被Sentinel监视的主服务器的相关信息</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210912103000.png" alt="image-20210912102952035"></p>
</li>
<li><p>创建连向主服务器的网络连接</p>
<p>Sentinel成为主服务器的客户端，它可以向主服务器发送命令，并且从命令中获取相关信息</p>
<ul>
<li><p>命令连接</p>
<p>该连接用于向主服务器发送命令，并接受命令回复</p>
</li>
<li><p>订阅连接</p>
<p>订阅主服务器的_ sentinel _:hello频道</p>
<p>主要作为主要为了通过该频道发现其他的Sentinel</p>
</li>
</ul>
</li>
</ul>
<h2 id="获取主服务器信息"><a href="#获取主服务器信息" class="headerlink" title="获取主服务器信息"></a>获取主服务器信息</h2><p>Sentinel默认以10s发送一次命令连接想被监视的主服务器发送INFO命令并接受返回信息</p>
<p>与此同时也会获取到该主服务器的从服务器的信息</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210912103541.png" alt="image-20210912103539416"></p>
<h2 id="获取从服务器信息"><a href="#获取从服务器信息" class="headerlink" title="获取从服务器信息"></a>获取从服务器信息</h2><p>当Sentinel发现主服务器有新的从服务器出现时除了会为该从服务器创建相应的实例结构之外，还会创建连接到从服务器的命令连接和订阅连接</p>
<p>创建连接之后会每10s通过命令连接想从服务器发送INFO命令</p>
<h2 id="向主服务器和从服务器发送信息"><a href="#向主服务器和从服务器发送信息" class="headerlink" title="向主服务器和从服务器发送信息"></a>向主服务器和从服务器发送信息</h2><p>默认情况下，Sentinel每2s通过命令连接想所有被监视的主从服务器的_ sentinel _:hello频道发送一条消息</p>
<h2 id="接受主服务器和从服务器的频道信息"><a href="#接受主服务器和从服务器的频道信息" class="headerlink" title="接受主服务器和从服务器的频道信息"></a>接受主服务器和从服务器的频道信息</h2><p>对于监视同一个服务器的多个Sentinel，一个Sentinel发送的消息会被其他Sentinel接收到，该消息会被其他Sentinel用于更新自身（自身也可以接收到自身发送的消息，但是不会对其做处理）</p>
<h3 id="更新Sentinel字典"><a href="#更新Sentinel字典" class="headerlink" title="更新Sentinel字典"></a>更新Sentinel字典</h3><p>Sentinel除了监视服务器之外，还会对其他监视同一个服务器的Sentinel进行监视，与此同时会在master结构中创建sentinel字典进行保存</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210912104647.png" alt="image-20210912104645401"></p>
<h3 id="创建连向其他Sentinel的命令连接"><a href="#创建连向其他Sentinel的命令连接" class="headerlink" title="创建连向其他Sentinel的命令连接"></a>创建连向其他Sentinel的命令连接</h3><p>当Sentinel通过频道信息发现了新的Sentinel会对其创建一个命令连接，新的Sentinel同样也会创建新的命令连接到发现它的Sentinel，这样会形成一个网络</p>
<h2 id="检测主观下线（单个Sentinel自己的监测）"><a href="#检测主观下线（单个Sentinel自己的监测）" class="headerlink" title="检测主观下线（单个Sentinel自己的监测）"></a>检测主观下线（单个Sentinel自己的监测）</h2><p>Sentinel会每1s向所有与它创建了命令连接的实例发送ping命令，并通过返回值来判断实例是否在线</p>
<p>有效回复</p>
<ul>
<li>+PONG</li>
<li>-LOADING</li>
<li>-MASTERDOWN</li>
</ul>
<p>除了有效恢复其他都是无效回复</p>
<p>如果在用户指定时间内（down-after-milliseconds）连续向Sentinel返回无效回复，那么Sentinel会修改该实例对应的结构</p>
<p>注意：</p>
<ul>
<li>down-after-milliseconds不仅作用于主服务器，也会作用于该服务器下的从服务器</li>
<li>多个Sentinel设置的下线时长可能不同</li>
</ul>
<h2 id="检测客观下线（多个Sentinel商议的结果）"><a href="#检测客观下线（多个Sentinel商议的结果）" class="headerlink" title="检测客观下线（多个Sentinel商议的结果）"></a>检测客观下线（多个Sentinel商议的结果）</h2><ol>
<li><p>当某一个Sentinel监测到某一个主服务器下线了，它会发送<code>Sentinel is-master-down-by-addr &lt;ip&gt; &lt;port&gt; &lt;current_epoch&gt; &lt;runid&gt;</code>给其他的Sentinel进行询问</p>
</li>
<li><p>接收到询问的Sentinel会检查是否该主服务器下线了，并进行回复</p>
<p>回复的组成内容如下</p>
<ul>
<li><p>down_state  目标服务器的下线状态</p>
</li>
<li><p>leader_runid </p>
<ul>
<li><p>*</p>
<p>仅仅检查主服务器的下线状态</p>
</li>
<li><p>目标Sentinel的局部领头Sentinel的运行ID</p>
<p>也就是该Sentinel选举的Sentinel的ID</p>
</li>
</ul>
</li>
<li><p>leader_epoch</p>
<p>当前Sentinel的局部领头Sentinel的配置纪元</p>
</li>
</ul>
</li>
<li><p>收到其他Sentinel发来的回复，1中的Sentinel会根据其他Sentinel同意的数量进行决策</p>
<ul>
<li>当数量&gt;配置指定的数量则会将1中主服务器的flags属性的SRI_O_DOWN标识打开</li>
</ul>
</li>
</ol>
<p>注意：不同Sentinel判断客观下线的条件可能不同</p>
<h2 id="选举领头Sentinel"><a href="#选举领头Sentinel" class="headerlink" title="选举领头Sentinel"></a>选举领头Sentinel</h2><p>当一个主服务器被判断为客观下线时，监视这个下线服务器的各个Sentinel会进行协商，选举出领头Sentinel，并由领头Sentinel对线下主服务器进行故障转移操作</p>
<p>选举规则</p>
<ul>
<li><p>所有在线的Sentinel都有被选为领头Sentinel的资格</p>
</li>
<li><p>每个发现主服务器下线的Sentinel都会要求其他Sentinel选举自己为领头Sentinel</p>
</li>
<li><p>如果一个Sentinel（源Sentinel）向另一个Sentinel（目标Sentinel）发送<code>Sentinel is-master-down-by-addr &lt;ip&gt; &lt;port&gt; &lt;current_epoch&gt; &lt;runid&gt;</code>，其中的runid如果不是*的话，表示前者要求后者将其设置为领头Sentinel。</p>
<p>因为发送这个命令的Sentinel都是发现主服务器挂机的Sentinel，因此其发送的runid只会是其自身</p>
</li>
<li><p>最先向目标Sentinel发送设置要求的源Sentinel都会成为目标Sentinel的局部领头Sentinel，之后目标Sentinel接受的所有设置要求都会被拒绝</p>
</li>
<li><p>目标Sentinel接收到<code>Sentinel is-master-down-by-addr &lt;ip&gt; &lt;port&gt; &lt;current_epoch&gt; &lt;runid&gt;</code>命令之后会回复一条目录，其中回复的leader_runid就是目标Sentinel的局部领头Sentinel的runid</p>
</li>
<li><p>如果某个Sentinel有超过半数以上的Sentinel都选他，则它会成为领头Sentinel</p>
</li>
<li><p>如果在给定时间内没有选出领头Sentinel，则会在一段时间后重新进行选举直到选出为止</p>
</li>
</ul>
<h2 id="故障转移"><a href="#故障转移" class="headerlink" title="故障转移"></a>故障转移</h2><p>选举出的领头Sentinel会对已下线的主服务器执行故障转移操作</p>
<ol>
<li>在已下线主服务器属下的所有从服务器中挑选出一个从服务器，并将其转为主服务器</li>
<li>让已下线的主服务器的所有从服务器改为复制新的主服务器</li>
<li>让已下线的主服务器设置为新主服务器的从服务器，当这个旧主服务器重新上线后会成为新主服务器的从服务器</li>
</ol>
<h3 id="选出新的主服务器"><a href="#选出新的主服务器" class="headerlink" title="选出新的主服务器"></a>选出新的主服务器</h3><p>选出规则</p>
<ul>
<li><p>删除所有处于下线或者断线状态的从服务器</p>
</li>
<li><p>删除列表中所有最近五秒内没有回复过领头Sentinel的INFO命令的从服务器</p>
</li>
<li><p>删除所有与已下线主服务连接断开超过down-after-milliseconds*10毫秒的从服务器。保留保存数据比较新的服务器</p>
</li>
<li><p>根据从服务器的优先级</p>
</li>
<li><p>根据从服务器的复制偏移量</p>
</li>
<li><p>根据RunId，选择runid最小的从服务器</p>
</li>
</ul>
<p>最后领头Sentinel向选中服务器发送SLAVOF no one 命令，通过Info命令确认选出的从服务器已经升级为主服务器</p>
<h3 id="修改从服务器的复制目标和将旧的主服务器变为从服务器"><a href="#修改从服务器的复制目标和将旧的主服务器变为从服务器" class="headerlink" title="修改从服务器的复制目标和将旧的主服务器变为从服务器"></a>修改从服务器的复制目标和将旧的主服务器变为从服务器</h3><p>领头Sentinel使用slave of命令实现</p>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis数据库</title>
    <url>/2022/01/07/redis/redis%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h2 id="非模式"><a href="#非模式" class="headerlink" title="非模式"></a>非模式</h2><h2 id="服务器中的数据库"><a href="#服务器中的数据库" class="headerlink" title="服务器中的数据库"></a>服务器中的数据库</h2><h3 id="redisServer"><a href="#redisServer" class="headerlink" title="redisServer"></a>redisServer</h3><h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><ul>
<li><p>db （redisDb *）</p>
<p>保存服务器中的所有数据库，是一个数组</p>
</li>
<li><p>dbnum (int)</p>
<p>服务器中的数据库数量（默认为16个）</p>
<ul>
<li><p>切换数据库</p>
<p><code>select &#123;id&#125;</code></p>
</li>
</ul>
</li>
</ul>
<h3 id="redisClient"><a href="#redisClient" class="headerlink" title="redisClient"></a>redisClient</h3><h4 id="结构-1"><a href="#结构-1" class="headerlink" title="结构"></a>结构</h4><ul>
<li><p>db （redisDb *）</p>
<p>记录当前客户端正在使用的数据库</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210902104349.png" alt="image-20210902104344167"></p>
</li>
</ul>
<p><font color=red>注意：当程序中需要切换数据库的时候，一定要记得显示的切换数据库</font></p>
<h3 id="redisDb"><a href="#redisDb" class="headerlink" title="redisDb"></a>redisDb</h3><h4 id="结构-2"><a href="#结构-2" class="headerlink" title="结构"></a>结构</h4><ul>
<li><p>dict （*dict）</p>
<p>数据库键空间，保存着数据库中的所有键值对</p>
</li>
<li><p>expires （*dict）</p>
<p>过期字典，保存着键和其对应的过期时间</p>
</li>
</ul>
<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><h4 id="设置键的过期时间"><a href="#设置键的过期时间" class="headerlink" title="设置键的过期时间"></a>设置键的过期时间</h4><ul>
<li><p>命令</p>
<ul>
<li><p>以s为单位</p>
<ul>
<li><p><code>expire &#123;key&#125; &#123;time&#125;</code> </p>
</li>
<li><p><code>expireat &#123;key&#125; &#123;timestamp&#125;</code> </p>
</li>
</ul>
</li>
<li><p>以ms为单位</p>
<ul>
<li><code>pexpire &#123;key&#125; &#123;time&#125;</code></li>
<li><code>pexpireat &#123;key&#125; &#123;timestamp&#125;</code></li>
</ul>
</li>
<li><p>set和expire同时执行，只针对字符串有效</p>
<ul>
<li><code>setex &#123;key&#125; &#123;time&#125; &#123;value&#125;</code></li>
</ul>
</li>
</ul>
<p> <strong>以上所有的命令都会转为pexpireat</strong></p>
</li>
</ul>
<h4 id="查看生存时间"><a href="#查看生存时间" class="headerlink" title="查看生存时间"></a>查看生存时间</h4><ul>
<li><p>以s为单位</p>
<p><code>ttl &#123;key&#125;</code></p>
</li>
<li><p>以ms为单位</p>
<p><code>pttl &#123;key&#125;</code></p>
</li>
</ul>
<h4 id="移除过期时间"><a href="#移除过期时间" class="headerlink" title="移除过期时间"></a>移除过期时间</h4><p>功能：在过期字典中查找给定的键并解除键和值（过期时间）在过期字典中的关联</p>
<p><font color=red>注意：此命令的键必须在键未过期之前使用</font></p>
<p>命令</p>
<p><code>persist &#123;key&#125;</code></p>
<h3 id="过期键的策略"><a href="#过期键的策略" class="headerlink" title="过期键的策略"></a>过期键的策略</h3><h4 id="定时策略"><a href="#定时策略" class="headerlink" title="定时策略"></a>定时策略</h4><p>在设置键的过期时间的同时，创建一个定时器，让定时器在键的过期时间来临时，立即执行对键的删除操作</p>
<h4 id="惰性删除"><a href="#惰性删除" class="headerlink" title="惰性删除"></a>惰性删除</h4><p>不管键的过期时间，过期之后只有被查询到了才会被删除</p>
<h4 id="定期删除"><a href="#定期删除" class="headerlink" title="定期删除"></a>定期删除</h4><p>每隔一段时间，对数据库进行一次检查删除里面的过期键。每次删除多少个过期键以及检查多少个数据库由算法决定</p>
<h4 id="redis的策略"><a href="#redis的策略" class="headerlink" title="redis的策略"></a>redis的策略</h4><p>配合使用惰性删除和定期删除策略</p>
<h3 id="AOF、RDB和复制功能对过期键的处理"><a href="#AOF、RDB和复制功能对过期键的处理" class="headerlink" title="AOF、RDB和复制功能对过期键的处理"></a>AOF、RDB和复制功能对过期键的处理</h3><h4 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h4><ul>
<li><p>生成RDB阶段</p>
<p>对于已过期的键不会被保存到新创建的RDB文件中</p>
</li>
<li><p>载入EDB文件阶段</p>
<ul>
<li><p>主服务器</p>
<p>对于过期的键会自动忽略</p>
</li>
<li><p>从服务器</p>
<p>过期和未过期键一视同仁</p>
<p>主从进行同步的时候会对过期键进行清空</p>
</li>
</ul>
</li>
</ul>
<h4 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h4><ul>
<li><p>写入阶段</p>
<p>当过期键过期时，会向AOF文件追加一条del命令</p>
</li>
<li><p>生成阶段</p>
<p>对于过期的键会自动忽略</p>
</li>
</ul>
<h4 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h4><p>当服务器运行在复制模式下，从服务器的过期键删除操作由主服务器控制</p>
<ul>
<li>当主服务器在删除一个过期键之后，会显式地向从服务器发生del命令</li>
<li>从服务器在执行客户端的读命令时及时碰到过期键也不会删除，而是像处理未过期的键一样来处理过期键</li>
<li>从服务器只有在接到主服务器的del命令才会删除过期键</li>
</ul>
<h3 id="数据库通知"><a href="#数据库通知" class="headerlink" title="数据库通知"></a>数据库通知</h3><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><ul>
<li><p>该功能只有在2.8版本及其之后才有</p>
</li>
<li><p>需要开启config set notify-keyspace-events KEA （KEA表示发送所有类型的通知）</p>
<p>具体参见</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>发送的通知</th>
</tr>
</thead>
<tbody><tr>
<td><code>K</code></td>
<td>键空间通知，所有通知以 <code>__keyspace@&lt;db&gt;__</code> 为前缀</td>
</tr>
<tr>
<td><code>E</code></td>
<td>键事件通知，所有通知以 <code>__keyevent@&lt;db&gt;__</code> 为前缀</td>
</tr>
<tr>
<td><code>g</code></td>
<td><code>DEL</code> 、 <code>EXPIRE</code> 、 <code>RENAME</code> 等类型无关的通用命令的通知</td>
</tr>
<tr>
<td><code>$</code></td>
<td>字符串命令的通知</td>
</tr>
<tr>
<td><code>l</code></td>
<td>列表命令的通知</td>
</tr>
<tr>
<td><code>s</code></td>
<td>集合命令的通知</td>
</tr>
<tr>
<td><code>h</code></td>
<td>哈希命令的通知</td>
</tr>
<tr>
<td><code>z</code></td>
<td>有序集合命令的通知</td>
</tr>
<tr>
<td><code>x</code></td>
<td>过期事件：每当有过期键被删除时发送</td>
</tr>
<tr>
<td><code>e</code></td>
<td>驱逐(evict)事件：每当有键因为 <code>maxmemory</code> 政策而被删除时发送</td>
</tr>
<tr>
<td><code>A</code></td>
<td>参数 <code>g$lshzxe</code> 的别名</td>
</tr>
</tbody></table>
<p>输入的参数中至少要有一个 <code>K</code> 或者 <code>E</code> ， 否则的话， 不管其余的参数是什么， 都不会有任何通知被分发。</p>
<p>举个例子， 如果只想订阅键空间中和列表相关的通知， 那么参数就应该设为 <code>Kl</code> ， 诸如此类。</p>
<p>将参数设为字符串 <code>&quot;AKE&quot;</code> 表示发送所有类型的通知。</p>
</li>
<li><p><font color=red>注意：以下所有操作对于get不生效</font></p>
</li>
</ul>
<h4 id="键空间通知"><a href="#键空间通知" class="headerlink" title="键空间通知"></a>键空间通知</h4><p>某个键执行了什么命令</p>
<ul>
<li><p>命令</p>
<ul>
<li><p>单个键</p>
<p><code>subscribe __keyspace@&#123;id&#125;__:&#123;keyname&#125;</code></p>
<p>id: 数据库的编号</p>
<p>keyname：键</p>
<p><code>subscribe __keyspace@0__:space</code></p>
<p>表示获取0号数据库中针对message键执行的所有命令</p>
</li>
<li><p>所有键</p>
<p><code>psubscribe __keyspace@&#123;id&#125;__:&#123;keyname pattern&#125;</code></p>
<p><code>psubscribe __keyspace@0__:space*</code></p>
<p>表示获取0号数据库中针对message开头的所有键执行的所有命令</p>
</li>
</ul>
</li>
</ul>
<h4 id="键事件通知"><a href="#键事件通知" class="headerlink" title="键事件通知"></a>键事件通知</h4><p>某个命令被哪个键执行了</p>
<ul>
<li><p>命令</p>
<ul>
<li><p>单个键</p>
<p><code>subscribe __keyevent@&#123;id&#125;__:&#123;operation&#125;</code></p>
<p>id: 数据库的编号</p>
<p>keyname：键</p>
<p><code>subscribe __keyevent@0__:del</code></p>
<p>表示获取0号数据库中所有执行del操作的键</p>
</li>
<li><p>所有键</p>
<p><code>psubscribe __keyevent@&#123;id&#125;__:&#123;operation pattern&#125;</code></p>
<p><code>psubscribe __keyevent@0__:*</code></p>
<p>表示获取0号数据库中所有执行所有操作（不包括get）的键</p>
</li>
</ul>
</li>
</ul>
<h4 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h4><ol>
<li>检查是否符合给定的通知类型，也就是准备中定义的类型</li>
<li>检查是否允许发送键空间通知</li>
<li>检查是否允许发生键事件通知</li>
</ol>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis数据结构</title>
    <url>/2022/01/07/redis/redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h2 id="非模式"><a href="#非模式" class="headerlink" title="非模式"></a>非模式</h2><h3 id="简单动态字符串（SDS）"><a href="#简单动态字符串（SDS）" class="headerlink" title="简单动态字符串（SDS）"></a>简单动态字符串（SDS）</h3><h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><ul>
<li>len （int） 记录当前已经使用字节的长度</li>
<li>free（int）记录当前buf数组中未使用字节的数量</li>
<li>buf[] (char) 字节数组，保存字符串（<font color=red>因为不仅仅保存的是字符串，有时候也会保存二进制数据，因此成为字节数组</font>）</li>
</ul>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul>
<li><p>可以在O(1)时间复杂度内统计字符串的长度</p>
</li>
<li><p>可以避免缓冲区的溢出，因为常见的C中的字符串函数比如strcat(char *dest,char *src)需要用户保证dest有足够的空间，否则会缓冲区溢出。但是SDS会先检查空间是否满足，如果不满足会根据一定的策略进行扩充空间</p>
<ul>
<li><p>对应分配策略</p>
<p>如果每次拼接字符串的操作都分配空间的话会比较耗时，因此这里采用了两种优化策略</p>
<ul>
<li><p>空间预分配</p>
<ul>
<li><p>修改之后SDS的长度&lt;1MB</p>
<p>分配2*len(修改之后的SDS)+1 （+1是为了保存’\0’）</p>
</li>
<li><p>修改之后SDS的长度&gt;=1MB</p>
<p>除了分配满足修改之后的SDS的空间，会额外分配一个1MB的未使用空间+1（+1是为了保存’\0’）</p>
</li>
</ul>
</li>
<li><p>惰性空间释放</p>
<p>当SDS需要缩短字符串时，不会收回当前SDS所占的空间中不需要的空间，而是使用free属性将这些空闲的空间记录下来，下次再使用</p>
</li>
</ul>
<p><font color=red>SDS有自己的API，比如sdscat,这些都是针对sds本身的API来说的</font></p>
</li>
</ul>
</li>
<li><p>二进制安全</p>
<p>在C语言中字符串只能存放文本数据，因为二进制数据会被分割（例如出现’\0’就会认为是一句话的结束），但是SDS会原封不动的保留所存放的字符串，不会对特殊字符进行任何限制、过滤。</p>
<p>因为SDS不是通过’\0’判断字符串是否结束，而是通过len属性来判断</p>
</li>
<li><p>兼容了C语言字符串的函数，常见的例如strcat，strcasecmp都可以使用</p>
<p>strcat(c_string,sds-&gt;buf)</p>
<p>strcasecmp(c_string,sds-&gt;buf)</p>
</li>
</ul>
<h4 id="编码类型"><a href="#编码类型" class="headerlink" title="编码类型"></a>编码类型</h4><h5 id="种类"><a href="#种类" class="headerlink" title="种类"></a>种类</h5><ul>
<li><p>int</p>
<p>如果字符串对象保存的是整数数值，并且这个整数数值可以使用long类型来表示，那么该字符串对象的编码为int</p>
<p><strong>double类型会保存为字符串类型</strong></p>
</li>
<li><p>embstr</p>
<p>如果字符串对象保存的是一个字符串值，并且这个字符串值的长度&lt;=39字节，那么这个字符串对象将使用embstr编码方式保存这个字符串值</p>
</li>
<li><p>raw</p>
<p>如果字符串对象保存的是一个字符串值，并且这个字符串值的长度&gt;39字节，那么这个字符串对象将使用raw编码方式保存这个字符串值</p>
</li>
</ul>
<h5 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h5><ul>
<li><p>embstr通过调用一次内存分配函数来创建redisObject结构和sdshdr结构，但是raw会调用两次内存分配函数</p>
</li>
<li><p>释放embstr的字符串对象只需要调用一次内存释放函数，raw需要两次</p>
</li>
<li><p>embstr的字符串对象都保存在一块连续的内存中，可以更好利用缓存带来的优势</p>
</li>
</ul>
<h5 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h5><ul>
<li>int类型如果被执行命令之后变为了字符串，那么会成为raw类型</li>
<li><font color=red>embstr类型只有只读属性，如果被修改了会变成raw编码类型</font></li>
</ul>
<hr>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="编码类型-1"><a href="#编码类型-1" class="headerlink" title="编码类型"></a>编码类型</h4><h5 id="种类-1"><a href="#种类-1" class="headerlink" title="种类"></a>种类</h5><ul>
<li><p>ziplist</p>
<p>压缩链表</p>
</li>
<li><p>linkedlist</p>
<p>双向链表</p>
</li>
</ul>
<h5 id="转换-1"><a href="#转换-1" class="headerlink" title="转换"></a>转换</h5><p>当以下2个条件都满足时</p>
<ul>
<li><p>列表保存到所有字符串元素长度&lt;64字节</p>
</li>
<li><p>列表对象保存的元素数量&lt;512个</p>
</li>
</ul>
<p>会使用ziplist编码</p>
<p>否则会使用linkedlist编码</p>
<h5 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h5><p>在元素较少时，ziplist可以更好的节约内存，并且是以连续块方式保存的压缩列表比起双端链表可以更快地载入到缓存中</p>
<h4 id="linkedlist"><a href="#linkedlist" class="headerlink" title="linkedlist"></a>linkedlist</h4><h5 id="结构-1"><a href="#结构-1" class="headerlink" title="结构"></a>结构</h5><ul>
<li>Node<ul>
<li>listNode * prve</li>
<li>listNode * next</li>
<li>void * value</li>
</ul>
</li>
<li>list<ul>
<li>listNode *head</li>
<li>listNode *tail</li>
<li>long len</li>
<li>dup （节点复制函数）</li>
<li>free （节点释放值函数）</li>
<li>match （节点值比较函数）</li>
</ul>
</li>
</ul>
<h5 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h5><ul>
<li>双端无环，可以在O(1)时间内找到头结点和尾结点</li>
<li>自带计数器，可以在O(1)时间内找到长度</li>
<li>多台，使用void *指针存放节点值，可以保存不同类型的值</li>
</ul>
<h4 id="ziplist（压缩列表）"><a href="#ziplist（压缩列表）" class="headerlink" title="ziplist（压缩列表）"></a>ziplist（压缩列表）</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><ul>
<li>当一个列表键只包含少量列表项，并且每个列表项要么就是小整数值，要么就是长度比较短的字符串，那么redis就会使用压缩列表来做列表键的底层实现</li>
<li>当一个哈希键只包含少量键值对，并且每个键值对的键和值要么就是小整数值，要么就是长度比较短的字符串，那么redis就会使用压缩列表来做哈希键的底层实现</li>
</ul>
<h5 id="压缩节点"><a href="#压缩节点" class="headerlink" title="压缩节点"></a>压缩节点</h5><h6 id="结构-2"><a href="#结构-2" class="headerlink" title="结构"></a>结构</h6><ul>
<li><p>previous_entry_length</p>
<p>记录压缩列表中前一个节点的长度</p>
<p>以字节为单位</p>
<ul>
<li>如果前一个节点的长度&lt;254则使用一个字节表示</li>
<li>如果前一个节点的长度&gt;=254则使用5个字节表示</li>
</ul>
<p><strong>好处：可以通过该属性达到从后向前遍历的目的</strong></p>
<p><font color=red>注意点：插入或者删除节点，有可能引起连锁更新，也就是这个属性的长度会随着操作而发生变化，但是整体影响不大</font></p>
</li>
<li><p>encoding</p>
<p>记录节点的content属性所保存的类型以及长度</p>
<ul>
<li>一字节、两字节或者五字节长，值的最高位为00，01或者10的是字节数组编码，表示content属性保存着字节数组，数组的长度为编码除去最高两位之后的其他记录</li>
<li>一个字节长，值的最高位以11开头的是整数编码，表示content属性保存的是整数值，整数的类型和长度为编码除去最高两位之后的其他记录</li>
</ul>
</li>
<li><p>content</p>
<p>保存节点的值</p>
</li>
</ul>
<h5 id="压缩列表"><a href="#压缩列表" class="headerlink" title="压缩列表"></a>压缩列表</h5><h6 id="结构-3"><a href="#结构-3" class="headerlink" title="结构"></a>结构</h6><ul>
<li><p>zlbytes （unit32_t）</p>
<p>记录压缩列表占用的内存字节数</p>
</li>
<li><p>zltail （unit32_t）</p>
<p>记录压缩列表表尾节点距离压缩列表的起始地址有多少字节，通过该偏移量可以无需遍历整个压缩列表就可以确定表尾节点的地址</p>
</li>
<li><p>zllen （unit16_t）</p>
<p>记录压缩列表包含的节点数量</p>
</li>
<li><p>entryX</p>
<p>压缩列表节点</p>
</li>
<li><p>zlend</p>
<p>特殊值0xFF，用于标记压缩列表的末端</p>
</li>
</ul>
<h4 id="QuickList"><a href="#QuickList" class="headerlink" title="QuickList"></a>QuickList</h4><h5 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h5><p>quicklist结构是在redis 3.2版本中新加的数据结构，用在<strong>列表的底层实现。</strong></p>
<h5 id="结构-4"><a href="#结构-4" class="headerlink" title="结构"></a>结构</h5><p>quicklist是由<strong>ziplist组成的双向链表</strong>，链表中的每一个节点都以压缩列表ziplist的结构保存着数据，而ziplist有多个entry节点，保存着数据。相当与一个quicklist节点保存的是<strong>一片数据，而不再是一个数据</strong>。</p>
<h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul>
<li>quicklist宏观上是一个双向链表，因此，它具有一个双向链表的有点，进行插入或删除操作时非常方便，虽然复杂度为O(n)，但是不需要内存的复制，提高了效率，而且访问两端元素复杂度为O(1)。</li>
<li>quicklist微观上是一片片entry节点，每一片entry节点内存连续且顺序存储，可以通过二分查找以 log2(n) 的复杂度进行定位。</li>
</ul>
<hr>
<h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><h4 id="哈希表节点-dictEntry"><a href="#哈希表节点-dictEntry" class="headerlink" title="哈希表节点 (dictEntry)"></a>哈希表节点 (dictEntry)</h4><h5 id="结构-5"><a href="#结构-5" class="headerlink" title="结构"></a>结构</h5><ul>
<li><p>key (void*)</p>
</li>
<li><p>v (union{void *val,unit64_t u64,int64_t s64})</p>
<p>v可以是一个指针，unit64_t 整数或者int64_t整数</p>
</li>
<li><p>next （指向下一个节点）</p>
<p>主要是解决键冲突问题，当有冲突的时候直接将新的节点添加在表头处，也就是头插法</p>
</li>
</ul>
<h4 id="哈希表-dictht"><a href="#哈希表-dictht" class="headerlink" title="哈希表 (dictht)"></a>哈希表 (dictht)</h4><h5 id="结构-6"><a href="#结构-6" class="headerlink" title="结构"></a>结构</h5><ul>
<li><p>table （dictEntry**）</p>
<p>哈希表数组，每个元素就是一个哈希表节点</p>
</li>
<li><p>size （unsigned long）</p>
<p>哈希表的大小</p>
</li>
<li><p>sizemask （unsigned long）</p>
<p>哈希表大小掩码 = size-1</p>
</li>
<li><p>used （unsigned long）</p>
<p>哈希表中已有节点的数量</p>
</li>
</ul>
<h4 id="字典-dict"><a href="#字典-dict" class="headerlink" title="字典 (dict)"></a>字典 (dict)</h4><h5 id="结构-7"><a href="#结构-7" class="headerlink" title="结构"></a>结构</h5><ul>
<li><p>type （dictType*）</p>
<p>指向dictType的指针，每个dictType结构包含了一组操作特定类型键值对的函数</p>
<p>比如hashFunction 计算哈希值的函数</p>
</li>
<li><p>privdata （void*）</p>
<p>保存需要传给类型特定函数的可选参数（就是dictType中的函数）</p>
</li>
<li><p>ht[2] (dicth)</p>
<p>哈希表数组</p>
<ul>
<li><p>ht[0]</p>
<p>字典使用的哈希表</p>
</li>
<li><p>ht[1]</p>
<p>留给rehash使用的 </p>
</li>
</ul>
</li>
<li><p>trehashidx</p>
<p>rehash索引，当rehash不进行时是-1</p>
</li>
</ul>
<h4 id="hash算法"><a href="#hash算法" class="headerlink" title="hash算法"></a>hash算法</h4><p>hash = dict-&gt;type-&gt;hashFunction(k0)</p>
<p>index = hash &amp; ht[0].sizemask</p>
<p>使用的算法是MurmurHash2，该算法的优点在于即使输入的键是有规律的，算法仍能给出一个很好的随机分布性</p>
<h4 id="rehash"><a href="#rehash" class="headerlink" title="rehash"></a>rehash</h4><h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><ul>
<li><p>为字典的ht[1]分配空间，空间的大小取决于需要执行的操作</p>
<ul>
<li><p>扩展操作</p>
<ul>
<li><p>场景</p>
<p>负载因子 = 哈希表已保存的节点数量/哈希表的大小 = used/size</p>
<p>当服务器目前没有执行BGSAVE或者BGREWRITEAOF，并且哈希表的负载因子&gt;=1</p>
<p>or</p>
<p>当服务器正在执行BGSAVE或者BGREWRITEAOF，并且哈希表的负载因子&gt;=5</p>
</li>
<li><p>操作</p>
<p>ht[1]的大小为<strong>第一个</strong>&gt;=ht[0].used*2<sup>n</sup></p>
</li>
</ul>
</li>
<li><p>收缩操作</p>
<ul>
<li><p>场景</p>
<p>哈希表的负载因子&lt;0.1</p>
</li>
<li><p>操作</p>
<p>ht[1]的大小为<strong>第一个</strong>&gt;=ht[0].used的2<sup>n</sup></p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>将保存在ht[0]中的所有键值对rehash到ht[1]上面</p>
</li>
<li><p>当所有的ht[0]包含的所有键值对都迁移到了ht[1]之后，释放ht[0],将ht[1]设置为ht[0]，并在ht[1]新创建一个空白哈希表</p>
</li>
</ul>
<h5 id="渐进式rehash"><a href="#渐进式rehash" class="headerlink" title="渐进式rehash"></a>渐进式rehash</h5><p>每次对字典执行操作的时候，除了执行指定的操作还会将ht[0]上面的键值rehash到ht[1]，每次rehash后都会将rehashidx+1，当所有的rehash都已经完成了，则将rehashidx置为-1，表示rehash操作已完成</p>
<p>对于rehash期间的查找：</p>
<p>如果在ht[0]中没有找到，那么会去ht[1]中进行查找</p>
<h4 id="编码种类"><a href="#编码种类" class="headerlink" title="编码种类"></a>编码种类</h4><h5 id="种类-2"><a href="#种类-2" class="headerlink" title="种类"></a>种类</h5><ul>
<li><p>ziplist</p>
<p>它会将同一键值对的两个节点都放在一起</p>
</li>
<li><p>hashtable</p>
</li>
</ul>
<h5 id="转换-2"><a href="#转换-2" class="headerlink" title="转换"></a>转换</h5><p>当以下2个条件都满足时</p>
<ul>
<li><p>哈希对象保存的所有键值的键和值的字符串长度&lt;64字节</p>
</li>
<li><p>哈希对象保存的键值对数量&lt;512</p>
</li>
</ul>
<p>会使用ziplist编码</p>
<p>否则会使用hashtable编码</p>
<hr>
<h3 id="跳跃表"><a href="#跳跃表" class="headerlink" title="跳跃表"></a>跳跃表</h3><h4 id="跳跃表节点"><a href="#跳跃表节点" class="headerlink" title="跳跃表节点"></a>跳跃表节点</h4><h5 id="结构-8"><a href="#结构-8" class="headerlink" title="结构"></a>结构</h5><ul>
<li><p>backward （struct zskiplistNode）</p>
<p>后退指针</p>
</li>
<li><p>score （doule）</p>
<p>分值</p>
</li>
<li><p>obj （robj *）</p>
<p>成员对象，一般主要是SDS</p>
</li>
<li><p>level[]  (struct zskiplistLevel)</p>
<p> 层</p>
<ul>
<li>forward （struct zskiplistNode） 前进指针</li>
<li>span （unsigned int）跨度</li>
</ul>
</li>
</ul>
<p>结构如图所示：</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210828100439.png" alt="在这里插入图片描述"></p>
<h5 id="对于每个节点上层的大小"><a href="#对于每个节点上层的大小" class="headerlink" title="对于每个节点上层的大小"></a>对于每个节点上层的大小</h5><p>随机生成一个介于1和32之间的值作为level数组的大小</p>
<h5 id="如何知道已经到达表的尾端"><a href="#如何知道已经到达表的尾端" class="headerlink" title="如何知道已经到达表的尾端"></a>如何知道已经到达表的尾端</h5><p>再最后一个节点中所有的层中的forward都指向null</p>
<h5 id="头节点"><a href="#头节点" class="headerlink" title="头节点"></a>头节点</h5><p>一般一共有32个level</p>
<h4 id="跳跃表-1"><a href="#跳跃表-1" class="headerlink" title="跳跃表"></a>跳跃表</h4><h5 id="结构-9"><a href="#结构-9" class="headerlink" title="结构"></a>结构</h5><p>跳跃表</p>
<ul>
<li><p>header</p>
<p>指向第一个节点</p>
</li>
<li><p>tail</p>
<p>指向最后一个尾节点</p>
</li>
<li><p>level</p>
<p>目前跳跃表内，层数最大的那个节点的层数（不包括头节点）</p>
</li>
<li><p>length</p>
<p>跳跃表的长度</p>
</li>
</ul>
<h5 id="跳跃表的时间复杂度"><a href="#跳跃表的时间复杂度" class="headerlink" title="跳跃表的时间复杂度"></a>跳跃表的时间复杂度</h5><p>O(logN) ~ O(N)</p>
<h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><h4 id="编码类型-2"><a href="#编码类型-2" class="headerlink" title="编码类型"></a>编码类型</h4><h5 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h5><ul>
<li><p>intset</p>
</li>
<li><p>hashtable</p>
<p>字典的每个键都是一个字符串对象，每个字符串对象为一个集合元素，字典的值都为null</p>
</li>
</ul>
<h5 id="转换-3"><a href="#转换-3" class="headerlink" title="转换"></a>转换</h5><p>当以下2个条件都满足时</p>
<ul>
<li><p>集合对象保存的所有元素为整数值</p>
</li>
<li><p>集合对象保存的元素数量&lt;512个</p>
</li>
</ul>
<p>会使用inset编码</p>
<p>否则会使用hashtable编码</p>
<h4 id="整数集合"><a href="#整数集合" class="headerlink" title="整数集合"></a>整数集合</h4><h5 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h5><p>有序的整数集合</p>
<h5 id="结构-10"><a href="#结构-10" class="headerlink" title="结构"></a>结构</h5><ul>
<li><p>encoding (uint32_t) 编码方式</p>
<p><font color=red>该值代表了整个集合中元素的类型</font></p>
</li>
<li><p>length (uint32_t) 元素数量</p>
</li>
<li><p>contents[] (int8_t)</p>
<p>保存元素的数组，此处的int8_t并非代表的是元素的类型，真正的类型取决于encoding</p>
</li>
</ul>
<h5 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h5><ul>
<li><p>含义</p>
<p>当元素的类型都为int8时，突然增加一个int16的元素，那么整个数组中的元素都将升级为int16类型</p>
</li>
<li><p>步骤</p>
<ol>
<li><p>根据新元素的类型，扩展整数集合底层数组的空间大小</p>
</li>
<li><p>将底层数组现有的所有元素都转换成与新元素相同的类型，并将转换后的元素放置到正确位上，在放置元素过程中需要保持底层数组的有序性质不变</p>
</li>
<li><p>将新元素添加到底层数组中</p>
<p>对于新元素的摆放位置，因为发生了升级，要么是比现有的元素都大，要么是比现有的元素都小，插入的时间复杂度为O(1)</p>
</li>
</ol>
</li>
<li><p>当元素进行升级之后就不能再降级</p>
</li>
<li><p>升级的好处在于节约内存</p>
</li>
</ul>
<h5 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h5><ul>
<li><p>创建整数集合</p>
<p><code>sadd &#123;集合名词&#125; &#123;元素...&#125;</code></p>
</li>
<li><p>查看集合类型</p>
<p><code>object encoding &#123;key&#125;</code></p>
</li>
</ul>
<hr>
<h3 id="有序集合对象"><a href="#有序集合对象" class="headerlink" title="有序集合对象"></a>有序集合对象</h3><h4 id="编码类型-3"><a href="#编码类型-3" class="headerlink" title="编码类型"></a>编码类型</h4><h5 id="类型-1"><a href="#类型-1" class="headerlink" title="类型"></a>类型</h5><ul>
<li><p>ziplist</p>
</li>
<li><p>skiplist</p>
<p>skiplist使用zset结构作为底层实现</p>
</li>
</ul>
<h5 id="转换-4"><a href="#转换-4" class="headerlink" title="转换"></a>转换</h5><p>当以下2个条件都满足时</p>
<ul>
<li><p>有序集合保存到所有字符串元素长度&lt;64字节</p>
</li>
<li><p>有序集合对象保存的元素数量&lt;128个</p>
</li>
</ul>
<p>会使用ziplist编码</p>
<p>否则会使用skiplist编码</p>
<h4 id="zst"><a href="#zst" class="headerlink" title="zst"></a>zst</h4><h5 id="结构-11"><a href="#结构-11" class="headerlink" title="结构"></a>结构</h5><ul>
<li><p>zskiplist</p>
<p>跳跃表</p>
</li>
<li><p>dict</p>
<p>字典</p>
</li>
</ul>
<h5 id="为何要同时使用skiplist和dict"><a href="#为何要同时使用skiplist和dict" class="headerlink" title="为何要同时使用skiplist和dict"></a>为何要同时使用skiplist和dict</h5><ul>
<li><p>skiplist</p>
<p>较好的执行范围型的操作，比如zrank、zrange</p>
</li>
<li><p>dict</p>
<p>对于查找操作，可以将复杂度将为O（1）</p>
</li>
</ul>
<hr>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><h4 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h4><p>redis中每一个对象都是由一个redisObject结构表示</p>
<h4 id="结构-12"><a href="#结构-12" class="headerlink" title="结构"></a>结构</h4><ul>
<li><p>type (unsigned)</p>
<p>类型</p>
<p>主要包括一下几种类型：</p>
<ul>
<li>字符串对象</li>
<li>列表对象</li>
<li>哈希对象</li>
<li>集合对象</li>
<li>有序集合对象</li>
</ul>
</li>
<li><p>encoding （unsigned）</p>
<p>编码类型</p>
<ul>
<li><p>定义</p>
<p>记录了对象所使用的编码。也就是这对象使用了什么数据结构作为底层的实现</p>
<p>每种类型的对象都至少使用了2种不同的编码</p>
</li>
</ul>
</li>
<li><p>ptr （void*）</p>
<p>指向底层实现数据结构的指针</p>
</li>
<li><p>…</p>
</li>
</ul>
<h4 id="类型检查与命令多态"><a href="#类型检查与命令多态" class="headerlink" title="类型检查与命令多态"></a>类型检查与命令多态</h4><h5 id="类型检查"><a href="#类型检查" class="headerlink" title="类型检查"></a>类型检查</h5><ul>
<li>redis会对输入的命令执行类型检查操作，也就是专有的命令必须对应指定的类型</li>
</ul>
<h5 id="命令多态"><a href="#命令多态" class="headerlink" title="命令多态"></a>命令多态</h5><ul>
<li><p>类型多态</p>
<p>像del、expire、type这种可以针对任何类型使用</p>
</li>
<li><p>编码多态</p>
<p>像llen这种命令是针对指定类型的，但是这个类型下面的不同编码都可以使用该指令</p>
</li>
</ul>
<h4 id="内存回收"><a href="#内存回收" class="headerlink" title="内存回收"></a>内存回收</h4><p>redis内部会构建一个计数器实现内存的回收</p>
<p>每个对象的引用计数信息由redisObject结构的refcount属性记录</p>
<ul>
<li>新建对象 +1</li>
<li>该对象被新程序使用 +1</li>
<li>不被一个程序使用 -1</li>
<li>=0时释放该对象占用的内存</li>
</ul>
<h4 id="对象共享"><a href="#对象共享" class="headerlink" title="对象共享"></a>对象共享</h4><p>一般redis中只对包含整数值的字符串对象进行共享</p>
<p>对于字符串对象不会共享，因为需要检查字符串是否相等，这会极大的消耗CPU</p>
<h4 id="对象的空转时长"><a href="#对象的空转时长" class="headerlink" title="对象的空转时长"></a>对象的空转时长</h4><p>redisObject中包含一个lru属性，表示该对象最后一次被命令程序访问的时间</p>
<p>命令</p>
<p><code>object idletime &#123;key&#125;</code></p>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>事件</title>
    <url>/2022/01/07/redis/%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="非模式"><a href="#非模式" class="headerlink" title="非模式"></a>非模式</h2><h2 id="文件事件"><a href="#文件事件" class="headerlink" title="文件事件"></a>文件事件</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>Redis服务器通过套接字与客户端进行连接，文件事件就是服务器对套接字的抽象</p>
<h3 id="文件事件处理器"><a href="#文件事件处理器" class="headerlink" title="文件事件处理器"></a>文件事件处理器</h3><p>就是Redis自己的网络事件处理器</p>
<ul>
<li>文件事件处理器使用<strong>I/O多路复用</strong>程序来同时监听多个套接字，并根据当前套接字目前执行的任务来为套接字关联不同的事件处理器</li>
<li>当被监听的套接字准备好执行连接应答、读取、写入和关闭等操作时，与操作相对应的文件事件就会产生，这时文件事件处理器就会调用套接字之前关联好的事件处理器来处理这些事情</li>
</ul>
<p><font color=red>总的来说就是根据不同的状态选择不同的事件处理器来处理这些事情</font></p>
<h3 id="文件事件处理器的构成"><a href="#文件事件处理器的构成" class="headerlink" title="文件事件处理器的构成"></a>文件事件处理器的构成</h3><ul>
<li><p>套接字</p>
</li>
<li><p>I/O多路复用程序 （<strong>Redis会在编译时自动选择系统中性能最高的I/O复用函数库作为I/O多路复用程序的底层实现</strong>）</p>
<p>尽管会并发的产生多个文件事件，但是I/O多路复用程序总是将所有的套接字都放到一个队列中，然后通过该队列，以有序、同步、每次一个套接字的方式向文件事件分派器传送套接字</p>
</li>
<li><p>文件事件分派器</p>
<p>根据套接字产生的事件的类型，调用响应的事件处理器</p>
</li>
<li><p>事件处理器</p>
</li>
</ul>
<h3 id="客户端与服务器连接事件的一次流程"><a href="#客户端与服务器连接事件的一次流程" class="headerlink" title="客户端与服务器连接事件的一次流程"></a>客户端与服务器连接事件的一次流程</h3><ol>
<li><p>Redis服务器的监听套接字的AE_READABLE事件处于监听状态，事件对应的处理器为连接应答处理器</p>
</li>
<li><p>客户端连接服务器监听套接字，监听套接字会产生AE_READABLE引发连接应答处理器执行，处理器对客户端的请求进行应答，==然后创建客户端套接字以及客户端状态，并将客户端套接字的AE_READABLE事件与命令请求处理器进行关联，使得客户端可以向主服务器发送命令请求==</p>
</li>
<li><p>客户端向主服务器发送一个命令请求，那么客户端套接字将产生AE_READABLE事件，引发命令请求处理器执行，处理器读取客户端命令传递给相应程序执行</p>
</li>
<li><p>执行命令会产生相应的回复，服务器会将客户端套接字的AE_WRITEWABLE事件与命令回复处理器进行关联。当客户端尝试读取命令回复时，客户端套接字将产生AE_WRITEWABLE事件，触发命令回复处理器执行，当命令回复处理器将命令回复全部写入到套接字之后，服务器就会接触客户端套接字的AE_WRITEWABLE事件与命令回复处理器之间的关联</p>
</li>
</ol>
<h2 id="时间事件"><a href="#时间事件" class="headerlink" title="时间事件"></a>时间事件</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul>
<li><p>定时事件</p>
</li>
<li><p>周期性事件</p>
<p>目的Redis中只有周期性事件</p>
</li>
</ul>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>服务器将所有的时间事件都放在一个无序链表中，每当时间事件执行器运行时，它就遍历整个链表查找所有已达到的时间事件，并调用相应的事件处理器</p>
<p>此处的无序指的是没有按照时间顺序来排序</p>
<h2 id="文件事件与时间事件的调度与执行"><a href="#文件事件与时间事件的调度与执行" class="headerlink" title="文件事件与时间事件的调度与执行"></a>文件事件与时间事件的调度与执行</h2><h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h3><p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210907094043.png" alt="image-20210907094034057"></p>
<h3 id="调度与规则"><a href="#调度与规则" class="headerlink" title="调度与规则"></a>调度与规则</h3><ol>
<li><p>aeApiPoll函数的最大阻塞时间由到达时间最接近当前时间的时间事件决定</p>
<p>可以避免服务器对时间事件进行频繁的轮询，也可以确保该函数不会阻塞过长时间</p>
</li>
<li><p>文件事件是随机出现的，如果等待并处理完一次文件事件之后，认为有任何时间事件到达，那么服务器会再次等待并处理文件事件</p>
</li>
<li><p>对文件事件和时间事件的处理都是同步、有序、原子地执行。</p>
<p>比如</p>
<ul>
<li>如果命令回复处理器将一个命令回复写入到客户端套接字时，如果写入字节数超过一个预设常量，命令回复器会主动break跳出写入循环将余下的数据留到下次再写</li>
<li>时间事件如果是比较耗时的持久化操作，那么会放到子线程或者子进程执行</li>
</ul>
</li>
<li><p>因为文件事件在时间事件之前执行，所以时间事件一般会比预设的时间晚一些</p>
</li>
</ol>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>发布与订阅</title>
    <url>/2022/01/07/redis/%E5%8F%91%E5%B8%83%E4%B8%8E%E8%AE%A2%E9%98%85/</url>
    <content><![CDATA[<h2 id="非模式"><a href="#非模式" class="headerlink" title="非模式"></a>非模式</h2><h3 id="订阅"><a href="#订阅" class="headerlink" title="订阅"></a>订阅</h3><ul>
<li><p>命令</p>
<p><code>subscribe &lt;channel...&gt;</code></p>
</li>
<li><p>原理</p>
<p>redis将所有频道的订阅都保存在服务器状态的pubsub_channels字典里面</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210915095231.png" alt="image-20210915095229962"></p>
<p>每次订阅一个新的频道就先创建一个键并在该键的链表的末尾加上该频道</p>
<p>如果订阅的频道已经存在那么就直接将其放到链表的末尾</p>
</li>
</ul>
<h3 id="退订"><a href="#退订" class="headerlink" title="退订"></a>退订</h3><p>将对应键指向的链表中的对应项删除</p>
<h2 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h2><h3 id="订阅-1"><a href="#订阅-1" class="headerlink" title="订阅"></a>订阅</h3><ul>
<li><p>命令</p>
<p><code>PSUBSCRIBE &lt;patterns...&gt;</code></p>
</li>
<li><p>原理</p>
<p>redis将所有模式的订阅存放在服务器状态的pubsub_patterns属性里面</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210915095735.png" alt="image-20210915095734875"></p>
</li>
</ul>
<p>每次新增一个模式订阅则添加到链表末尾</p>
<h3 id="退订-1"><a href="#退订-1" class="headerlink" title="退订"></a>退订</h3><p>删除链表中对应的项</p>
<p><font color=red>注意：假设客户端同时订阅了某种模式和符合该模式的某个频道，那么发送给这个频道的消息将被客户端接收到两次，只不过这两条消息的类型不同，一个是message类型，一个是pmessage类型，但其内容相同。</font></p>
<h2 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h2><h3 id="非模式-1"><a href="#非模式-1" class="headerlink" title="非模式"></a>非模式</h3><p>先在<code>pubsub_channels</code>中找到订阅者的链表，然后将消息发送给该链表上的所有客户端</p>
<h3 id="模式-1"><a href="#模式-1" class="headerlink" title="模式"></a>模式</h3><p>先在<code>pubsub_channels</code>遍历找到所有与channel匹配的模式的订阅者，然后发送给这些模式的订阅者</p>
<h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><ul>
<li><p><code>pubsub channels &lt;patterns&gt;</code></p>
<ul>
<li><p>如果不给定patterns参数</p>
<p>返回当前服务器上所有被订阅的频道（只包含pubsub_channels中的频道）</p>
</li>
<li><p>如果给了patterns参数</p>
<p>返回符合当前patterns的频道</p>
</li>
</ul>
</li>
</ul>
<ul>
<li><p><code>pubsub numsub &lt;channels&gt;</code></p>
<p>返回channels（可以指定多个）的订阅者的数量</p>
</li>
<li><p><code>pubsub numpat</code></p>
<p>返回<code>pubsub_patterns</code>中的数量</p>
</li>
</ul>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>事务</title>
    <url>/2022/01/07/redis/%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<h2 id="非模式"><a href="#非模式" class="headerlink" title="非模式"></a>非模式</h2><h2 id="事务的实现"><a href="#事务的实现" class="headerlink" title="事务的实现"></a>事务的实现</h2><h3 id="开启事务"><a href="#开启事务" class="headerlink" title="开启事务"></a>开启事务</h3><ul>
<li><p>命令</p>
<p><code>multi</code></p>
</li>
</ul>
<h3 id="命令入队"><a href="#命令入队" class="headerlink" title="命令入队"></a>命令入队</h3><p>开启时候之后所有的命令都会以一个FIFO的队列形式进行保存</p>
<h4 id="事务队列"><a href="#事务队列" class="headerlink" title="事务队列"></a>事务队列</h4><p>每个redis<strong>客户端</strong>都有自己的事务状态，该状态保存在客户端状态的mstate属性中</p>
<p>该属性是一个事务队列包含以下两个部分</p>
<ul>
<li>commands （multiCmd*） 事务队列</li>
<li>队列长度</li>
</ul>
<p>multiCmd的结构如下</p>
<ul>
<li>参数</li>
<li>参数数量</li>
<li>命令指针</li>
</ul>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210916104547.png" alt="img" style="zoom:50%;" />



<h3 id="执行事务"><a href="#执行事务" class="headerlink" title="执行事务"></a>执行事务</h3><ul>
<li><p>命令</p>
<p><code>exec</code></p>
</li>
</ul>
<p>按照事务的顺序（先进先出）进行执行</p>
<p>如果其中有错误的命令（比如指令不存在这种）就会直接在进入队列时报错，但是其他事务只有在出队执行时才会发现错误</p>
<h3 id="watch的实现"><a href="#watch的实现" class="headerlink" title="watch的实现"></a>watch的实现</h3><p>watch一般与multi搭配使用</p>
<p>watch是一个乐观锁，他可以在exec命令执行之前，监视任意数量的数据库键，并在执行exec命令执行时，检查被监视的键是否至少有一个已经被修改过了，如果是的话服务器将拒绝执行。</p>
<h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p>在redis<strong>数据库</strong>中都保存着一个watched_keys字典，这个字典的键是某个被watch命令监视的数据库键，字典值是一个链表，记录了所有监视该键的客户端</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210916105249.jpeg" alt="img"></p>
<p>如果有客户端对被监视的键进行了修改，那么会打开客户端的redis_dirty_cas标识，表示该客户端的事务安全性已经被破坏</p>
<p>比如有2个客户端在监视msg键，并且已经watch与此同时开启了事务，但是在前两个客户端执行的过程中有一个客户端在此期间set msg了，那么前两个客户端的redis_dirty_key就会被打开，两个客户端再执行对msg的操作就会被拒绝</p>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>复制</title>
    <url>/2022/01/07/redis/%E5%A4%8D%E5%88%B6/</url>
    <content><![CDATA[<h2 id="非模式"><a href="#非模式" class="headerlink" title="非模式"></a>非模式</h2><h2 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h2><p>在redis中用户可以通过slaveof命令让一个服务器去复制另一个服务器</p>
<p><font color=red>需要注意的是：在docker中直接启动redis是单机模式，即使输入了slaveof也无法生效，需要使用集群方式启动才会生效</font></p>
<h2 id="旧版复制功能"><a href="#旧版复制功能" class="headerlink" title="旧版复制功能"></a>旧版复制功能</h2><p>旧版的复制功能主要包含以下两个步骤</p>
<h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><p>当客户端向服务器发送slaveof命令后，要求从服务器复制主服务器时，从服务器需要执行同步操作，将从服务器的状态更新至主服务器当前所处的数据库状态</p>
<p>步骤如下：</p>
<ol>
<li>从服务器向主服务器发送SYNC命令</li>
<li>收到命令后主服务器执行BGSAVE命令，在后台生成RDB文件并使用一个缓冲区记录从现在开始执行的所有写命令</li>
<li>当主服务器的BGSAVE执行完毕时，主服务器会将生成的RDB文件发送给从服务器，从服务器接受该文件后会载入该RDB文件</li>
<li>主服务器将缓冲区中所有写命令发送给从服务器，从服务器执行命令将自己的状态与主服务器保持一致</li>
</ol>
<h3 id="命令传播"><a href="#命令传播" class="headerlink" title="命令传播"></a>命令传播</h3><p>当同步操作执行完毕之后，主服务器会将自己的写命令同步传播给从服务器，从而使得两者状态保持一致</p>
<h3 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h3><p>当从服务器与主服务器发送短线之后，主服务器又会生成RDB文件发送给从服务器，包括从服务器已经拥有的键值对，完全就是重新执行一遍同步操作，之前的就全部作废了。</p>
<h2 id="新版复制功能"><a href="#新版复制功能" class="headerlink" title="新版复制功能"></a>新版复制功能</h2><h3 id="PSYNC"><a href="#PSYNC" class="headerlink" title="PSYNC"></a>PSYNC</h3><p>新版将SYNC改为了PSYNC</p>
<ul>
<li><p>如果是从服务器第一次与主服务器进行连接，那么会执行一次完整的同步步骤</p>
</li>
<li><p>如果是部分同步之后发生了短线，如果条件允许，主服务器只需要将<font color=red>断线期间的写命令发生给从服务器即可</font>，不需要重新执行一次完整的同步操作</p>
</li>
</ul>
<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><ul>
<li><p>复制偏移量</p>
<p>主服务器和从服务器会分别维护一个复制偏移量，通过每次对比主从之前的偏移量就可以知道当前主从服务器之间相差哪些数据</p>
</li>
<li><p>主服务器的复制积压缓冲区</p>
<p>该缓冲区由主服务器进行维护，是一个固定长度的先进先出的队列，默认大小为1MB</p>
<p>如果偏移量之后的数据依旧存在于复制挤压缓冲区，那么主服务器就会对从服务器执行部分重同步操作，否则将会执行完整的重同步操作</p>
<p>一般挤压缓冲区的大小 = second*write_size_per_second来进行估算</p>
</li>
<li><p>服务器运行ID</p>
<p>每个redis主从服务器都会有自己的运行ID，根据ID来判断是否该从服务器是之前连接过主服务器</p>
</li>
</ul>
<h4 id="PSYNC的实现"><a href="#PSYNC的实现" class="headerlink" title="PSYNC的实现"></a>PSYNC的实现</h4><h5 id="从服务器"><a href="#从服务器" class="headerlink" title="从服务器"></a>从服务器</h5><ul>
<li><p>第一次复制</p>
<p>发送 PSYNC ？ -1</p>
</li>
<li><p>复制以后但是断线之后</p>
<p>PSYNC <runid> <offset></p>
</li>
</ul>
<h5 id="主服务器"><a href="#主服务器" class="headerlink" title="主服务器"></a>主服务器</h5><ul>
<li><p>返回++FULLRESYNC <runid> <offset></p>
<p>表示主服务器与从服务器执行完整的同步操作</p>
</li>
<li><p>返回++CONTINUE</p>
<p>表示执行部分同步操作</p>
</li>
<li><p>返回-ERR</p>
<p>表示从服务器的版本低于Redis2.8，识别不了PSYNC命令，将会执行完整的同步操作</p>
</li>
</ul>
<h4 id="复制的实现"><a href="#复制的实现" class="headerlink" title="复制的实现"></a>复制的实现</h4><ol>
<li><p>设置主服务器的地址和端口</p>
<p>执行了slaveof命令之后，从服务器将会保存主服务器的地址和端口</p>
</li>
<li><p>建立套接字连接</p>
</li>
<li><p>发送ping命令</p>
</li>
<li><p>身份验证</p>
<p>需要注意的是主从服务器要么都设置密码，要么都不设置，如果都设置了密码需要主从服务器端密码相同</p>
</li>
<li><p>发送端口信息</p>
<p>从服务器向主服务器执行replconf listening-port <port-number>，向主服务器发送从服务器的监听端口号，主服务器接收到该命令之后会在从服务器所对应的客户端状态的slave_listening_port属性中记录该端口号</p>
</li>
<li><p>同步</p>
</li>
<li><p>命令传播</p>
</li>
<li><p>心跳检测</p>
<p>在命令传播阶段，从服务器默认会以每秒一次的频率，向主服务发送命令：</p>
<p>replconf ack <replication_offset>,其中replication_offset是从服务器当前的复制偏移量</p>
<p>主要有以下三个作用</p>
<ul>
<li><p>检测主从服务器的网络连接状态</p>
</li>
<li><p>辅助实现min-slaves选项</p>
</li>
<li><p>检测命令丢失</p>
<p>如果因为网络故障，主服务器传播给从服务器的写命令在半路丢失，那么从服务器在发送该命令时，主服务器会检测到并将对应在复制缓冲区总的数据重新发送给从服务器</p>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>慢查询日志</title>
    <url>/2022/01/07/redis/%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<h2 id="非模式"><a href="#非模式" class="headerlink" title="非模式"></a>非模式</h2><h2 id="慢查询日志相关参数"><a href="#慢查询日志相关参数" class="headerlink" title="慢查询日志相关参数"></a>慢查询日志相关参数</h2><ul>
<li><p>slowlog-log-slower-than</p>
<p>指定的时间超过多少微秒会被记录到日志中</p>
<p><code>CONFIG SET slowlog-log-slower-than 0</code></p>
</li>
<li><p>slowlog-max-len</p>
<p>最多保存多少条慢查询日志</p>
<p><code>config set slow-max-len 5</code></p>
</li>
</ul>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>在redisServer中包含了几个和慢查询日志功能相关的属性</p>
<ul>
<li><p>slowlog_entry_id (long)</p>
<p>下一条慢查询日志的Id （每次会+1）</p>
</li>
<li><p>slowlog (list)</p>
<p>慢查询日志的链表</p>
</li>
<li><p>slowlog-log-slower-than</p>
</li>
<li><p>slowlog-max-len</p>
</li>
</ul>
<p>慢查询日志的插入是头插法，如果日志的数目大于最大的限制那么将会删除最旧的一条慢查询日志</p>
<p><font color=red>注意：如果以前没有设置慢查询日志，那么当你设置之后，如果设置之后的指令为慢查询日志的数量小于设置的最大慢查询日志的数量，那么会根据你设置的数量从现有的日志中去取出符合要求的日志。</font></p>
<p>比如我现在设置慢查询日志的要求为最大为5个日志，时间为0。那么当我设置完慢查询日志的属性之后，我又执行了两个命令，按道理来说只会存在两个日志，但是它回去原来的日志中寻找最近满足你设置慢查询要求的日志添加到其中。</p>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>监视器</title>
    <url>/2022/01/07/redis/%E7%9B%91%E8%A7%86%E5%99%A8/</url>
    <content><![CDATA[<h2 id="非模式"><a href="#非模式" class="headerlink" title="非模式"></a>非模式</h2><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>通过执行monitor，客户端可以将自己变成一个监视器，实时接收打印服务器当前处理的命令请求的相关信息</p>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>集群</title>
    <url>/2022/01/07/redis/%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<h2 id="非模式"><a href="#非模式" class="headerlink" title="非模式"></a>非模式</h2><h2 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h2><h3 id="节点组成集群命令"><a href="#节点组成集群命令" class="headerlink" title="节点组成集群命令"></a>节点组成集群命令</h3><p>各个节点服务器需要将cluster-enabled配置选项配置为yes开启集群模式</p>
<p><code>cluster meet &lt;ip&gt; &lt;port&gt;</code></p>
<h4 id="meet命令的实现"><a href="#meet命令的实现" class="headerlink" title="meet命令的实现"></a>meet命令的实现</h4><p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210913102818.png" alt="image-20210913102817330"></p>
<p>三次沟通之后双方都为彼此创建了对应的clusterNode结构</p>
<p>最后结点A会通过Gossip协议将B的信息传递给集群中的其他结点</p>
<h3 id="集群数据结构"><a href="#集群数据结构" class="headerlink" title="集群数据结构"></a>集群数据结构</h3><h4 id="clusterNode"><a href="#clusterNode" class="headerlink" title="clusterNode"></a>clusterNode</h4><h5 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h5><ul>
<li><p>节点的创建时间</p>
</li>
<li><p>名字</p>
</li>
<li><p>当前配置纪元</p>
</li>
<li><p>ip</p>
</li>
<li><p>端口号</p>
</li>
<li><p>flag</p>
<p>节点标识（主要包括节点的主从状态、是否上下线状态）</p>
</li>
<li><p>保存连接节点所需要的有关信息</p>
<p>clusterLink *link</p>
</li>
</ul>
<h4 id="clusterLink"><a href="#clusterLink" class="headerlink" title="clusterLink"></a>clusterLink</h4><h5 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h5><ul>
<li>连接的创建时间</li>
<li>套接字描述符</li>
<li>输出缓冲区（发送）</li>
<li>输入缓冲区（接受）</li>
<li>与该连接相关联的结点</li>
</ul>
<h4 id="clusterStat"><a href="#clusterStat" class="headerlink" title="clusterStat"></a>clusterStat</h4><p>每个节点都会保存一个该结构</p>
<h5 id="属性-2"><a href="#属性-2" class="headerlink" title="属性"></a>属性</h5><ul>
<li><p>myself</p>
<p>指向当前结点的指针</p>
</li>
<li><p>当前配置的纪元</p>
</li>
<li><p>集群当前状态（在线还是下线）</p>
</li>
<li><p>处理槽的数量</p>
</li>
<li><p>集群结点的名单（包括myself）数据结构是一个字典</p>
<p>key为结点的名字，val为对应的clusterNode结构</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210913102646.png" alt="image-20210913102644496"></p>
</li>
</ul>
<h2 id="槽"><a href="#槽" class="headerlink" title="槽"></a>槽</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><ul>
<li><p>集群的整个数据库被分为16384个槽，数据库中的每个键都属于整个16384个槽中的其中一个，集群中的每个节点可以处理0~16384个槽</p>
</li>
<li><p>如果0~16384个槽都有对应的结点得到处理，那么集群处于上线状态，如果任何一个槽没有得到处理，那么集群处于下线状态</p>
</li>
<li><p>命令</p>
<p><code>cluster addslots &#123;槽id...&#125;</code></p>
</li>
</ul>
<h3 id="记录节点的槽指派信息"><a href="#记录节点的槽指派信息" class="headerlink" title="记录节点的槽指派信息"></a>记录节点的槽指派信息</h3><p>clusterNode中有两个属性与其有关</p>
<ul>
<li>slots数组</li>
<li>numslots 槽的数量</li>
</ul>
<p>这些槽是以二进制位进行标号，类似于状态压缩一样，每一个二进制位为1代表当前槽被当前节点处理，为0则表示不被当前节点处理</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210913104835.png" alt="image-20210913104834346"></p>
<p>对于程序来说检查当前节点是否处理某个槽或者将某个槽分配给当前节点的时间复杂度都是O(1),因为只需要对二进制位操作即可</p>
<h3 id="传播槽信息"><a href="#传播槽信息" class="headerlink" title="传播槽信息"></a>传播槽信息</h3><p>当前节点除了会记录自己的槽信息之外，还会自己的slots数组发送给集群中的其他结点</p>
<h3 id="记录集群所有槽的指派信息"><a href="#记录集群所有槽的指派信息" class="headerlink" title="记录集群所有槽的指派信息"></a>记录集群所有槽的指派信息</h3><p>clusterState结构中的slots数组记录了集群中所有16384个槽的指派信息</p>
<p>slots数组中的每一项都指向一个clusterNode结点，表示该槽已经指派给了clusterNode结构所代表的结点</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210913105747.png" alt="image-20210913105746538"></p>
<p><font color=red>注意：clusterState.slots数组记录了集群中所有槽的指派信息，而clusterNode.slots只记录了clusterNode结构所代表的结点的槽指派信息</font></p>
<h3 id="addslots命令的实现"><a href="#addslots命令的实现" class="headerlink" title="addslots命令的实现"></a>addslots命令的实现</h3><p>当结点接受该命令时会通过clusterState结构中的slots数组检查当前槽是否有对应的clusterNode结点，如果有则表示已经当前槽被分配了结点，否则则执行分配操作，执行完毕之后会发送消息告知集群中的其他结点自己目前正在负责哪些槽</p>
<h2 id="集群中执行命令"><a href="#集群中执行命令" class="headerlink" title="集群中执行命令"></a>集群中执行命令</h2><p>当客户端发送与数据库键相关的指令时，接受命令的结点会计算出命令要处理的数据库键属于哪个槽，并检查该槽是否指派给了自己</p>
<ul>
<li>如果该键所在的槽正好在当前节点上，则直接执行</li>
<li>如果不在，则返回一个moved命令，并指引客户端转向至正确的结点并在此发送之前执行的命令</li>
</ul>
<h3 id="计算属于哪个槽"><a href="#计算属于哪个槽" class="headerlink" title="计算属于哪个槽"></a>计算属于哪个槽</h3><p>CRC16(key)&amp;16383</p>
<h3 id="节点数据库的实现"><a href="#节点数据库的实现" class="headerlink" title="节点数据库的实现"></a>节点数据库的实现</h3><ul>
<li><p>节点数据库与单机数据库的区别之一：节点只能使用0号数据库</p>
</li>
<li><p>节点会使用clusterState结构中的slots_to_keys跳跃表来保存槽和键之间的关系</p>
<p>跳跃表中的每个节点的分值都是一个槽号，每个节点的成员都是一个数据库键</p>
<p>这样的好处在于可以对数据某个或者某个槽的所有数据库键进行批量操作，例如返回count个数据槽slot的数据库键</p>
</li>
</ul>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210913111715.png" alt="img" style="zoom:80%;" />





<h2 id="重新分片"><a href="#重新分片" class="headerlink" title="重新分片"></a>重新分片</h2><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>redis集群的重新分片可以将任意数量已经指派给某个节点的槽改为指派给另一个节点，并且相关槽所属的键值对也会从源节点被移动到目标节点</p>
<p>重新分片对源节点和目标节点上的其他正常操作没有影响</p>
<h3 id="重新分片原理"><a href="#重新分片原理" class="headerlink" title="重新分片原理"></a>重新分片原理</h3><p>重新分片步骤如下：</p>
<ol>
<li>redis-trib对目标节点发送信息并让目标节点准备好从源节点导入属于槽slot的键值对</li>
<li>redis-trib对源节点发送信息并让源节点准备好属于槽slot的键值对迁移至目标节点</li>
<li>redis-trib向目标节点发送<code>cluster getkeysinslot &lt;slot&gt; &lt;count&gt;</code>命令，最多获得count个属于槽slot的键值对的键名</li>
<li>对于步骤3获得的每个键名，redis-trib都向源节点发送一个命令，将被选中的键原子地从源节点迁移至目标节点</li>
<li>重复3、4步骤</li>
<li>redis-trib向集群中的任意一个节点发送消息，将槽slot指派给目标节点，该消息会发送给集群中的每个节点，最终集群中的每个节点都会知道槽slot已经指派给了目标节点</li>
</ol>
<h2 id="ASK错误"><a href="#ASK错误" class="headerlink" title="ASK错误"></a>ASK错误</h2><h3 id="错误发送的情况"><a href="#错误发送的情况" class="headerlink" title="错误发送的情况"></a>错误发送的情况</h3><p>在进行重新分片的期间，源节点向目标节点迁移一个槽的过程中，有一份数据在源节点的槽中，还有一部分数据在目标节点的槽中。</p>
<p>因此当客户端针对该槽中数据的查询会最多经过两个步骤</p>
<ol>
<li>源节点在自己的槽中查找指定的键，如果找到的话就执行相应的命令</li>
<li>源节点没有能够在自己的槽中找到指定的键，源节点会向客户端返回一个ASK错误，指引客户端转向正在导入槽的目标节点并再次发送之前想要执行的命令</li>
</ol>
<h3 id="ASKING命令"><a href="#ASKING命令" class="headerlink" title="ASKING命令"></a>ASKING命令</h3><p>当某个槽所包含的各个键分散在节点 A 和节点 B 中， 客户端在节点 A 中没找到某个键时， 它应该转向到节点 B 中去寻找， 但是这种转向应该仅仅影响一次命令查询， 而不是让客户端每次都直接去查找节点 B ： 在节点 A 所持有的属于该槽的键没有全部被迁移到节点 B 之前， 客户端应该先访问节点 A ， 然后再访问节点 B 。</p>
<p>只有先执行了ASKING命令才会使得客户端在B节点访问该槽时执行命令，否则将会返回moved的错误。</p>
<p>因为上述原因， 如果我们要在查找节点 A 之后， 继续查找节点 B ， 那么客户端在向节点 B 发送命令请求之前， 应该先发送一个 <code>ASKING</code> 命令， 否则这个针对带有 <code>IMPORTING</code> 状态的槽的命令请求将被节点 B 拒绝执行。因为此时B节点并不拥有该槽，A节点仍然是该槽的拥有者，所以不加ASKING命令的话B节点会拒绝执行命令。</p>
<p>注意：ASKING命令是一次性的，用完就生效了。</p>
<h2 id="复制与故障转移"><a href="#复制与故障转移" class="headerlink" title="复制与故障转移"></a>复制与故障转移</h2><h3 id="设置从节点"><a href="#设置从节点" class="headerlink" title="设置从节点"></a>设置从节点</h3><p>集群中的各个节点都可以对其进行设置从节点，用来复制自身的数据</p>
<p>命令为：<code>cluster replicate &lt;node_id&gt;</code></p>
<p>clusterNode结构中的salveof属性会指向一个clusterNode，表示当前节点的主节点</p>
<p>clusterNode结构中的slaves属性会指向一个clusterNode数组，表示当前节点的从节点数组</p>
<h3 id="故障检测"><a href="#故障检测" class="headerlink" title="故障检测"></a>故障检测</h3><p>集群中的每个节点都会定期向集群中的其他结点发送PING命令，检测对方是否在线。</p>
<p>如果接受ping消息的结点没有在规定时间内返回pong消息，那么发送ping消息的结点就会将目标节点标识为疑似下线</p>
<p>集群中的各个主节点通过消息交换，超过半数以上的主节点得知某个主节点的疑似下线，那么该主节点就会被标记为已下线，并且第一个发现该主节点下线的结点将发送一条该主节点标记为下线的消息，并在集群进行广播，所有收到消息的结点会将该主结点标记为已下线</p>
<h3 id="故障转移"><a href="#故障转移" class="headerlink" title="故障转移"></a>故障转移</h3><p>当一个从节点发现自己正在复制的主节点已经进入下线状态，从节点将开始对下线结点进行故障转移，具体步骤如下：</p>
<ol>
<li><p>从已下线的主节点的从节点中选中一个</p>
<p>选举方法和Sentinel那边差不多</p>
</li>
<li><p>被选中的从节点执行slave of no one命令使其成为新的主节点</p>
</li>
<li><p>新的主节点会撤销所有已下线主节点的槽指派，并将这些槽指派给自己</p>
</li>
<li><p>新的主节点广播消息，告诉其他人我已经成为主节点并负责哪些槽</p>
</li>
</ol>
<h2 id="消息"><a href="#消息" class="headerlink" title="消息"></a>消息</h2><p>集群中的结点通过发送和接受消息来进行通信</p>
<p>常见的消息包括以下五种：</p>
<ul>
<li><p>meet</p>
<p>请求加入到集群中</p>
</li>
<li><p>ping</p>
<p>健康检测</p>
</li>
<li><p>pong</p>
<p>回应消息或者广播自己的pong消息让集群中的其他结点立即刷新这个结点的认识</p>
</li>
<li><p>fall （为了满足及时性，使用广播的方式）</p>
<p>下线</p>
</li>
<li><p>publish</p>
<p>当集群中的一个节点接收到一个publish命令，节点会执行这个命令并向集群广播该命令，接收到该消息的其他结点也会执行相同的命令</p>
</li>
</ul>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>PV和VC</title>
    <url>/2022/01/07/rook/PV%E5%92%8CPVC/</url>
    <content><![CDATA[<h4 id="rook中的例子"><a href="#rook中的例子" class="headerlink" title="rook中的例子"></a>rook中的例子</h4><p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210710210814.png" alt="image-20210710210814034"></p>
<ol>
<li><p>查看pv</p>
<p><code>kubectl get pv</code></p>
</li>
<li><p>查看pvc</p>
<p><code>kubectl get pvc</code></p>
</li>
<li><p>查看ceph rbd中对应的images</p>
<p><code>rbd -p &#123;pool name&#125; ls</code></p>
</li>
<li><p>查看ceph rbd对应image的info</p>
<p><code>rbd -p &#123;pool name&#125; info &#123;image name&#125;</code></p>
</li>
</ol>
<h4 id="pvc方式存在的缺陷"><a href="#pvc方式存在的缺陷" class="headerlink" title="pvc方式存在的缺陷"></a>pvc方式存在的缺陷</h4><p>只适合单个应用，比如说一个应用有多个副本，那么这些副本不能共享一个存储卷，需要各自共享一个存储卷，因此这个时候需要<strong>StatefulSet的volumeClaimTemplates功能</strong>，实现每个pods均有各自的存储卷。</p>
<p>例子如下：</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210710210855.png" alt="image-20210710210855716"></p>
<p>​    注意红色个箭头的两个地方</p>
]]></content>
      <categories>
        <category>Rook</category>
      </categories>
      <tags>
        <tag>ceph</tag>
        <tag>Rook</tag>
      </tags>
  </entry>
  <entry>
    <title>OSD</title>
    <url>/2022/01/07/rook/Rook-OSD/</url>
    <content><![CDATA[<h3 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h3><ul>
<li>如果是增加了盘那么直接在cluster.yaml中对应的位置的对应的osd节点上添加上新增盘的信息</li>
</ul>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210711160005.png" alt="image-20210711155958522"></p>
<ul>
<li>如果是增加了节点那么直接在cluster.yaml中对应的位置的加上节点的信息以及其下面磁盘的信息</li>
</ul>
<h3 id="删除osd"><a href="#删除osd" class="headerlink" title="删除osd"></a>删除osd</h3><ol>
<li><p>直接使用ceph中的osd-purge.yaml</p>
<p>将对应osd的id写进入再apply一下即可完成删除osd的操作</p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210711161702.png" alt="image-20210711161702220"></p>
<ol start="2">
<li><p>将cluster.yaml中对应的信息删除掉，如果是自己配置osd节点的话</p>
</li>
<li><p>有可能对应的osd的deployment还存在，因为默认是不会将out的osd自动删除的，这里的话是对应cluster.yaml中的一个选项</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210711161948.png" alt="image-20210711161948373"></p>
<p>​    这个默认是false，改为true就可以自动删除out的osd对应的deployment了</p>
<p>当然也可以手动使用ceph进行删除，但是最终osd对应的deployment需要你自己把它删除了</p>
</li>
</ol>
<h3 id="替换osd"><a href="#替换osd" class="headerlink" title="替换osd"></a>替换osd</h3><p>先删除osd，再加入osd</p>
]]></content>
      <categories>
        <category>Rook</category>
      </categories>
      <tags>
        <tag>ceph</tag>
        <tag>Rook</tag>
        <tag>OSD</tag>
      </tags>
  </entry>
  <entry>
    <title>RBD</title>
    <url>/2022/01/07/rook/Rook-RBD/</url>
    <content><![CDATA[<h3 id="创建block块"><a href="#创建block块" class="headerlink" title="创建block块"></a>创建block块</h3><ol>
<li><p>进入/root/rook/rook/cluster/examples/kubernetes/ceph/csi/rbd目录下</p>
<ul>
<li><p>storageclass-ec.yaml</p>
<p>创建纠删码策略的存储类</p>
</li>
<li><p>storageclass.yaml</p>
<p>创建副本策略的存储类</p>
</li>
</ul>
</li>
</ol>
<p>rbd的缺陷：</p>
<p>​    只能同时一个人进行访问</p>
]]></content>
      <categories>
        <category>Rook</category>
      </categories>
      <tags>
        <tag>ceph</tag>
        <tag>RBD</tag>
        <tag>Rook</tag>
      </tags>
  </entry>
  <entry>
    <title>Rook 安装</title>
    <url>/2022/01/07/rook/Rook%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<ol>
<li><p>获取源码并创建资源</p>
<p><code>git clone --single-branch --branch v1.6.7 https://github.com/rook/rook.git</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd rook/cluster/examples/kubernetes/cephce</span><br><span class="line">kubectl create -f crds.yaml -f common.yaml -f operator.yaml</span><br><span class="line">kubectl create -f cluster.yaml</span><br></pre></td></tr></table></figure>

<ul>
<li><p>crds.yaml</p>
<p>主要是一些自定义资源</p>
</li>
<li><p>common.yaml</p>
<p>主要是一些角色、Serviceaccout</p>
</li>
<li><p>operator.yaml (<font color=red>暂时不要导入该文件，因为镜像可能会拉取失败</font>)</p>
<p>包含有两部分：</p>
<ul>
<li><p>ConfigMap （配置文件）</p>
<p>包含一些CSI的镜像</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210707160708.png" alt="image-20210707160706688"></p>
</li>
<li><p>deployment （控制器）</p>
</li>
</ul>
<p>注意：如果ConfigMap中的配置如果和deployment中的配置一样的话会默认使用ConfigMap中的配置</p>
</li>
<li><p>cluster.yaml(<font color=red>暂时不要导入该文件，因为镜像可能会拉取失败</font>)</p>
<p>主要是负责一些组件的配置创建，比如mon、mgr、rgw</p>
<p>除此之外还可以指定将组件安装在固定的node上</p>
</li>
</ul>
<ol start="2">
<li><p>拉取镜像</p>
<ul>
<li><p>rook/ceph镜像</p>
<p>需要在每个节点上都进行导入,因为有可能pod在其他节点启动，也需要拉取镜像</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210707171420.png" alt="image-20210707171418834"></p>
<p><font color=red>这个时候再执行</font></p>
<p><code>kubectl apply -f operator.yaml</code></p>
</li>
<li><p>ceph/ceph的镜像</p>
<p>具体镜像根据cluster.yaml中的image查看</p>
<p>需要在每个节点上都进行导入</p>
<p><font color=red>这个时候再执行</font></p>
<p><code>kubectl apply -f cluster.yaml</code></p>
<p><font color=red>注意</font>:</p>
<p>只有三台主机的话一定需要注意一下：</p>
<p><em>因为存在master节点污点，因此不能够在上面创建mon节点，但是只有两个mon节点的话会导致脑裂的产生，从而导致mgr和osd都无法创建出来</em>，因此一定要先将master节点的污点去除掉</p>
<p><code>kubectl taint nodes node1 node-role.kubernetes.io/master=:NoSchedule-</code></p>
<p>这样的话就可以创建出三个mon，那么mgr和osd都会被创建出来</p>
<p>还有一个就是osd的盘必须满足下面的条件之一：</p>
<ul>
<li>Raw devices (no partitions or formatted filesystems)</li>
<li>Raw partitions (no formatted filesystem)</li>
<li>PVs available from a storage class in <code>block</code> mode</li>
</ul>
<p>如果发现<code>lsblk -f</code>发现盘上面有文件系统比如说是LVM2_member，可以使用如下命令</p>
<p><code>pvremove /dev/***</code></p>
</li>
</ul>
<ol start="3">
<li>完成</li>
</ol>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210707211036.png" alt="image-20210707211028062"></p>
<ol start="4">
<li><p>安装toolbox客户端</p>
<p>这个客户端是在之前导入的rook/ceph镜像中自带的，就是一个连接ceph的客户端，可以用来执行一些ceph的命令</p>
<p>导入资源文件</p>
<p><code>kubectl apply -f toobox.yaml</code></p>
<p>该文件位置如下：</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210707211743.png" alt="image-20210707211742922"></p>
</li>
</ol>
</li>
</ol>
<p>​            执行<code>kubectl exec -it rook-ceph-tools-656b876c47-wgzw8 -n rook-ceph /bin/bash</code>进入容器，</p>
<p>​            <code>ceph -s</code>即可查看集群状态</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210707211858.png" alt="image-20210707211857849"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Rook</category>
      </categories>
      <tags>
        <tag>ceph</tag>
        <tag>Rook</tag>
      </tags>
  </entry>
  <entry>
    <title>bluestore加速</title>
    <url>/2022/01/07/rook/bluestore%E5%8A%A0%E9%80%9F/</url>
    <content><![CDATA[<p>bluestore可以有通过SSD进行加速<br>对于bluestore加速需要将wal+db存储在SSD中，其起到加速的作用</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210711160937.png" alt="image-20210711160932038"></p>
]]></content>
      <categories>
        <category>Rook</category>
      </categories>
      <tags>
        <tag>ceph</tag>
        <tag>Rook</tag>
      </tags>
  </entry>
  <entry>
    <title>cephfs</title>
    <url>/2022/01/07/rook/cephfs/</url>
    <content><![CDATA[<h3 id="CephFS"><a href="#CephFS" class="headerlink" title="CephFS"></a>CephFS</h3><p>cephfs架构图</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210710220532.png" alt="image-20210710220532238"></p>
<p>​        <strong>优点</strong></p>
<p>​            可以同时支持多个客户端进行访问</p>
<p>​            可以双主双从</p>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>在/root/rook/rook/cluster/examples/kubernetes/ceph下有两个文件</p>
<ul>
<li>filesystem.yaml  （副本方式）</li>
<li>filesystem-ec.yaml （纠删码方式）</li>
</ul>
<p>部署完之后会创建两个pool</p>
<ul>
<li><p>myfs-metadata （存储元数据的pool）</p>
</li>
<li><p>myfs-data0  （存储数据的pool）</p>
</li>
</ul>
<h3 id="调整"><a href="#调整" class="headerlink" title="调整"></a>调整</h3><p>因为mds对于CPU的要求比较高，因此我们希望其落在CPU资源比较好的节点上</p>
<p>和前面的cluster.yaml调整一样，在filesystem.yaml中调整资源，设置label</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210710222713.png" alt="image-20210710222713137" style="zoom:50%;" />

<p><strong>注意：有可能设置了只有所有的mds都被调度到同一个node上面</strong></p>
<p>即如下场景：</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210710222847.png" alt="image-20210710222847347"></p>
<p>这样的话高可用就无从谈起了</p>
<p>因此我们还需要设置反亲和力</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210710222949.png" alt="image-20210710222948996" style="zoom:50%;" />

<p>还是原来的filesystem.yaml的上面进行调整，就是把注释的注释掉就可以了，最终apply一下就会是得mds分布在不同的node上面</p>
<h3 id="创建cephFS的storageclass"><a href="#创建cephFS的storageclass" class="headerlink" title="创建cephFS的storageclass"></a>创建cephFS的storageclass</h3><p>在/rook/cluster/examples/kubernetes/ceph/csi/cephfs下的storageclass.yaml文件    </p>
<p>可以看到创建成功</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210710223544.png" alt="image-20210710223544320"></p>
<h3 id="创建cephFS的PV和PVC"><a href="#创建cephFS的PV和PVC" class="headerlink" title="创建cephFS的PV和PVC"></a>创建cephFS的PV和PVC</h3><p>在/rook/cluster/examples/kubernetes/ceph/csi/cephfs下的kube-registry.yaml</p>
<p>注意这里创建之后的pvc是在kube-system namespace下，创建的deployment也是在kube-system namespace下</p>
<p><strong>最终是多个pod共用一个卷</strong></p>
<h3 id="cephFS挂载到外部环境"><a href="#cephFS挂载到外部环境" class="headerlink" title="cephFS挂载到外部环境"></a>cephFS挂载到外部环境</h3><p>mount -t ceph -o name=admin,secret=AQACT+lgnAhZCBAAni/JDL0LP+zq6CL+Wt4v3Q==,mds_namespace=myfs 10.98.81.9:6789,10.98.168.211:6789,10.108.58.246:6789:/ /media/</p>
<p>其中的name还有secret是在/etc/ceph/keyring文件中</p>
<p>mds_namespace是ceph -s中mds的名称，后面的地址为/etc/ceph/ceph.conf的ceph集群路径</p>
<p>挂载的路径是 /media/下</p>
<h3 id="故障排查"><a href="#故障排查" class="headerlink" title="故障排查"></a>故障排查</h3><ul>
<li>最基本查看ceph -s</li>
<li>容器<ul>
<li>mds的容器</li>
<li>对接时候的驱动日志<ul>
<li>csi-cephfsplugin-provisioner-xxxx</li>
<li>csi-cephfsplugin-xxx</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Rook</category>
      </categories>
      <tags>
        <tag>ceph</tag>
        <tag>Rook</tag>
        <tag>cephfs</tag>
      </tags>
  </entry>
  <entry>
    <title>dashboard</title>
    <url>/2022/01/07/rook/dashboard/</url>
    <content><![CDATA[<ol>
<li><p>使用ceph中的dashboard-external-https.yaml,<strong>注意不是dashboard-external-http.yaml</strong></p>
</li>
<li><p>apply一下</p>
</li>
<li><p>访问对应地址，注意要使用https</p>
</li>
<li><p>默认账户</p>
<p>username：admin</p>
<p>password在rook-ceph中的rook-ceph-dashboard-password（secrets）</p>
<p>密码也是经过bas464加密的，使用需要解密</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Rook</category>
      </categories>
      <tags>
        <tag>ceph</tag>
        <tag>dashboard</tag>
        <tag>Rook</tag>
      </tags>
  </entry>
  <entry>
    <title>Rook对象存储</title>
    <url>/2022/01/07/rook/rook-%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/</url>
    <content><![CDATA[<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>在rook/cluster/examples/kubernetes/ceph中的object.yaml</p>
<h3 id="高可用部署"><a href="#高可用部署" class="headerlink" title="高可用部署"></a>高可用部署</h3><p>直接在object.yaml中修改instance的个数</p>
<p><font color=red>之前原生ceph的rgw我们做负载均衡的话需要haproxy，但是对于rook的话因为本身service就是负载均衡的，因此不需要做任何操作就可以直接达到负载均衡的效果</font></p>
<h3 id="调整"><a href="#调整" class="headerlink" title="调整"></a>调整</h3><p>和cephFS的调整类似</p>
<h3 id="连接外部集群"><a href="#连接外部集群" class="headerlink" title="连接外部集群"></a>连接外部集群</h3><p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210710232359.png" alt="image-20210710232359149"></p>
<p><strong>注意：</strong></p>
<p>这个外部ceph集群也必须是rook搭建的！！！！！！</p>
<h3 id="创建bucekt"><a href="#创建bucekt" class="headerlink" title="创建bucekt"></a>创建bucekt</h3><ol>
<li><p>创建storageclass</p>
<p>在ceph下面的storageclass-bucket-delete.yaml</p>
</li>
<li><p>创建对应的bucket</p>
<p>在ceph下面的object-bucket-claim-delete.yaml</p>
</li>
<li><p>效果如下</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210710234254.png" alt="image-20210710234254323"></p>
</li>
</ol>
<h3 id="访问bucekt"><a href="#访问bucekt" class="headerlink" title="访问bucekt"></a>访问bucekt</h3><ol>
<li><p>找到bucket对应的endpoint</p>
<p><code>kubectl get configmaps ceph-delete-bucket -o yaml</code></p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210710234827.png" alt="image-20210710234827049"></p>
<ol start="2">
<li><p>找到对应的ak与sk</p>
<p><code>kubectl get secret</code></p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210710235108.png" alt="image-20210710235101347"></p>
<p><strong>注意：ak与sk不能直接使用，需要base64解码一下</strong></p>
</li>
</ol>
<h3 id="外部访问对象存储"><a href="#外部访问对象存储" class="headerlink" title="外部访问对象存储"></a>外部访问对象存储</h3><p><strong>注意直接修改rook-ceph-rgw-my-store服务为NodePort是不生效的（具体原因未知）</strong></p>
<p>直接启用ceph中的rgw-external.yaml文件，会得到一个NodePort的svc</p>
<h3 id="创建rgwUser"><a href="#创建rgwUser" class="headerlink" title="创建rgwUser"></a>创建rgwUser</h3><p>使用ceph中的object-user.yaml</p>
<p>可以看到会创建一个rgw user用户</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210711001340.png" alt="image-20210711001340002"></p>
<p>同样的获取ak和sk是使用</p>
<p><code>kubectl get secrets rook-ceph-object-user-my-store-my-user -n rook-ceph -o yaml</code></p>
<p>里面获取的ak和sk同样需要base64解密一下</p>
]]></content>
      <categories>
        <category>Rook</category>
      </categories>
      <tags>
        <tag>ceph</tag>
        <tag>Rook</tag>
        <tag>对象存储</tag>
      </tags>
  </entry>
  <entry>
    <title>rook调度策略</title>
    <url>/2022/01/07/rook/rook%E8%B0%83%E5%BA%A6%E7%AD%96%E7%95%A5/</url>
    <content><![CDATA[<h3 id="出现的原因"><a href="#出现的原因" class="headerlink" title="出现的原因"></a>出现的原因</h3><p>不同组件对于机器的要求不一样，比如说mds对于CPU要求比较高，磁盘此致</p>
<p>相反osd节点对于磁盘和内存要求较高，CPU此致，因此在规划的时候需要根据不同的配置分配不同的节点</p>
<h3 id="rook提供的策略"><a href="#rook提供的策略" class="headerlink" title="rook提供的策略"></a>rook提供的策略</h3><ul>
<li><p>nodeAffinity</p>
<p>节点亲和力调度，根据label选择合适的调度节点</p>
</li>
<li><p>podAffinity</p>
<p>pods亲和力调度，将pods调度到具有相同性质类型的节点上</p>
</li>
<li><p>podAntiAffinity</p>
<p>pods反亲和力调度，将pods调度到与某些pods相反的节点</p>
</li>
<li><p>topologySpreadConstraints</p>
<p>拓扑选择调度</p>
</li>
<li><p>tolerations</p>
<p>污点容忍调度，允许调度到某些具有“污点”的节点上</p>
</li>
</ul>
<h3 id="rook支持的调度对象"><a href="#rook支持的调度对象" class="headerlink" title="rook支持的调度对象"></a>rook支持的调度对象</h3><ul>
<li>mon</li>
<li>mgr</li>
<li>osd</li>
<li>cleanup</li>
</ul>
<h3 id="定制mon调度参数"><a href="#定制mon调度参数" class="headerlink" title="定制mon调度参数"></a>定制mon调度参数</h3><p>修改cluster.yaml文件中的</p>
<ol>
<li></li>
</ol>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210710120641.png" alt="image-20210710120636703" style="zoom:50%;" />

<ol start="2">
<li><img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210710120723310.png" alt="image-20210710120723310" style="zoom:50%;" />

<p>这两个需要设为false </p>
</li>
<li><p>给符合条件的节点打上标签</p>
<p><code>kubectl label node node-1 ceph-mon = enabled</code></p>
</li>
</ol>
<h3 id="定制mgr调度参数"><a href="#定制mgr调度参数" class="headerlink" title="定制mgr调度参数"></a>定制mgr调度参数</h3> <img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210710122610.png" alt="image-20210710122606370" style="zoom:50%;" />

<p>基础的和mon调度参数设置类似，就是需要将mon改为mgr</p>
<h3 id="定制osd调度参数"><a href="#定制osd调度参数" class="headerlink" title="定制osd调度参数"></a>定制osd调度参数</h3><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210710123243.png" alt="image-20210710123236989" style="zoom:50%;" />

<p>注意：</p>
<ol>
<li>name需要是节点的标识，而不是ip地址</li>
<li>devcies<ul>
<li>name 磁盘名称</li>
<li>config 如果不自己设置，那么会默认使用第一个红色箭头指向的config中的设置，其里面的字段都可以在下面的中自己进行设置</li>
</ul>
</li>
</ol>
<p>注意：上面设置完之后就可以创建osd了，如果需要配合label的话往下看：</p>
<p>和mon还有mgr一样</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210710123649.png" alt="image-20210710123644331" style="zoom:50%;" />



<p>如果使用了和mon还有mgr定制参数的一样的方法配置，那么需要将对应节点打上对应的标签，否则即使设置了osd中的nodes的参数，同样也是无法生效的，因为必须在满足标签的前提下，才会去执行osd中nodes的参数</p>
]]></content>
      <categories>
        <category>Rook</category>
      </categories>
      <tags>
        <tag>ceph</tag>
        <tag>Rook</tag>
      </tags>
  </entry>
  <entry>
    <title>外部访问ceph集群</title>
    <url>/2022/01/07/rook/%E5%A4%96%E9%83%A8%E8%AE%BF%E9%97%AEceph%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<ol>
<li><p>进入到toolbox容器中，将/etc/ceph/ceph.conf 和 /etc/ceph/keyring复制到宿主机上</p>
</li>
<li><p>安装对应的ceph客户端</p>
<ol>
<li><p>安装对应版本的yum源 </p>
</li>
<li><p>安装客户端</p>
<p><code>yun install ceph-common -y</code></p>
<p><font color=red>注意:</font></p>
<ul>
<li>el7 是Red Hat 7.x、CentOS 7.x 的下载</li>
<li>el8 是Red Hat 8.x、CentOS 8.x 的下载</li>
</ul>
</li>
</ol>
</li>
<li><p>执行ceph -s</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Rook</category>
      </categories>
      <tags>
        <tag>ceph</tag>
        <tag>Rook</tag>
      </tags>
  </entry>
  <entry>
    <title>Rook定制资源限制</title>
    <url>/2022/01/07/rook/%E5%AE%9A%E5%88%B6%E8%B5%84%E6%BA%90%E9%99%90%E5%88%B6/</url>
    <content><![CDATA[<h3 id="定制资源限制的原因"><a href="#定制资源限制的原因" class="headerlink" title="定制资源限制的原因"></a>定制资源限制的原因</h3><p>因为如果在一个节点上既有osd又有mon还有mds，没有设置资源限制的话会导致</p>
<p>比如说osd占用的资源过大，有可能讲mon或者mgr的资源驱逐掉</p>
<p>==一句话就是可能会发生资源争抢的现象，从而导致有些核心资源被驱逐==</p>
<p>因此<strong>非常有必要确保各个组件分配到足够的资源</strong></p>
<h3 id="设置资源限制参数"><a href="#设置资源限制参数" class="headerlink" title="设置资源限制参数"></a>设置资源限制参数</h3><p>在cluster.yaml文件中进行设置</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210710125553.png" alt="image-20210710125552307"></p>
<p><font color=red>注意</font></p>
<ul>
<li><p>mon和mgr还有osd在设置完资源限制参数之后会==自动重启==，因此可以在创建之后进行设置，但是osd重启的速度==比较慢==</p>
</li>
<li><p>mon 生产环境内存推荐128G</p>
</li>
<li><p>osd 生产环境每T磁盘建议需要有4G内存，对于CPU的要求也比较高</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Rook</category>
      </categories>
      <tags>
        <tag>ceph</tag>
        <tag>Rook</tag>
      </tags>
  </entry>
  <entry>
    <title>清理rook集群</title>
    <url>/2022/01/07/rook/%E6%B8%85%E7%90%86rook%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<ol>
<li><p>删除yaml资源文件</p>
</li>
<li><p>删除对应的各个节点下的/var/lib/rook/文件</p>
</li>
<li><p>清理osd的盘</p>
<ul>
<li>lvs</li>
<li>vgs</li>
<li>vgremove 出现的盘</li>
<li>pvs</li>
<li>pvremove 出现的盘</li>
</ul>
</li>
<li><p>如果发现namespace中还是有rook-ceph</p>
<p>按下面执行</p>
<ol>
<li><p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210707225957.png" alt="image-20210707225957871"></p>
</li>
<li><p>删除红色箭头指向的字段（有两个红色箭头执行的都要删除掉）</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210707230055.png" alt="image-20210707230055096"></p>
</li>
</ol>
</li>
<li><p>osd对应磁盘的清理</p>
<p><a href="https://rook.io/docs/rook/v1.4/ceph-teardown.html">参考</a></p>
<p>​    </p>
</li>
</ol>
]]></content>
      <categories>
        <category>Rook</category>
      </categories>
      <tags>
        <tag>ceph</tag>
        <tag>Rook</tag>
      </tags>
  </entry>
  <entry>
    <title>Rook调优</title>
    <url>/2022/01/07/rook/%E8%B0%83%E4%BC%98/</url>
    <content><![CDATA[<h3 id="临时调整ceph参数"><a href="#临时调整ceph参数" class="headerlink" title="临时调整ceph参数"></a>临时调整ceph参数</h3><p>和以前的配置差不多，主要你需要调整哪一个组件，那么就去哪一个组件的容器中去调整。</p>
<p>比如说我要调整mon中的配置信息，那么可以进入到mon的容器中</p>
<p>在/var/run/ceph 中有对应的xxx.asok</p>
<p><code>ceph --admin-daemon ceph-mon.a.asok config show</code></p>
<p>就可以展示出ceph的配置</p>
<p>mgr、rgw都类似</p>
<p><font color=red>需要注意的一点就是如果/etc/ceph路径下如果没有keyring文件的话是没有权限访问的，例如osd的pod中就没有，因此无法直接使用上面的命令连接到集群</font></p>
<p>每一个同种类型对应的容器都需要修改，如果需要修改的话</p>
<p><strong>当然上面的调整参数都是临时生效的，容器一但重启那么就会失效</strong></p>
<h3 id="永久调整ceph参数"><a href="#永久调整ceph参数" class="headerlink" title="永久调整ceph参数"></a>永久调整ceph参数</h3><p>使用<code>kubectl get configmaps -n rook-ceph</code></p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210711200508.png" alt="image-20210711200508121"></p>
<p>红色箭头指向的就是ceph的配置文件</p>
<p>我们可以在里面的data中进行修改，默认data是空的</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210711200642.png" alt="image-20210711200617291"></p>
<p>红色箭头执指向的区域就是我们修改配置文件的地方</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210711200817.png" alt="image-20210711200817601"></p>
<p>最终将这个文件apply一下就可以</p>
<p><strong>注意：配置完之后需要将每个组件进行重启：mon、mds、mgr、rgw、osd</strong></p>
<p><font color=red>除了osd之外每个容器在重启的时候最好一个一个重启, 等<code>ceph -s</code>为health的时候再进行下一个的重启osd一个一个重启，当重启一个osd之后需要等待所有的pg都是active+clean才能重启下一个</font></p>
<h3 id="生产环境中的参数"><a href="#生产环境中的参数" class="headerlink" title="生产环境中的参数"></a>生产环境中的参数</h3><p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210711202212.png" alt="image-20210711202212433"></p>
]]></content>
      <categories>
        <category>Rook</category>
      </categories>
      <tags>
        <tag>ceph</tag>
        <tag>Rook</tag>
      </tags>
  </entry>
  <entry>
    <title>Rook简介</title>
    <url>/2022/01/07/rook/%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>可以在k8s之上部署存储集群</p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol>
<li><p>简单可靠</p>
</li>
<li><p>超融合解决方案</p>
</li>
<li><p>减少数据丢失</p>
</li>
<li><p>块、文件、对象存储</p>
</li>
</ol>
<h3 id="Rook架构"><a href="#Rook架构" class="headerlink" title="Rook架构"></a>Rook架构</h3><p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210707153959.png" alt="image-20210707153958257"></p>
]]></content>
      <categories>
        <category>Rook</category>
      </categories>
      <tags>
        <tag>ceph</tag>
        <tag>Rook</tag>
      </tags>
  </entry>
  <entry>
    <title>rook运维</title>
    <url>/2022/01/07/rook/%E8%BF%90%E7%BB%B4rook/</url>
    <content><![CDATA[<ol>
<li><p>出现==Unauthorized==关键字</p>
<p>pkg/mod/k8s.io/<a href="mailto:&#99;&#x6c;&#x69;&#x65;&#110;&#116;&#x2d;&#103;&#x6f;&#x40;&#x76;&#48;&#x2e;&#x32;&#x31;&#x2e;&#49;">&#99;&#x6c;&#x69;&#x65;&#110;&#116;&#x2d;&#103;&#x6f;&#x40;&#x76;&#48;&#x2e;&#x32;&#x31;&#x2e;&#49;</a>/tools/cache/reflector.go:167: Failed to watch *v1.CephClient: failed to list *v1.CephClient: Unauthorized</p>
<p>pkg/mod/k8s.io/<a href="mailto:&#99;&#x6c;&#x69;&#x65;&#x6e;&#x74;&#x2d;&#103;&#x6f;&#64;&#x76;&#x30;&#46;&#x32;&#x31;&#46;&#49;">&#99;&#x6c;&#x69;&#x65;&#x6e;&#x74;&#x2d;&#103;&#x6f;&#64;&#x76;&#x30;&#46;&#x32;&#x31;&#46;&#49;</a>/tools/cache/reflector.go:167: Failed to watch *v1.CephObjectZoneGroup: failed to list *v1.CephObjectZoneGroup: Unauthorized</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210710142127.png" alt="image-20210710142122930"></p>
<p>重启ceph-operator</p>
<p><a href="https://github.com/rook/rook/issues/2447#issuecomment-453618001">参考</a></p>
</li>
<li><p>MON_CLOCK_SKEW: clock skew detected on mon.b, mon.c</p>
<p>重启对应的mon</p>
<p><a href="https://github.com/rook/rook/issues/2286">参考</a></p>
</li>
<li><p>mgr出现verify_authorizer could not get service secret for service mgr secret_id=877</p>
<p>说明osd的密钥在mgr中已经丢失了，有可能是因为rook-ceph-osd-prepare-xxxx pod重启造成从</p>
<p>解决方法就是重启mgr</p>
</li>
<li><p>monclient: get_monmap_and_config failed to get config </p>
<p>多半是因为集群中主机时间不同步造成的</p>
</li>
<li><p>mon b is low on available space</p>
<p>mon节点所在的目录使用率&gt;70%</p>
<p><a href="https://github.com/rook/rook/issues/2197#issuecomment-700382136">参考</a></p>
<p>查看mon节点所在目录，并使用<code>df -h mon节点所在目录</code>查看使用率</p>
<p>解决方法：</p>
<p><a href="https://blog.csdn.net/weixin_33928137/article/details/92440552">https://blog.csdn.net/weixin_33928137/article/details/92440552</a></p>
</li>
<li><p>如果将mon节点全部删除，那么将会产生mon的容器中没有/etc/ceph/ceph.conf和keyring文件</p>
</li>
<li><p>可以进行全局配置，就是将rook的configmap进行重写</p>
<p>步骤如下：</p>
<ol>
<li><p><code>kubectl get configmap -n rook-ceph</code></p>
</li>
<li><p><code>kubectl edit configmap rook-config-override -n rook-ceph</code></p>
</li>
<li><p>修改配置，主要就是configmap中的data中的config部分</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">config:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    [global]</span></span><br><span class="line"><span class="string">    mon clock drift allowed = 0.1</span></span><br><span class="line"><span class="string">    mon data avail warn = 20</span></span><br><span class="line"><span class="string">    mon_host = 10.104.38.147:6789,10.100.209.232:6789,10.97.178.3:6789</span></span><br><span class="line"><span class="string">    [client.admin]</span></span><br><span class="line"><span class="string">    key = AQBogUxhw5d4LhAA9OQJz/M8KYB6aTw1mwXyYA==</span></span><br><span class="line"><span class="string"></span><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="string">&quot;2021-09-23T13:30:15Z&quot;</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rook-config-override</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">rook-ceph</span></span><br><span class="line">  <span class="attr">ownerReferences:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiVersion:</span> <span class="string">ceph.rook.io/v1</span></span><br><span class="line">    <span class="attr">blockOwnerDeletion:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">controller:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">CephCluster</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">rook-ceph</span></span><br><span class="line">    <span class="attr">uid:</span> <span class="string">3eb5ea68-7a94-4a8e-8427-c87f09f549b5</span></span><br><span class="line">  <span class="attr">resourceVersion:</span> <span class="string">&quot;31217&quot;</span></span><br><span class="line">  <span class="attr">uid:</span> <span class="number">53480358</span><span class="string">-ca6b-4a4a-be2d-02eed86e79a9</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>重启所有的mon节点就会生效</p>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>Rook</category>
      </categories>
      <tags>
        <tag>ceph</tag>
        <tag>Rook</tag>
      </tags>
  </entry>
  <entry>
    <title>Internet接入控制</title>
    <url>/2022/01/07/%E5%AF%86%E7%A0%81%E5%AD%A6/Internet%E6%8E%A5%E5%85%A5%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<ol>
<li><p>接入过程</p>
<ul>
<li>建立终端A与接入控制设备之间的传输路径</li>
<li>接入控制设备完成身份鉴别过程</li>
<li>动态配置终端A的网络信息</li>
<li>动态创建终端A的网络路由项</li>
</ul>
</li>
<li><p>控制接入协议</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210106202245.png" alt="image-20210106202241082" style="zoom:50%;" /></li>
<li><p>扩展鉴别协议EAP产生背景</p>
<p>由于各种链路层协议需要支持每一中鉴别协议，导致现阶段这种解决方案越来越复杂。</p>
<p>EAP是一种与应用环境无关的，用户传输鉴别协议消息的载体协议，所有应用环境与鉴别协议都和这种载体协议绑定。</p>
<p>作用：它的出现使得链路层载体协议与鉴别协议机制得以解耦。</p>
<p>EAP报文格式 ：</p>
<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210106212050316.png" alt="image-20210106212050316" style="zoom:50%;" />

<p>在标识符字段中需要注意：</p>
<p>要求两次相邻请求的报文中的标识符不一样，用来应对重放攻击。</p>
</li>
<li><p>802.1X鉴别接入用户身份过程</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210106212917.png" alt="image-20210106212912871" style="zoom:50%;" /></li>
<li><p>以太网接入控制过程</p>
<ol>
<li>当某个用户希望接入Internet时，通过发送EAPOL-Start发起鉴别过程</li>
<li>一旦成功完成用户身份鉴别，交换机将该终端的MAC地址列入接收到EAP报文端口对应的访问控制列表并将访问控制设置为允许访问。</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>密码学</tag>
      </tags>
  </entry>
  <entry>
    <title>公钥密码</title>
    <url>/2022/01/07/%E5%AF%86%E7%A0%81%E5%AD%A6/%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<h3 id="公钥密码的体现"><a href="#公钥密码的体现" class="headerlink" title="公钥密码的体现"></a>公钥密码的体现</h3><h4 id="公钥密码体制的核心思想：加密和解密采用不同的密钥。这是公钥密码体制和对称密码体制最大的区别。"><a href="#公钥密码体制的核心思想：加密和解密采用不同的密钥。这是公钥密码体制和对称密码体制最大的区别。" class="headerlink" title="公钥密码体制的核心思想：加密和解密采用不同的密钥。这是公钥密码体制和对称密码体制最大的区别。"></a><font color=red>公钥密码体制的核心思想：加密和解密采用不同的密钥。这是公钥密码体制和对称密码体制最大的区别。</font></h4><ol>
<li><p>RSA（安全性依赖于大整数因子分解的困难性）</p>
<ul>
<li><p>数学知识</p>
<ul>
<li><p>欧拉函数</p>
<p>对于素数p，ϕ ( p) = p −1。对于两个<font color=red>素数</font>p、q，他们的乘积n = p×q满足：z</p>
<pre><code>                     ϕ(n)=(p −1)×(q −1)
</code></pre>
<p> ϕ(n)为&lt;n的素数个数</p>
</li>
<li><p>欧拉定理</p>
<p>若a和n互素，ϕ (n)为欧拉函数，则：</p>
<pre><code>              a&lt;sup&gt;ϕ (n)&lt;/sup&gt; ≡ 1 (mod n)
</code></pre>
</li>
<li><p>如何计算模的逆</p>
<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210104203621923.png" alt="image-20210104203621923" style="zoom:50%;" /></li>
</ul>
</li>
</ul>
</li>
</ol>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210104204003.png" alt="image-20210104203957296" style="zoom:50%;" />



<ul>
<li><p>RSA加密和解密</p>
<ul>
<li>选定两个大<strong>素数</strong>p与q</li>
<li>计算n=p$\times$q， ϕ (n) =( p −1)×(q −1); n公开, ϕ (n)保密</li>
<li>随机选一整数e, 满足1&lt;e&lt;ϕ (n), 且<pre><code>                gcd(ϕ(n), e) =1;（e公开）
</code></pre>
</li>
<li>计算d，满足<pre><code>                d ×e ≡ 1 (mod ϕ(n)) ;       (d保密)
</code></pre>
</li>
<li>也就是说保密的有2个（ ϕ (n)与d）</li>
<li>公开的也有两个（n与e）</li>
</ul>
<blockquote>
<p>加密算法</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210104204742.png" alt="image-20210104204740160"></p>
<blockquote>
<p>解密算法</p>
</blockquote>
<p>![image-20210104204758722](/Users/cooper/Library/Application Support/typora-user-images/image-20210104204758722.png)</p>
</li>
<li><p>适用场景</p>
<p>(1) 解决大规模网络应用中密钥分发和管理问题<br>(2) 实现网络中的数字签名机制<br>(3) 加密短小消息</p>
</li>
</ul>
<ol start="2">
<li><p>ElGamal公钥密码体制</p>
<p>与RSA相比：</p>
<ul>
<li><p>优点</p>
<p>私钥不需要进行计算，是随机选择的</p>
<p>可以有效防止重放攻击</p>
</li>
<li><p>缺点</p>
<p>计算量大，且密文成倍扩张</p>
</li>
</ul>
</li>
<li><p>椭圆曲线密码体质</p>
<ul>
<li><p>优点</p>
<p>安全性能更高</p>
<p>计算量小，处理速度快</p>
<p>存储空间占用小</p>
<p>带宽要求低</p>
</li>
<li><p>找点方法</p>
<ol>
<li><p>满足该公式即在椭圆上：<font color=red>y2 ≡ x3+ax+b (mod p)</font></p>
</li>
<li><p>必须都是整数点，从0开始一直到p-1结束，一个一个试</p>
</li>
<li><p>找到一个点之后例如为 P = (3，10) ∈ E23(1，1) </p>
<pre><code>  因为  −P = (3，−10)
            −10 (mod 23) ≡13
  所以  −P = (3，13)，也在E23(1，1)上
</code></pre>
<p>按照上面的方法找到第二个点</p>
</li>
</ol>
</li>
</ul>
</li>
<li><p>消息认证码（密码校验和）</p>
<ul>
<li><p>使用方式</p>
<p>A与B共享密钥K，A发送消息给B，A会将消息以及使用该消息计算得出的MAC一起发送给B，B收到后与A做相同的计算，求得一新的MAC，并与收到的MAC做比较。</p>
</li>
<li><p>功能</p>
<ol>
<li>接收方相信发送方发来的消息未被篡改</li>
<li>接收方相信发送方不是冒充的</li>
</ol>
</li>
</ul>
</li>
<li><p>为什么说MD5是加密算法是错误的？</p>
<p>MD5经过加密之后无法再经过任何算法还原回去。所以，既然不能将数据还原，也就不能称之为可以解密；既然不能解密，那么哈希的过程自然也就不能称作是加密</p>
</li>
<li><p>Diffie-Hellman密钥交换</p>
<ul>
<li><p>算法</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210108144042.png" alt="image-20210108144036254" style="zoom:50%;" /></li>
<li><p>缺点</p>
<p>对于中间人攻击很脆弱</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210108144150.png" alt="image-20210108144145259" style="zoom:50%;" /></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>密码学</tag>
      </tags>
  </entry>
  <entry>
    <title>分组密码</title>
    <url>/2022/01/07/%E5%AF%86%E7%A0%81%E5%AD%A6/%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<ol>
<li><p>DES</p>
<ul>
<li><p>结构</p>
<p>明文分组长度为64bit。<br>密文分组长度为64bit。<br>初始密钥长度为64bit。（其中，第8、16、24、32、40、48、56、64为奇偶校验位，因此，实际的密钥长为56bit。）</p>
</li>
<li><p>加密过程</p>
<ol>
<li>初始置换IP（重排明文分组的64bit数据） 有相应的置换表</li>
<li>具有相同功能的16轮迭代：每轮中都有置换和代换，第16轮变换的输出分为左右两半，并交换次序</li>
<li>逆初始置换IP<sup>-1</sup>:将第16轮迭代的输出经过逆初始置换IP<sup>-1</sup>处理得到密文C</li>
</ol>
</li>
<li><p>几个重要的步骤</p>
<ol>
<li><p>S盒代换（<font color=red>DES算法保密的关键在于S盒！</font>）</p>
<p>轮函数中的代换由8个S盒组成，每个S盒的输入长度为6位，输出长为4位。</p>
<p>S<sub>1</sub>的输入为011001，其中收尾组成的数字为行数（01），中间组成的为列数（1100），替换之后的数组为S盒的第一行第八列（1，12）。 </p>
<p>注：行和列的序号都是从0开始的</p>
</li>
</ol>
</li>
<li><p>DES解密</p>
<p>当64 bit密文作为明文输入时，解密过程的第1轮迭代使用子密钥K16，第2轮迭代使用子密钥K15，…，第16轮迭代使用子密钥K1，结果输出得到64 bit明文。</p>
</li>
<li><p>缺点</p>
<ul>
<li><p>难以抵挡穷举搜索攻击</p>
</li>
<li><p>S盒设计中可能包含==陷门==</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>AES</p>
<ul>
<li><p>结构</p>
<p>分组长度：128bit（192bit、256bit）</p>
<p>密钥长度：128bit（192bit、256bit）</p>
<p>状态：可以用以字节为元素的矩阵表示，该矩阵有4行，列数记为N<sub>b</sub>，N<sub>b</sub>等于分组长度除以32</p>
<p>种子密钥：用一个以字节为元素的矩阵表示，该矩阵有4行，列数记为N<sub>k</sub>，N<sub>k</sub>等于分组长度除以32</p>
</li>
<li><p>详细过程</p>
<p>迭代的轮数是与N<sub>b</sub>以及N<sub>k</sub>有关（有一张表）</p>
<p>当N<sub>b</sub>=4的时候，整个算法由10轮组成，每轮由4个变换模块组成：</p>
<ul>
<li>字节代换</li>
<li>行移位</li>
<li>列混合</li>
<li>轮密钥加</li>
</ul>
<p><strong>最后一轮略有不同，没有列混合</strong></p>
</li>
<li><p>加密过程</p>
<ol>
<li><p>初始轮密钥加</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210104193848.png" alt="image-20210104193844959" style="zoom:50%;" /></li>
<li><p>N<sub>r-1</sub>轮迭代 （主要包括上面所说的详细过程，其中轮迭代中的密钥K<sub>i</sub>是K<sub>0</sub>通过密钥扩展算法产生的）</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210104193834.png" alt="image-20210104193828570" style="zoom:50%;" /></li>
<li><p>最后一轮变换</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210104193834.png" alt="image-20210104193810995" style="zoom:50%;" /></li>
</ol>
</li>
<li><p>变换函数</p>
<ul>
<li><p>字节代替变换 </p>
<p>可以通过S盒得到</p>
<p>对于已知的某一字节作为S盒的输入，把该字节的高4位作为行号，低4位作为列号，查表取出S盒中对应行列交叉点的元素作为输出。</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210104194153.png" alt="image-20210104194148925" style="zoom:50%;" /></li>
<li><p>行移位变换</p>
<p>第一行：保持不变<br>第二行：循环左移一个字节<br>第三行：循环左移两个字节<br>第四行：循环左移三个字节</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210104194259.png" alt="image-20210104194253969" style="zoom:50%;" /></li>
<li><p>列混合变换</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210104194345.png" alt="image-20210104194340132" style="zoom:50%;" /></li>
<li><p>轮密钥加变换</p>
<p>轮密钥K<sub>i</sub>简单地与状态State进行逐比特异或。</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>分组密码的工作模式</p>
<ul>
<li>电码本模式</li>
<li>密文分组连接模式</li>
<li>密文反馈模式</li>
<li>输出反馈模式</li>
<li>计数器模式</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>密码学</tag>
      </tags>
  </entry>
  <entry>
    <title>对称密码</title>
    <url>/2022/01/07/%E5%AF%86%E7%A0%81%E5%AD%A6/%E5%AF%B9%E7%A7%B0%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<ol>
<li><p>组成成分</p>
<ul>
<li>明文</li>
<li>加密算法</li>
<li>密钥</li>
<li>密文</li>
<li>解密算法</li>
</ul>
</li>
<li><p>运算类型</p>
<p>置换与替代</p>
</li>
<li><p>Playfair密码</p>
<p><a href="https://www.bilibili.com/video/BV1zE411i7TU?from=search&seid=16299936020870747211">参考</a></p>
</li>
<li><p>Hill密码</p>
</li>
</ol>
]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>密码学</tag>
      </tags>
  </entry>
  <entry>
    <title>模运算</title>
    <url>/2022/01/07/%E5%AF%86%E7%A0%81%E5%AD%A6/%E6%95%B0%E5%AD%A6%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<ol>
<li><p>模运算</p>
<ul>
<li><p>模的幂运算</p>
<p>求11<sup>7</sup> mod 13</p>
<p>11<sup>2</sup> = 121 ≡ 4 (mod 13)<br>11<sup>4</sup> = (11<sup>2</sup>)<sup>2</sup> ≡ 4<sup>2</sup> ≡ 3 (mod 13)<br>11<sup>7</sup> ≡ 11×4×3 ≡ 132 ≡ 2 (mod 13)</p>
</li>
<li><p>模的乘法逆元</p>
<p>对于整数a和正整数n，当gcd(a, n)=1时存在整数c，使得</p>
<pre><code>    ac ≡ 1 (mod n)
</code></pre>
<p>称c为a关于模n的乘法逆元，记为a<sup>-1</sup>。</p>
</li>
<li><p>多项式模运算</p>
<p><a href="https://blog.csdn.net/qq_44840079/article/details/104963985">参考</a></p>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>密码学</tag>
      </tags>
  </entry>
  <entry>
    <title>无线局域网安全</title>
    <url>/2022/01/07/%E5%AF%86%E7%A0%81%E5%AD%A6/%E6%97%A0%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91%E5%AE%89%E5%85%A8/</url>
    <content><![CDATA[<ol>
<li><p>802.11i分配密钥</p>
<ul>
<li>wep只做单向鉴别，但是802.11i做双向鉴别</li>
</ul>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210107154359.png" alt="image-20210107154354252" style="zoom:50%;" />

<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210107154734.png" alt="image-20210107154728866" style="zoom:50%;" /></li>
</ol>
<p>密钥分配过程：</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210107162119.png" alt="image-20210107162113834" style="zoom:50%;" />

]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>密码学</tag>
      </tags>
  </entry>
  <entry>
    <title>网络安全协议</title>
    <url>/2022/01/07/%E5%AF%86%E7%A0%81%E5%AD%A6/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<h3 id="安全体系结构"><a href="#安全体系结构" class="headerlink" title="安全体系结构"></a>安全体系结构</h3><p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210106182607.png" alt="image-20210106182605897"></p>
<h3 id="IPSec"><a href="#IPSec" class="headerlink" title="IPSec"></a>IPSec</h3><blockquote>
<p>组成部分</p>
</blockquote>
<ul>
<li><p>安全关联  SA</p>
<p>与特定通信保护相关联的安全套件集合<br>SA保护单向通信<br>安全关联唯一标识：（安全参数索引（SPI），目的IP地址，安全协议标识符）</p>
<p><strong>如果双方想要通信，必须使用两个SA</strong></p>
<p>小型网络的话可以手动设置</p>
<p>大型网络的话可以通过IKE协议来设置策略</p>
</li>
<li><p>AH（验证算法）</p>
<p>数据完整性验证<br>数据源身份认证<br>防重放攻击</p>
</li>
<li><p>ESP（加密算法）</p>
<p>在AH的基础了增加了加密功能</p>
</li>
<li><p>IKE（策略商量）</p>
</li>
</ul>
<blockquote>
<p>传输模式</p>
</blockquote>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210106155353.png" alt="image-20210106155348920" style="zoom:50%;" />

<p>​    由于ESP只能认证ESP报头到ESP尾部的消息，因此可以添加AH作为其余部分的认证</p>
<blockquote>
<p>隧道模式</p>
</blockquote>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210106155800.png" alt="image-20210106155755812" style="zoom:50%;" />

<p>​    与传输模式相比就是多了一个<font color=red>新的IP报头</font></p>
<h3 id="AH协议"><a href="#AH协议" class="headerlink" title="AH协议"></a>AH协议</h3><p>结构如下：</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210106170022.png" alt="image-20210106170017735" style="zoom:50%;" />

<ul>
<li><p>下一个头</p>
<p>表示紧跟在AH头部的下一个载荷的类型</p>
<p>传输模式下：该字段是处于保护中的传输层协议的值，比如6（TCP）、17（UDP）或者50（ESP）</p>
<p>隧道模式下：AH所保护的是整个IP包，该值是4，表示IP-in-IP协议</p>
</li>
<li><p>负载长度</p>
<p>AH的载荷长度</p>
</li>
<li><p>保留域</p>
<p>将来使用</p>
</li>
<li><p>安全参数索引</p>
<p>与源地址或目的地址以及AH来共同唯一标识一个安全关联（SA）</p>
</li>
<li><p>序列号</p>
<p>抵抗重放攻击</p>
</li>
<li><p>验证数据</p>
<p>是可变长的字段，包含数据包的认证数据——完整性校验值</p>
</li>
</ul>
<h3 id="ESP协议"><a href="#ESP协议" class="headerlink" title="ESP协议"></a>ESP协议</h3><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210106170627.png" alt="image-20210106170622405" style="zoom:50%;" />

<ul>
<li><p>安全参数索引</p>
<p>与目的IP地址、协议一起组成的三元组可以为该IP包唯一地确定一个SA</p>
</li>
<li><p>序列号</p>
<p>抵抗重放攻击</p>
</li>
<li><p>变长</p>
<p>包含了实际的载荷数据。如果采用了加密，该部分就是加密后的密文；如果没有加密，该部分就是明文</p>
</li>
<li><p>填充</p>
<p>填充项的使用是为了保证ESP的边界适合于加密算法的需要</p>
</li>
<li><p>填充长度</p>
<p>指出上面的填充项填充了多少字节的数据，因此，接收端可以恢复出载荷数据的真实长度</p>
</li>
<li><p>下一个头</p>
<p>指明了封装在载荷中的数据类型，例如6表示TCP数据（传送模式），4表示IP-in-IP（隧道模式）</p>
</li>
<li><p>验证数据</p>
<p>它包含数据完整性检验结果（ICV）</p>
</li>
</ul>
<h3 id="IKE"><a href="#IKE" class="headerlink" title="IKE"></a>IKE</h3><ul>
<li><p>静态安全关联</p>
<p>建立机制由人工完成发送端和接收端中安全关联数据库（SAD）的配置过程。</p>
</li>
<li><p>动态安全关联</p>
<p>建立机制根据安全传输数据的需要，通过协议建立发送端至接收端的安全关联，协商与该安全关联相关的参数。</p>
<p>动态建立过程：</p>
<ol>
<li>建立安全传输通道</li>
<li>建立安全关联</li>
</ol>
</li>
</ul>
<h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><p>在TCP基础上建立TLS安全连接，经过TLS安全连接实现：</p>
<ul>
<li>对Web服务器的身份鉴别</li>
<li>浏览器和Web服务器之间传输的HTTP消息的保密性、完整性和源端鉴别</li>
</ul>
<p>建立https的过程</p>
<ul>
<li>双方约定压缩算法、加密算法、MAC算法等</li>
<li>服务器发送证书链</li>
<li>客户发送预主密钥</li>
<li>双方切换到新的安全参数</li>
<li>保密传输http消息</li>
</ul>
]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>密码学</tag>
      </tags>
  </entry>
  <entry>
    <title>身份鉴别</title>
    <url>/2022/01/07/%E5%AF%86%E7%A0%81%E5%AD%A6/%E8%BA%AB%E4%BB%BD%E9%89%B4%E5%88%AB/</url>
    <content><![CDATA[<h3 id="主体身份标识信息"><a href="#主体身份标识信息" class="headerlink" title="主体身份标识信息"></a>主体身份标识信息</h3><ul>
<li><p>密钥</p>
<p>只要主体能够证明自己拥有密钥x，其身份就可以得到证明</p>
</li>
<li><p>用户名和口令</p>
<p>为每一个授权用户分配用户名和口令，只要用户知道自己的用户名和口令则其身份可以得到证明</p>
</li>
<li><p>证书和私钥</p>
<p>证书可以证明主体x与公钥k之间的绑定关系，只要主体能够证明自己知道与公钥对应的私钥sk，则可以证明自己是主体</p>
</li>
</ul>
<h3 id="鉴别种类"><a href="#鉴别种类" class="headerlink" title="鉴别种类"></a>鉴别种类</h3><ol>
<li><p>单向鉴别</p>
<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210106195116250.png" alt="image-20210106195116250" style="zoom:50%;" />

<ul>
<li><p>基于共享密钥</p>
<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210106195924274.png" alt="image-20210106195924274" style="zoom:50%;" />

<p>两个注意点：</p>
<ol>
<li><p>随机数防止重放攻击</p>
</li>
<li><p>当主体B解密得到的内容和自己发送的内容一致，则A身份得到证明</p>
</li>
</ol>
</li>
<li><p>基于用户名和口令</p>
<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210106200326065.png" alt="image-20210106200326065" style="zoom:50%;" />

<p>1个注意点：</p>
<ol>
<li>主体A将主体B发送的随机数和自己的口令利用MD5一起发送给B，B通过计算注册用户库中的MD5（随机数+A的口令）看是否与A发送的相等，若相等则可以证明Ad身份</li>
</ol>
</li>
<li><p>基于证书和私钥</p>
<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210106200855660.png" alt="image-20210106200855660" style="zoom:50%;" />

<p>一个注意点：</p>
<ol>
<li>主体A接收到Rb之后，会使用<strong>私钥sk和解密算法</strong>对Rb进行加密，而zhutiB接收到之后会使用<strong>加密算法和公钥ak</strong>对其进行解密，若相同则A身份得到证明。</li>
</ol>
</li>
</ul>
</li>
<li><p>双向鉴别</p>
<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210106195136314.png" alt="image-20210106195136314" style="zoom:50%;" /></li>
<li><p>第三方鉴别</p>
<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210106195159996.png" alt="image-20210106195159996" style="zoom:50%;" /></li>
</ol>
<h3 id="RADIUS协议"><a href="#RADIUS协议" class="headerlink" title="RADIUS协议"></a>RADIUS协议</h3><ol>
<li><p>封装过程</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210106214014.png" alt="image-20210106214009058" style="zoom:50%;" /></li>
<li><p>消息格式与类型</p>
<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210106214159807.png" alt="image-20210106214159807" style="zoom:50%;" />

<ul>
<li><p>编码字段</p>
<p>定义消息类型</p>
</li>
<li><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210106214313.png" alt="image-20210106214307180" style="zoom:50%;" /></li>
</ul>
</li>
<li><p>鉴别过程</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210106214633.png" alt="image-20210106214629024" style="zoom:50%;" /></li>
</ol>
<h3 id="Kerberos协议"><a href="#Kerberos协议" class="headerlink" title="Kerberos协议"></a>Kerberos协议</h3><ol>
<li><p>基于共享密钥的访问控制过程</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210106215251.png" alt="image-20210106215247270" style="zoom:50%;" />



<ul>
<li><p>鉴别信息组成</p>
<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210106215407146.png" alt="image-20210106215407146" style="zoom:50%;" /></li>
</ul>
<p>​         这样做的好处是</p>
<p>​        <img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210106215505129.png" alt="image-20210106215505129" style="zoom:50%;" /></p>
<p>​        </p>
</li>
<li><p>缺陷</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210106215604.png" alt="image-20210106215559826" style="zoom:50%;" /></li>
<li><p>Kerberos协议鉴别过程  <a href="https://www.bilibili.com/video/BV1S4411q7Cw?from=search&seid=6464513544776739555">参考</a></p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210106220530.png" alt="image-20210106220525364" style="zoom:50%;" />

<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210110214445.png" alt="image-20210110214439228" style="zoom:50%;" /></li>
</ol>
]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>密码学</tag>
      </tags>
  </entry>
  <entry>
    <title>图像处理</title>
    <url>/2022/01/07/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<ol>
<li><p>卷积的作用</p>
<p>用输出图像中更亮的像素表示原始图像中存在的特征，卷积实际上可以充当一个对原图像进行二次转化，提取feature 的作用</p>
</li>
<li><p>卷积核</p>
<ul>
<li><p><strong>原始图像通过与卷积核的数学运算，可以提取出图像的某些指定特征</strong>（features)。</p>
</li>
<li><p><strong>不同卷积核，提取的特征也是不一样的。</strong></p>
</li>
<li><p><strong>提取的特征一样，不同的卷积核，效果也不一样。</strong></p>
</li>
</ul>
</li>
<li><p>池化层的作用</p>
<p>压缩，一般为选择最大值MaxPooling</p>
</li>
</ol>
]]></content>
      <categories>
        <category>机器学习 - 图像处理</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>图像处理</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode</title>
    <url>/2022/01/07/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/LeetCode/</url>
    <content><![CDATA[<ol>
<li><p>合并两个有序链表</p>
<ul>
<li>直接合并</li>
<li>递归</li>
</ul>
</li>
<li><p>在连续数列，找出总和最大的连续数列，并返回总和</p>
<p>要用一个数组来记录前面每个元素到它本身时的最大值</p>
<p>因为后面一个判断是否需要+前面的和只要与其进行比较就行了，也就是相当于隐性的判断出来某一个元素前面所有元素之和是否&gt;0</p>
</li>
</ol>
<h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><h4 id="树的深度"><a href="#树的深度" class="headerlink" title="树的深度"></a>树的深度</h4><h5 id="非递归"><a href="#非递归" class="headerlink" title="非递归"></a>非递归</h5><ul>
<li><p>定义一个QueueNode</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueueNode</span> </span>&#123;</span><br><span class="line">       TreeNode node;</span><br><span class="line">       <span class="keyword">int</span> depth;</span><br><span class="line">  </span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">QueueNode</span><span class="params">(TreeNode node, <span class="keyword">int</span> depth)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">this</span>.node = node;</span><br><span class="line">           <span class="keyword">this</span>.depth = depth;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在每一层遍历的时候得到该层的数量，也就是queue.size,然后for循环取出queue中的元素，最后对level+1</p>
</li>
</ul>
<h5 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (root.left == <span class="keyword">null</span>) <span class="keyword">return</span> minDepth(root.right) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (root.right == <span class="keyword">null</span>) <span class="keyword">return</span> minDepth(root.left) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> Math.min(minDepth(root.left), minDepth(root.right)) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="二进制运算"><a href="#二进制运算" class="headerlink" title="二进制运算"></a>二进制运算</h3><ul>
<li><p>遍历i的子集</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span>; j = (j - <span class="number">1</span>) &amp; i)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>i与j的差集</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">i^j</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>算法 - LeetCode</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>分治法</title>
    <url>/2022/01/07/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%86%E6%B2%BB%E6%B3%95/</url>
    <content><![CDATA[<p>一般来说，分治算法每次处理的时候需要返回一个值</p>
<p>分治与递归的区别</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201108163937.png" alt="image-20201108163930949"></p>
<p>分治法可以并行化操作</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>二分法</title>
    <url>/2022/01/07/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BA%8C%E5%88%86%E6%B3%95/</url>
    <content><![CDATA[<h4 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h4><ol>
<li>递归</li>
<li>循环 （更推荐） </li>
</ol>
<p>避免递归</p>
<p>万能模板</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarysearch</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;vec,<span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> end = vec.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(vec.<span class="built_in">size</span>()==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//写成start+1&lt;end是为了防止死循环</span></span><br><span class="line">    <span class="keyword">while</span>(start+<span class="number">1</span>&lt;end)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = start+(end-start)/<span class="number">2</span>;<span class="comment">//不采用start+end是为了防止两数相加过大溢出</span></span><br><span class="line">        <span class="keyword">if</span>(vec[mid]==target)&#123;</span><br><span class="line">            end = mid;<span class="comment">//此处也需要根据具体的情况作出调整</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(vec[mid]&lt;target)&#123;</span><br><span class="line">            start = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            end = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//此处根据具体的情况作出调整，例如需要求出最后出现的位置  则先判断vec[end]  </span></span><br><span class="line">    <span class="keyword">if</span>(vec[start]==target)&#123;</span><br><span class="line">        <span class="keyword">return</span> start;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(vec[end]==target)&#123;</span><br><span class="line">        <span class="keyword">return</span> end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="二分法的使用场景："><a href="#二分法的使用场景：" class="headerlink" title="二分法的使用场景："></a>二分法的使用场景：</h5><ul>
<li><p>题目可以转化为firstPosition或者lastPosition的类型就可以考虑二分法</p>
<p>二分法总是可以找到最接近target的数的下标</p>
</li>
<li><p>当O（N）时间复杂度不行时，考虑O（logn）</p>
</li>
</ul>
<h4 id="寻找两个有序数组中的第k个数"><a href="#寻找两个有序数组中的第k个数" class="headerlink" title="寻找两个有序数组中的第k个数"></a>寻找两个有序数组中的第k个数</h4><p>假设有两个数组A与B</p>
<p>A为[1,2,5,6.7]</p>
<p>B为[1,2,3,4,5]</p>
<p>现在需要寻找A、B合并之后的数组中的第4个数</p>
<h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p>比较偷懒的方法</p>
<p>直接使用C++中的merge函数将A与B合并为一个有序数组再按照顺序进行查找，时间复杂度为O(n+m)</p>
<h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>使用二分法进行查找</p>
<p>我们首先需要明确目标，是在有序数组（尽管查找之前需要合并）中寻找第k个数，既然是有序数组，我们就想要利用有序这个特性，也就会自然想到二分查找算法。</p>
<p>但是现在的障碍是我们无法直接一下直接使用二分查找，因为是两个数组。</p>
<p>我们可以先画出A和B的图，如下所示</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201031163004.png" alt="whiteboardappdotorg20201031162650"></p>
<p>**我们的目标是找到第k个数，但是我们可以先找到这个k个数里面的k/2个数 **</p>
<p>(注意：此处数组的下标为k/2-1是因为 从0到k/2-1有k/2个数)</p>
<p>假设A[k/2-1]&lt;B[k/2-1],我们可以得出A[0]—A[k/2-1]的这些数字一定都在前k个数字当中。因为如果说A[k/2-1]恰好等于B[k/2-1],第k个数字肯定就是A[k/2-1]或者B[k/2-1]，但是现在A[k/2-1]&lt;B[k/2-1],因此前k个数字当中一定有k/2个数是A[0]-A[k/2-1]的这些数，我们此时不知道前k/2个数究竟是不是就是A[0]-A[k/2-1]，也无需考虑这些，<strong>只要知道前k个数字中我们已经找到了一半的数字，剩下的工作就是再找剩下的一半数字</strong>。</p>
<p><strong>那么我们只需要将寻找的范围缩小到剩下的数字即可，<font color=red>但是我每次查找的时候只查找剩下个数的一半</font></strong></p>
<p>对于A的再次寻找范围为：A[k/2]—A[k/2+(k/2/2)-1] (此处的k/2+(k/2/2)-1是因为每次我只查找剩下需要查找个数的一半,<strong>同时k/2+(k/2/2)-1到k/2有k/2/2个数字</strong>)</p>
<p>对于B的再次寻找范围为：B[0]—B[k/2/2-1]</p>
<p>假设A[k/2+(k/2/2)-1]&lt;B[k/2/2-1],那么和上面一样，我又可以再次找到属于前k个数当中的k/2/2个数字。</p>
<p>那么我只剩下了k/2/2个数字需要查找了。</p>
<p><strong><font color=red>如此递归下去直到需要查找的数字只剩下一个的时候，那么这个数字必定就是我们需要找到的第k个数字</font></strong></p>
<p>为什么呢？因为我们之前找到的数字都是小于k的。</p>
<p>为什么都是小于k的呢？因为我们从来没有将比较大的那个数字划分到前k个数字当中。比如说第一次寻找k/2个数字的时候，我们并没有将较大的B[k/2-1]加入到已经找到的数字当中，而是将A[0]—A[k/2-1]这个k/2个数字加入到已经找到数字当中。第二次寻找k/2/2个数字的时候同样没有将较大的B[k/2/2-1]加入到已经找到的数字当中，而是将A[k/2]-A[k/2+k/2/2-1]加入到已经找到的数字当中。</p>
<p>从而当最后只剩下一个数字需要寻找的时候，那个数字必然就是第k个数字。</p>
<p>代码如下</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findKthNumber</span><span class="params">(<span class="keyword">const</span> vector&lt;<span class="keyword">int</span>&gt; &amp;v1,<span class="keyword">int</span> v1Start,<span class="keyword">const</span> vector&lt;<span class="keyword">int</span>&gt; &amp;v2,<span class="keyword">int</span> v2Start,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//当v1元素个数比较少的时候，一直+会导致其start超过其size，那我只需要返回我此轮需要找到的个数即可，比如说我此轮还差两个就满k个数字了，那我就返回此轮v2的start之后的第二个数字就行了</span></span><br><span class="line">    <span class="keyword">if</span>(v1Start&gt;=v1.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="keyword">return</span> v2[v2Start+k<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//同上</span></span><br><span class="line">    <span class="keyword">if</span>(v2Start&gt;=v2.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="keyword">return</span> v1[v1Start+k<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//跳出递归的条件：只剩下一个数字需要寻找</span></span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> v1[v1Start]&lt;=v2[v2Start]?v1[v1Start]:v2[v2Start];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//此处的INT_MAX主要防止数组元素个数比较少但此时该数字还未遍历完全，在寻找的时候在+k/2-1之后超过本身的size，如果超过本身的size，那我直接从另外一个数组寻找此轮需要的个数就行</span></span><br><span class="line">    <span class="keyword">int</span> v1Key = v1Start+k/<span class="number">2</span><span class="number">-1</span>&lt;v1.<span class="built_in">size</span>()?</span><br><span class="line">                v1[v1Start+k/<span class="number">2</span><span class="number">-1</span>]:INT_MAX;</span><br><span class="line">    <span class="keyword">int</span> v2Key = v2Start+k/<span class="number">2</span><span class="number">-1</span>&lt;v2.<span class="built_in">size</span>()?</span><br><span class="line">                v2[v2Start+k/<span class="number">2</span><span class="number">-1</span>]:INT_MAX;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关键：寻找的个数一直在变少！！！</span></span><br><span class="line">    <span class="keyword">if</span>(v1Key&lt;v2Key)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">findKthNumber</span>(v1,v1Start+k/<span class="number">2</span>,v2,v2Start,k-k/<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">findKthNumber</span>(v1,v1Start,v2,v2Start+k/<span class="number">2</span>,k-k/<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="LeetCode刷题笔记"><a href="#LeetCode刷题笔记" class="headerlink" title="LeetCode刷题笔记"></a>LeetCode刷题笔记</h4><h5 id="350：两个数组交集"><a href="#350：两个数组交集" class="headerlink" title="350：两个数组交集"></a>350：两个数组交集</h5><h6 id="方法1："><a href="#方法1：" class="headerlink" title="方法1："></a>方法1：</h6><p>数组如果是无序的话，可以选择先将其排序好再操作</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">intersect</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums1, vector&lt;<span class="keyword">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums1.<span class="built_in">begin</span>(),nums1.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">sort</span>(nums2.<span class="built_in">begin</span>(),nums2.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>,right = <span class="number">0</span>;<span class="comment">//此处不能写成int left,right=0 否则left将会是一个未知数</span></span><br><span class="line">        <span class="keyword">while</span>(left&lt;nums1.<span class="built_in">size</span>()&amp;&amp;right&lt;nums2.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums1[left]==nums2[right])&#123;</span><br><span class="line">                vec.<span class="built_in">push_back</span>(nums1[left]);</span><br><span class="line">                left++;</span><br><span class="line">                right++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums1[left]&lt;nums2[right])&#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                right++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> vec;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h6 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h6><p>使用哈希表记录较短数组出现的次数 此种方法主要是为了防止两个数组中有一个数组过大，无法加载到内存在进行排序</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">intersect</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums1, vector&lt;<span class="keyword">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(nums1.<span class="built_in">size</span>()&lt;nums2.<span class="built_in">size</span>())&#123;<span class="comment">//这次技巧可以记住</span></span><br><span class="line">           <span class="keyword">return</span> <span class="built_in">intersect</span>(nums2,nums1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        unordered_map &lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; countMap;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;nums1.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            countMap[nums1[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i:nums2)&#123;</span><br><span class="line">            <span class="keyword">if</span>(countMap.<span class="built_in">count</span>(i))&#123;</span><br><span class="line">                countMap[i]--;</span><br><span class="line">                vec.<span class="built_in">push_back</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(countMap[i]==<span class="number">0</span>)&#123;</span><br><span class="line">                countMap.<span class="built_in">erase</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> vec;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>优缺点以及适用处</strong><br>map：</p>
<p>优点：</p>
<p>有序性，这是map结构最大的优点，其元素的有序性在很多应用中都会简化很多的操作<br>红黑树，内部实现一个红黑书使得map的很多操作在lgn的时间复杂度下就可以实现，因此效率非常的高<br>缺点： 空间占用率高，因为map内部实现了红黑树，虽然提高了运行效率，但是因为每一个节点都需要额外保存父节点、孩子节点和红/黑性质，使得每一个节点都占用大量的空间</p>
<p>适用处：对于那些有顺序要求的问题，用map会更高效一些</p>
<p>unordered_map：</p>
<p>优点： 因为内部实现了哈希表，因此其查找速度非常的快<br>缺点： 哈希表的建立比较耗费时间<br>适用处：对于查找问题，unordered_map会更加高效一些，因此遇到查找问题，常会考虑一下用unordered_map<br>总结：</p>
<p>内存占有率的问题就转化成红黑树 VS hash表 , 还是unorder_map占用的内存要高。<br>但是unordered_map执行效率要比map高很多<br>对于unordered_map或unordered_set容器，其遍历顺序与创建该容器时输入的顺序不一定相同，因为遍历是按照哈希表从前往后依次遍历的</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2022/01/07/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87offer%E9%A2%98/</url>
    <content><![CDATA[<p>offer46</p>
<p>offer48  （重点）</p>
<h3 id="回溯与搜索"><a href="#回溯与搜索" class="headerlink" title="回溯与搜索"></a>回溯与搜索</h3><ol>
<li><p>注意最后一步是否需要对状态进行还原，例如将原来已经访问过的结点重置为未访问<br>题目：<a href="https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/">剑指 Offer 13. 机器人的运动范围</a></p>
</li>
<li><p>注意对于二叉树如果寻找到路径有关的题目，可以尝试使用Map进行记录路径<br>比如对于&lt;letf,root &gt;或者&lt;right,root &gt;的记录形式</p>
</li>
<li><p><a href="https://leetcode-cn.com/problems/er-cha-shu-zhong-he-wei-mou-yi-zhi-de-lu-jing-lcof/">剑指 Offer 34. 二叉树中和为某一值的路径</a><br>在对全局变量的t（是一个list）进行拷贝到一个list中的时候，可以使用list.add(new ArrayList(t))</p>
</li>
<li><p><a href="https://leetcode-cn.com/problems/zi-fu-chuan-de-pai-lie-lcof/">剑指 Offer 38. 字符串的排列</a></p>
</li>
</ol>
<p>​        注意使用Set</p>
<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><ol>
<li><p>选择k个最小的数（<a href="https://leetcode-cn.com/problems/zui-xiao-de-kge-shu-lcof/">剑指 Offer 40. 最小的k个数</a>）</p>
<ul>
<li><p>利用最大堆先放k个进去，然后依次往里面加，遇到比对顶小的，就将其取下来，把小的放进去，依次放到最后</p>
</li>
<li><p>利用快排的性质，考虑在每次哨兵划分后，判断基准数在数组中的索引是否等于 k ，若 true 则直接返回此时数组的前 k个数字即可</p>
</li>
</ul>
</li>
<li><p>寻找数据流的中位数（<a href="https://leetcode-cn.com/problems/shu-ju-liu-zhong-de-zhong-wei-shu-lcof/">剑指 Offer 41. 数据流中的中位数</a>）<br> 利用的两个堆，一个大顶堆（一半大的），一个小顶堆（一般小的），此题的关键在于如何保证一半小的在大顶堆，一半大的在大顶堆<br> 这样做的目的是可以保证两个堆的数量的差的绝对值正好相差1</p>
<p> 步骤如下：</p>
</li>
</ol>
<ul>
<li><p>先判断两个顶堆的数量是否一致，如果一致，则新加入的数字先加入小顶堆（会自动按照顺序进行排序，将最小的放在堆顶），再将大顶堆中的堆顶（也就是当前一半大的当中最小的）放入到小顶堆中，那么小顶堆也会作出调整，将其中最大的放在堆顶</p>
</li>
<li><p>如果两个堆的数量不一致，那么顺序正好相反</p>
</li>
</ul>
<h3 id="搜索与回溯"><a href="#搜索与回溯" class="headerlink" title="搜索与回溯"></a>搜索与回溯</h3><ol>
<li><p><a href="https://leetcode-cn.com/problems/ping-heng-er-cha-shu-lcof/">剑指 Offer 55 - II. 平衡二叉树</a><br>注意可以自底向上</p>
</li>
<li><p><a href="https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-zui-jin-gong-gong-zu-xian-lcof/">剑指 Offer 68 - I. 二叉搜索树的最近公共祖</a></p>
</li>
</ol>
<p>​        注意只要处于p和q之间，那么我就是祖先</p>
<ol>
<li><p><a href="https://leetcode-cn.com/problems/er-cha-shu-de-zui-jin-gong-gong-zu-xian-lcof/">剑指 Offer 68 - II. 二叉树的最近公共祖先</a><br>不多说什么，记住就行</p>
</li>
<li><p><a href="https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/">剑指 Offer 07. 重建二叉树</a></p>
</li>
<li><p><a href="https://leetcode-cn.com/problems/shu-zhi-de-zheng-shu-ci-fang-lcof/">剑指 Offer 16. 数值的整数次方</a><br> 快速幂算法<br> 每次都将指数/2<br> (2<sup>10</sup> = 4<sup>5</sup> = 4*(16<sup>2</sup>)),尤其需要注意一点，就是指数可能是-2<sup>31</sup>,因此我们需要将这样写<br> 不要使用Math.asb()，因为最终返回的数字是int类型的，无法达到long的长度</p>
</li>
</ol>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> t = n;  <span class="comment">//必须这样写才能避免n=2^-31时，-n是为2^-31，因为它是整数的，因此必须现将其转为long类型</span></span><br><span class="line"><span class="keyword">if</span>(n&lt;<span class="number">0</span>)&#123;</span><br><span class="line">  t = -t;</span><br><span class="line">  x = <span class="number">1</span>/x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这样的写法是错误的</span></span><br><span class="line"><span class="keyword">long</span> cnt;</span><br><span class="line"><span class="keyword">if</span>(n&lt;<span class="number">0</span>)&#123;</span><br><span class="line">    cnt = -n;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    cnt = n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果指数为奇数，则先乘以底数，则将指数/2</li>
</ul>
<h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><ol>
<li><p><a href="https://leetcode-cn.com/problems/bu-yong-jia-jian-cheng-chu-zuo-jia-fa-lcof/">剑指 Offer 65. 不用加减乘除做加法</a><br> 任何加法运算都需要通过两步：<br> <a href="https://leetcode-cn.com/problems/bu-yong-jia-jian-cheng-chu-zuo-jia-fa-lcof/solution/xiang-xi-jie-shi-wei-shi-yao-xu-yao-xun-xg550/">https://leetcode-cn.com/problems/bu-yong-jia-jian-cheng-chu-zuo-jia-fa-lcof/solution/xiang-xi-jie-shi-wei-shi-yao-xu-yao-xun-xg550/</a></p>
<ul>
<li>进位<br>a&amp;b&lt;&lt;1</li>
<li>非进位之和<br>a^b</li>
</ul>
</li>
<li><p><a href="https://leetcode-cn.com/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-lcof/">剑指 Offer 56 - I. 数组中数字出现的次数</a><br>判断某个数字的某一位是否为1，直接使用该数组与1{0..0}进行&amp;比较是否等于0，如果不等于0则说明该位为1</p>
</li>
<li><p><a href="https://leetcode-cn.com/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-ii-lcof/">剑指 Offer 56 - II. 数组中数字出现的次数 II</a><br>只有一个数出现一次，其余数出现n次，可以将这些数都展开成二进制的形式，那么对于这些数对应的二进制的数组上为1的个数一定是n的倍数，只有那个要求的数出现的二进制数组上的为1的个数为m%n==1</p>
</li>
<li><p><a href="https://leetcode-cn.com/problems/shu-zu-zhong-chu-xian-ci-shu-chao-guo-yi-ban-de-shu-zi-lcof/">剑指 Offer 39. 数组中出现次数超过一半的数字</a><br>摩尔投票</p>
</li>
</ol>
<h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><ol>
<li><p><a href="https://leetcode-cn.com/problems/jian-sheng-zi-lcof/">剑指 Offer 14- I. 剪绳子</a></p>
</li>
<li><p><a href="https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/">剑指 Offer 62. 圆圈中最后剩下的数字 </a>  (重要)</p>
<p>从后往前推 （<a href="https://blog.csdn.net/u011500062/article/details/72855826%EF%BC%89">https://blog.csdn.net/u011500062/article/details/72855826）</a>  </p>
</li>
<li><p><a href="https://leetcode-cn.com/problems/zheng-ze-biao-da-shi-pi-pei-lcof/">剑指 Offer 19. 正则表达式匹配</a>   （重要）</p>
</li>
<li><p> <a href="https://leetcode-cn.com/problems/chou-shu-lcof/">剑指 Offer 49. 丑数</a> （重要）</p>
</li>
</ol>
<p>  此题如果使用优先队列做的话一定要注意去重</p>
<ol start="5">
<li><p><a href="https://leetcode-cn.com/problems/nge-tou-zi-de-dian-shu-lcof/">剑指 Offer 60. n个骰子的点数</a>  （重要）</p>
</li>
<li><p><a href="https://leetcode-cn.com/problems/1nzheng-shu-zhong-1chu-xian-de-ci-shu-lcof/">剑指 Offer 43. 1～n 整数中 1 出现的次数</a></p>
<p>主要查看各位为0,1以及其他数字时出现1的场景</p>
</li>
<li><p><a href="https://leetcode-cn.com/problems/shu-zi-xu-lie-zhong-mou-yi-wei-de-shu-zi-lcof/">剑指 Offer 44. 数字序列中某一位的数字</a></p>
</li>
</ol>
<h3 id="模拟"><a href="#模拟" class="headerlink" title="模拟"></a>模拟</h3><ol>
<li><p><a href="https://leetcode-cn.com/problems/shun-shi-zhen-da-yin-ju-zhen-lcof/">剑指 Offer 29. 顺时针打印矩阵</a></p>
</li>
<li><p><a href="https://leetcode-cn.com/problems/zhan-de-ya-ru-dan-chu-xu-lie-lcof/">剑指 Offer 31. 栈的压入、弹出序列</a></p>
</li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h4><ol>
<li><p><a href="https://leetcode-cn.com/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof/">剑指 Offer 57 - II. 和为s的连续正数序列</a></p>
<p>左右边界不能回溯，需要一直往右，否则时间复杂度不是O(n)</p>
</li>
</ol>
<h4 id="二叉树的序列化"><a href="#二叉树的序列化" class="headerlink" title="二叉树的序列化"></a>二叉树的序列化</h4><ol>
<li><a href="https://leetcode-cn.com/problems/xu-lie-hua-er-cha-shu-lcof/">剑指 Offer 37. 序列化二叉树</a><br> 使用Arrays.toString(arr)生成的数组，每个数组前面都有一个空格需要注意</li>
</ol>
<p>  序列化和反序列化都使用层序遍历</p>
<h3 id="有限状态机"><a href="#有限状态机" class="headerlink" title="有限状态机"></a>有限状态机</h3><ol>
<li><a href="https://leetcode-cn.com/problems/biao-shi-shu-zhi-de-zi-fu-chuan-lcof/">剑指 Offer 20. 表示数值的字符串</a></li>
</ol>
<h3 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h3><ol>
<li><a href="https://leetcode-cn.com/problems/hua-dong-chuang-kou-de-zui-da-zhi-lcof/">剑指 Offer 59 - I. 滑动窗口的最大值</a><br> 滑动窗口使用双端队列表示</li>
</ol>
<p>  总体的核心思想是先找到第1组k的最大值，然后依次+1个找下一组的最大值</p>
<ol start="2">
<li><a href="https://leetcode-cn.com/problems/dui-lie-de-zui-da-zhi-lcof/">剑指 Offer 59 - II. 队列的最大值</a></li>
</ol>
<p>​        当前加入的值如果比之前的都要大，那么可以将当前deque中的值都删掉，因为队列是先进先出的，因此后面的值决定当前队列的最大值</p>
<p>​        </p>
<h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><ol>
<li><p><a href="https://leetcode-cn.com/problems/palindrome-linked-list/solution/hui-wen-lian-biao-by-leetcode-solution/">https://leetcode-cn.com/problems/palindrome-linked-list/solution/hui-wen-lian-biao-by-leetcode-solution/</a></p>
<p>回文字符串链表</p>
</li>
</ol>
<h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><ol>
<li><p><a href="https://leetcode-cn.com/problems/next-greater-element-i/">496. 下一个更大元素 I</a></p>
<p>单调栈一定要记住是从后往前开始</p>
</li>
</ol>
<h3 id="分治"><a href="#分治" class="headerlink" title="分治"></a>分治</h3><ol>
<li><p><a href="https://leetcode-cn.com/problems/shu-zu-zhong-de-ni-xu-dui-lcof/">剑指 Offer 51. 数组中的逆序对</a></p>
<p>此题需要注意增加的逆序对数为（mid-i+1）</p>
<p>相当于是对前半个数组进行考虑，比如说有</p>
<table>
<thead>
<tr>
<th>5</th>
<th>7</th>
<th>4</th>
<th>6</th>
</tr>
</thead>
</table>
<p>那么前半部分的5比后半部分的4大，逆序数也就是5-7，此时i还没有变化</p>
<p>下一个前半部分的7比6大，逆序数也就是7，此时i=1，也就是5没有了</p>
</li>
</ol>
<p>​        归并排序：<a href="https://cnblogs.com/chengxiao/p/6194356.html">https://cnblogs.com/chengxiao/p/6194356.html</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/01/07/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h3 id="动态规划题目特点"><a href="#动态规划题目特点" class="headerlink" title="动态规划题目特点"></a>动态规划题目特点</h3><ol>
<li>计数<ul>
<li>有多少种方式走到右下角</li>
<li>有多少种方式选出k个数使得和是Sum</li>
</ul>
</li>
<li>求最大最小值<ul>
<li>从左上角走到右下角路径的最大数字和</li>
<li>最长上升子序列长度</li>
</ul>
</li>
<li>求存在性<ul>
<li>取石子游戏，先手是否必胜</li>
<li>能不能选出k个数使得和是Sum</li>
</ul>
</li>
</ol>
<h3 id="动态规划解题步骤"><a href="#动态规划解题步骤" class="headerlink" title="动态规划解题步骤"></a>动态规划解题步骤</h3><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210505202542.png" alt="image-20210505202535665" style="zoom:50%;" />

 <img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210505211021.png" alt="image-20210505211008222" style="zoom:50%;" />

]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/01/07/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        QuickSort sort = <span class="keyword">new</span> QuickSort();</span><br><span class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">6</span>&#125;;</span><br><span class="line">        sort.sort(nums,<span class="number">0</span>,nums.length-<span class="number">1</span>);</span><br><span class="line">        System.out.println(Arrays.toString(nums));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left&lt;right)&#123;</span><br><span class="line">            <span class="keyword">int</span> index = paration(nums, left, right);</span><br><span class="line">            sort(nums, left, index-<span class="number">1</span>);</span><br><span class="line">            sort(nums, index+<span class="number">1</span>, right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">paration</span><span class="params">(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> target = nums[left];</span><br><span class="line">        <span class="keyword">int</span> low = left;</span><br><span class="line">        <span class="keyword">int</span> high = right;</span><br><span class="line">        <span class="keyword">while</span>(low&lt;high)&#123;</span><br><span class="line">            <span class="keyword">while</span>(low&lt;high&amp;&amp;nums[high]&gt;=target) high--;</span><br><span class="line">            <span class="keyword">while</span>(low&lt;high&amp;&amp;nums[low]&lt;=target) low++;</span><br><span class="line">            swap(nums, low, high);</span><br><span class="line">        &#125;</span><br><span class="line">        swap(nums,left, low);</span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> t = nums[i];</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        nums[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/01/07/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E9%80%92%E5%BD%92%E5%9B%9E%E6%BA%AF%E5%8F%82%E6%95%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E6%83%B3/</url>
    <content><![CDATA[<h2 id="递归回溯参数"><a href="#递归回溯参数" class="headerlink" title="递归回溯参数"></a>递归回溯参数</h2><p><font color=red>问题：对于递归函数中的参数说明</font></p>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//此处的temp</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_fake</span><span class="params">(<span class="keyword">int</span> n,StringBuilder temp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(temp.length()==n)&#123;</span><br><span class="line">        arr.append(temp.toString()+<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">        temp.append(String.valueOf(i));</span><br><span class="line">        dfs_fake(n, temp);</span><br><span class="line">        <span class="comment">//此处一定要注意temp被赋予了新值，与原来的值不一样了，因此本质上删除的时候不会截断最后一个字符</span></span><br><span class="line">        temp = <span class="keyword">new</span> StringBuilder(temp.substring(<span class="number">0</span>,temp.length()-<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>必须要注意回溯本质上需要对同一个值进行回溯，这里已经违反了同一个值这个规定，因此在回溯的时候会出现问题</strong></p>
<p>改成如下即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//此处的temp</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_fake</span><span class="params">(<span class="keyword">int</span> n,StringBuilder temp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(temp.length()==n)&#123;</span><br><span class="line">        arr.append(temp.toString()+<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">        temp.append(String.valueOf(i));</span><br><span class="line">        dfs_fake(n, temp);</span><br><span class="line">        temp.deleteCharAt(temp.length()-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>递归回溯时的参数，必须始终保持回溯的时候是针对同一个值进行的回溯</p>
]]></content>
  </entry>
  <entry>
    <title>IO多路复用</title>
    <url>/2022/01/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/</url>
    <content><![CDATA[<h2 id="整体思想"><a href="#整体思想" class="headerlink" title="整体思想"></a>整体思想</h2><p>将被阻塞的操作比如accept()、read()、write()等操作交给操作系统内核进行处理，也就是我程序处理的一定是不会被阻塞的操作</p>
<p>注意：<font color=red>每个文件描述符都有两个缓冲区：写缓冲区和读缓冲区</font></p>
<h2 id="Select（跨平台）"><a href="#Select（跨平台）" class="headerlink" title="Select（跨平台）"></a>Select（跨平台）</h2><h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><ol>
<li>将已连接的Socket都放入到一个文件描述符集合</li>
<li>调用select函数将文件描述符集合==拷贝到内核中==</li>
<li>内核遍历集合并检查是否有事件产生。如果有事件产生则将该Socket标记为可读或可写</li>
<li>将整个文件描述符集合==拷贝至用户态中==</li>
<li>用户态遍历找到可读或可写的socket并进行处理</li>
</ol>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span> nfds, fd_set *readfds, fd_set *writefds,fd_set *exceptfds, struct timeval * timeout)</span></span>;</span><br></pre></td></tr></table></figure>

<p>参数含义：</p>
<p>nfds：委托内核检测的三个集合中的最大的描述符+1</p>
<p>readfds：文件描述符集合 ，内核检测该集合中文件描述符对应的读缓冲区</p>
<p>writefds：文件描述符集合 ，内核检测该集合中文件描述符对应的写缓冲区</p>
<p>exceptfds：文件描述符集合 ，内核检测该集合中文件描述符是否有异常状态</p>
<p>timeout：超时时间 (如果为0，表示不会阻塞，立刻返回，如果不为0，则会持续监听一段时间再返回)</p>
<p><strong>这三个文件描述符集合都是同时进行检查和操作的</strong></p>
<p><font color=red>readfds、writefds、exceptfds这三个集合的大小是和内核<code>linux FD_SETSIZE</code>参数定义的大小一致的</font></p>
<p>这三个集合既是==传入参数==也是==返回参数==，其中集合是以bitMap的形式存储的，我们这里以readfds为例：</p>
<ul>
<li><p>传入的bitMap</p>
<p>如果传入的readfds中对应的bitMap中2，4，7这三个是需要检测的，传入的bitMap状态为<code>00101001000...</code>其中bitMap[2]、bitMap[4]、bitMap[7]都是1，其余位都是0,1的话表示==检测==这个文件描述符的读缓冲区，0表示==不检测==该文件描述符的读缓冲区</p>
</li>
<li><p>传出的bitMap</p>
<p>如果当前内核中2和4对应的文件描述符的缓冲区有数据，7对应的文件描述符没有数据，那么传入的bitMap中的2和4不变，表示该位对应的文件描述符的==读缓冲区有数据==，7的位置变为0，表示7这个位置的文件描述符的读缓冲区==没有数据==</p>
</li>
</ul>
<p>这里对于文件描述符集合还有一些api操作函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将文件描述符fd从set集合中删除 == 将fd对应的标志位设置为0        </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FD_CLR</span><span class="params">(<span class="keyword">int</span> fd, fd_set *<span class="built_in">set</span>)</span></span>;</span><br><span class="line"><span class="comment">// 判断文件描述符fd是否在set集合中 == 读一下fd对应的标志位到底是0还是1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">FD_ISSET</span><span class="params">(<span class="keyword">int</span> fd, fd_set *<span class="built_in">set</span>)</span></span>;</span><br><span class="line"><span class="comment">// 将文件描述符fd添加到set集合中 == 将fd对应的标志位设置为1</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FD_SET</span><span class="params">(<span class="keyword">int</span> fd, fd_set *<span class="built_in">set</span>)</span></span>;</span><br><span class="line"><span class="comment">// 将set集合中, 所有文件文件描述符对应的标志位设置为0, 集合中没有添加任何文件描述符</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FD_ZERO</span><span class="params">(fd_set *<span class="built_in">set</span>)</span></span>;</span><br></pre></td></tr></table></figure>





<h3 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h3><ol>
<li>发生了两次遍历和拷贝</li>
<li>select使用固定长度的BitsMap表示文件描述符集合，但是所持有的文件描述符的个数是有限制的（因此每个进程默认持有的文件描述符是有限制的，默认为为1024个，<font color=red>但是select函数（系统自带的）默认中会使用<code>linux FD_SETSIZE</code>整个参数作为默认的最大文件描述符的个数，整个数在linux平台下是写死的，除非你重新编译内核对函数本身进行修改</font>）</li>
</ol>
<h2 id="poll（Linux）"><a href="#poll（Linux）" class="headerlink" title="poll（Linux）"></a>poll（Linux）</h2><p>实现方式和Select差不多，最大的区别在于poll ==不再⽤ BitsMap 来存储所关注的⽂件描述符==，取⽽代之⽤==动态数组（该数组的个数用户可以自定义，甚至可以使用链表的方式）==，不受进程最大文件描述符的约束，但是依旧会受到==系统最大文件描述符个数的限制==</p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux收发网络包</title>
    <url>/2022/01/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Linux%E6%94%B6%E5%8F%91%E7%BD%91%E7%BB%9C%E5%8C%85/</url>
    <content><![CDATA[<ol>
<li><p>TCP/IP四层模型</p>
<table>
<thead>
<tr>
<th>应用层   负责向用户提供一组应用程序  http、DNS、FTP、telnet</th>
</tr>
</thead>
<tbody><tr>
<td>传输层  负责端到端的通信   tcp、udp</td>
</tr>
<tr>
<td>网络层  服务网络包的封装、分片、路由、转发  ip、icmp</td>
</tr>
<tr>
<td>网络接口层  负责网络包在物理网络中的传输，网络包的封帧、MAC寻址、差错检测、网卡传输网络帧</td>
</tr>
</tbody></table>
</li>
<li><p>数据封装</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210908101508.png" alt="image-20210908101505583"></p>
<p><font color=red>注意：因为物理链路层不能传输任意大小的数据包，因此有一个最大传输单元（MTU）为1500字节，也就是每次传送的IP包的最大大小，如果超过则需要在网络层进行分片</font></p>
</li>
</ol>
<ol start="3">
<li><p>在每一层的网络包都是采用的<strong>相同结构体</strong>，从上往下就不断加头，从下往上就不断剪头（sk_buf-&gt;data传递给上一层）</p>
<p>这样的好处在于在各层之间传递数据的时候不必要发生拷贝</p>
</li>
</ol>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP</title>
    <url>/2022/01/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/TCP/</url>
    <content><![CDATA[<h2 id="创建TCP连接的步骤"><a href="#创建TCP连接的步骤" class="headerlink" title="创建TCP连接的步骤"></a>创建TCP连接的步骤</h2><h3 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h3><h4 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h4><ol>
<li>指定网络协议（IPv4/IPv6）和传输协议（TCP的Socket）</li>
<li>绑定端口</li>
<li>绑定IP</li>
</ol>
<p>​    <font color=red>TCP的组成：本机IP, 本机端⼝, 对端IP, 对端端⼝</font></p>
<h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><p>明确服务端IP和端口号</p>
<h3 id="连接阶段"><a href="#连接阶段" class="headerlink" title="连接阶段"></a>连接阶段</h3><p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20220106095954.png" alt="image-20220106095952031"></p>
<ol>
<li>客户端向服务端发送<code>syn</code>发起握手，客户端进入<code>syn_sent</code>状态</li>
<li>服务端接收到<code>syn</code>后进入<code>syn_recv</code>状态，此时内核将连接存储到半连接队列,并向客户端回复<code>syn+ack</code></li>
<li>客户端收到<code>syn+ack</code>后，回复<code>ack</code>并进入<code>established</code>状态</li>
<li>服务端收到<code>ack</code>后，内核将连接从半连接队列中取出，并添加到全连接队列，服务端进入<code>established</code>状态</li>
<li>服务端应用进程调用<code>accept</code>函数，将连接从全连接队列中取出</li>
</ol>
<h3 id="内部细节"><a href="#内部细节" class="headerlink" title="内部细节"></a>内部细节</h3><ol>
<li><p>在连接过程中内核会维护两个队列  </p>
<ul>
<li><p>TCP半连接队列（未完成1）</p>
</li>
<li><p>TCP全连接队列（已完成1）</p>
<p>具体参考<a href="https://network.51cto.com/art/202110/687595.htm">https://network.51cto.com/art/202110/687595.htm</a></p>
</li>
</ul>
</li>
<li><p>当TCP全连接队列不为空时，服务端的accept函数会从全连接队列中拿出一个已经完成连接的Socket返回应用程序</p>
</li>
<li><p>监听的Socket和传输数据的Socket是不同的两个Socket</p>
<ul>
<li>监听Socket是通过socket()创建的，然后bind()函数将其绑定到对应的地址和端口上，然后进程/线程就可以监听该socket</li>
<li>传输数据的Socket是监听到TCP请求并三次握手之后通过accept()函数返回的socket（此处的socket是TCP全连接队列中的socket）</li>
</ul>
</li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol>
<li><p>理论上TCP最大连接数的数量</p>
<p>最⼤ TCP 连接数 = 客户端 IP 数×客户端端⼝数 = （2<sup>32</sup>*2<sup>16</sup>）</p>
<p>但是会收到文件描述符和系统内存的限制</p>
</li>
<li><p>TCP连接数量受到的限制  （参考<a href="https://cloud.tencent.com/developer/article/1411022%EF%BC%89">https://cloud.tencent.com/developer/article/1411022）</a></p>
<ul>
<li><p>单个进程最大文件描述符的限制</p>
<p>默认是1024，可以使用<code>ulimit -n</code>进行修改</p>
</li>
<li><p>内存的限制</p>
<p>socket对应一个数据结构，会占用一定的内存</p>
</li>
<li><p>全局限制</p>
<p><code>cat /proc/sys/fs/file-nr</code>会得到三个参数</p>
<p>1.已经分配的文件句柄数，2.已经分配但没有使用的文件句柄数，3.最大文件句柄数</p>
<p>可以修改最大文件句柄数，此处的3对应的是整个系统对应的最大文件句柄数</p>
</li>
<li><p>客户端IP和客户端端口数的限制</p>
<p>最⼤ TCP 连接数 = 客户端 IP 数×客户端端⼝数 = （2<sup>32</sup>*2<sup>16</sup>）</p>
</li>
</ul>
</li>
</ol>
<p>​        </p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2022/01/07/%E9%9D%A2%E8%AF%95/java%E5%B9%B6%E5%8F%91/</url>
    <content><![CDATA[<ol>
<li><p>wait和sleep</p>
<p><a href="https://www.cnblogs.com/myseries/p/13903051.html">https://www.cnblogs.com/myseries/p/13903051.html</a></p>
</li>
<li><p>java中Object的wait和notify、notifyAll与Condition中的await、singal、singalAll中的区别</p>
<p><a href="https://blog.csdn.net/u011521203/article/details/80214538">https://blog.csdn.net/u011521203/article/details/80214538</a></p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/01/07/%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/oss/</url>
    <content><![CDATA[<h2 id="Buckets"><a href="#Buckets" class="headerlink" title="Buckets"></a>Buckets</h2><blockquote>
<p>实现方式</p>
</blockquote>
<p>通过命令行注入config常量 （MongoDB的连接、暴露端口以及log等级）</p>
<p>用户通过接口对服务进行调用 （mountpoints.go）</p>
<blockquote>
<p>整体代码逻辑</p>
</blockquote>
<ol>
<li><p>注入常量，脚本启动服务</p>
</li>
<li><p>服务调用</p>
<ul>
<li><p>所有对桶的操作都是在MongoDB中进行增删改查，并没有真正的对桶进行创建</p>
</li>
<li><p>每个接口的调用都需要做认证，也就是签名的认证（我在测试的时候没有找到怎么搞这个签名，直接注释掉了）</p>
</li>
</ul>
</li>
</ol>
<h2 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h2><blockquote>
<p>实现方式</p>
</blockquote>
<p>通过命令行注入config常量 （MongoDB的连接、暴露端口、ceph地址+端口（此处必须是<font color=red>域名模式</font>，否则无法访问ceph的桶）、ceph<font color=red>超级用户</font>的ak和sk、<font color=red>slot的数量</font>以及log等级）</p>
<p>用户通过接口对服务进行调用 （mountpoints.go）</p>
<p><strong>如何进行存储的呢？</strong></p>
<ol>
<li><p>首先也是必须需要做的，就是在创建Object服务的时候会创建底层的NewFilesystemRepository，在初始化的时候会在ceph中创建桶（CephEnsureBuckets方法），桶的数量就是我们之前定的slot的数量，<font color=red>这一步必须要做，否则存储进行桶映射的时候将没有桶</font></p>
</li>
<li><p>根据Object的信息，计算出该Object应该存在哪个桶里面（oss0~ oss(slot-1) ）</p>
</li>
</ol>
<blockquote>
<p>整体代码逻辑</p>
</blockquote>
<ol>
<li>注入常量，脚本启动服务</li>
<li>服务调用<ul>
<li>对Object的所有操作都需要写入到MongoDB中</li>
<li>每次对Object进行操作时，都会与ceph打交道，也就是会调用service/ceph/object.go中的方法</li>
</ul>
</li>
</ol>
<h2 id="Users"><a href="#Users" class="headerlink" title="Users"></a>Users</h2><blockquote>
<p>实现方式</p>
</blockquote>
<p>通过命令行注入config常量 （MongoDB的连接、暴露端口以及log等级）</p>
<p>用户通过接口对服务进行调用 （mountpoints.go）</p>
<blockquote>
<p>整体代码逻辑</p>
</blockquote>
<ol>
<li><p>注入常量，脚本启动服务</p>
</li>
<li><p>服务调用</p>
<ul>
<li><p>所有对User的操作都是在MongoDB中进行增删改查，并没有真正在Ceph中对User进行创建</p>
</li>
<li><p>每个接口的调用都需要做认证，也就是签名的认证</p>
</li>
</ul>
</li>
</ol>
<h3 id="hits"><a href="#hits" class="headerlink" title="hits"></a>hits</h3><ol>
<li><p>services中的服务都是采用的组合的方式进行编写的，例如buckets.go中的BucketRepository大部分方法都是直接使用mongo中的buckets.go方法进行调用，对于有的方法在mongo中对应的服务中没有的则进行了编写</p>
</li>
<li><p>如果Object服务进行重启或者替换，出现桶拒绝创建的情况，则需要先查看原先的桶有没有被删掉，如果没有则需要全部清除</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>aws s3 开发</title>
    <url>/2022/01/07/Ceph/aws/S3%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<ol>
<li><p>桶命名规范</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210329211030.png" alt="image-20210329211028045"></p>
</li>
</ol>
<ol start="2">
<li><p>s3加密</p>
<p>一共有三种加密方法，都是server端的加密</p>
<p><a href="https://docs.ceph.com/en/latest/radosgw/encryption/">三种加密</a></p>
<p>在此我选择的是SSECustomer方式</p>
<p>踩的坑：</p>
<ol>
<li><p>代码层面必须使用https，否则sdk直接报错</p>
</li>
<li><p>如果遇到问题首先在rgw层进行调试，详情见”排错“</p>
</li>
<li><p>有可能是rgw层的https有问题</p>
<p>那么可以将https加密的验证的要求关掉</p>
<p><a href="https://cloud.tencent.com/developer/article/1171490">参考</a></p>
</li>
<li><p>加密的key的长度必须是256bit并且经过Base64加密过的</p>
</li>
<li><p><a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/specifying-s3-c-encryption.html">代码参考</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AWSCredentials credentials = <span class="keyword">new</span> BasicAWSCredentials(<span class="string">&quot;U6DVKQNYCPHCIIP0XZFJ&quot;</span>, <span class="string">&quot;A32aqcbXEECBtfxL2UqqBoMs2zyJJBMnRpG0gj7i&quot;</span>);</span><br><span class="line">ClientConfiguration config = <span class="keyword">new</span> ClientConfiguration();</span><br><span class="line">config.setProtocol(Protocol.HTTPS);</span><br><span class="line">AmazonS3 s3 = AmazonS3ClientBuilder.standard()</span><br><span class="line">        .withClientConfiguration(config)</span><br><span class="line">        .withCredentials(<span class="keyword">new</span> AWSStaticCredentialsProvider(credentials))</span><br><span class="line">        .withEndpointConfiguration(<span class="keyword">new</span> AwsClientBuilder.EndpointConfiguration(<span class="string">&quot;https://cephinside.un-net.com&quot;</span>,<span class="string">&quot;&quot;</span>))</span><br><span class="line">        .withPathStyleAccessEnabled(<span class="keyword">true</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create an encryption key.</span></span><br><span class="line">KeyGenerator KEY_GENERATOR = KeyGenerator.getInstance(<span class="string">&quot;AES&quot;</span>);</span><br><span class="line">KEY_GENERATOR.init(<span class="number">256</span>, <span class="keyword">new</span> SecureRandom());</span><br><span class="line">SSECustomerKey SSE_KEY = <span class="keyword">new</span> SSECustomerKey(KEY_GENERATOR.generateKey());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ObjectMetadata metadata  = <span class="keyword">new</span> ObjectMetadata();</span><br><span class="line">metadata.setSSECustomerAlgorithm(<span class="string">&quot;AES256&quot;</span>);</span><br><span class="line"></span><br><span class="line">PutObjectRequest putObjectRequest = <span class="keyword">new</span> PutObjectRequest(<span class="string">&quot;Aaa&quot;</span>, <span class="string">&quot;DeepLog.pdf&quot;</span>, <span class="keyword">new</span> File(<span class="string">&quot;/Users/cooper/Desktop/DeepLog.pdf&quot;</span>)).withSSECustomerKey(SSE_KEY).withMetadata(metadata);</span><br><span class="line"></span><br><span class="line">s3.putObject(putObjectRequest);</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>每个分享的ACL不允许超过100人(带上自身)</p>
</li>
<li><p>每个桶的policy大小不允许超过20kb</p>
</li>
<li><p>ACL不行，考虑使用Bucket Policy</p>
</li>
</ol>
]]></content>
      <categories>
        <category>aws</category>
      </categories>
      <tags>
        <tag>aws</tag>
      </tags>
  </entry>
  <entry>
    <title>aws s3 download分析</title>
    <url>/2022/01/07/Ceph/aws/aws%20s3%20download%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<ol>
<li><p>利用多个part信息进行上传现阶段我没有实验成功，存在问题，就是metedata中缺乏x-amz-mp-parts-count这个信息</p>
</li>
<li><p>可以利用PresignedUrlDownloadRequest进行多段下载，但是下载时无法暂停</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">URL url = s3.generatePresignedUrl(<span class="string">&quot;Aaa&quot;</span>, <span class="string">&quot;upload.zip&quot;</span>, <span class="keyword">new</span> Date());</span><br><span class="line">PresignedUrlDownloadRequest request = <span class="keyword">new</span> PresignedUrlDownloadRequest(url);</span><br><span class="line">PresignedUrlDownloadConfig config = <span class="keyword">new</span> PresignedUrlDownloadConfig();</span><br><span class="line">config.withDownloadSizePerRequest(<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">10</span>);<span class="comment">//默认5M为一个chunk，现在改成10M</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	resumeOnRetry–如果设置为true，则在立即重试失败的对象下载时，</span></span><br><span class="line"><span class="comment">	TransferManager将从磁盘上文件的当前端恢复下载。这是一种一次性重试机制，与sdk提供的默认重试不同。</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">config.withResumeOnRetry(<span class="keyword">true</span>);</span><br><span class="line">PresignedUrlDownload download = tm.download(request, <span class="keyword">new</span> File(<span class="string">&quot;xxxx&quot;</span>), config);</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>aws</category>
      </categories>
      <tags>
        <tag>aws</tag>
      </tags>
  </entry>
  <entry>
    <title>aws s3 upload分析</title>
    <url>/2022/01/07/Ceph/aws/aws%20s3%20upload%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h3 id="上传过程"><a href="#上传过程" class="headerlink" title="上传过程"></a>上传过程</h3><h4 id="上传可以有多种情况：单个文件上传、多个、文件夹上传，可以参考："><a href="#上传可以有多种情况：单个文件上传、多个、文件夹上传，可以参考：" class="headerlink" title="上传可以有多种情况：单个文件上传、多个、文件夹上传，可以参考："></a>上传可以有多种情况：单个文件上传、多个、文件夹上传，可以参考：</h4><p><a href="https://docs.amazonaws.cn/sdk-for-java/v1/developer-guide/examples-s3-transfermanager.html#transfermanager-upload-directory">https://docs.amazonaws.cn/sdk-for-java/v1/developer-guide/examples-s3-transfermanager.html#transfermanager-upload-directory</a></p>
<ol>
<li><p>对上传的对象请求的元数据进行填充</p>
<p>如果请求中有元数据，那么使用请求的元数据</p>
<p>如果没有则进行填充</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210405134257.png" alt="image-20210405134252350"></p>
</li>
<li><p>设置监听器</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210405134346.png" alt="image-20210405134344286" style="zoom:80%;" /></li>
<li><p>提交下载任务并设置monitor</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210405134459.png" alt="image-20210405134456144"></p>
</li>
<li><p>判断是否可以进行分段上传，如果&lt;=16M，则不进行分段上传，否则进行分段上传</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210405134630.png" alt="image-20210405134627998"></p>
</li>
<li><p>对每次上传的大小和类型进行一个合适的选择，为分段传输做准备</p>
<ul>
<li>如果是加密传输，则需要大小和传输进行特殊的选择，比如大小方面需要进行填充，传输需要选择加密传输方式</li>
<li>如果是一般的传输，则长度的选择伪Max（(double)contentLength / (double)MAXIMUM_UPLOAD_PARTS，configuration.getMinimumUploadPartSize()），因为每次分段传输有一个限制就是分的段数不能超过10000（默认，可以修改）</li>
</ul>
</li>
<li><p>对是否可以并行传输做一个判断，如果可行则进行并行传输，否则串行传输</p>
<p><font color=red>此处需要注意一下，加密的数据不能使用并行传输，因为前后chunk之间有联系</font></p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210405135913.png" alt="image-20210405135910699"></p>
</li>
<li><p>并行：</p>
<ol>
<li><p>将未上传的任务提交到线程池中，每个任务调用s3提供的底层方法——-PartETag partETag = s3.uploadPart(request).getPartETag();</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210405140240.png" alt="image-20210405140239325"></p>
</li>
<li><p>该方法每一次上传都会去找已经上传完的part，也就是identifyExistingPartsForResume()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该方法查看  https://docs.aws.amazon.com/cli/latest/reference/s3api/list-parts.html</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Map&lt;Integer, PartSummary&gt; <span class="title">identifyExistingPartsForResume</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            String uploadId)</span> </span>&#123;</span><br><span class="line">  			<span class="comment">//使用map进行记录</span></span><br><span class="line">        Map&lt;Integer, PartSummary&gt; partNumbers = <span class="keyword">new</span> HashMap&lt;Integer, PartSummary&gt;();</span><br><span class="line">        <span class="keyword">if</span> (uploadId == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> partNumbers;</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">  			<span class="comment">//partNumber为0是因为防止一次性的的返回的part不够，每一次最多返回1000个part</span></span><br><span class="line">        <span class="keyword">int</span> partNumber = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            ListPartsRequest listPartsRequest = <span class="keyword">new</span> ListPartsRequest(</span><br><span class="line">                    origReq.getBucketName(),</span><br><span class="line">                    origReq.getKey(), uploadId)</span><br><span class="line">                    .withPartNumberMarker(partNumber)</span><br><span class="line">                    .withRequesterPays(origReq.isRequesterPays())</span><br><span class="line">                    .withRequestCredentialsProvider(origReq.getRequestCredentialsProvider());</span><br><span class="line"></span><br><span class="line">            PartListing parts = s3.listParts(listPartsRequest);</span><br><span class="line">            <span class="keyword">for</span> (PartSummary partSummary : parts.getParts()) &#123;</span><br><span class="line">                partNumbers.put(partSummary.getPartNumber(), partSummary);</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="comment">//该part是否发送完毕？</span></span><br><span class="line">            <span class="keyword">if</span> (!parts.isTruncated()) &#123;</span><br><span class="line">                <span class="keyword">return</span> partNumbers;</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="comment">//如果该part没有发送完毕，也就是partNumber&gt;1000,那么就会再次进行请求</span></span><br><span class="line">            partNumber = parts.getNextPartNumberMarker();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>串行</p>
<p>串行是将每个chunk一次进行上传</p>
</li>
<li><p>关于上传校验</p>
<p>系统中设置如果设置了变量<code>DISABLE_GET_OBJECT_MD5_VALIDATION_PROPERTY</code>，可以<code>System.getProperty(DISABLE_GET_OBJECT_MD5_VALIDATION_PROPERTY)</code>来查看是否已经设置了，如果已经设置了，那么s3会默认禁用上传校验功能。</p>
<p>默认是会启用校验功能的。但是只要你的<code>DISABLE_GET_OBJECT_MD5_VALIDATION_PROPERTY</code>设置了任何的值，那么就会认为禁用了上传校验功能。</p>
<p>那么它是如何校验的呢？</p>
<p>如果提供了MD5 digist的值，那么会和返回的Etag进行比较，如果一致则认为合格，否则会认为该上传块存在问题。</p>
</li>
</ol>
<h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><ol>
<li>上传</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> AWSCredentials credentials = <span class="keyword">new</span> BasicAWSCredentials(<span class="string">&quot;U6DVKQNYCPHCIIP0XZFJ&quot;</span>, <span class="string">&quot;A32aqcbXEECBtfxL2UqqBoMs2zyJJBMnRpG0gj7i&quot;</span>);</span><br><span class="line"><span class="keyword">static</span> AmazonS3 s3 = AmazonS3ClientBuilder.standard()</span><br><span class="line">        .withCredentials(<span class="keyword">new</span> AWSStaticCredentialsProvider(credentials))</span><br><span class="line">        .withEndpointConfiguration(<span class="keyword">new</span> AwsClientBuilder.EndpointConfiguration(<span class="string">&quot;http://172.23.27.119:7480&quot;</span>,<span class="string">&quot;&quot;</span>))</span><br><span class="line">        .withPathStyleAccessEnabled(<span class="keyword">true</span>)</span><br><span class="line">        .build();</span><br><span class="line"><span class="keyword">static</span> TransferManager tm = TransferManagerBuilder.standard().withS3Client(s3).build();</span><br><span class="line"></span><br><span class="line"> 				File file = <span class="keyword">new</span> File(<span class="string">&quot;/Users/cooper/Desktop/upload/transporter.zip&quot;</span>);</span><br><span class="line"> 				PutObjectRequest request = <span class="keyword">new</span> PutObjectRequest(<span class="string">&quot;Aaa&quot;</span>, <span class="string">&quot;upload.zip&quot;</span>, file)</span><br><span class="line">        Upload upload = tm.upload(request);</span><br><span class="line">				Thread.sleep(<span class="number">1000</span>*<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">				PauseResult&lt;PersistableUpload&gt; persistableUploadPauseResult = upload.tryPause(<span class="keyword">true</span>);</span><br><span class="line">				<span class="comment">//获取暂停状态，必须为success才是成功暂停上传，否则有问题，此处可以将暂停的信息进行持久化，防止程序崩溃时重新进行上传</span></span><br><span class="line">        System.out.println(persistableUploadPauseResult.getPauseStatus().toString());</span><br><span class="line">        PersistableUpload infoToResume = persistableUploadPauseResult.getInfoToResume();</span><br><span class="line">        System.out.println(infoToResume.toString());</span><br><span class="line">				</span><br><span class="line">        tm.resumeUpload(infoToResume);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>进度显示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XferMgrProgress</span> </span>&#123;</span><br><span class="line">    <span class="comment">// waits for the transfer to complete, catching any exceptions that occur.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">waitForCompletion</span><span class="params">(Transfer xfer)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// snippet-start:[s3.java1.s3_xfer_mgr_progress.wait_for_transfer]</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            xfer.waitForCompletion();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AmazonServiceException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;Amazon service error: &quot;</span> + e.getMessage());</span><br><span class="line">            System.exit(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AmazonClientException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;Amazon client error: &quot;</span> + e.getMessage());</span><br><span class="line">            System.exit(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;Transfer interrupted: &quot;</span> + e.getMessage());</span><br><span class="line">            System.exit(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// snippet-end:[s3.java1.s3_xfer_mgr_progress.wait_for_transfer]</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Prints progress while waiting for the transfer to finish.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showTransferProgress</span><span class="params">(Transfer xfer)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// snippet-start:[s3.java1.s3_xfer_mgr_progress.poll]</span></span><br><span class="line">        <span class="comment">// print the transfer&#x27;s human-readable description</span></span><br><span class="line">        System.out.println(xfer.getDescription());</span><br><span class="line">        <span class="comment">// print an empty progress bar...</span></span><br><span class="line">        printProgressBar(<span class="number">0.0</span>);</span><br><span class="line">        <span class="comment">// update the progress bar while the xfer is ongoing.</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Note: so_far and total aren&#x27;t used, they&#x27;re just for</span></span><br><span class="line">            <span class="comment">// documentation purposes.</span></span><br><span class="line">            TransferProgress progress = xfer.getProgress();</span><br><span class="line">            <span class="keyword">long</span> so_far = progress.getBytesTransferred();</span><br><span class="line">            log.info(<span class="string">&quot;so for  &quot;</span>+so_far);</span><br><span class="line">            <span class="keyword">long</span> total = progress.getTotalBytesToTransfer();</span><br><span class="line">            <span class="keyword">double</span> pct = progress.getPercentTransferred();</span><br><span class="line">            eraseProgressBar();</span><br><span class="line">            printProgressBar(pct);</span><br><span class="line">        &#125; <span class="keyword">while</span> (xfer.isDone() == <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// print the final state of the transfer.</span></span><br><span class="line">        TransferState xfer_state = xfer.getState();</span><br><span class="line">        log.info(<span class="string">&quot;: &quot;</span> + xfer_state);</span><br><span class="line">        <span class="comment">// snippet-end:[s3.java1.s3_xfer_mgr_progress.poll]</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Prints progress of a multiple file upload while waiting for it to finish.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showMultiUploadProgress</span><span class="params">(MultipleFileUpload multi_upload)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// print the upload&#x27;s human-readable description</span></span><br><span class="line">        System.out.println(multi_upload.getDescription());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// snippet-start:[s3.java1.s3_xfer_mgr_progress.substranferes]</span></span><br><span class="line">        Collection&lt;? extends Upload&gt; sub_xfers = <span class="keyword">new</span> ArrayList&lt;Upload&gt;();</span><br><span class="line">        sub_xfers = multi_upload.getSubTransfers();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;\nSubtransfer progress:\n&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (Upload u : sub_xfers) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;  &quot;</span> + u.getDescription());</span><br><span class="line">                <span class="keyword">if</span> (u.isDone()) &#123;</span><br><span class="line">                    TransferState xfer_state = u.getState();</span><br><span class="line">                    System.out.println(<span class="string">&quot;  &quot;</span> + xfer_state);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    TransferProgress progress = u.getProgress();</span><br><span class="line">                    <span class="keyword">double</span> pct = progress.getPercentTransferred();</span><br><span class="line">                    printProgressBar(pct);</span><br><span class="line">                    System.out.println();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// wait a bit before the next update.</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">200</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (multi_upload.isDone() == <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// print the final state of the transfer.</span></span><br><span class="line">        TransferState xfer_state = multi_upload.getState();</span><br><span class="line">        System.out.println(<span class="string">&quot;\nMultipleFileUpload &quot;</span> + xfer_state);</span><br><span class="line">        <span class="comment">// snippet-end:[s3.java1.s3_xfer_mgr_progress.substranferes]</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// prints a simple text progressbar: [#####     ]</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printProgressBar</span><span class="params">(<span class="keyword">double</span> pct)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// if bar_size changes, then change erase_bar (in eraseProgressBar) to</span></span><br><span class="line">        <span class="comment">// match.</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> bar_size = <span class="number">40</span>;</span><br><span class="line">        <span class="keyword">final</span> String empty_bar = <span class="string">&quot;                                        &quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> String filled_bar = <span class="string">&quot;########################################&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> amt_full = (<span class="keyword">int</span>) (bar_size * (pct / <span class="number">100.0</span>));</span><br><span class="line">        System.out.format(<span class="string">&quot;  [%s%s]\n&quot;</span>, filled_bar.substring(<span class="number">0</span>, amt_full),</span><br><span class="line">                empty_bar.substring(<span class="number">0</span>, bar_size - amt_full));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// erases the progress bar.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">eraseProgressBar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// erase_bar is bar_size (from printProgressBar) + 4 chars.</span></span><br><span class="line">        <span class="keyword">final</span> String erase_bar = <span class="string">&quot;\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b&quot;</span>;</span><br><span class="line">        System.out.format(erase_bar);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">uploadFileWithListener</span><span class="params">(String file_path,</span></span></span><br><span class="line"><span class="params"><span class="function">                                              String bucket_name, String key_prefix, <span class="keyword">boolean</span> pause)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;file: &quot;</span> + file_path +</span><br><span class="line">                (pause ? <span class="string">&quot; (pause)&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">        String key_name = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (key_prefix != <span class="keyword">null</span>) &#123;</span><br><span class="line">            key_name = key_prefix + <span class="string">&#x27;/&#x27;</span> + file_path;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            key_name = file_path;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// snippet-start:[s3.java1.s3_xfer_mgr_progress.progress_listener]</span></span><br><span class="line">        File f = <span class="keyword">new</span> File(file_path);</span><br><span class="line">        TransferManager xfer_mgr = TransferManagerBuilder.standard().build();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Upload u = xfer_mgr.upload(bucket_name, key_name, f);</span><br><span class="line">            <span class="comment">// print an empty progress bar...</span></span><br><span class="line">            printProgressBar(<span class="number">0.0</span>);</span><br><span class="line">            u.addProgressListener(<span class="keyword">new</span> ProgressListener() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">progressChanged</span><span class="params">(ProgressEvent e)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">double</span> pct = e.getBytesTransferred() * <span class="number">100.0</span> / e.getBytes();</span><br><span class="line">                    eraseProgressBar();</span><br><span class="line">                    printProgressBar(pct);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// block with Transfer.waitForCompletion()</span></span><br><span class="line">            XferMgrProgress.waitForCompletion(u);</span><br><span class="line">            <span class="comment">// print the final state of the transfer.</span></span><br><span class="line">            TransferState xfer_state = u.getState();</span><br><span class="line">            System.out.println(<span class="string">&quot;: &quot;</span> + xfer_state);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AmazonServiceException e) &#123;</span><br><span class="line">            System.err.println(e.getErrorMessage());</span><br><span class="line">            System.exit(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        xfer_mgr.shutdownNow();</span><br><span class="line">        <span class="comment">// snippet-end:[s3.java1.s3_xfer_mgr_progress.progress_listener]</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">uploadDirWithSubprogress</span><span class="params">(String dir_path,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                String bucket_name, String key_prefix, <span class="keyword">boolean</span> recursive,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                <span class="keyword">boolean</span> pause)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;directory: &quot;</span> + dir_path + (recursive ?</span><br><span class="line">                <span class="string">&quot; (recursive)&quot;</span> : <span class="string">&quot;&quot;</span>) + (pause ? <span class="string">&quot; (pause)&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">        TransferManager xfer_mgr = <span class="keyword">new</span> TransferManager();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            MultipleFileUpload multi_upload = xfer_mgr.uploadDirectory(</span><br><span class="line">                    bucket_name, key_prefix, <span class="keyword">new</span> File(dir_path), recursive);</span><br><span class="line">            <span class="comment">// loop with Transfer.isDone()</span></span><br><span class="line">            XferMgrProgress.showMultiUploadProgress(multi_upload);</span><br><span class="line">            <span class="comment">// or block with Transfer.waitForCompletion()</span></span><br><span class="line">            XferMgrProgress.waitForCompletion(multi_upload);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AmazonServiceException e) &#123;</span><br><span class="line">            System.err.println(e.getErrorMessage());</span><br><span class="line">            System.exit(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        xfer_mgr.shutdownNow();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String USAGE = <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;Usage:\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    XferMgrProgress [--recursive] [--pause] &lt;s3_path&gt; &lt;local_path&gt;\n\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;Where:\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    --recursive - Only applied if local_path is a directory.\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                  Copies the contents of the directory recursively.\n\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    --pause     - Attempt to pause+resume the upload. This may not work for\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                  small files.\n\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    s3_path     - The S3 destination (bucket/path) to upload the file(s) to.\n\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    local_path  - The path to a local file or directory path to upload to S3.\n\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;Examples:\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    XferMgrProgress public_photos/cat_happy.png my_photos/funny_cat.png\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    XferMgrProgress public_photos my_photos/cat_sad.png\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    XferMgrProgress public_photos my_photos\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (args.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            System.out.println(USAGE);</span><br><span class="line">            System.exit(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> cur_arg = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> recursive = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> pause = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// first, parse any switches</span></span><br><span class="line">        <span class="keyword">while</span> (args[cur_arg].startsWith(<span class="string">&quot;--&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (args[cur_arg].equals(<span class="string">&quot;--recursive&quot;</span>)) &#123;</span><br><span class="line">                recursive = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (args[cur_arg].equals(<span class="string">&quot;--pause&quot;</span>)) &#123;</span><br><span class="line">                pause = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Unknown argument: &quot;</span> + args[cur_arg]);</span><br><span class="line">                System.out.println(USAGE);</span><br><span class="line">                System.exit(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            cur_arg += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// only the first &#x27;/&#x27; character is of interest to get the bucket name.</span></span><br><span class="line">        <span class="comment">// Subsequent ones are part of the key name.</span></span><br><span class="line">        String[] s3_path = args[cur_arg].split(<span class="string">&quot;/&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        cur_arg += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        String bucket_name = s3_path[<span class="number">0</span>];</span><br><span class="line">        String key_prefix = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (s3_path.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            key_prefix = s3_path[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String local_path = args[cur_arg];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// check to see if local path is a directory or file...</span></span><br><span class="line">        File f = <span class="keyword">new</span> File(args[cur_arg]);</span><br><span class="line">        <span class="keyword">if</span> (f.exists() == <span class="keyword">false</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Input path doesn&#x27;t exist: &quot;</span> + args[cur_arg]);</span><br><span class="line">            System.exit(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (f.isDirectory()) &#123;</span><br><span class="line">            uploadDirWithSubprogress(local_path, bucket_name, key_prefix,</span><br><span class="line">                    recursive, pause);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            uploadFileWithListener(local_path, bucket_name, key_prefix, pause);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>aws</category>
      </categories>
      <tags>
        <tag>aws</tag>
      </tags>
  </entry>
  <entry>
    <title>S3断点下载</title>
    <url>/2022/01/07/Ceph/aws/s3%E6%96%AD%E7%82%B9%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<h4 id="s3断点下载"><a href="#s3断点下载" class="headerlink" title="s3断点下载"></a>s3断点下载</h4><ol>
<li><p>两个概念</p>
<p>http request中的请求头有一个header为 range</p>
<p>该字段表明请求的下载流从什么地方开始下载</p>
<p>例如 </p>
<ul>
<li> RANGE： bytes=2000070-</li>
</ul>
<p>  表明从2000070开始一直下载到最后</p>
<ul>
<li><p>RANGE： bytes=2000070-2000080</p>
<p>表明从2000070开始一直下载到2000080</p>
</li>
</ul>
<p>如果在请求时使用了range字段，那么在返回的response中会有多出一个header即</p>
<p>Content-Range=bytes 100000-19999/20000</p>
<p>表明你下载的返回是100000-19999，一共有20000字节，<font color=red>这个字段非常重要</font>，服务器根据请求头的Content-Range来决定从文件流的哪个位置上开始读，并且需要返回状态码为206,表示部分请求成功，这些都是附加信息，告诉服务器需要怎样返回流</p>
<p><a href="https://blog.csdn.net/weixin_43453386/article/details/83792682">response header属性详解</a></p>
</li>
<li><p>代码 (说明一下：此处的s3自动帮我们完成了响应的流的内容，因此我们不需要在response中进行header的设置)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;下载文件&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/downloadFile&quot;,method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> RestResult&lt;?&gt; downFile(<span class="meta">@RequestParam(value=&quot;fileName&quot;)</span>String fileName, String userId, String filePath) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  UserInfo userInfo = userInfoService.selectUserByUserId(userId);</span><br><span class="line">  UserStorageInfo userStorageInfo = userStorageInfoService.selectUserStorageInfoByUserId(userId);</span><br><span class="line">  <span class="keyword">if</span>(userInfo!=<span class="keyword">null</span>&amp;&amp;userStorageInfo!=<span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RestResult&lt;&gt;(<span class="number">0</span>,<span class="string">&quot;用户信息不存在&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  String bucket = userInfo.getBucket();</span><br><span class="line">  AmazonS3 s3 = s3Client.getS3Client(<span class="keyword">new</span> String(decoder.decode(userStorageInfo.getAk())),<span class="keyword">new</span> String(decoder.decode(userStorageInfo.getSk())));</span><br><span class="line"></span><br><span class="line">  GetObjectRequest request = <span class="keyword">new</span> GetObjectRequest(bucket,fileName);<span class="comment">//获取s3发送的请求</span></span><br><span class="line">  <span class="keyword">if</span>(request!=<span class="keyword">null</span>)&#123;</span><br><span class="line">    S3Object object = s3.getObject(request);</span><br><span class="line">    <span class="comment">//获取文件大小</span></span><br><span class="line">    <span class="keyword">long</span> fSize = object.getObjectMetadata().getContentLength();</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">long</span> pos = <span class="number">0</span>;</span><br><span class="line">    File file = <span class="keyword">new</span> File(filePath+fileName);</span><br><span class="line">    OutputStream out;</span><br><span class="line">    <span class="keyword">if</span>(file.exists())&#123;</span><br><span class="line">      pos = file.length();</span><br><span class="line">      request.setRange(pos);<span class="comment">//设置请求头中的range参数</span></span><br><span class="line">      out = <span class="keyword">new</span> FileOutputStream(file,<span class="keyword">true</span>);<span class="comment">//如果已经存在文件，已追加的形式添加数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      file.createNewFile();</span><br><span class="line">      out = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      inputStream = object.getObjectContent();<span class="comment">//获取上述range字段范围的文件流</span></span><br><span class="line">      inputStream.skip(pos);</span><br><span class="line">      <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">100</span>]; <span class="comment">//以10M的速度进行下载</span></span><br><span class="line">      <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span> ((length = inputStream.read(buffer, <span class="number">0</span>, buffer.length)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        out.write(buffer, <span class="number">0</span>, length);</span><br><span class="line">        <span class="comment">//                    Thread.sleep(100);  //调试的时候使用的</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;下载异常&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> != out) out.flush();</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> != out) out.close();</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> != inputStream) inputStream.close();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RestResult&lt;&gt;(<span class="number">0</span>,file.length()==fSize?<span class="string">&quot;下载完成&quot;</span>:<span class="string">&quot;下载未完成&quot;</span>,file.length());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RestResult&lt;&gt;(<span class="number">0</span>,<span class="string">&quot;没有找到该文件&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>如果说是一般的服务器的话，可以参考这篇<a href="https://blog.csdn.net/ljk168/article/details/82916629">博客</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>ceph</category>
      </categories>
      <tags>
        <tag>ceph</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2022/01/07/Ceph/cephadm/%E5%AE%89%E8%A3%85ceph/</url>
    <content><![CDATA[<p>title: cephadm安装</p>
<p>categories: </p>
<ul>
<li>ceph</li>
</ul>
<p>tags: </p>
<ul>
<li><p>ceph</p>
</li>
<li><p>cephadm</p>
<hr>
</li>
</ul>
<ol>
<li><p>环境准备</p>
<p>CentOS 8</p>
<p>一般CentOS8自带了podman、chrony</p>
</li>
<li><p>关闭防火墙、selinux</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">关闭防火墙和selinux</span></span><br><span class="line">systemctl disable --now firewalld</span><br><span class="line">setenforce 0</span><br><span class="line">sed -i &#x27;s/^SELINUX=.*/SELINUX=disabled/&#x27; /etc/selinux/config</span><br></pre></td></tr></table></figure></li>
<li><p>配置时钟同步</p>
</li>
<li><p>配置yum源</p>
<ul>
<li><p>CentOS-AppStream.repo</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[aliyun-AppStream]</span><br><span class="line">name=CentOS-$releasever - AppStream</span><br><span class="line">baseurl=https://mirrors.aliyun.com/centos/$releasever/AppStream/$basearch/os/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial</span><br></pre></td></tr></table></figure></li>
<li><p>CentOS-BaseOS.repo</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[aliyun-BaseOS]</span><br><span class="line">name=CentOS-$releasever - Base</span><br><span class="line">baseurl=https://mirrors.aliyun.com/centos/$releasever/BaseOS/$basearch/os/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial</span><br></pre></td></tr></table></figure></li>
<li><p>ceph.repo</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Ceph_norch]</span><br><span class="line">name=Ceph_norch</span><br><span class="line">baseurl=http://mirrors.163.com/ceph/rpm-pacific/el8/noarch/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line"></span><br><span class="line">[Ceph_X86]</span><br><span class="line">name=Ceph_X86</span><br><span class="line">baseurl=http://mirrors.163.com/ceph/rpm-pacific/el8/x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>安装cephadm</p>
<p><code>yum install cephadm -y</code></p>
</li>
<li><p>修改podman源</p>
<p><code>vim /etc/containers/registries.conf</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">unqualified-search-registries = [&quot;docker.io&quot;]</span><br><span class="line"></span><br><span class="line">[[registry]]</span><br><span class="line">prefix = &quot;docker.io&quot;</span><br><span class="line">location = &quot;y55otr6h.mirror.aliyuncs.com&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>修改cephadm中的image源</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210926194019.png" alt="image-20210926194011317"></p>
<p>一般改成docker.io就行了，原来是q开头的源</p>
</li>
<li><p>安装ceph-common</p>
<p><code>yum install -y ceph-common</code></p>
<p>遇到问题看这篇文章</p>
<p><a href="https://blog.csdn.net/qn0007/article/details/119459040">https://blog.csdn.net/qn0007/article/details/119459040</a></p>
<p><font color=red>注意：其中rpm包需要先安装</font></p>
</li>
<li><p><code>ceph -s</code>查看安装结果</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>http</title>
    <url>/2022/01/07/Go/geeWeb/http/</url>
    <content><![CDATA[<ol>
<li><p>Go中所有请求会发送到</p>
<p><code>http.ListenAndServe(&quot;:9999&quot;, nil)</code>里面</p>
<p>这里的第二个参数如果是nil的话会默认调用系统自带的Handler接口</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210427111236.png" alt="image-20210427111228019"></p>
<p> 该Handler有一个接口，实现ServeHTTP方法就会处理所有转发到这个端口的请求</p>
<p>默认的如下所示：</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210427111436.png" alt="image-20210427111435544"></p>
<p>实现的默认方法如下</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210427111517.png" alt="image-20210427111512010"></p>
</li>
</ol>
<ol start="2">
<li><p>如何自定义一个Context</p>
<ul>
<li><font color=red>每一个请求对应一个Context</font></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
        <tag>GeeWEB</tag>
      </tags>
  </entry>
  <entry>
    <title>动态路由</title>
    <url>/2022/01/07/Go/geeWeb/%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1/</url>
    <content><![CDATA[<h3 id="何为动态路由"><a href="#何为动态路由" class="headerlink" title="何为动态路由"></a>何为动态路由</h3><p>我们都知道在go中使用如果想要访问的网址得到相应，那么每一个路由都应该对应一个handler对其进行处理</p>
<p>例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">http.HandleFunc(<span class="string">&quot;/hello&quot;</span>, helloHandler)</span><br></pre></td></tr></table></figure>

<p>其中handler是一个处理/hello路由的函数</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">helloHandler</span><span class="params">(w http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class="line">   writer.Write([]<span class="keyword">byte</span>(<span class="string">&quot;Hello test&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当我们去访问<code>\hello</code>时便会得到一个相应，那就是浏览器输出<code>Hello test</code></p>
<p>但是这样带来了一种比较麻烦的情况，比如我现在有多个路由：</p>
<ul>
<li>/hello/Cooper</li>
<li>/hello/Marry</li>
<li>/hello/Aaron</li>
</ul>
<p>我们可以看到这里有三个路由，虽然不一样，但是基本形式上是完全一致的，我们可以归结为一下一种形式：</p>
<p><code>/hello/&#123;name&#125;</code></p>
<p>假设我们需要根据员工的name返回员工的信息，一般的做法就是定义一个路由，比如说是<code>/hello/employeeInfo</code>，然后通过Get方法传递员工的name给后端。</p>
<p><strong>但是如果我们不使用传递参数的方法给后端呢？</strong></p>
<p>按照常规的做法就是像上面定义三个路由，然后分别写对应的handler。</p>
<p>如果员工不止三个而是有非常多的人呢？显然我们不可能写那么多的路由以及对应的handler</p>
<p>这时候也许你就会想了，要是我们这里只写一个路由那该多好呀？比如说<code>/hello/&#123;name&#125;</code>，然后写一个handler去处理那就行了。</p>
<p>但是这里有一个问题：如何让程序知道我们请求形如<code>/hello/&#123;name&#125;</code>的路由是合法的呢？</p>
<p>这就需要动态路由来帮助我们处理了。</p>
<h3 id="动态路由的数据结构———Trie-树"><a href="#动态路由的数据结构———Trie-树" class="headerlink" title="动态路由的数据结构———Trie 树"></a>动态路由的数据结构———Trie 树</h3><p><font color=red>当然我们这里选用的是Trie 树，也可以有其他不同的实现方法</font></p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210505170517.png" alt="image-20210505170509706"></p>
<p>我们可以看到形如这样的一棵树就是trie树，其实就是一棵前缀树，相同前缀的树都拥有相同的parent结点</p>
<p>从root一直到叶子结点就表示一条路由，比如下面的<code>/employee/manager/manager1</code>和<code>/employee/manager/manager2</code></p>
<h4 id="结点定义"><a href="#结点定义" class="headerlink" title="结点定义"></a>结点定义</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> node <span class="keyword">struct</span> &#123;</span><br><span class="line">   pattern <span class="keyword">string</span> <span class="comment">//路由  只有当插入完成时才会对该字段进行赋值操作</span></span><br><span class="line">   part <span class="keyword">string</span>  <span class="comment">//路由中的一部分</span></span><br><span class="line">   children []*node <span class="comment">//子结点</span></span><br><span class="line">  isWild <span class="keyword">bool</span> <span class="comment">//该结点是否包含通配符，比如”:“、”*“等，如果有则表示该结点可以使任意值,也就是通配的结点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里有个注意的地方：<font color=red>pattern只在叶子结点上赋值</font></p>
<p>这样做的好处是：</p>
<ul>
<li>判断该结点是否为叶子结点</li>
<li>叶子结点显示路由</li>
</ul>
<p><font color=red>一定要注意,这里我们所构建的Trie树是针对动态路由设置的，在本案例中就是/hello/{name}</font></p>
<h4 id="构建Trie树"><a href="#构建Trie树" class="headerlink" title="构建Trie树"></a>构建Trie树</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过不断的递归插入得到最终的树</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *node)</span> <span class="title">insert</span><span class="params">(pattern <span class="keyword">string</span>,parts []<span class="keyword">string</span>,height <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">   <span class="comment">//直达最后一刻我才会进行赋值操作，相当于是子结点的一个标识符</span></span><br><span class="line">   <span class="keyword">if</span> <span class="built_in">len</span>(parts)==height&#123;</span><br><span class="line">      n.pattern = pattern</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   part:=parts[height]</span><br><span class="line">   child:=n.matchChild(part)<span class="comment">//查找当前的节存不存在，如果不存在则需要创建再队规，如果存在则直接进行递归</span></span><br><span class="line">   <span class="keyword">if</span> child==<span class="literal">nil</span>&#123;</span><br><span class="line">      child = &amp;node&#123;</span><br><span class="line">         part: part,</span><br><span class="line">         isWild: part[<span class="number">0</span>]==<span class="string">&#x27;:&#x27;</span>||part[<span class="number">0</span>]==<span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//当前结点的子结点，这里的n就是当前结点</span></span><br><span class="line">      n.children = <span class="built_in">append</span>(n.children,child)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   child.insert(pattern,parts,height+<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//匹配路径  返回当前匹配成功的node节点</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *node)</span> <span class="title">matchChild</span><span class="params">(part <span class="keyword">string</span>)</span> *<span class="title">node</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> _,child:=<span class="keyword">range</span> n.children&#123;</span><br><span class="line">		<span class="keyword">if</span> child.part==part||child.isWild&#123;</span><br><span class="line">			<span class="keyword">return</span> child</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="查看路由匹配情况"><a href="#查看路由匹配情况" class="headerlink" title="查看路由匹配情况"></a>查看路由匹配情况</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过递归查看匹配情况</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *node)</span> <span class="title">search</span><span class="params">(parts []<span class="keyword">string</span>,height <span class="keyword">int</span>)</span> *<span class="title">node</span></span>&#123;</span><br><span class="line">   <span class="keyword">if</span> <span class="built_in">len</span>(parts)==height||strings.HasPrefix(n.part,<span class="string">&quot;*&quot;</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span> n.pattern == <span class="string">&quot;&quot;</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> n</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   part:=parts[height]</span><br><span class="line">   children:=n.matchChildren(part)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> _,child:= <span class="keyword">range</span> children&#123;</span><br><span class="line">      result := child.search(parts,height+<span class="number">1</span>)</span><br><span class="line">      <span class="keyword">if</span> result!=<span class="literal">nil</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> result</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//匹配路径 返回匹配成功的node数组</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *node)</span> <span class="title">matchChildren</span> <span class="params">(part <span class="keyword">string</span>)</span> []*<span class="title">node</span></span>&#123;</span><br><span class="line">	nodes := <span class="built_in">make</span>([]*node,<span class="number">0</span>)</span><br><span class="line">	<span class="keyword">for</span> _,child:=<span class="keyword">range</span> n.children&#123;</span><br><span class="line">		<span class="keyword">if</span> child.part == part||child.isWild&#123;</span><br><span class="line">			nodes = <span class="built_in">append</span>(nodes, child)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> nodes</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="构建动态路由"><a href="#构建动态路由" class="headerlink" title="构建动态路由"></a>构建动态路由</h3><h4 id="Trie树"><a href="#Trie树" class="headerlink" title="Trie树"></a>Trie树</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> router</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">   <span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> node <span class="keyword">struct</span> &#123;</span><br><span class="line">   pattern <span class="keyword">string</span> <span class="comment">//路径  只有当插入完成时才会对该字段进行赋值操作</span></span><br><span class="line">   part <span class="keyword">string</span>  <span class="comment">//路由中的一部分</span></span><br><span class="line">   children []*node</span><br><span class="line">   isWild <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *node)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;node&#123;pattern=%s,part=%s,isWild=%t&#125;&quot;</span>,n.pattern,n.part,n.isWild)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *node)</span> <span class="title">insert</span><span class="params">(pattern <span class="keyword">string</span>,parts []<span class="keyword">string</span>,height <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">   <span class="comment">//直达最后一刻我才会进行赋值操作，相当于是子结点的一个标识符</span></span><br><span class="line">   <span class="keyword">if</span> <span class="built_in">len</span>(parts)==height&#123;</span><br><span class="line">      n.pattern = pattern</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   part:=parts[height]</span><br><span class="line">   child:=n.matchChild(part)<span class="comment">//查找当前的节存不存在，如果不存在则需要创建再队规，如果存在则直接进行递归</span></span><br><span class="line">   <span class="keyword">if</span> child==<span class="literal">nil</span>&#123;</span><br><span class="line">      child = &amp;node&#123;</span><br><span class="line">         part: part,</span><br><span class="line">         isWild: part[<span class="number">0</span>]==<span class="string">&#x27;:&#x27;</span>||part[<span class="number">0</span>]==<span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//当前结点的子结点，这里的n就是当前结点</span></span><br><span class="line">      n.children = <span class="built_in">append</span>(n.children,child)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   child.insert(pattern,parts,height+<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *node)</span> <span class="title">search</span><span class="params">(parts []<span class="keyword">string</span>,height <span class="keyword">int</span>)</span> *<span class="title">node</span></span>&#123;</span><br><span class="line">   <span class="keyword">if</span> <span class="built_in">len</span>(parts)==height||strings.HasPrefix(n.part,<span class="string">&quot;*&quot;</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span> n.pattern == <span class="string">&quot;&quot;</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> n</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   part:=parts[height]</span><br><span class="line">   children:=n.matchChildren(part)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> _,child:= <span class="keyword">range</span> children&#123;</span><br><span class="line">      result := child.search(parts,height+<span class="number">1</span>)</span><br><span class="line">      <span class="keyword">if</span> result!=<span class="literal">nil</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> result</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *node)</span> <span class="title">travel</span><span class="params">(list *([]*node)</span>)</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> n.pattern!=<span class="string">&quot;&quot;</span>&#123;</span><br><span class="line">      *list = <span class="built_in">append</span>(*list,n)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> _,child:=<span class="keyword">range</span> n.children&#123;</span><br><span class="line">      child.travel(list)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//匹配路径  返回当前匹配成功的node节点</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *node)</span> <span class="title">matchChild</span><span class="params">(part <span class="keyword">string</span>)</span> *<span class="title">node</span></span> &#123;</span><br><span class="line">   <span class="keyword">for</span> _,child:=<span class="keyword">range</span> n.children&#123;</span><br><span class="line">      <span class="keyword">if</span> child.part==part||child.isWild&#123;</span><br><span class="line">         <span class="keyword">return</span> child</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//匹配路径 返回匹配成功的node数组</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *node)</span> <span class="title">matchChildren</span> <span class="params">(part <span class="keyword">string</span>)</span> []*<span class="title">node</span></span>&#123;</span><br><span class="line">   nodes := <span class="built_in">make</span>([]*node,<span class="number">0</span>)</span><br><span class="line">   <span class="keyword">for</span> _,child:=<span class="keyword">range</span> n.children&#123;</span><br><span class="line">      <span class="keyword">if</span> child.part == part||child.isWild&#123;</span><br><span class="line">         nodes = <span class="built_in">append</span>(nodes, child)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> nodes</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> router</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;7days-project/web/gee&quot;</span></span><br><span class="line">   <span class="string">&quot;net/http&quot;</span></span><br><span class="line">   <span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Router <span class="keyword">struct</span> &#123;</span><br><span class="line">   roots <span class="keyword">map</span>[<span class="keyword">string</span>]*node</span><br><span class="line">   handlers <span class="keyword">map</span>[<span class="keyword">string</span>]gee.HandlerFunc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewRouter</span><span class="params">()</span> *<span class="title">Router</span></span> &#123;</span><br><span class="line">   <span class="keyword">return</span> &amp;Router&#123;</span><br><span class="line">      roots: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]*node),</span><br><span class="line">      handlers: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]gee.HandlerFunc),</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解析路由</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">parsePattern</span><span class="params">(pattern <span class="keyword">string</span>)</span> []<span class="title">string</span></span>&#123;</span><br><span class="line">   vs:=strings.Split(pattern,<span class="string">&quot;/&quot;</span>)</span><br><span class="line"></span><br><span class="line">   parts:=<span class="built_in">make</span>([]<span class="keyword">string</span>,<span class="number">0</span>)</span><br><span class="line">   <span class="keyword">for</span> _,item:=<span class="keyword">range</span> vs&#123;</span><br><span class="line">      <span class="keyword">if</span> item!=<span class="string">&quot;&quot;</span>&#123;</span><br><span class="line">         parts = <span class="built_in">append</span>(parts,item)</span><br><span class="line">         <span class="comment">//只能匹配一个*，匹配到就停止匹配，因为*代表任何数值都可以进行匹配，因此包含&quot;/&quot;也是可以的相当于多层路由建模时，真正的模型是到*为止，下面就不匹配了</span></span><br><span class="line">         <span class="keyword">if</span> item[<span class="number">0</span>]==<span class="string">&#x27;*&#x27;</span>&#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> parts</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Router)</span> <span class="title">AddRoute</span><span class="params">(method <span class="keyword">string</span>,pattern <span class="keyword">string</span>,handler gee.HandlerFunc)</span></span> &#123;</span><br><span class="line">   parts:=parsePattern(pattern)</span><br><span class="line"></span><br><span class="line">   key:=method+<span class="string">&quot;-&quot;</span>+pattern</span><br><span class="line">   <span class="comment">//查看该方法已经构建树了，没有的话构建空树</span></span><br><span class="line">   _,ok := r.roots[method]</span><br><span class="line">   <span class="keyword">if</span> !ok&#123;</span><br><span class="line">      r.roots[method]  =&amp;node&#123;&#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//构建Trie树</span></span><br><span class="line">   r.roots[method].insert(pattern,parts,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">   <span class="comment">//找到对应的handler</span></span><br><span class="line">   r.handlers[key] = handler</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Router)</span> <span class="title">getRoute</span><span class="params">(method <span class="keyword">string</span>,path <span class="keyword">string</span>)</span><span class="params">(*node,<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span></span>&#123;</span><br><span class="line">   searchParts:=parsePattern(path)</span><br><span class="line">   params:=<span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line">   root,ok := r.roots[method]</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> !ok&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span>,<span class="literal">nil</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//n为匹配到的模式</span></span><br><span class="line">   n:=root.search(searchParts,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> n!=<span class="literal">nil</span>&#123;</span><br><span class="line">      parts:=parsePattern(n.pattern)</span><br><span class="line">      <span class="keyword">for</span> index,part:=<span class="keyword">range</span> parts&#123;</span><br><span class="line">         <span class="comment">//根据通配符所在路由中的位置来确定真正访问路由中对应通配符的项</span></span><br><span class="line">         <span class="keyword">if</span> part[<span class="number">0</span>]==<span class="string">&#x27;:&#x27;</span>&#123;</span><br><span class="line">            params[part[<span class="number">1</span>:]] = searchParts[index]</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> part[<span class="number">0</span>]==<span class="string">&#x27;*&#x27;</span>&amp;&amp;<span class="built_in">len</span>(part)&gt;<span class="number">1</span>&#123;</span><br><span class="line">            <span class="comment">//拼接后面的字符串</span></span><br><span class="line">            params[part[<span class="number">1</span>:]] = strings.Join(searchParts[index:],<span class="string">&quot;/&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> n,params</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到某一个方法的所有路由</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Router)</span> <span class="title">getRoutes</span><span class="params">(method <span class="keyword">string</span>)</span> []*<span class="title">node</span></span>&#123;</span><br><span class="line">   root,ok:=r.roots[method]</span><br><span class="line">   <span class="keyword">if</span> !ok&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   nodes:=<span class="built_in">make</span>([]*node,<span class="number">0</span>)</span><br><span class="line">   root.travel(&amp;nodes)</span><br><span class="line">   <span class="keyword">return</span> nodes</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Router)</span> <span class="title">Handle</span><span class="params">(c *gee.Context)</span></span>&#123;</span><br><span class="line">   n, params := r.getRoute(c.Method, c.Path)</span><br><span class="line">   <span class="keyword">if</span> n!=<span class="literal">nil</span>&#123;</span><br><span class="line">      c.Params = params</span><br><span class="line">      key:= c.Method+<span class="string">&quot;-&quot;</span>+c.Path</span><br><span class="line">      r.handlers[key](c)</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      c.String(http.StatusNotFound,<span class="string">&quot;未找到对应路由---&gt;%s\n&quot;</span>,c.Path)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> gee</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">   <span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> H <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Context <span class="keyword">struct</span> &#123;</span><br><span class="line">   <span class="comment">// origin objects</span></span><br><span class="line">   Writer http.ResponseWriter</span><br><span class="line">   Req    *http.Request</span><br><span class="line">   <span class="comment">// request info</span></span><br><span class="line">   Path   <span class="keyword">string</span></span><br><span class="line">   Method <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//路由，以及其对应的通配参数的值</span></span><br><span class="line">   Params <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// response info</span></span><br><span class="line">   StatusCode <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newContext</span><span class="params">(w http.ResponseWriter,req *http.Request)</span> *<span class="title">Context</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> &amp;Context&#123;</span><br><span class="line">      Writer: w,</span><br><span class="line">      Req: req,</span><br><span class="line">      Path: req.URL.Path,</span><br><span class="line">      Method: req.Method,</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span> <span class="title">PostForm</span><span class="params">(key <span class="keyword">string</span>)</span> <span class="title">string</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> c.Req.FormValue(key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span> <span class="title">Query</span><span class="params">(key <span class="keyword">string</span>)</span> <span class="title">string</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> c.Req.URL.Query().Get(key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span> <span class="title">Status</span><span class="params">(code <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">   c.StatusCode = code</span><br><span class="line">   c.Writer.WriteHeader(code)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span> <span class="title">SetHeader</span> <span class="params">(key <span class="keyword">string</span>,value <span class="keyword">string</span>)</span></span>&#123;</span><br><span class="line">   c.Writer.Header().Set(key,value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span> <span class="title">String</span><span class="params">(code <span class="keyword">int</span>,format <span class="keyword">string</span>,values ...<span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">   c.SetHeader(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;text/plain&quot;</span>)</span><br><span class="line">   c.Status(code)</span><br><span class="line">   c.Writer.Write([]<span class="keyword">byte</span>(fmt.Sprintf(format,values...)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span> <span class="title">JSON</span><span class="params">(code <span class="keyword">int</span>,obj <span class="keyword">interface</span>&#123;&#125;)</span></span>&#123;</span><br><span class="line">   c.SetHeader(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;application/json&quot;</span>)</span><br><span class="line">   c.Status(code)</span><br><span class="line">   <span class="comment">//相当于是</span></span><br><span class="line">   encoder:=json.NewEncoder(c.Writer)</span><br><span class="line">   <span class="keyword">if</span> err:=encoder.Encode(obj);err!=<span class="literal">nil</span>&#123;</span><br><span class="line">      http.Error(c.Writer,err.Error(),<span class="number">500</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span> <span class="title">HTML</span><span class="params">(code <span class="keyword">int</span>,html <span class="keyword">string</span>)</span></span>&#123;</span><br><span class="line">   c.SetHeader(<span class="string">&quot;Content-type&quot;</span>,<span class="string">&quot;text/html&quot;</span>)</span><br><span class="line">   c.Status(code)</span><br><span class="line">   c.Writer.Write([]<span class="keyword">byte</span>(html))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Param 获取对应的动态参数的值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span> <span class="title">Param</span><span class="params">(key <span class="keyword">string</span>)</span> <span class="title">string</span></span>&#123;</span><br><span class="line">   value,_:=c.Params[key]</span><br><span class="line">   <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p><a href="https://geektutu.com/post/gee-day3.html">参考</a></p>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
        <tag>GeeWEB</tag>
      </tags>
  </entry>
  <entry>
    <title>GC算法</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/JVM/GC%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="确定哪些垃圾回收的算法"><a href="#确定哪些垃圾回收的算法" class="headerlink" title="确定哪些垃圾回收的算法"></a>确定哪些垃圾回收的算法</h2><p>参考（咱们从头到尾说一次 Java 垃圾回收 - 阿里云云栖号的文章 - 知乎 <a href="https://zhuanlan.zhihu.com/p/73628158%EF%BC%89">https://zhuanlan.zhihu.com/p/73628158）</a></p>
<h3 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>在对象头中分配一个空间来存储该对象被引用的次数</p>
<ul>
<li>如果该对象被其他对象引用则+1</li>
<li>如果删除该对象的引用则-1</li>
<li>当该对象的引用计数为0时则回收该对象</li>
</ul>
<h4 id="运行方式"><a href="#运行方式" class="headerlink" title="运行方式"></a>运行方式</h4><p>引用计数法是将垃圾回收分摊到整个应用程序的运行当中的，<font color=red>并非是在进行垃圾回收的同时挂起整个应用的运行</font></p>
<p>不是真正意义上的<code>stop-the-world</code></p>
<h4 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h4><p>可能存在以下情况</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReferenceCountingGC</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object instance;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReferenceCountingGC</span><span class="params">(String name)</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testGC</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    ReferenceCountingGC a = <span class="keyword">new</span> ReferenceCountingGC(<span class="string">&quot;objA&quot;</span>);</span><br><span class="line">    ReferenceCountingGC b = <span class="keyword">new</span> ReferenceCountingGC(<span class="string">&quot;objB&quot;</span>);</span><br><span class="line"></span><br><span class="line">    a.instance = b;</span><br><span class="line">    b.instance = a;</span><br><span class="line"></span><br><span class="line">    a = <span class="keyword">null</span>;</span><br><span class="line">    b = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>即发生了两个对象相互引用，但是各自引用却都被置空了，也就是说<strong>这两个对象已经不可能被访问了，但是两者的引用计数都不会为0，也就永远无法被回收</strong></p>
<h3 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p>可达性分析算法的基本思路是通过一些被称为引用链（GC Roots）的对象作为起点，从这些节点开始向下搜索</p>
<p>当一个对象到GC Roots没有任何引用链相连时（即从GC Roots节点到达该结点不可达），则证明该对象是不可用的即为垃圾</p>
<h4 id="属于GC-Roots的对象"><a href="#属于GC-Roots的对象" class="headerlink" title="属于GC Roots的对象"></a>属于GC Roots的对象</h4><ul>
<li>虚拟机栈中引用的对象</li>
<li>方法去中类静态属性引用的对象</li>
<li>方法区中常量引用的对象</li>
<li>本地方法栈JNI引用的对象</li>
</ul>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>解决了引用计数法中循环依赖的缺陷</p>
<h2 id="如何回收垃圾"><a href="#如何回收垃圾" class="headerlink" title="如何回收垃圾"></a>如何回收垃圾</h2><h3 id="标记清除算法"><a href="#标记清除算法" class="headerlink" title="标记清除算法"></a>标记清除算法</h3><h4 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h4><p>将可回收的对象进行标记，然后进行清除</p>
<h4 id="缺陷-1"><a href="#缺陷-1" class="headerlink" title="缺陷"></a>缺陷</h4><p>会产生较多的内存碎片</p>
<h3 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h3><h4 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h4><p>将内存按照容量划分为大小相等的两块，每次只使用其中的一块，当其中的一块内存耗尽时将==依旧存活的对象==复制到另一块上面，然后将已使用过的内存==一次性==清理掉</p>
<h4 id="缺陷-2"><a href="#缺陷-2" class="headerlink" title="缺陷"></a>缺陷</h4><ul>
<li>只能使用一半的内存</li>
<li>当存活的对象比较多复制起来比较耗费时间</li>
</ul>
<h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><p>速度比较快（在对象存活比较少的情况下）</p>
<h3 id="标记整理算法"><a href="#标记整理算法" class="headerlink" title="标记整理算法"></a>标记整理算法</h3><h4 id="概念-4"><a href="#概念-4" class="headerlink" title="概念"></a>概念</h4><p>先将可回收对象进行标记，然后让可存活的对象都向一端进行移动，在清理掉可回收的部分</p>
<h4 id="缺陷-3"><a href="#缺陷-3" class="headerlink" title="缺陷"></a>缺陷</h4><ul>
<li>对内存变动频繁，需要==整理所有存活对象的引用地址==，因此效率不高</li>
</ul>
<h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><ul>
<li>解决了内存碎片问题</li>
<li>可以使用全部的内存空间</li>
</ul>
<h2 id="Java回收策略"><a href="#Java回收策略" class="headerlink" title="Java回收策略"></a>Java回收策略</h2><h3 id="概念-5"><a href="#概念-5" class="headerlink" title="概念"></a>概念</h3><p>主要思想是依据不同代的不同特点对回收算法进行选择</p>
<p>Java所使用的是分代收集算法</p>
<ul>
<li><p>新生区</p>
<p>使用复制算法</p>
</li>
<li><p>老年区</p>
<p>标记清除或者标记整理算法</p>
</li>
</ul>
]]></content>
      <categories>
        <category>jvm</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>jvm内存结构</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/JVM/JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20211229141913.png" alt="JVM" style="zoom:150%;" />]]></content>
      <categories>
        <category>jvm</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>类加载器</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/JVM/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/</url>
    <content><![CDATA[<h3 id="类加载器的作用"><a href="#类加载器的作用" class="headerlink" title="类加载器的作用"></a>类加载器的作用</h3><p>加载class文件</p>
<h3 id="类加载器的种类"><a href="#类加载器的种类" class="headerlink" title="类加载器的种类"></a>类加载器的种类</h3><ul>
<li><p>启动类（根）加载器</p>
<p>负责将<JAVA_HOME>/lib目录下并且被虚拟机识别的类库加载到虚拟机内存中。我们常用基础库，例如java.util.**，java.io.**，java.lang.**等等都是由根加载器加载</p>
</li>
<li><p>扩展类加载器</p>
<p>负责加载JVM扩展类，比如swing系列、内置的js引擎、xml解析器等，这些类库以javax开头，它们的jar包位于<JAVA_HOME>/lib/ext目录中</p>
</li>
<li><p>应用程序加载器  一般而言我们所写的类都是通过这个类加载器进行加载</p>
<p>它负责加载用户路径(ClassPath)上所指定的类库。我们自己编写的代码以及使用的第三方的jar包都是由它来加载的自定义加载器(Custom Classloader)通常是我们为了某些特殊目的实现的自定义加载器</p>
</li>
</ul>
<h3 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h3><ol>
<li><p>作用</p>
<p>为了类加载的安全，避免类的重复加载</p>
</li>
<li><p>工作流程</p>
<ol>
<li><p>类加载器接受到类加载的请求</p>
</li>
<li><p>将这个请求向上委托给父类加载器去完成，一直向上委托直到启动类加载器</p>
</li>
<li><p>启动加载器检查是否能够加载当前类，能加载就结束，使用当前的加载器，否则抛出异常，<font color=red>通知子加载器进行加载</font></p>
</li>
<li><p>重复步骤3</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20211214155906.png" alt="image-20211214155742538" style="zoom:50%;" /></li>
</ol>
</li>
</ol>
<h3 id="ClassLoader的使用场景"><a href="#ClassLoader的使用场景" class="headerlink" title="ClassLoader的使用场景"></a>ClassLoader的使用场景</h3><p>Java 类加载器（ClassLoader）的实际使用场景有哪些？ - 阿里巴巴淘系技术的回答 - 知乎 <a href="https://www.zhihu.com/question/46719811/answer/1739289578">https://www.zhihu.com/question/46719811/answer/1739289578</a></p>
<p>其中对于依赖冲突的解决办法我的理解是：</p>
<p>通过自定义类加载器，为每个中间件自定义一个加载器，这些加载器之间的关系是平行的，彼此没有依赖关系。这样每个中间件的classloader就可以加载各自版本的fastjson。因为一个类的全限定名以及加载该类的加载器两者共同形成了这个类在JVM中的惟一标识，这也是阿里pandora实现依赖隔离的基础。由于类加载器是继承自应用程序类加载器的，因此如果不进行改造那么会导致优先被应用程序类加载器进行加载，那么fastjson版本会变得一致。首先每个中间件对应的ModuleClassLoader在加载中间对应的class文件的同时，根据中间件配置的export.index负责将要需要透出的class(主要是提供api接口的相关类)索引到exportedClassHashMap中，然后应用程序的类加载器会持有这个exportedClassHashMap，因此应用程序代码在loadClass的时候，会优先判断exportedClassHashMap是否存在当前类，如果存在，则直接返回，如果不存在，则再使用传统的双亲委托机制来进行类加载。总体来说就是跳过中间件类的加载过程（因为有自己的类加载器，直接由自己的类加载器进行加载），直接加载自己的业务类。</p>
]]></content>
      <categories>
        <category>jvm</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>CompletableFuture</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/CompletableFuture/</url>
    <content><![CDATA[<h3 id="CompletableFuture-异步编程-不是在调用方法的线程中执行的"><a href="#CompletableFuture-异步编程-不是在调用方法的线程中执行的" class="headerlink" title="CompletableFuture 异步编程 (不是在调用方法的线程中执行的)"></a>CompletableFuture 异步编程 (不是在调用方法的线程中执行的)</h3><h4 id="核心优势"><a href="#核心优势" class="headerlink" title="核心优势"></a>核心优势</h4><p>核心优势在于可以较好的反映出各个异步之间的关系，比如是串行关系、并行关系、还是汇聚关系</p>
<h4 id="启动异步流程"><a href="#启动异步流程" class="headerlink" title="启动异步流程"></a>启动异步流程</h4><p>runAsync(Runnable runnable) 无返回值</p>
<p>supplyAsync(Supplier&lt;U&gt;supplier) 有返回值</p>
<p>下面两位可以使用指定的线程池，<font color=red>这个非常重要</font></p>
<p>默认情况下CompletableFuture会使用公共的ForkJoinPool线程池，这个线程池默认创建的线程数是CPU的 核数（也可以通过JVM option:-Djava.util.concurrent.ForkJoinPool.common.parallelism来设置ForkJoinPool 线程池的线程数）。如果所有CompletableFuture共享一个线程池，那么一旦有任务执行一些很慢的I/O操作，就会导致线程池中所有线程都阻塞在I/O操作上（比如有对数据库的查询操作），从而造成线程饥饿，进而影响整个系统的性能。所以，强烈建议你要根据不同的业务类型创建不同的线程池，根据<font color=red>不同的业务类型创建不同的线程池</font>，以避免互相干扰。</p>
<p>runAsync(Runnable runnable, Executor executor)</p>
<p>supplyAsync(Supplier&lt;U&gt; supplier, Executor executor)</p>
<h4 id="加async后缀与不加async后缀方法的区别"><a href="#加async后缀与不加async后缀方法的区别" class="headerlink" title="加async后缀与不加async后缀方法的区别"></a>加async后缀与不加async后缀方法的区别</h4><p>这两个方法区别就在于谁去执行这个任务，如果使用<code>thenApplyAsync </code>，那么执行的线程是从<code>ForkJoinPool.commonPool()</code>中获取不同的线程进行执行，如果使用<code>thenApply </code>，如果<code>supplyAsync </code>方法执行速度特别快，那么<code>thenApply </code>任务就是主线程进行执行，如果执行特别慢的话就是和<code>supplyAsync </code>执行线程一样。</p>
<p>具体参考<a href="https://modouxiansheng.top/2019/08/13/%E4%B8%8D%E5%AD%A6%E6%97%A0%E6%95%B0-Java8-%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B-2019/">https://modouxiansheng.top/2019/08/13/%E4%B8%8D%E5%AD%A6%E6%97%A0%E6%95%B0-Java8-%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B-2019/</a></p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h4 id="串行关系"><a href="#串行关系" class="headerlink" title="串行关系"></a>串行关系</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接受参数并有返回值</span></span><br><span class="line"><span class="function">CompletionStage&lt;R&gt; <span class="title">thenApply</span><span class="params">(fn)</span></span>; </span><br><span class="line"><span class="function">CompletionStage&lt;R&gt; <span class="title">thenApplyAsync</span><span class="params">(fn)</span></span>; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//接受参数，没有返回值（消费者模式）</span></span><br><span class="line"><span class="function">CompletionStage&lt;Void&gt; <span class="title">thenAccept</span><span class="params">(consumer)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">CompletionStage&lt;Void&gt; <span class="title">thenAcceptAsync</span><span class="params">(consumer)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//接受一个action，就是一个线程，可以写成()-&gt;&#123;&#125;</span></span><br><span class="line"><span class="function">CompletionStage&lt;Void&gt; <span class="title">thenRun</span><span class="params">(action)</span></span>; </span><br><span class="line"><span class="function">CompletionStage&lt;Void&gt; <span class="title">thenRunAsync</span><span class="params">(action)</span></span>; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个新的子流程，接受参数并有返回值，最终结果和thenApply系列是相同的</span></span><br><span class="line"><span class="function">CompletionStage&lt;R&gt; <span class="title">thenCompose</span><span class="params">(fn)</span></span>; </span><br><span class="line"><span class="function">CompletionStage&lt;R&gt; <span class="title">thenComposeAsync</span><span class="params">(fn)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CompletableFuture&lt;String&gt; f1 = CompletableFuture.supplyAsync(() -&gt; <span class="string">&quot;Hello&quot;</span>).thenApply(s -&gt; s+ <span class="string">&quot;world&quot;</span>).thenApply(String::toUpperCase);</span><br><span class="line">CompletableFuture&lt;String&gt; f2 = CompletableFuture.supplyAsync(() -&gt; <span class="string">&quot;Cooper&quot;</span>).thenApply(s -&gt; s+ <span class="string">&quot; xj&quot;</span>).thenApply(String::toUpperCase);</span><br><span class="line">f1.join();</span><br><span class="line">f2.join();</span><br></pre></td></tr></table></figure>

<p>注意：join与get都也可以获取最终结构，只不过前者不需要捕获异常，后者需要捕获异常</p>
<h4 id="AND汇聚关系"><a href="#AND汇聚关系" class="headerlink" title="AND汇聚关系"></a>AND汇聚关系</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">CompletionStage&lt;R&gt; <span class="title">thenCombine</span><span class="params">(other, fn)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="function">CompletionStage&lt;R&gt; <span class="title">thenCombineAsync</span><span class="params">(other, fn)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">CompletionStage&lt;Void&gt; <span class="title">thenAcceptBoth</span><span class="params">(other, consumer)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="function">CompletionStage&lt;Void&gt; <span class="title">thenAcceptBothAsync</span><span class="params">(other, consumer)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="function">CompletionStage&lt;Void&gt; <span class="title">runAfterBoth</span><span class="params">(other, action)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="function">CompletionStage&lt;Void&gt; <span class="title">runAfterBothAsync</span><span class="params">(other, action)</span></span>;</span><br></pre></td></tr></table></figure>



<p>例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CompletableFuture&lt;Void&gt; f5 = CompletableFuture.runAsync(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;10s睡眠开始&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;10s睡眠结束&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">CompletableFuture&lt;Void&gt; f6 = CompletableFuture.runAsync(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;2s睡眠开始&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">2</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;2s睡眠结束&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">CompletableFuture&lt;Void&gt; f8 = f5.runAfterBoth(f6, ()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;f8任务结束&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">f8.join();</span><br></pre></td></tr></table></figure>





<h4 id="OR汇聚关系"><a href="#OR汇聚关系" class="headerlink" title="OR汇聚关系"></a>OR汇聚关系</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">CompletionStage <span class="title">applyToEither</span><span class="params">(other, fn)</span></span>; </span><br><span class="line"><span class="function">CompletionStage <span class="title">applyToEitherAsync</span><span class="params">(other, fn)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="function">CompletionStage <span class="title">acceptEither</span><span class="params">(other, consumer)</span></span>; </span><br><span class="line"><span class="function">CompletionStage <span class="title">acceptEitherAsync</span><span class="params">(other, consumer)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="function">CompletionStage <span class="title">runAfterEither</span><span class="params">(other, action)</span></span>; </span><br><span class="line"><span class="function">CompletionStage <span class="title">runAfterEitherAsync</span><span class="params">(other, action)</span></span>;</span><br></pre></td></tr></table></figure>

<p>例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CompletableFuture&lt;Void&gt; f5 = CompletableFuture.runAsync(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;10s睡眠开始&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;10s睡眠结束&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">CompletableFuture&lt;Void&gt; f6 = CompletableFuture.runAsync(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;2s睡眠开始&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">2</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;2s睡眠结束&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">CompletableFuture&lt;Void&gt; f7 = f5.runAfterEither(f6, ()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;f7任务结束&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"> f7.join();</span><br></pre></td></tr></table></figure>





<h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">CompletionStage <span class="title">exceptionally</span><span class="params">(fn)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="function">CompletionStage&lt;R&gt; <span class="title">whenComplete</span><span class="params">(consumer)</span></span>; </span><br><span class="line"><span class="function">CompletionStage&lt;R&gt; <span class="title">whenCompleteAsync</span><span class="params">(consumer)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">CompletionStage&lt;R&gt; <span class="title">handle</span><span class="params">(fn)</span></span>; </span><br><span class="line"><span class="function">CompletionStage&lt;R&gt; <span class="title">handleAsync</span><span class="params">(fn)</span></span>;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>java并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>CompletionService</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/CompletionService/</url>
    <content><![CDATA[<h3 id="CompletionService"><a href="#CompletionService" class="headerlink" title="CompletionService"></a>CompletionService</h3><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><ul>
<li><p>CompletionService能够让异步任务的执行结果有序化，先执行完的先进入阻塞队列，利用这个特性，你可以轻松实现后续处理的有序性，避免无谓的等待</p>
</li>
<li><p>可以实现CompletableFuture中的OR汇聚关系，并且可以突破两个的极限</p>
<p>例如三个任务并行，只需要得到一个的结果就可以返回，这种场景下可以使用CompletionService</p>
</li>
</ul>
<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>CompletionService将线程池Executor和阻塞队列BlockingQueue的功能融合在了一起，能够让批量异步任务的管理更简单</p>
<p>也就是说本身CompletionService里面有一个默认的无界的阻塞队列，任务所在的Future都保存在该队列中，如果需要取任务的值只需要xx.take().get()即可</p>
<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ExecutorCompletionService(Executor executor)<span class="comment">//默认的阻塞队列是无界队列即LinkedBlockingQueue</span></span><br><span class="line"></span><br><span class="line">ExecutorCompletionService(Executor executor, BlockingQueue&lt;Future&lt;V&gt;&gt; completionQueue) <span class="comment">//传入自己的阻塞队列</span></span><br></pre></td></tr></table></figure>

<p>这两个方法都需要我们创建线程池，这样的好处是可以将每个业务的线程池独立开</p>
]]></content>
      <categories>
        <category>java并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>CountDownLatch和CyclicBarrier</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/CountDownLatch%E5%92%8CCyclicBarrier/</url>
    <content><![CDATA[<p>并发编程第19章，其中的例子很详细</p>
<ul>
<li>CountDownLatchCountDownLatch 主要用来解决一个线程等待 多个线程的场景</li>
<li>CountDownLatch 的计数器是不能循环利用的</li>
</ul>
<ul>
<li>CyclicBarrier 是一组线程之间互相等待</li>
<li>CyclicBarrierCyclicBarrier 的计数器是可以循环利用的</li>
<li>当计数器减为0时，可以设置回调函数进行回调</li>
</ul>
]]></content>
      <categories>
        <category>java并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>ForkJoin</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/ForkJoin/</url>
    <content><![CDATA[<h3 id="ForkJoin"><a href="#ForkJoin" class="headerlink" title="ForkJoin"></a>ForkJoin</h3><h4 id="主要思想"><a href="#主要思想" class="headerlink" title="主要思想"></a>主要思想</h4><p>分治</p>
<h4 id="算法实现细节"><a href="#算法实现细节" class="headerlink" title="算法实现细节"></a>算法实现细节</h4><p>每个线程都会有一个任务队列（和普通的线程池最大的区别，普通线程池只有一个任务队列），当某个线程对应的任务队列为空时，则会窃取其他线程任务队列中的任务</p>
<p>ForkJoinPool中的任务队列采用的是==双端队列==，工作线程正常获取任务和“窃取任务”分别是从任务队列不同的端消费，这样能避免很多不必要的数据竞争</p>
<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>ForkJoinTask是抽象类，旗下有两个子类需要实现他的方法</p>
<ul>
<li><p>RecursiveAction</p>
<p>compute没有返回值</p>
</li>
<li><p>RecursiveTask</p>
<p>compute有返回值</p>
</li>
</ul>
<h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ForkJoinPool;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.RecursiveTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForkJoinTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建分治任务线程池</span></span><br><span class="line">        ForkJoinPool pool = <span class="keyword">new</span> ForkJoinPool(<span class="number">4</span>);</span><br><span class="line">        <span class="comment">//创建分治任务</span></span><br><span class="line">        Fibonacci tasks = <span class="keyword">new</span> Fibonacci(<span class="number">30</span>);</span><br><span class="line">        <span class="comment">//启动分治任务</span></span><br><span class="line">        Integer result = pool.invoke(tasks);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> n;</span><br><span class="line">        Fibonacci(<span class="keyword">int</span> n)&#123;</span><br><span class="line">            <span class="keyword">this</span>.n = n;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Integer <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(n&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            Fibonacci f1 = <span class="keyword">new</span> Fibonacci(n-<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//创建子任务</span></span><br><span class="line">            f1.fork();</span><br><span class="line">            Fibonacci f2 = <span class="keyword">new</span> Fibonacci(n-<span class="number">2</span>);</span><br><span class="line">            <span class="comment">//等待子任务结果并合并</span></span><br><span class="line">            <span class="keyword">return</span> f2.compute()+f1.join();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>Future</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/Future/</url>
    <content><![CDATA[<h3 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h3><ul>
<li><p>作用</p>
<p>获取线程运行的结果</p>
</li>
<li><p>出现的场景</p>
<p>线程池提交任务时，使用submit进行提交</p>
</li>
<li><p>方法</p>
<ul>
<li><p>提交Runnable任务 Future&lt;?&gt;</p>
<p>submit(Runnable task);  </p>
<p>runnable接口的方法是==没有返回值==的，所以 submit(Runnable task) 这个方法返回的Future仅可以用来断言任务已经结束了，<strong>类似于Thread.join()</strong></p>
</li>
<li><p>提交Callable任务 &lt;T&gt; Future&lt;T&gt;</p>
<p>submit(Callable&lt;T&gt; task); </p>
<p>这个方法是有返回值的，所以这个方法返回的Future对象可以通过调用其get()方法来获取任务的执行结果。</p>
</li>
<li><p>提交Runnable任务及结果引⽤ &lt;T&gt; Future&lt;T&gt;</p>
<p>submit(Runnable task, T result);</p>
<p>假设这 个方法返回的Future对象是f，f.get()的返回值就是传给submit()方法的参数result。也就是会==返回传入的参数result==</p>
<p>我们可以传入的参数result认为这是一个主子线程之间共享数据的桥梁</p>
</li>
</ul>
</li>
</ul>
<h3 id="FutureTask"><a href="#FutureTask" class="headerlink" title="FutureTask"></a>FutureTask</h3><ul>
<li><p>作用</p>
<p>是一个工具类</p>
<p>FutureTask实现了Runnable和Future接口</p>
<ul>
<li><p>实现了Runnable接口</p>
<p>所以可以将FutureTask对象作为任务提交给ThreadPoolExecutor去执行，也可以直接被Thread执行</p>
</li>
<li><p>实现了Future接口</p>
<p>所以能用来获得任务的执行结果</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>java并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>Java内存模型</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h2><h3 id="三个关键字"><a href="#三个关键字" class="headerlink" title="三个关键字"></a>三个关键字</h3><h4 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h4><ol>
<li>作用</li>
</ol>
<p>​        表示对该关键字修饰的变量禁用CPU缓存</p>
<ol start="2">
<li><p>使用原则</p>
<p>只有在状态真正独立于程序内其他内容时才能使用 volatile </p>
</li>
</ol>
<h4 id="final"><a href="#final" class="headerlink" title="final"></a>final</h4><ol>
<li>作用</li>
</ol>
<p>​        该关键字修饰的变量不变，可以随便优化</p>
<h4 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h4><ol>
<li>作用</li>
</ol>
<p>​        加锁</p>
<ol start="2">
<li>作用域 <ul>
<li>当修饰静态方法的时候，锁定的是当前类的Class对象 </li>
<li>当修饰非静态方法时，锁住的就是当前实例对象</li>
</ul>
</li>
</ol>
<h2 id="Happens-Before规则"><a href="#Happens-Before规则" class="headerlink" title="Happens-Before规则"></a>Happens-Before规则</h2><ol>
<li><p>顺序性规则</p>
<p>程序之前对某个变量的修改一定对后续的操作是可见的</p>
</li>
<li><p>volatile变量规则</p>
</li>
</ol>
<p>​        对一个volatile变量的写操作，happens-before于后续对这个volatile变量的读操作</p>
<ol start="3">
<li>传递性</li>
</ol>
<p>​        如果A happens-before B，其B happens-before C，则A happens-before C</p>
<ol start="4">
<li>管程中的锁</li>
</ol>
<p>​        对一个锁的解锁happens-before于后续对这个锁的加锁即指的是前一个线程的解锁操作对后一个线程的加锁操作可见，其中前一个线程操作的共享变量对后        一个线程是可见的</p>
<p>​        管程在java中的体现就是synchronized，该关键字是java对管程的实现</p>
<p>​        管程中的锁在Java中是隐式实现的，进入前自动加锁，退出后自动释放锁</p>
<p>​        管程是一种同步和互斥的方式</p>
<p>​        </p>
<p>​        <a href="https://www.zhihu.com/question/30641734/answer/378435042">如何理解管程</a></p>
<p>​        <a href="https://www.zhihu.com/question/30641734/answer/378435042">jdk为何选择管程</a></p>
<ol start="5">
<li>线程start（）规则</li>
</ol>
<p>​        主线程启动子线程后，子线程可以看到主线程在启动子线程之前的操作</p>
<ol start="6">
<li>线程join（）规则</li>
</ol>
<p>​        主线程等待子线程完成，当子线程完成后，主线程可以看到子线程的对共享变量的操作</p>
]]></content>
      <categories>
        <category>java并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>线程生命周期</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/java%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<h3 id="普通线程的生命周期"><a href="#普通线程的生命周期" class="headerlink" title="普通线程的生命周期"></a>普通线程的生命周期</h3><ul>
<li>初始状态</li>
<li>可运行状态</li>
<li>运行状态</li>
<li>休眠状态</li>
<li>终止状态</li>
</ul>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20211209095957.png" alt="image-20211209095955777"></p>
<h3 id="Java线程的生命周期"><a href="#Java线程的生命周期" class="headerlink" title="Java线程的生命周期"></a>Java线程的生命周期</h3><ol>
<li><p>New （初始化状态）（只存在于编程语言级别，操作系统中不存在该状态的线程）</p>
</li>
<li><p>runnable （可运行/运行状态）</p>
<p>JVM 层面并不关心操作系统调度相关的状态，因为在 JVM 看来，等待 CPU 使用权（操作系统层面此 时处于可执行状态）与等待 I/O（操作系统层面此时处于休眠状态）没有区别，都是在等待某个 资源，所以都归入了 RUNNABLE 状态。</p>
</li>
<li><p>Blocked (阻塞状态)</p>
</li>
<li><p>Waiting  （无时限等待）</p>
</li>
<li><p>timed_waiting（有时限等待）</p>
</li>
<li><p>Terminated (终止状态)</p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20211209100600.png" alt="image-20211209100558600"></p>
<ul>
<li><p>处于3，4，5状态中的java线程永远没有CPU的使用权</p>
</li>
<li><p>线程的相互转换</p>
<ul>
<li>1-&gt;2  调用start方法</li>
<li>2-&gt;3  只有一种场景会触发这种转换，就是线程等待 synchronized <strong>的隐式锁</strong></li>
<li>2-&gt;4<ul>
<li>获得 synchronized 隐式锁的线程，调用无参数的 Object.wait() 方法</li>
<li>调用无参数的 Thread.join() 方法</li>
<li>调用 LockSupport.park()</li>
</ul>
</li>
<li>2-&gt;5<ul>
<li>调用带超时参数的 Thread.sleep(long millis) 方法</li>
<li>获得 synchronized 隐式锁的线程，调用带超时参数的 Object.wait(long timeout) 方法</li>
<li>调用带超时参数的 Thread.join(long millis) 方法</li>
<li>调用带超时参数的 LockSupport.parkNanos(Object blocker, long deadline) 方法</li>
<li>调用带超时参数的 LockSupport.parkUntil(long deadline) 方法</li>
</ul>
</li>
<li>2-&gt;6<ul>
<li>线程执行完 run() 方法后，会自动转换到 TERMINATED 状态</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Java中线程的一些方法"><a href="#Java中线程的一些方法" class="headerlink" title="Java中线程的一些方法"></a>Java中线程的一些方法</h3><ul>
<li><p>stop</p>
<p><font color=red>stop方法会真的杀死线程，如果该线程持有synchronized隐式锁，也不会释放，那么其他线程没有机会获取该锁</font></p>
<p>类似的方法还有suspend和resume方法，但是这些方法都不建议使用</p>
</li>
<li><p>interrupt</p>
<p>只对线程进行通知，线程仍有机会执行一些后续操作，同时也可以无视该通知</p>
<p>被interrupt的线程接受通知的两种方式：</p>
<ul>
<li><p>异常</p>
<ul>
<li>当线程处于waiting、timed_waiting状态时如果其他线程调用线程A的interrupt方法，会使得线程A回到runnable状态，同时线程A的代码会触发<code>InterruptedException</code>异常</li>
<li>当线程处于runnable状态时并且阻塞在<code>java.nio.channels.InterruptibleChannel</code>上时，如果其他线程调用interrupt也会触发异常</li>
</ul>
</li>
<li><p>主动检测</p>
<p>线程自己检测自身的isInterrupted属性查看自己是否被中断</p>
<p>注意：线程中断会触发异常，触发异常之后会将线程的中断标志位重置，以下为验证代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                Thread th = Thread.currentThread();</span><br><span class="line">                <span class="keyword">if</span>(th.isInterrupted())&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程1终止成功&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">    </span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    Thread.currentThread().interrupt();</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    </span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(thread1.isAlive())&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;第&quot;</span>+i+<span class="string">&quot;次尝试终止线程1&quot;</span>);</span><br><span class="line">                    thread1.interrupt();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line"></span><br><span class="line">        thread1.join();</span><br><span class="line">        thread2.join();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;任务结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参考</p>
<p>Java里一个线程调用了Thread.interrupt()到底意味着什么？ - Intopass的回答 - 知乎 <a href="https://www.zhihu.com/question/41048032/answer/89431513">https://www.zhihu.com/question/41048032/answer/89431513</a></p>
</li>
</ul>
</li>
</ul>
<p>​        </p>
]]></content>
      <categories>
        <category>java并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>synchronized 缺陷</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/synchronized%E7%9A%84%E7%BC%BA%E9%99%B7/</url>
    <content><![CDATA[<h3 id="synchronized-隐式锁"><a href="#synchronized-隐式锁" class="headerlink" title="synchronized 隐式锁"></a>synchronized 隐式锁</h3><p>传统的synchronized在1.6版本之后性能已经和Lock差不多了，但是synchronized容易出现死锁</p>
<p>因为synchronized在申请资源的时候如果申请不到，线程会直接进入阻塞状态，而线程进入阻塞状态啥都干不了，也无法是否已经占有的资源，十分容易出现死锁的现象。</p>
<h3 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h3><ol>
<li><p>可以响应中断</p>
<p>给阻塞的线程发送中断信号，阻塞的线程可以进行响应，释放曾经持有的锁，也就破坏了不可抢占的条件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 支持中断的 API  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> InterruptedException</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>支持超时</p>
<p>如果一个线程在一段时间内没有获取到锁，不进入阻塞状态而是返回一个错误，那么该线程也有机会释放曾经持有的锁，破坏不可抢占的条件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 支持超时的 API </span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> </span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> InterruptedException</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>非阻塞的获取锁</p>
<p>如果尝试获取锁失败，并不进入阻塞状态，而是直接返回，那么该线程也有机会释放曾经持有的锁，破坏不可抢占的条件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 支持非阻塞获取锁的 API </span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h3><p>在同一个线程中可以重复获取同一把锁</p>
<h3 id="公平锁与非公平锁"><a href="#公平锁与非公平锁" class="headerlink" title="公平锁与非公平锁"></a>公平锁与非公平锁</h3><ul>
<li><p>公平锁</p>
<p>唤醒的策略就是谁等待的时间长，就唤醒谁</p>
</li>
<li><p>非公平锁</p>
<p>随机唤醒</p>
</li>
</ul>
]]></content>
      <categories>
        <category>java并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>互斥锁</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E4%BA%92%E6%96%A5%E9%94%81/</url>
    <content><![CDATA[<h2 id="互斥锁的核心要点"><a href="#互斥锁的核心要点" class="headerlink" title="互斥锁的核心要点"></a>互斥锁的核心要点</h2><ul>
<li><p>要明确自己锁住的资源是什么，一个或多个资源最好只对应一把锁，不要一个资源对应多把锁</p>
</li>
<li><p>当多个资源对应同一把锁的时候需要注意该锁是否是可变的</p>
<p>常见的多个资源对应同一把锁的处理方式：</p>
<ol>
<li>构造方法传入一个对象作为锁</li>
<li>将class本身作为锁</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>java并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>信号量之限流器</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E4%BF%A1%E5%8F%B7%E9%87%8F%E4%B9%8B%E9%99%90%E6%B5%81%E5%99%A8/</url>
    <content><![CDATA[<h3 id="信号量模型"><a href="#信号量模型" class="headerlink" title="信号量模型"></a>信号量模型</h3><h4 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h4><ul>
<li><p>一个计数器</p>
</li>
<li><p>一个等待队列</p>
</li>
<li><p>三个方法（这三个方法都是原子性的）</p>
<ul>
<li>init()：设置计数器的初始值</li>
<li>down()：计数器的值减 1；如果此时计数器的值小于 0，则当前线程将被阻塞，否则当前线程 可以继续执行</li>
<li>up()：计数器的值加 1；如果此时计数器的值小于或者等于 0，则唤醒等待队列中的一个线 程，并将其从等待队列中移除</li>
</ul>
</li>
</ul>
<h3 id="小试牛刀"><a href="#小试牛刀" class="headerlink" title="小试牛刀"></a>小试牛刀</h3><h4 id="利用信号量来实现互斥锁"><a href="#利用信号量来实现互斥锁" class="headerlink" title="利用信号量来实现互斥锁"></a>利用信号量来实现互斥锁</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> Semaphore s = <span class="keyword">new</span> Semaphore(<span class="number">1</span>);</span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line"> <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addOne</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</span><br><span class="line">     s.acquire();</span><br><span class="line">     <span class="keyword">try</span>&#123;</span><br><span class="line">         count+=<span class="number">1</span>;</span><br><span class="line">     &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">         s.release();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>实现互斥的原理</p>
<p>当某一个线程执行到addOne()时，执行<code>s.acquire();</code>则当前的信号量的计数器为0，可以往下执行</p>
<p>当另一个线程执行到addOne()时，执行<code>s.acquire();</code>则当前信号量的计数器为-1，发生阻塞，进入信号量的等待队列</p>
<p>当第一个获取到执行权的线程执行完毕之后，执行<code> s.release();</code>，则当前信号量变为0，则等待队列中的线程可以往下执行</p>
<p>从而实现互斥</p>
<h4 id="利用信号好实现限流器"><a href="#利用信号好实现限流器" class="headerlink" title="利用信号好实现限流器"></a>利用信号好实现限流器</h4><p>Semaphore 可以允许多个线程访问一个临界区，比如最常见的使用场景就是xxx池之类的（mysql连接池）</p>
<p>具体实现方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjPool</span>&lt;<span class="title">T</span>,<span class="title">R</span>&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">final</span> List&lt;T&gt; pool;</span><br><span class="line">  <span class="keyword">final</span> Semaphore sem;</span><br><span class="line"></span><br><span class="line">  ObjPool(<span class="keyword">int</span> size,T t)&#123;</span><br><span class="line">    pool = <span class="keyword">new</span> Vector&lt;&gt;()&#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">      pool.add(t);</span><br><span class="line">    &#125;</span><br><span class="line">    sem = <span class="keyword">new</span> Semaphore(size);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">R <span class="title">exec</span><span class="params">(Function&lt;T,R&gt; func)</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</span><br><span class="line">    T t = <span class="keyword">null</span>;</span><br><span class="line">    sem.acquire();</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      t = pool.remove(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">return</span> func.apply(t);</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">      pool.add(t);</span><br><span class="line">      sem.release();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font color=red>注意：List需要是线程安全的List</font></p>
]]></content>
      <categories>
        <category>java并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>原子类</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%8E%9F%E5%AD%90%E7%B1%BB/</url>
    <content><![CDATA[<h3 id="CAS-（Compare-And-Swap）"><a href="#CAS-（Compare-And-Swap）" class="headerlink" title="CAS （Compare And Swap）"></a>CAS （Compare And Swap）</h3><h4 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h4><p>CAS 指令包含 3 个参数：共享变量 的内存地址 A、用于比较的值 B 和共享变量的新值 C；</p>
<p>只有当内存中地址 A 处的值等于 B 时，才能将内存中地址 A 处的值更新为新值 C</p>
<h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>一般CAS和自旋配合使用</p>
<h4 id="ABA问题"><a href="#ABA问题" class="headerlink" title="ABA问题"></a>ABA问题</h4><p>ABA问题就是有可能更新之前的值和更新之后的值是一样的，虽然经过CAS之后返回的值是不变的，但是实际上已经经过了2次转变即从A变成了B，B又变成了A</p>
<p>其解决办法是增加版本号</p>
<h3 id="Java中的原子类"><a href="#Java中的原子类" class="headerlink" title="Java中的原子类"></a>Java中的原子类</h3><p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20211212143630.png" alt="image-20211212143629041"></p>
<p>具体参考第21章</p>
]]></content>
      <categories>
        <category>java并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>合理创建线程数</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%90%88%E7%90%86%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E6%95%B0/</url>
    <content><![CDATA[<h3 id="线程池的设计"><a href="#线程池的设计" class="headerlink" title="线程池的设计"></a>线程池的设计</h3><p>最好每一类业务搞一个线程池</p>
<p>不要做全局的线程池，共用一个线程池，如果遇到某些任务处理数量大且时间较长，会影响到后续加到线程池任务队列里面的其他任务，尤其是一些对时效性要求较高的任务，并且不同类型的线程池作用也不相同</p>
<h3 id="CPU密集型"><a href="#CPU密集型" class="headerlink" title="CPU密集型"></a>CPU密集型</h3><p>最佳线程数 =1 + CPU核数</p>
<p>线程的数量一般会设置为“CPU 核数 +1”，这样的话，当线程因为偶尔的内存页失效或 其他原因导致阻塞时，这个额外的线程可以顶上，从而保证 CPU 的利用率。</p>
<h3 id="IO密集型"><a href="#IO密集型" class="headerlink" title="IO密集型"></a>IO密集型</h3><p>最佳线程数 =CPU 核数 * [ 1 +（I/O 耗时 / CPU 耗时）]</p>
<p>io耗时和cpu耗时使用apm工具可以</p>
]]></content>
      <categories>
        <category>java并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>并发容器</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<h3 id="同步容器"><a href="#同步容器" class="headerlink" title="同步容器"></a>同步容器</h3><h4 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h4><p>同步容器通过synchronized关键字修饰容器保证同一时刻内只有一个线程在使用容器，从而使得容器线程安全。synchronized的意思是同步，它体现在将多线程变为串行等待执行。</p>
<h4 id="基于包装类实现的同步容器"><a href="#基于包装类实现的同步容器" class="headerlink" title="基于包装类实现的同步容器"></a>基于包装类实现的同步容器</h4><p>在java1.5之前的线程安全的容器成为同步容器，其主要思想是每次在get、set的时候加上synchronized隐式锁</p>
<p>一般使用这样的语法将容器变为同步容器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List list = Collections.synchronizedList(<span class="keyword">new</span> ArrayList());</span><br><span class="line"></span><br><span class="line">Set set = Collections.synchronizedSet(<span class="keyword">new</span> HashSet());</span><br><span class="line"></span><br><span class="line">Map map = Collections.synchronizedMap(<span class="keyword">new</span> HashMap());</span><br></pre></td></tr></table></figure>



<h4 id="其他同步容器"><a href="#其他同步容器" class="headerlink" title="其他同步容器"></a>其他同步容器</h4><ul>
<li>vector</li>
<li>stack</li>
<li>hashtable</li>
</ul>
<h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><ul>
<li><font color=red>复合操作不能保证线程安全</font>。举例：A线程第一步获取尾节点，第二步将尾结点的值加1，但在A线程执行完第一步的时候，B线程删除了尾节点，在A线程执行第二步的时候就会报空指针</li>
<li>在对容器利用迭代器进行遍历的时候会出现并发问题</li>
</ul>
<h3 id="并发容器"><a href="#并发容器" class="headerlink" title="并发容器"></a>并发容器</h3><h4 id="含义-1"><a href="#含义-1" class="headerlink" title="含义"></a>含义</h4><p>并发容器主要是为了解决同步容器效率不高的问题</p>
<h4 id="种类"><a href="#种类" class="headerlink" title="种类"></a>种类</h4><p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20211212132843.png" alt="image-20211212132824992"></p>
<p>具体的每个容器的详细应用场景参见第20章并发容器</p>
]]></content>
      <categories>
        <category>java并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>并发编程出错的原因</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%87%BA%E9%94%99%E7%9A%84%E5%8E%9F%E5%9B%A0/</url>
    <content><![CDATA[<h2 id="非模式"><a href="#非模式" class="headerlink" title="非模式"></a>非模式</h2><h3 id="并发编程一般主要由于以下三个方面经常导致出现bug"><a href="#并发编程一般主要由于以下三个方面经常导致出现bug" class="headerlink" title="并发编程一般主要由于以下三个方面经常导致出现bug"></a>并发编程一般主要由于以下三个方面经常导致出现bug</h3><h4 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h4><p>由于<strong>每个CPU都有自己的缓存</strong>，因此当使用多线程时会使用多个CPU，如果这些线程都操作同一个变量，那么会导致每个CPU对变量进行操作时其他CPU无法察觉到变化，那么也就无法取得数据的一致性。</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20211210164703.png" alt="image-20211210164701813"></p>
<h4 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h4><p>因为大多数编程语言都是高级语言，每条语句都包含1~n条CPU指令，但是在进行多线程操作的时候无法原子性的控制一条语句的执行，最多只能控制到CPU指令的原子性执行，因此会导致一条语句有可能在其组成CPU指令的任意一条中断开转而去执行其他语句。</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20211210164724.png" alt="image-20211210164723197"></p>
<p>因此<strong>我们把一个或者多个操作在 CPU 执行的过程中不被中断的特性称为原子性</strong></p>
<p><font color=red>原子性的本质在于操作的中间状态对外不可见，解决原子性问题就是保证中间状态对外不可见。</font></p>
<h4 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h4><p>大多数编译器为了优化性能可能会选择对原来的CPU指令的执行顺序进行改变，此时就有可能出现bug。比如利用双重检查创建单例对象，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> m = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>new操作应该是</p>
<ol>
<li>分配一块内存</li>
<li>在内存上初始化singleton对象</li>
<li>将内存的地址赋给instance变量</li>
</ol>
<p>但是实际上优化后的操作时：</p>
<ol>
<li>分配内存</li>
<li>将内存地址分配给instance变量</li>
<li>在内存上初始化singleton对象</li>
</ol>
<p><font color=red>出现的问题：当内存地址分配给instance变量之后，立刻有线程B来对singleton对象进行初始化，但是此时instance已经不为null了，因此会直接返回一个instance并且不会再创建singleton对象，但此时singleton对象还未进行初始化。</font></p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20211210164740.png" alt="image-20211210164738795"></p>
]]></content>
      <categories>
        <category>java并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>死锁</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E6%AD%BB%E9%94%81/</url>
    <content><![CDATA[<h2 id="死锁产生的条件（必须一下四个都满足才会产生死锁）"><a href="#死锁产生的条件（必须一下四个都满足才会产生死锁）" class="headerlink" title="死锁产生的条件（必须一下四个都满足才会产生死锁）"></a>死锁产生的条件（必须一下四个都满足才会产生死锁）</h2><ol>
<li>互斥，共享资源 X 和 Y 只能被一个线程占用；</li>
<li>占有且等待，线程 T1 已经取得共享资源 X，在等待共享资源 Y 的时候，不释放共享资源 X；</li>
<li>不可抢占，其他线程不能强行抢占线程 T1 占有的资源；</li>
<li>循环等待，线程T1等待线程T2占有的资源，线程T2等待线程T1占有的资源</li>
</ol>
<h2 id="预防死锁产生的方法"><a href="#预防死锁产生的方法" class="headerlink" title="预防死锁产生的方法"></a>预防死锁产生的方法</h2><p>核心思想：破坏死锁产生的条件，只要破坏其中一个即可</p>
<ol>
<li>对于“占用且等待”这个条件，我们可以一次性申请所有的资源，这样就不存在等待了。</li>
<li>对于“不可抢占”这个条件，占用部分资源的线程进一步申请其他资源时，如果申请不到，可以主动释放它占有的资源，这样不可抢占这个条件就破坏掉了（例如使用有超时时间的锁）。</li>
<li>对于“循环等待”这个条件，可以靠按序申请资源来预防。所谓按序申请，是指资源是有线性顺序的，申请的时候可以先申请资源序号小的，再申请资源序号大的，这样线性化后自然就不存在循环了。</li>
</ol>
]]></content>
      <categories>
        <category>java并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>等待通知机制</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E7%AD%89%E5%BE%85%E9%80%9A%E7%9F%A5%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h3 id="机制"><a href="#机制" class="headerlink" title="机制"></a>机制</h3><p>等待的是资源，通知的是任务队列</p>
<ul>
<li>当某一个任务没有足够的资源的时候，进入等待队列</li>
<li>当某个任务执行完毕就将资源释放，随后唤醒等待队列中<font color=red>所有任务</font>进行竞争</li>
</ul>
<h3 id="synchronized等待-唤醒机制"><a href="#synchronized等待-唤醒机制" class="headerlink" title="synchronized等待-唤醒机制"></a>synchronized等待-唤醒机制</h3><ul>
<li><font color=red>等待队列与互斥锁是一对一的关系，每个互斥锁都有自己独立的等待队列</font></li>
<li>如果 synchronized 锁定的是 this，那么对应的一定是 this.wait()、this.notify()、 this.notifyAll()；如果 synchronized 锁定的是 target，那么对应的一定是 target.wait()、 target.notify()、target.notifyAll() 。而且 wait()、notify()、notifyAll() 这三个方法能够被调用的前提是已经获取了相应的互斥锁，所以我们会发现 wait()、notify()、notifyAll() 都是在 synchronized{}内部被调用的。如果在 **synchronized{}**外部调用，或者锁定的 this，而用 target.wait() 调用的话，JVM 会抛出一个运行时异常：<code>java.lang.IllegalMonitorStateException</code></li>
<li><font color=red>尽量都是使用notifyAll()</font>，防止有饥饿现象产生，除非经过深思熟虑</li>
</ul>
<p><a href="https://blog.csdn.net/chenjianandiyi/article/details/100675464">详解Condition的await和signal等待通知机制</a></p>
<p>Lock和Condition可以实现异步转同步（具体参考第15章）</p>
]]></content>
      <categories>
        <category>java并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>线程池</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    <content><![CDATA[<h3 id="自定义线程池"><a href="#自定义线程池" class="headerlink" title="自定义线程池"></a>自定义线程池</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">//简化的线程池，仅⽤来说明⼯作原理</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThreadPool</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">/** 下⾯是使⽤⽰例 **/</span> </span><br><span class="line">        <span class="comment">// 创建有界阻塞队列</span></span><br><span class="line">        BlockingQueue&lt;Runnable&gt; workQueue = <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;(<span class="number">2</span>); </span><br><span class="line">        <span class="comment">// 创建线程池 </span></span><br><span class="line">        MyThreadPool pool = <span class="keyword">new</span> MyThreadPool(<span class="number">10</span>, workQueue); </span><br><span class="line">        <span class="comment">// 提交任务</span></span><br><span class="line">        </span><br><span class="line">       <span class="comment">//将任务提交到任务队列中 生产任务 </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            pool.execute(()-&gt;&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;hello&quot;</span>); </span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//利⽤阻塞队列实现⽣产者-消费者模式 </span></span><br><span class="line">    BlockingQueue&lt;Runnable&gt; workQueue; </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//保存内部⼯作线程 List&lt;WorkerThread&gt; threads</span></span><br><span class="line">    List&lt;WorkerThread&gt; threads = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造⽅法 </span></span><br><span class="line">    MyThreadPool(<span class="keyword">int</span> poolSize,BlockingQueue&lt;Runnable&gt; workQueue)&#123; </span><br><span class="line">        <span class="keyword">this</span>.workQueue = workQueue; </span><br><span class="line">        <span class="comment">// 创建⼯作线程</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> idx=<span class="number">0</span>; idx&lt;poolSize; idx++)&#123;</span><br><span class="line">            WorkerThread work = <span class="keyword">new</span> WorkerThread(); </span><br><span class="line">            work.start(); </span><br><span class="line">            threads.add(work);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提交任务 </span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</span><br><span class="line">         workQueue.put(command); </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// ⼯作线程负责消费任务，并执⾏任务 也就是消费者</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">WorkerThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123; </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="comment">//循环取任务并执⾏ </span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123; </span><br><span class="line">            Runnable task;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    task = workQueue.take();</span><br><span class="line">                    task.run(); </span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="线程池的核心思想"><a href="#线程池的核心思想" class="headerlink" title="线程池的核心思想"></a>线程池的核心思想</h3><ul>
<li>线程池的设计是生产者和消费者模式</li>
</ul>
<p>​        线程池本身是消费者，线程池的使用方是生产者</p>
<p>​        <font color=red>注意：线程是一个重量级的对象，应该避免频繁创建和销毁。</font></p>
<p>​        说到线程池，我们可能首先会类比连接池这类池化资源，会以为线程池是通过 <code>acquire()</code> 来获取资源，通过 <code>release()</code> 来释放资源，就像下边这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//采用一般意义上池化资源的设计方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span></span>&#123;</span><br><span class="line">  <span class="comment">// 获取空闲线程</span></span><br><span class="line">  <span class="function">Thread <span class="title">acquire</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 释放线程</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">release</span><span class="params">(Thread t)</span></span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//期望的使用</span></span><br><span class="line">ThreadPool pool；</span><br><span class="line">Thread T1=pool.acquire();</span><br><span class="line"><span class="comment">//传入Runnable对象</span></span><br><span class="line">T1.execute(()-&gt;&#123;</span><br><span class="line">  <span class="comment">//具体业务逻辑</span></span><br><span class="line">  ......</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>也就是说，我们在使用的时候直接从 pool 中获取一个线程实例 T1，然后直接向 T1 里边传业务逻辑就行了。但实际在使用的时候发现 Thread 类中根本没有类似于 <code>execute(Runnable task)</code> 这样的公共方法，<strong>因而线程池是没有办法按照池化的思想来设计的。</strong></p>
<ul>
<li>工作队列的作用在于暂存任务，一旦任务被取走则表示被消费，添加则表示生产</li>
</ul>
<h3 id="Java中线程池的核心参数"><a href="#Java中线程池的核心参数" class="headerlink" title="Java中线程池的核心参数"></a>Java中线程池的核心参数</h3><ul>
<li><p>corePoolSize：表示线程池保有的最小线程数。有些项目很闲，但是也不能把人都撤了，至少要留 corePoolSize个人坚守阵地。</p>
</li>
<li><p>maximumPoolSize：表示线程池创建的最大线程数。当项目很忙时，就需要加人，但是也不能无限制地 加，最多就加到maximumPoolSize个人。当项目闲下来时，就要撤人了，最多能撤到corePoolSize个人。</p>
</li>
<li><p>keepAliveTime &amp; unit：上面提到项目根据忙闲来增减人员，那在编程世界里，如何定义忙和闲呢？很简 单，一个线程如果在一段时间内，都没有执行任务，说明很闲，keepAliveTime 和 unit 就是用来定义这 个“一段时间”的参数。也就是说，如果一个线程空闲了keepAliveTime &amp; unit这么久，而且线程池 的线程数大于 corePoolSize ，那么这个空闲的线程就要被回收了。</p>
</li>
<li><p>workQueue：工作队列，和上面示例代码的工作队列同义。</p>
</li>
<li><p>threadFactory：通过这个参数你可以自定义如何创建线程，例如你可以给线程指定一个有意义的名字。</p>
</li>
<li><p>handler：通过这个参数你可以自定义任务的拒绝策略。如果线程池中所有的线程都在忙碌，并且工作队 列也满了（前提是工作队列是有界队列），那么此时提交任务，线程池就会拒绝接收。至于拒绝的策略， 可以通过handler这个参数来指定。ThreadPoolExecutor已经提供了以下4种策略</p>
<ul>
<li><p>CallerRunsPolicy：<strong>既不抛弃任务也不抛出异常</strong>，提交任务的线程自己去执行该任务。直接运行任务的 run 方法，换言之将任务回退给调用者来直接运行。比如在主线程中，通过线程池提交任务，当触发该策略时，主线程会执行任务的 <code>run()</code> 方法</p>
</li>
<li><p>AbortPolicy：默认的拒绝策略，会throws RejectedExecutionException。</p>
</li>
<li><p>DiscardPolicy：直接丢弃任务，没有任何异常抛出。</p>
</li>
<li><p>DiscardOldestPolicy：丢弃最老的任务，其实就是把最早进入工作队列的任务丢弃，然后把新任务加入 到工作队列。</p>
</li>
</ul>
</li>
</ul>
<h3 id="线程池的注意点"><a href="#线程池的注意点" class="headerlink" title="线程池的注意点"></a>线程池的注意点</h3><ol>
<li><p>不要使用无界的任务队列（默认是无界任务队列，也就是LinkedBlockingQueue）</p>
<p>一旦任务数量过多，会发生OOM，导致所有线程无法执行</p>
</li>
<li><p>默认的拒绝执行策略需要谨慎使用</p>
<p>因为当任务的数量&gt;(线程池最大线程数量+工作队列长度)，则加下来的任务会被拒绝策略执行</p>
<p>使用有界队列，当任务过多时，线程池会触发执行拒绝策略，线程池默认的拒绝策略会throw RejectedExecutionException 这是个运行时异常，对于运行时异常编译器并不强制catch它，很容易被忽略。</p>
</li>
<li><p>异常需要及时捕获</p>
<p>虽然任务异常会被终止掉，但是不会通知你，因此需要及时捕获异常</p>
</li>
<li><p>如果想要创建一个线程池，尽量不要使用<code>Executors</code>，因为有很多默认的参数在其中，比如任务队列是无界队列、默认的拒绝策略会抛出异常不做处理，因此创建线程池尽量使用<code>new ThreadPoolExecutor</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ThreadPoolExecutor executor = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">            CORE_POOL_SIZE,</span><br><span class="line">            MAX_POOL_SIZE,</span><br><span class="line">            KEEP_ALIVE_TIME,</span><br><span class="line">            TimeUnit.SECONDS,</span><br><span class="line">            <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(QUEUE_CAPACITY),</span><br><span class="line">            <span class="keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy()</span><br><span class="line">        );</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://ld246.com/article/1627563101416">https://ld246.com/article/1627563101416</a></p>
]]></content>
      <categories>
        <category>java并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>管程</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E7%AE%A1%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="管程的定义"><a href="#管程的定义" class="headerlink" title="管程的定义"></a>管程的定义</h3><p>管程，指的是管理共享变量以及对共享变量的操作过程，让他们支持并发</p>
<p>翻译为 Java 领 域的语言，就是管理类的成员变量和成员方法，让这个类是线程安全的</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20211208162712.png" alt="image-20211208162704532"></p>
<h3 id="MASE模型-（java本身实现的管程模型）"><a href="#MASE模型-（java本身实现的管程模型）" class="headerlink" title="MASE模型 （java本身实现的管程模型）"></a>MASE模型 （java本身实现的管程模型）</h3><ul>
<li><p>互斥</p>
<p>管程本身提供的enq()与deq()两个方法，相互<strong>互斥</strong></p>
<p>只允许一个线程对其中的共享变量进行操作</p>
</li>
<li><p>同步</p>
<p><font color=red>每个条件变量都有自己对应的等待队列</font></p>
<p>条件变量的主要作用就在于协调各个线程之间的工作顺序</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20211208162941.png" alt="image-20211208162935838"></p>
</li>
</ul>
<p>​            执行顺序：如果条件变量不满足，那么就会进入对应的条件变量等待队列进行等待，当条件满足时就会进入到入口等待队列进行等待</p>
]]></content>
      <categories>
        <category>java并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>读写锁</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E8%AF%BB%E5%86%99%E9%94%81/</url>
    <content><![CDATA[<h3 id="读写锁-ReadWriteLock"><a href="#读写锁-ReadWriteLock" class="headerlink" title="读写锁 ReadWriteLock"></a>读写锁 ReadWriteLock</h3><h4 id="互斥关系"><a href="#互斥关系" class="headerlink" title="互斥关系"></a>互斥关系</h4><p>读写锁允许多个线程同时读共享变量，但是写操作只能有一个线程操作</p>
<p>读锁与读锁之间不相互排斥，读锁与写锁相互排斥，写锁相互排斥</p>
<h4 id="升级与降级"><a href="#升级与降级" class="headerlink" title="升级与降级"></a>升级与降级</h4><p>无法在持有读锁的情况下对锁进行升级为写锁</p>
<p>可以在持有写锁的情况下对锁降级为读锁</p>
<h4 id="条件变量与公平模式"><a href="#条件变量与公平模式" class="headerlink" title="条件变量与公平模式"></a>条件变量与公平模式</h4><p>写锁支持条件变量，但是读锁不支持</p>
<p>读写锁类似于 ReentrantLock，也支持公平模式和非公平模式</p>
<h3 id="性能较好的“读写锁”-StampedLock"><a href="#性能较好的“读写锁”-StampedLock" class="headerlink" title="性能较好的“读写锁”   StampedLock"></a>性能较好的“读写锁”   StampedLock</h3><h4 id="支持的锁类型"><a href="#支持的锁类型" class="headerlink" title="支持的锁类型"></a>支持的锁类型</h4><ul>
<li><p>写锁</p>
<p>读写锁中的写锁</p>
</li>
<li><p>悲观读锁</p>
<p>读写锁中的读锁</p>
</li>
<li><p>乐观读 （性能提升的主要原因）</p>
<p>不加锁</p>
</li>
</ul>
<h4 id="乐观锁如何使用？"><a href="#乐观锁如何使用？" class="headerlink" title="乐观锁如何使用？"></a>乐观锁如何使用？</h4><p>每次使用乐观读的读完之后，<font color=red>验证一下是否期间存在写操作</font>，如果存在写操作，则将乐观读升级为悲观读锁</p>
<p>乐观锁验证读期间是否存在写操作原理</p>
<p>类似于在StampedLock中增加了一个version字段（也就是对应的stamp），每次写操作之后都会将对应的version字段+1，如果发现version前后不一致，则说明存在写操作</p>
<p>模板</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> StampedLock lock = <span class="keyword">new</span> StampedLock();</span><br><span class="line"><span class="comment">//乐观读</span></span><br><span class="line"><span class="keyword">long</span> stamp = lock.tryOptimisticRead();</span><br><span class="line"><span class="comment">//校验 stamp</span></span><br><span class="line"><span class="keyword">if</span>(!lock.validate(stamp))&#123;</span><br><span class="line">  <span class="comment">//升级为悲观读</span></span><br><span class="line">  stamp = lock.readLock();</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="comment">// 释放悲观读</span></span><br><span class="line">    lock.unlockRead(stamp);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="锁的升级与降级"><a href="#锁的升级与降级" class="headerlink" title="锁的升级与降级"></a>锁的升级与降级</h4><p>stampedLock支持锁的升级<code>tryConvertToWriteLock()</code>与降级<code>tryConvertToReadLock()</code></p>
<h4 id="使用stampedLock的注意事项"><a href="#使用stampedLock的注意事项" class="headerlink" title="使用stampedLock的注意事项"></a>使用stampedLock的注意事项</h4><ul>
<li><p>该锁不支持重入</p>
</li>
<li><p>如果线程阻塞在 StampedLock 的 readLock() 或者 writeLock() 上时，此时调用该阻塞线程的 interrupt() 方法，会导致 CPU 飙升</p>
<p>使用 StampedLock 一定不要调用中断操作，如果需要支持中断功能，一定使用可中断的 悲观读锁 readLockInterruptibly() 和写锁 writeLockInterruptibly()</p>
</li>
</ul>
]]></content>
      <categories>
        <category>java并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>NIO</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/NIO/NIO/</url>
    <content><![CDATA[<ol>
<li><p>NIO与IO的区别</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210424141734.png" alt="image-20210424141728417" style="zoom:50%;" /></li>
</ol>
<ol start="2">
<li><p>几个重要概念</p>
<ul>
<li><p>channel 用于连接，本身不存储数据</p>
</li>
<li><p>buffer   用于传输数据</p>
<ul>
<li><p>处理boolean没有对应类型的缓冲区，其他类型都有对应的缓冲区</p>
<p>例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       String str = <span class="string">&quot;abcde&quot;</span>;</span><br><span class="line">        ByteBuffer buf = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;--------allocate------------&quot;</span>);</span><br><span class="line">        <span class="comment">//存放数据</span></span><br><span class="line">        buf.put(str.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        System.out.println(<span class="string">&quot;position:&quot;</span> +buf.position()+<span class="string">&quot; limit:&quot;</span>+buf.limit()+<span class="string">&quot;  capacity:&quot;</span>+buf.capacity());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------flip------------&quot;</span>);</span><br><span class="line">        <span class="comment">//切换成读模式  limit变为了position的位置</span></span><br><span class="line">        buf.flip();</span><br><span class="line">        System.out.println(<span class="string">&quot;position:&quot;</span> +buf.position()+<span class="string">&quot; limit:&quot;</span>+buf.limit()+<span class="string">&quot;  capacity:&quot;</span>+buf.capacity());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------read------------&quot;</span>);</span><br><span class="line">        <span class="comment">//读取数据</span></span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[buf.limit()];</span><br><span class="line">        buf.get(buffer,<span class="number">0</span>,buffer.length-<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(buffer,<span class="number">0</span>,buffer.length-<span class="number">2</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;position:&quot;</span> +buf.position()+<span class="string">&quot; limit:&quot;</span>+buf.limit()+<span class="string">&quot;  capacity:&quot;</span>+buf.capacity());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------mark------------&quot;</span>);</span><br><span class="line">        <span class="comment">//mark，标记当前position的位置</span></span><br><span class="line">        buf.mark();</span><br><span class="line">        System.out.println(<span class="string">&quot;position:&quot;</span> +buf.position()+<span class="string">&quot; limit:&quot;</span>+buf.limit()+<span class="string">&quot;  capacity:&quot;</span>+buf.capacity());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------read------------&quot;</span>);</span><br><span class="line">        <span class="comment">//读取数据</span></span><br><span class="line">        buf.get(buffer,buffer.length-<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(buffer,buffer.length-<span class="number">2</span>,<span class="number">2</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;position:&quot;</span> +buf.position()+<span class="string">&quot; limit:&quot;</span>+buf.limit()+<span class="string">&quot;  capacity:&quot;</span>+buf.capacity());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------reset------------&quot;</span>);</span><br><span class="line">        <span class="comment">//重新回到之前的position</span></span><br><span class="line">        buf.reset();</span><br><span class="line">        System.out.println(<span class="string">&quot;position:&quot;</span> +buf.position()+<span class="string">&quot; limit:&quot;</span>+buf.limit()+<span class="string">&quot;  capacity:&quot;</span>+buf.capacity());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------rewind------------&quot;</span>);</span><br><span class="line">        <span class="comment">//rewind  重读</span></span><br><span class="line">        buf.rewind();</span><br><span class="line">        System.out.println(<span class="string">&quot;position:&quot;</span> +buf.position()+<span class="string">&quot; limit:&quot;</span>+buf.limit()+<span class="string">&quot;  capacity:&quot;</span>+buf.capacity());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------clear------------&quot;</span>);</span><br><span class="line">        <span class="comment">//clear  清空缓冲区，但是缓冲区的数据依旧存在,处于&quot;遗忘&quot;状态  其实就是pos和limit置为了0，但是数据依旧是存在于缓冲区中的</span></span><br><span class="line">        buf.clear();</span><br><span class="line">        System.out.println(<span class="string">&quot;position:&quot;</span> +buf.position()+<span class="string">&quot; limit:&quot;</span>+buf.limit()+<span class="string">&quot;  capacity:&quot;</span>+buf.capacity());</span><br><span class="line">        System.out.println((<span class="keyword">char</span>) buf.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>直接缓冲区（ByteBuffer.allocateDirect()）和非直接缓冲区（ByteBuffer.allocate()）</p>
</li>
</ul>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210424150455.png" alt="image-20210424150449985" style="zoom:50%;" /></li>
</ul>
<p>​            <font color=red>直接缓冲区适用于常驻内存的大数据，缺点就是消耗资源比较大，一旦映射到物理磁盘的话我们就失去了对它的控制权</font></p>
<ul>
<li><p>selector  selectableChannel的多路复用，用于监控SelectableChannel的IO状况</p>
<p>例子：</p>
<p>Server端：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ServerSocketChannel ssChannel = ServerSocketChannel.open();</span><br><span class="line"></span><br><span class="line"><span class="comment">//切换为非阻塞模式</span></span><br><span class="line">ssChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">ssChannel.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">9999</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取Selector</span></span><br><span class="line">Selector selector = Selector.open();</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册通道到选择器上,并指定&quot;监听接受事件&quot;</span></span><br><span class="line">ssChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line"><span class="comment">//轮训式的获取选择器上已经准备就绪的事件</span></span><br><span class="line"><span class="keyword">while</span> (selector.select()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="comment">//获取当前选择器中所有注册的选择键（已就绪的监听事件）</span></span><br><span class="line">    Iterator&lt;SelectionKey&gt; it = selector.selectedKeys().iterator();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断具体是什么事件准备就绪</span></span><br><span class="line">    <span class="keyword">while</span> (it.hasNext())&#123;</span><br><span class="line">        <span class="comment">//获取准备就绪的事件</span></span><br><span class="line">        SelectionKey sk = it.next();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断具体是什么事件准备就绪</span></span><br><span class="line">        <span class="keyword">if</span>(sk.isAcceptable())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这是接受状态&quot;</span>);</span><br><span class="line">            <span class="comment">//若接收就绪则获取客户端的连接</span></span><br><span class="line">            SocketChannel acceptChannel = ssChannel.accept();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//切换非阻塞模式</span></span><br><span class="line">            acceptChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将该通道注册到选择器上</span></span><br><span class="line">            acceptChannel.register(selector,SelectionKey.OP_READ);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sk.isReadable())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这是可读状态***********&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取当前选择器上读就绪状态的通道</span></span><br><span class="line">            SocketChannel channel = (SocketChannel) sk.channel();</span><br><span class="line">            <span class="comment">//读数据</span></span><br><span class="line">            ByteBuffer buf = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//此处不能写！=-1，因为当没有数据传输过来的时候是0</span></span><br><span class="line">            <span class="keyword">while</span> ((len=channel.read(buf))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                buf.flip();</span><br><span class="line">                System.out.println(<span class="keyword">new</span> String(buf.array(),<span class="number">0</span>,len));</span><br><span class="line">                buf.clear();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//表示有人下线，也就是有人断开连接</span></span><br><span class="line">            <span class="keyword">if</span>(len==-<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;有人离线。。。。&quot;</span>+channel.getRemoteAddress());</span><br><span class="line">                sk.cancel();</span><br><span class="line">                channel.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//必须要取消，否则已经完成的连接会一直存在</span></span><br><span class="line">        it.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Client:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SocketChannel sChannel = SocketChannel.open(<span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">9999</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//切换成非阻塞模式</span></span><br><span class="line">sChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">ByteBuffer buf = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">while</span> (scanner.hasNext())&#123;</span><br><span class="line">    String str = scanner.next();</span><br><span class="line">    buf.put(str.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">    buf.flip();</span><br><span class="line">    sChannel.write(buf);</span><br><span class="line">    buf.clear();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sChannel.close();</span><br></pre></td></tr></table></figure></li>
<li><p>Pipe  用于线程之间进行传输数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取管道</span></span><br><span class="line">Pipe pipe = Pipe.open();</span><br><span class="line"></span><br><span class="line">ByteBuffer buf = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">buf.put(<span class="string">&quot;Hello pipe&quot;</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line"></span><br><span class="line"><span class="comment">//往管道中写入数据</span></span><br><span class="line">Pipe.SinkChannel sinkChannel = pipe.sink();</span><br><span class="line">buf.flip();</span><br><span class="line">sinkChannel.write(buf);</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取管道中的数据</span></span><br><span class="line">Pipe.SourceChannel sourceChannel = pipe.source();</span><br><span class="line">ByteBuffer buf1 = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">sourceChannel.read(buf1);</span><br><span class="line">buf1.flip();</span><br><span class="line">System.out.println(<span class="keyword">new</span> String(buf1.array(),<span class="number">0</span>, buf1.limit()));</span><br><span class="line"></span><br><span class="line">sinkChannel.close();</span><br><span class="line">sourceChannel.close();</span><br></pre></td></tr></table></figure></li>
<li><p>多人群聊代码</p>
<p><a href="https://github.com/CooperXJ/NIO/tree/master">https://github.com/CooperXJ/NIO/tree/master</a></p>
</li>
</ul>
</li>
<li><p>总结</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210425090757.png" alt="image-20210425090755281"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>NIO</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>NIO</tag>
      </tags>
  </entry>
  <entry>
    <title>java8时间API</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/java8/java8%E6%97%B6%E9%97%B4API/</url>
    <content><![CDATA[<ol>
<li>java8的时间api是线程安全的，因为它每次调用都会创建一个实例</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">time</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * LocalDate 使用ISO-8601的日期</span></span><br><span class="line"><span class="comment">         * LocalTime 时间</span></span><br><span class="line"><span class="comment">         * LocalDateTime 日期和时间</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        System.out.println(LocalDate.now());</span><br><span class="line">        System.out.println(LocalTime.now());</span><br><span class="line">        System.out.println(LocalDateTime.now());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//以人类角度获取时间  Local开头的都是</span></span><br><span class="line">        LocalDateTime ldt = LocalDateTime.now();</span><br><span class="line">        System.out.println(ldt);</span><br><span class="line"></span><br><span class="line">        LocalDateTime localDate = LocalDateTime.of(<span class="number">2021</span>,<span class="number">3</span>,<span class="number">20</span>,<span class="number">19</span>,<span class="number">30</span>);</span><br><span class="line">        System.out.println(localDate);</span><br><span class="line"></span><br><span class="line">        LocalDateTime localDateTime = ldt.plusYears(<span class="number">2</span>);</span><br><span class="line">        System.out.println(localDateTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//机器角度获取时间  默认获取UTC时区</span></span><br><span class="line">        Instant instant = Instant.now();</span><br><span class="line">        System.out.println(instant);</span><br><span class="line"></span><br><span class="line">        OffsetDateTime offsetDateTime = instant.atOffset(ZoneOffset.ofHours(<span class="number">8</span>));</span><br><span class="line">        System.out.println(offsetDateTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//转换成时间戳</span></span><br><span class="line">        System.out.println(instant.toEpochMilli());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算时间间隔</span></span><br><span class="line">        Instant instant1 = Instant.now();</span><br><span class="line">        Instant instant2 = instant.now();</span><br><span class="line">        System.out.println(Duration.between(instant1,instant2).getNano());</span><br><span class="line">        System.out.println(Duration.between(instant1,instant2).toMillis());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//时间矫正器</span></span><br><span class="line">        LocalDate localDate1 = LocalDate.now();</span><br><span class="line">        System.out.println(localDate1.withDayOfMonth(<span class="number">8</span>)); <span class="comment">//设置日的号数</span></span><br><span class="line">        System.out.println(localDate1.with(TemporalAdjusters.next(DayOfWeek.SUNDAY))); <span class="comment">//获取下一个周日的日期</span></span><br><span class="line"></span><br><span class="line">        LocalDateTime localDateTime1 = localDateTime.now();</span><br><span class="line">        <span class="comment">//自定义日期</span></span><br><span class="line">        System.out.println(localDateTime1.with(l-&gt;&#123;</span><br><span class="line">            LocalDateTime time = (LocalDateTime) l;</span><br><span class="line">            DayOfWeek dayOfWeek = time.getDayOfWeek();</span><br><span class="line">            <span class="keyword">if</span>(dayOfWeek.equals(DayOfWeek.SUNDAY))&#123;</span><br><span class="line">                <span class="keyword">return</span> time.plusDays(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(dayOfWeek.equals(DayOfWeek.FRIDAY))&#123;</span><br><span class="line">                <span class="keyword">return</span> time.plusDays(<span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> time.plusDays(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//格式化日期</span></span><br><span class="line">        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy年MM月dd日HH:mm:ss&quot;</span>);</span><br><span class="line">        LocalDateTime localDateTime2 = LocalDateTime.now();</span><br><span class="line">        String format = localDateTime2.format(dateTimeFormatter);</span><br><span class="line">        System.out.println(format);</span><br><span class="line">        LocalDateTime parse = LocalDateTime.parse(format, dateTimeFormatter);</span><br><span class="line">        System.out.println(parse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>java8特性</tag>
      </tags>
  </entry>
  <entry>
    <title>lambda</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/java8/lambda/</url>
    <content><![CDATA[<ol>
<li><p>Lambda 表达式的参数列表</p>
<p>lambda 表达式中所需执行的功能，即lambda体</p>
</li>
<li><p>lambda 表达式需要函数式接口的支持，也就是说接口里面只能有一个方法，可以对该种接口使用@FunctionalInterface进行注释 </p>
</li>
<li><p>当对应的lambda体只有一行，有没有返回值都没有关系，都可以不写大括号以及return</p>
</li>
<li><p>核心函数式接口</p>
<ul>
<li><p>Consumer<T>: 消费性接口</p>
<p>void accept(T t);</p>
</li>
<li><p>Supplier<T>: 供给型接口</p>
<p>T get();</p>
</li>
<li><p>Funcation&lt;T,R&gt;: 函数型接口</p>
<p>R apply(T,t)</p>
</li>
<li><p>Predicate<T>: 断言型接口</p>
<p>boolean  test(T t);</p>
</li>
</ul>
</li>
<li><p>例子</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">lambda</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>);</span><br><span class="line">        list.sort((x1,x2)-&gt;Integer.compare(x1,x2));</span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        testConsumer(<span class="number">1000</span>,(x)-&gt; System.out.println(<span class="string">&quot;消费  &quot;</span>+x));</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; list1 = testSupplier(<span class="number">10</span>, () -&gt; (<span class="keyword">int</span>) (Math.random() * <span class="number">100</span>));</span><br><span class="line">        list1.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        System.out.println(testFunction(<span class="string">&quot; Hello World &quot;</span>,s-&gt; s.trim()));</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; list2 = Arrays.asList(<span class="string">&quot;China&quot;</span>,<span class="string">&quot;American&quot;</span>,<span class="string">&quot;UK&quot;</span>,<span class="string">&quot;Australia&quot;</span>);</span><br><span class="line">        testPredicate(list2,x-&gt;x.length()&lt;<span class="number">6</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        Consumer&lt;String&gt; consumerTest = System.out::println;</span><br><span class="line">        consumerTest.accept(<span class="string">&quot;wow&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//lambda的实现方法的方法引用  需要注意的是调用的方法的参数和返回值必须和函数接口的参数和方法名保持一致</span></span><br><span class="line">        <span class="comment">//方法1：对象::实例方法名</span></span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        Consumer&lt;String&gt; consumer = student::setName;</span><br><span class="line">        Consumer&lt;Integer&gt; consumer1 = student::setAge;</span><br><span class="line">        consumer.accept(<span class="string">&quot;Cooper&quot;</span>);</span><br><span class="line">        consumer1.accept(<span class="number">23</span>);</span><br><span class="line">        System.out.println(student.toString());</span><br><span class="line"></span><br><span class="line">        Supplier&lt;String&gt; supplier = student::getName;</span><br><span class="line">        System.out.println(supplier.get());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法2：类::静态方法名</span></span><br><span class="line">        Comparator&lt;Integer&gt; comparator = Integer::compare;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法3 类::实例方法  注意要求：参数列表的第一个参数是实例方法的调用者，而第二个参数是实例方法的参数时，可以使用ClassName::method</span></span><br><span class="line">        BiPredicate&lt;String,String&gt; biPredicate = (x,y)-&gt;x.equals(y);</span><br><span class="line">        BiPredicate&lt;String,String&gt; biPredicate1 = String::equals;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testConsumer</span><span class="params">(<span class="keyword">int</span> money, Consumer&lt;Integer&gt; con)</span></span>&#123;</span><br><span class="line">        con.accept(money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> List&lt;Integer&gt; <span class="title">testSupplier</span><span class="params">(<span class="keyword">int</span> n, Supplier&lt;Integer&gt; supplier)</span></span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            Integer integer = supplier.get();</span><br><span class="line">            list.add(integer);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">testFunction</span><span class="params">(String str, Function&lt;String, String&gt; function)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> function.apply(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> List&lt;String&gt; <span class="title">testPredicate</span><span class="params">(List&lt;String&gt; list, Predicate&lt;String&gt; predicate)</span></span>&#123;</span><br><span class="line">        List&lt;String&gt; list1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.forEach(l-&gt;&#123;</span><br><span class="line">            <span class="keyword">if</span>(predicate.test(l))&#123;</span><br><span class="line">                list1.add(l);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                    <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ol start="6">
<li><p>java8中在接口中可以拥有实现的方法主体，该方法使用default进行修饰</p>
<ul>
<li><p>类优先原则</p>
<p>如果同时继承父类和接口时，该方法同时在父类和接口中都有被编写，那么默认会调用父类中的方法</p>
</li>
<li><p>如果一个父接口提供一个默认的方法，另一个接口也提供了一个具有相同名称和参数列表的方法（不管是否为默认方法），那么必须覆盖该方法来解决冲突</p>
</li>
</ul>
</li>
<li><p>java8 接口可以有静态方法</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>java8特性</tag>
      </tags>
  </entry>
  <entry>
    <title>optional</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/java8/optional/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OptionalTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * optional是一个容器类</span></span><br><span class="line"><span class="comment">     * Optional.of(T t) 创建一个Optional实例</span></span><br><span class="line"><span class="comment">     * Optional.empty() 创建一个空的Optional实例</span></span><br><span class="line"><span class="comment">     * Optional.ofNull(T t) 若t不为空，则创建Optional实例，否则创建空实例</span></span><br><span class="line"><span class="comment">     * isPresent() 判断是否包含空值</span></span><br><span class="line"><span class="comment">     * orElse(T t) 如果调用对象包含值</span></span><br><span class="line"><span class="comment">     * orElseGet(Supplier s)：如果调用对象包含值，返回该值，否则返回s获取的值</span></span><br><span class="line"><span class="comment">     * map(Function f) :如果有值对其处理，并返回处理后的Optional，否则返回去Optional.empty()</span></span><br><span class="line"><span class="comment">     * flatMap(Function f) :与map类似，要求返回值必须是optional</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 作用场景：有可能不存在的对象使用Optional封装</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        Optional&lt;Person&gt; person1 = Optional.of(person);</span><br><span class="line">        Optional&lt;Person&gt; person2 = Optional.ofNullable(person);</span><br><span class="line">        Optional&lt;String&gt; s = person2.map(x -&gt; x.getName());</span><br><span class="line"><span class="comment">//        System.out.println(s.get());</span></span><br><span class="line"></span><br><span class="line">        Optional&lt;String&gt; s1 = person2.flatMap(x -&gt;  Optional.of(x.getName()));</span><br><span class="line">        System.out.println(s1.get());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, Integer age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>java8特性</tag>
      </tags>
  </entry>
  <entry>
    <title>stream</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/java8/stream/</url>
    <content><![CDATA[<h3 id="注意：当数据量特别大的时候用stream速度明显替身，但是小数据量可以直接使用for循环，这样更快一些"><a href="#注意：当数据量特别大的时候用stream速度明显替身，但是小数据量可以直接使用for循环，这样更快一些" class="headerlink" title="注意：当数据量特别大的时候用stream速度明显替身，但是小数据量可以直接使用for循环，这样更快一些"></a>注意：当数据量特别大的时候用stream速度明显替身，但是小数据量可以直接使用for循环，这样更快一些</h3><ol>
<li><p>创建stream的三个步骤</p>
<ul>
<li>创建stream</li>
<li>中间操作</li>
<li>终止操作</li>
</ul>
</li>
<li><img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210320133243992.png" alt="image-20210320133243992" style="zoom:67%;" />

<p>筛选与切片</p>
<ul>
<li><p>filter</p>
<p>接受lambd，从流中排除某些元素</p>
</li>
<li><p>limit</p>
<p>截断流，使其元素不超过给定的数量</p>
</li>
<li><p>skip（n）</p>
<p>跳过元素，返回一个扔掉了前n个元素的流。若流中的元素不足n个，则返回一个空流，与limit（n）互补</p>
</li>
<li><p>distinct</p>
<p>筛选，通过流所生成元素的hasCode()和equals() 去除重复元素</p>
<p>注意：此处如果想要使用该方法，在自定义的类中必须重写hasCode和equals方法</p>
</li>
</ul>
<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210320144430210.png" alt="image-20210320144430210" style="zoom:50%;" /></li>
<li><p>例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">stream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 创建stream的三个操作步骤</span></span><br><span class="line"><span class="comment">         * 1. 创建stream的</span></span><br><span class="line"><span class="comment">         * 2. 中间操作  中间操作不会执行任何操作，只有执行终止操作之后才会执行</span></span><br><span class="line"><span class="comment">         * 3. 终止操作</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        list.stream().filter(x-&gt;x&lt;<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line">        System.out.println();</span><br><span class="line">        list.stream().filter(x-&gt;x&lt;<span class="number">5</span>).limit(<span class="number">1</span>).forEach(System.out::println);</span><br><span class="line">        System.out.println();</span><br><span class="line">        list.stream().distinct().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * map  将元素转为其他形式或提取信息。接受一个函数作为参数，该函数会被应用到每一个元素上，并将其映射成一个新的元素</span></span><br><span class="line"><span class="comment">         * flatmap 接受一个函数作为参数，将流中的每一个值都换成另一个流，然后将所有流连接成一个流</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; strings = Arrays.asList(<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;bbb&quot;</span>,<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        strings.stream().map(s-&gt;s.toUpperCase(Locale.ROOT)).forEach(System.out::println);</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------&quot;</span>);</span><br><span class="line">        Stream&lt;Stream&lt;Character&gt;&gt; streamStream = strings.stream().map(stream::getCharacterStream);</span><br><span class="line">        streamStream.forEach(s-&gt;&#123;</span><br><span class="line">            s.forEach(System.out::println);</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------&quot;</span>);</span><br><span class="line">        strings.stream().flatMap(stream::getCharacterStream).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * sort</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------&quot;</span>);</span><br><span class="line">        List&lt;Integer&gt; sort = Arrays.asList(<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>);</span><br><span class="line">        sort.stream().sorted().forEach(System.out::println) ;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------&quot;</span>);</span><br><span class="line">        sort.stream().sorted((x1,x2)-&gt;-Integer.compare(x1,x2)).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * reduce  规约</span></span><br><span class="line"><span class="comment">         * 可以将流中的元素反复结合起来得到一个新的值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        List&lt;Integer&gt; reduce = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">        <span class="comment">//此处注意一下0是起始值，那么y就是从reduce中的取值，最终不断迭代相加更新x，不断的从中取出y</span></span><br><span class="line">        Integer res = reduce.stream().reduce(<span class="number">0</span>, (x, y) -&gt; x + y);</span><br><span class="line">        System.out.println(res);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * collect 收集 Collector.List()</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----------&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        List&lt;Integer&gt; collect = Arrays.stream(arr).boxed().collect(Collectors.toList());</span><br><span class="line">        collect.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        Set&lt;Integer&gt; collect1 = Arrays.stream(arr).boxed().collect(Collectors.toSet());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//转为特殊的数据类型 Collectors.toCollection(xxxx::new)  基本上关于Collector的操作都可以，例如sum、avg、max、min、groupBy</span></span><br><span class="line">        HashSet&lt;Integer&gt; collect2 = Arrays.stream(arr).boxed().collect(Collectors.toCollection(HashSet::<span class="keyword">new</span>));</span><br><span class="line"></span><br><span class="line">         <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 并行流 parallel()  将任务拆分到不同的cpu上，完成之后再进行合并  不声明forkJoinPool也可以是因为java8 有一个公共的forkJoinPool</span></span><br><span class="line"><span class="comment">         * 默认是顺序流，不能盲目的使用parallel()  因为有fork和join也会消耗时间</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Instant start = Instant.now();</span><br><span class="line">        LongStream.range(<span class="number">0</span>,<span class="number">10000000000L</span>).parallel().reduce(<span class="number">0</span>,Long::sum);</span><br><span class="line">        Instant end = Instant.now();</span><br><span class="line">        System.out.println(Duration.between(start,end).toMillis());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Stream&lt;Character&gt; <span class="title">getCharacterStream</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        List&lt;Character&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(Character ch:s.toCharArray())&#123;</span><br><span class="line">            list.add(ch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list.stream();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>​    </p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>java8特性</tag>
      </tags>
  </entry>
  <entry>
    <title>重复注解</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/java8/%E9%87%8D%E5%A4%8D%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<ol>
<li><p>```java<br>@Repeatable(Myanntations.class)<br>@Target({ElementType.TYPE,ElementType.FIELD,ElementType.METHOD,ElementType.CONSTRUCTOR,ElementType.LOCAL_VARIABLE})<br>@Retention(RetentionPolicy.RUNTIME)<br>public @interface MyAnnotation {</p>
<pre><code>String value() default &quot;I love you&quot;;
</code></pre>
<p>}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2. ```java</span><br><span class="line">   @Repeatable(Myanntations.class)</span><br><span class="line">   @Target(&#123;ElementType.TYPE,ElementType.FIELD,ElementType.METHOD,ElementType.CONSTRUCTOR,ElementType.LOCAL_VARIABLE&#125;)</span><br><span class="line">   @Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">   public @interface MyAnnotation &#123;</span><br><span class="line">       String value() default &quot;I love you&quot;;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li>
<li><pre><code class="java">public class TestAnnotation &#123;
    public static void main(String[] args) throws NoSuchMethodException &#123;
        //通过反射获取方法注解
        Class&lt;TestAnnotation&gt; testAnnotationClass = TestAnnotation.class;
        Method show = testAnnotationClass.getMethod(&quot;show&quot;);
        MyAnnotation[] annotationsByType = show.getAnnotationsByType(MyAnnotation.class);
        for (MyAnnotation myAnnotation : annotationsByType) &#123;
            System.out.println(myAnnotation.value());
        &#125;
    &#125;

    @MyAnnotation(&quot;Cooper&quot;)
    @MyAnnotation
    public void show()&#123;

    &#125;
&#125;
</code></pre>
</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>java8特性</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL长链接</title>
    <url>/2022/01/07/MySQL/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/01-MySQL%E9%95%BF%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<h3 id="Mysql连接"><a href="#Mysql连接" class="headerlink" title="Mysql连接"></a>Mysql连接</h3><ul>
<li><p>长连接</p>
<p>mysql默认每次连接是8h，如果在这个时间内都没有任何操作都会断开</p>
</li>
<li><p>短连接</p>
<p>每执行完几次查询就断开连接，下次查询重新建立连接</p>
</li>
</ul>
<h3 id="mysql长连接带来的问题"><a href="#mysql长连接带来的问题" class="headerlink" title="mysql长连接带来的问题"></a>mysql长连接带来的问题</h3><p>长期的长连接不释放会导致内存涨得很快，因为在执行过程中临时使用的内存是管理在连接对象里面的，这些资源会在连接断开的时候才释放</p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ol>
<li>定期断开长连接</li>
<li>在程序中判断执行过一个占用内存的大查询后断开连接之后要查询再重连，再mysql 5.7或更新版本可以通过执行mysql_reset_connection来重新初始化连接资源，该过程不需要重连和重新做权限验证，可以恢复到刚刚创建完时的状态</li>
</ol>
<h3 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h3><p>查询缓存的失效非常频繁，只要对一个表的更新这个表上的虽有查询缓存都会被清空</p>
<h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><p>静态表，很长时间才会更新一次</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL更新流程</title>
    <url>/2022/01/07/MySQL/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/02-MySQL%E6%9B%B4%E6%96%B0%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="mysql-数据更新流程"><a href="#mysql-数据更新流程" class="headerlink" title="mysql 数据更新流程"></a>mysql 数据更新流程</h2><p>1、执行器先从引擎中找到数据，如果在内存则直接返回，如果不在内存查询后返回<br>2、执行器拿到数据后，会先修改数据，然后调用引擎接口重新写入数据<br>3、引擎将数据更新到内存，同时写入redo log，此时处于prepare状态<br>4、执行器生成这个操作的binlog<br>5、执行器调用引擎的事务提交接口，将redo状态改成commit状态，更新完成</p>
<p>InnoDB如何保证redolog的完整性？ - 假装懂编程的回答 - 知乎 <a href="https://www.zhihu.com/question/368847138/answer/2161671813">https://www.zhihu.com/question/368847138/answer/2161671813</a></p>
<h3 id="mysql-crash恢复"><a href="#mysql-crash恢复" class="headerlink" title="mysql crash恢复"></a>mysql crash恢复</h3><p>通过两段式提交我们知道redo log和binlog在各个阶段会被打上prepare或者commit的标识，同时还会记录事务的XID，有了这些数据，在数据库重启的时候，会先去redo log里检查所有的事务，如果redo log的事务处于commit状态，那么说明在commit后发生了crash，此时直接把redo log的数据恢复就行了，如果redo log是prepare状态，那么说明commit之前发生了crash，此时binlog的状态决定了当前事务的状态，如果binlog中有对应的XID，说明binlog已经写入成功，只是没来的及提交，此时再次执行commit就行了，如果binlog中找不到对应的XID，说明binlog没写入成功就crash了，那么此时应该执行回滚。</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL隔离机制</title>
    <url>/2022/01/07/MySQL/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/03-MySQL%E9%9A%94%E7%A6%BB%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h3 id="MySQL隔离级别"><a href="#MySQL隔离级别" class="headerlink" title="MySQL隔离级别"></a>MySQL隔离级别</h3><ul>
<li><p>在实现上，mysql会创建一个视图，访问的时候以试视图的逻辑结果为准</p>
<ul>
<li><p>可重复读</p>
<p>在事务启动时创建该视图</p>
</li>
<li><p>读提交</p>
<p>在每个SQL语句开始执行时创建</p>
</li>
<li><p>读未提交</p>
<p>没有视图概念</p>
</li>
<li><p>串行化</p>
<p>直接加锁避免并行访问</p>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>事务隔离的实现</p>
<p>在mysql中每条记录在更新的时候都会同时记录一条回滚操作，也就是同一条记录在系统中可以存在多个版本，也就是<font color=red>多版本并发控制</font></p>
</li>
</ul>
<h3 id="在可重复读的场景下注意事项"><a href="#在可重复读的场景下注意事项" class="headerlink" title="在可重复读的场景下注意事项"></a>在可重复读的场景下注意事项</h3><p>尽量不要使用长事务，因为长事务就意味着系统里面存在很老的事务视图（比如在事务期间不断有访问数据库的数据，那么在这个事务提交之前，数据库里面它可能用到的回滚记录必须都进行保留，这样就意味着会占用大量的存储空间）。除此之外，长事务还占用锁资源，可能会拖垮库。</p>
<p>例子：每一次的查询都是一个长连接（没有显式地进行提交），每次更新完之后（update完之后就会立刻进行提交），那么随着update的次数越来越多，长连接的越来越多，那么整体的回滚段就会越来越多</p>
<p>比如，在某个时刻（今天上午9:00）开启了一个事务A（对于可重复读隔离级别，此时一个视图read-view A也创建了），这是一个很长的事务……</p>
<p>事务A在今天上午9:20的时候，查询了一个记录R1的一个字段f1的值为1……</p>
<p>今天上午9:25的时候，一个事务B（随之而来的read-view B）也被开启了，它更新了R1.f1的值为2（同时也创建了一个由2到1的回滚日志），这是一个短事务，事务随后就被commit了。</p>
<p>今天上午9:30的时候，一个事务C（随之而来的read-view C）也被开启了，它更新了R1.f1的值为3（同时也创建了一个由3到2的回滚日志），这是一个短事务，事务随后就被commit了。</p>
<p>……</p>
<p>到了下午3:00了，长事务A还没有commit，为了保证事务在执行期间看到的数据在前后必须是一致的，那些老的事务视图、回滚日志就必须存在了，这就占用了大量的存储空间。</p>
<p>源于此，我们应该尽量不要使用长事务。</p>
<p><font color=red>注意：在使用begin开启事务的时候，只有select之后才会产生read-view，否则默认当前视图不产生read-view</font></p>
<p>建议：</p>
<p>如果考虑多一次交互问题，可以使用commit work and chain语法。在autocommit=1的情况下用begin显式启动事务，如果执行commit则提交事务。如果执行commit work and chain则提交事务并自动启动下一个事务。</p>
<h3 id="MVCC机制"><a href="#MVCC机制" class="headerlink" title="MVCC机制"></a>MVCC机制</h3><p><a href="https://www.bilibili.com/video/BV1hL411479T?from=search&amp;seid=78348863886178413&amp;spm_id_from=333.337.0.0">https://www.bilibili.com/video/BV1hL411479T?from=search&amp;seid=78348863886178413&amp;spm_id_from=333.337.0.0</a></p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>锁机制</title>
    <url>/2022/01/07/MySQL/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/04-%E9%94%81%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><ol>
<li><p>底层索引不使用二叉树而使用N叉树的原因（N约为1200）</p>
<p>树容易太高从而导致查询的时候需要访问的数据库太多，那么就会造成查询事件很慢</p>
</li>
<li><p>非主键索引的查询需要多扫描一棵索引树，因此在应用中尽量使用主键查询</p>
</li>
<li><p>为什么大多数场景下都使用自增主键？（<a href="https://www.jianshu.com/p/1203fd140cc2%EF%BC%89">https://www.jianshu.com/p/1203fd140cc2）</a></p>
<ul>
<li>自增主键每次都是一条插入记录，是追加操作，都不涉及到挪动其他记录，也就不会触发叶子结点的分裂，如果使用业务逻辑作为主键的话往往不能保证有序插入，这样写数据成本相对较高</li>
<li>自增主键本身占用空间比较小（相对于业务属性作为主键来说）</li>
</ul>
</li>
<li><p>什么场景下适合业务字段直接做主键？</p>
<ul>
<li>只有一个索引并且该索引必须是唯一索引，典型的场景就是kv场景</li>
</ul>
</li>
<li><p>覆盖索引</p>
<p>查询完索引之后，该索引可以直接提供给我们需要的查询结果，那么就不需要回表，也就是该索引已经覆盖了我们的查询需求</p>
<ul>
<li><p>什么时候创建联合索引呢？</p>
<p>当有一个高频请求需要查询当前索引和另外一个字段，那么就有必要创建联合索引，创建联合索引的好处在于可以使用覆盖索引</p>
</li>
</ul>
</li>
<li><p>最左前缀</p>
<p>最左前缀可以是联合索引的最左N个字段，也可以是字符串索引的最左M个字符</p>
<p>要想使用最左前缀如何对联合索引中的字段进行排序呢？</p>
<ul>
<li>如果通过调整顺序可以少维护一个索引，那么这个顺序就是优先考虑的</li>
<li>考虑空间，比如有一个联合索引是（name，age），因为name字段比age大，那么就创建一个（name，age）的联合索引和一个age的单字段索引</li>
</ul>
</li>
<li><p>索引下推</p>
<p>查看<code>深入浅出索引下</code></p>
</li>
<li><p>重做索引可以使得页面的利用率变高，但是重做主键或者删除主键都会将整个表重建</p>
</li>
</ol>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>全局锁和表锁</title>
    <url>/2022/01/07/MySQL/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/06%E5%85%A8%E5%B1%80%E9%94%81%E5%92%8C%E8%A1%A8%E9%94%81/</url>
    <content><![CDATA[<h3 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h3><h4 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h4><p>表锁可以有读锁和写锁，读锁只与写锁之间相互排斥，写锁与所有锁都排斥</p>
<p>语法：</p>
<p><code>lock tables t1 read/write</code></p>
<p><code>unlock tables</code></p>
<h4 id="元数据锁（MDL）"><a href="#元数据锁（MDL）" class="headerlink" title="元数据锁（MDL）"></a>元数据锁（MDL）</h4><p>不需要显式使用，在访问一个表的时候会自动加上该锁。</p>
<p>元数据锁的作用在于在你对表进行查询的时候，阻止对表的结构进行更改</p>
<p>当对一个表进行增删改查的时候会加入MDL读锁</p>
<p>当对一个表进行结构变更操作的时候加入MDL写锁</p>
<p><font color=red>注意：即使是一个小表也会引发数据库的崩溃</font></p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20211022095059.png" alt="image-20211022095043295" style="zoom:50%;" />

<p>这种情况下由于sessionA的事务导致sessionC需要MDL写锁因此阻塞，但是之后的sessionD获取MDL读锁也会被阻塞</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>行锁</title>
    <url>/2022/01/07/MySQL/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/07-%E8%A1%8C%E9%94%81/</url>
    <content><![CDATA[<h3 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h3><ol>
<li><p>行锁实在需要时才加上的，但<strong>并不是不需要了就立刻释放</strong>,而是要等到事务结束时才释放</p>
</li>
<li><p>如果在一个事务中需要锁多个行，要把最有可能产生锁冲突、最有可能影响并发度的锁尽量往后放</p>
</li>
<li><p>InnoDB行锁是通过锁索引实现的，如果某一列没有建立索引，<strong>即使只更新一条记录也会锁定整张表</strong></p>
<p>最好在每条更新语句上加上limit 1，防止更新的时候遇到where后面不是索引从而导致全表被锁。</p>
<p>原因如下：</p>
<ol>
<li>未建立索引的列会被被全表扫描</li>
</ol>
</li>
<li><p>加上limit 1之后更新语句的执行流程是先去查询在去更新,也就是查询sql为 select * from t where name = “abc” limit 1 for update,相当于扫描主键索引找到第一个满足name=”abc”的条件为止,此时锁的区间为(负无穷,当前行的id],如果在这个id之后的更新和插入时都不会锁住的,<strong>在这个id之前的更新和插入会阻塞,之后则不会阻塞</strong></p>
<ol start="3">
<li>加上limit 1之后如果还是where了没有加索引的列，那么还是会进行全表扫描，但是进行全表扫描的话会导致被前一个事务的行锁锁住，因此就会卡主</li>
</ol>
</li>
<li><p>我们普通的select * from table where a=1 不会触发行锁，==这是快照读，是不会进行加锁的==，除非添加了for update（排他锁）或者lock in share mode（共享锁）</p>
</li>
</ol>
<h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><ol>
<li><p>死锁超时设置</p>
<p><code>innodb_lock_wait_timeout</code></p>
<p>InnoDB默认是50s，也是如果采用超时这种策略，当出现死锁之后，<strong>第一个被锁住的线程需要过50s才会超时退出，然后其他线程才有可能继续执行</strong></p>
</li>
<li><p>死锁检测</p>
<p><code>innodb_deadlocak_detect</code></p>
<p>缺点：</p>
<p>每一个新来的被堵住的线程，都要判断会不会由于自己的假如导致了死锁，时间复杂度为O(n),对cpu的消耗非常大</p>
<p>解决方法：</p>
<ul>
<li>确保业务一定不会出现死锁，临时关闭死锁检测</li>
<li>控制并发度，就是针对同一行的操作尽量保持比较少的线程在操作<ul>
<li>考虑在数据库服务端假如中间件</li>
<li>修改mysql源码，对于相同行的更新在进入引擎之前排队</li>
</ul>
</li>
<li>将一行改成逻辑上的多行减少锁冲突</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>索引选择</title>
    <url>/2022/01/07/MySQL/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/10-%E7%B4%A2%E5%BC%95%E9%80%89%E6%8B%A9/</url>
    <content><![CDATA[<h3 id="mysql选错索引"><a href="#mysql选错索引" class="headerlink" title="mysql选错索引"></a>mysql选错索引</h3><ol>
<li><p>mysql优化器的逻辑</p>
<p>mysql会选择最小的代价去执行语句，影响mysql执行代价的因素如下所示</p>
<ul>
<li>扫描的行数</li>
<li>是否使用临时表</li>
<li>是否排序</li>
</ul>
</li>
<li><p>mysql扫描行数的判断</p>
<p>mysql在执行语句之前无法精确知道满足条件的记录有多少，只能根据统计信息来估算记录数，该统计信息就是索引的基数</p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20211025094412.png" alt="image-20211025094404220"></p>
<p>​    这个统计得到的基数往往<strong>都不准确</strong></p>
<ol start="3">
<li><p>发现mysql选错了索引解决方法</p>
<ul>
<li><p>如果发现mysql选错了索引，可以选择使用analyze table {tableName}命令对其进行重新统计索引信息</p>
<p>因为有可能是因为索引的统计信息导致最终mysql选择索引时出现错误</p>
</li>
<li><p>强制选择使用索引</p>
<p>force index({index name})</p>
</li>
<li><p>修改语句诱导使用正确的索引</p>
</li>
<li><p>重建新的索引，删除误用的索引</p>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串添加索引</title>
    <url>/2022/01/07/MySQL/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/11-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%B7%BB%E5%8A%A0%E7%B4%A2%E5%BC%95/</url>
    <content><![CDATA[<h3 id="字符串创建索引"><a href="#字符串创建索引" class="headerlink" title="字符串创建索引"></a>字符串创建索引</h3><ol>
<li><p>相同页存放的索引值越多，那么搜素的效率越高，因为读入数据页的时候一般会将整个数据页放入到内存中</p>
</li>
<li><p>字符串创建索引的方法</p>
<ol>
<li>直接创建完整索引，但是会比较占用空间</li>
<li>创建索引前缀，节省空间，但是会增加扫描次数并且不能使用覆盖索引</li>
<li>倒序存储，再创建前缀索引，用于绕过字符串本身前缀的区分度不够的问题，但是这样的话不支持范围查询</li>
<li>创建hash字段索引，查询性能文档，有额外的存储和计算消耗，同样也不支持范围查询</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>表删除但表文件大小不变</title>
    <url>/2022/01/07/MySQL/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/13-%E8%A1%A8%E5%88%A0%E9%99%A4%E4%BD%86%E8%A1%A8%E6%96%87%E4%BB%B6%E5%A4%A7%E5%B0%8F%E4%B8%8D%E5%8F%98/</url>
    <content><![CDATA[<h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><ol>
<li>使用<strong>delete</strong>表面上看是将整个表的数据删除了，实际上只是对行或者数据页标记为了<strong>可复用</strong>，并非是真正的删除操作，磁盘上的文件不会变小</li>
</ol>
<h3 id="数据空洞"><a href="#数据空洞" class="headerlink" title="数据空洞"></a>数据空洞</h3><p>可以复用但实际并未被使用的空间就是数据空洞，不仅仅删除会造成空洞，插入数据（数据页分裂）也会造成空洞，相当于是碎片</p>
<h3 id="如果解决这些问题"><a href="#如果解决这些问题" class="headerlink" title="如果解决这些问题"></a>如果解决这些问题</h3><p>执行<code>ALTER TABLE &#123;tablename&#125; ENGINE=InnoDB</code>,该命令会重建表，重新组织数据</p>
<p>几个命令</p>
<ul>
<li><p><code>alter table &#123;tablename&#125; engine=InnoDB </code></p>
<p>相当于是recreate表</p>
</li>
<li><p><code>analyze table  &#123;tablename&#125; </code></p>
<p>只对表的索引信息做重新统计，没有修改数据，过程中加了MDL读锁</p>
</li>
<li><p><code>optimize table &#123;tablename&#125;</code></p>
<p>等价于recreate+analyze</p>
</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL抖动</title>
    <url>/2022/01/07/MySQL/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/12-MySQL%E6%8A%96%E5%8A%A8/</url>
    <content><![CDATA[<h3 id="redo-log的flush导致mysql抖一下"><a href="#redo-log的flush导致mysql抖一下" class="headerlink" title="redo log的flush导致mysql抖一下"></a>redo log的flush导致mysql抖一下</h3><ol>
<li><p>redo log的写flush脏页时机</p>
<ul>
<li>redo log写满了，需要flush脏页</li>
<li>内存不够用，需要flush脏页</li>
<li>mysql空闲时候</li>
<li>mysql关机时候</li>
</ul>
</li>
<li><p>mysql刷脏页的控制策略</p>
<ul>
<li><p>需要正确的告诉innodb所在主机的io能力，这样innodb才知道全力刷脏页的时候可以有多快</p>
<p><code>show variables like &#39;%innodb_io_capacity%&#39;;</code></p>
<p>一般是利用fio通过测试磁盘随机读写命令来进行设置，尤其是当磁盘为ssd的时候需要对该数值进行设置</p>
</li>
<li><p>innodb知道了主机的io能力不能总是全力去刷，也需要对其进行控制比例，控制比例计算如下</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20211026101856.png" alt="image-20211026101614652" style="zoom:50%;" /></li>
</ul>
</li>
<li><p>如何解决这个问题？</p>
<ul>
<li><p>多关注脏页比例，不要让其经常接近75%</p>
</li>
<li><p>在使用ssd磁盘的时候（IOPS比较高），建议将<code>innodb_flush_neighbors</code>设置为0</p>
<p><code>innodb_flush_neighbors</code>默认为1，表示在准备刷一个脏页的时候，其旁边也有一个脏页，就会将旁边的脏页刷掉，同时旁边的脏页的旁边如果也有脏页也不被刷，一直重复下去直到没有脏页，有点像“连坐”，对于机械硬盘很有效果，可以减少很多随机IO，但是对于ssd这种就不需要这种机制了</p>
</li>
<li><p>正确的告诉innodb所在主机的io能力，设置innodb_io_capacity</p>
</li>
<li><p>redo log不能设置太小</p>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>count性能优化</title>
    <url>/2022/01/07/MySQL/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/14-count%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h3 id="count"><a href="#count" class="headerlink" title="count()"></a>count()</h3><ol>
<li><p>InnoDB中count的底层实现</p>
<p>由于有mvcc的存在，因此每次执行count的时候都会去查表</p>
</li>
<li><p>各种count的效率</p>
<p>count(字段)&lt;count(主键id)&lt;count(1)=count(*)</p>
<ul>
<li><p>对于count(字段)</p>
<p>需要一行行从记录中取出这个字段，判断不能为null，然后进行按行累加</p>
</li>
<li><p>count(1)</p>
<p>遍历整张表，<strong>不取值</strong>，server层对于返回的每一行放一个数字“1”进去，判断是不可能为空的，按行累加</p>
</li>
<li><p>count(*)</p>
<p>不会将全部字段取出，而是专门做了优化，不去除，count(*)肯定不是null，按行累加</p>
</li>
</ul>
</li>
<li><p>如何较好的实时统计表中行数？</p>
<ul>
<li><p>使用缓存系统存在的问题</p>
<p>例如使用redis来进行统计，因为这是两个不同的存储构成的系统，不支持分布式事务，无法拿到精确一致的视图</p>
<p>比如下面两种情况：</p>
<ul>
<li></li>
</ul>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20211027093445.png" alt="image-20211027093440404" style="zoom:50%;" />

<p>​    在查询redis的时候，redis已经+1，但是此时mysql无法查询到T4时候插入的这一行数据</p>
<ul>
<li><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20211027093613.png" alt="image-20211027093608806" style="zoom:50%;" />

<p>无法统计到T2时候插入的这一行数据</p>
</li>
</ul>
</li>
<li><p>解决方案</p>
<p>利用mysql的事务来解决，直接使用mysql来作为计数器</p>
<p>但是最好先进行插入操作，先更新计数表，因为计数表是热点行，更新应当留到最后减少锁之间的竞争</p>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2022/01/07/MySQL/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/15/</url>
    <content><![CDATA[<ol>
<li><p>解决好友互相同时关注的问题</p>
<p><a href="https://www.cnblogs.com/luoahong/p/11629693.html">https://www.cnblogs.com/luoahong/p/11629693.html</a></p>
</li>
<li><p>InnoDB在遇到更新的时候，不管当前更新的数据是否和已存在的记录一样与否，都会该加锁的加锁，该更新的更新，不是说先判断是否相等再决定是否执行更新操作</p>
<p>比如有两个事务</p>
<p>原来数据库的记录为 id = 1,a=1</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>事务A</th>
<th>事务B</th>
</tr>
</thead>
<tbody><tr>
<td>begin</td>
<td></td>
</tr>
<tr>
<td>select * from tt where id=1</td>
<td>update tt set a=2 where id=1</td>
</tr>
<tr>
<td>update tt set a=2 where id=1</td>
<td></td>
</tr>
<tr>
<td>select * from tt where id=1</td>
<td></td>
</tr>
</tbody></table>
<p>对于事务A来说，因为事务B已经提交了事务将a更新为了2，而这个时候如果事务A（事务）在此之前已经形成了视图（ id = 1,a=1），这个时候如果直接去和最新的比较进行update，那么其不会将本身的视图进行更新，也就还是原来的视图（ id = 1,a=1），但是实际上是更新了的，因此可以判断是进行了加锁和更新了的。</p>
<p><font color=red>总体来说，不能光看记录的数值来对更新进行判断，还需要结合mvcc来进行判断</font></p>
]]></content>
  </entry>
  <entry>
    <title>排序</title>
    <url>/2022/01/07/MySQL/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/16-17%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h3 id="MySQL排序"><a href="#MySQL排序" class="headerlink" title="MySQL排序"></a>MySQL排序</h3><h4 id="mysql排序与内存"><a href="#mysql排序与内存" class="headerlink" title="mysql排序与内存"></a>mysql排序与内存</h4><ol>
<li><p>mysql在使用查询order by的时候会根据sort_buffer_size来选择是否在内存中完成排序，还是利用磁盘临时文件辅助排序</p>
</li>
<li><p>mysql如果实在担心排序内存太小会影响排序效率，那么会采用rowid排序算法（只选择rowid和order by的列），这样可以在排序过程中一次排序更多的行，但是最后需要回到原表去取数据</p>
<p>mysql用于控制排序的行数据长度的一个参数为<code>max_length_for_sort_data</code>,如果需要排序的列的总大小加上order by列的大小超过了max_length_for_sort_data定义的字节（当任何需要的列（包含结果集列和 order by 的列）包含text、blob 列时），就需要换一个算法，也就是双路排序，需要读表两次。</p>
</li>
<li><p>mysql如果任务内存足够大，会优先选择全字段排序</p>
</li>
</ol>
<h4 id="排序优化"><a href="#排序优化" class="headerlink" title="排序优化"></a>排序优化</h4><ol>
<li>建立联合索引</li>
<li>建立覆盖索引（相当于在联合索引的基础上不需要进行回表了）</li>
</ol>
<h4 id="mysql排序算法"><a href="#mysql排序算法" class="headerlink" title="mysql排序算法"></a>mysql排序算法</h4><ul>
<li>如果mysql的排序内存比较大的话，mysql会优先使用优先队列算法也就是大顶数或者小顶数（也就是说要取多少个值，内存中就一直有多少个值）</li>
<li>如果msyql的排序内存比较小，会优先使用归并排序</li>
</ul>
<h4 id="order-by-rand-的弊端"><a href="#order-by-rand-的弊端" class="headerlink" title="order by rand()的弊端"></a>order by rand()的弊端</h4><p>这样会使用临时表（using temporary）并且一定会触发排序（using filesort），因此执行代价很大</p>
<h4 id="和临时表相关的字段"><a href="#和临时表相关的字段" class="headerlink" title="和临时表相关的字段"></a>和临时表相关的字段</h4><p><code>tmp_file_size</code>默认为16M</p>
<p>如果临时表的大小&lt;=该值，那么将放到内存中，也就是内存临时表</p>
<p>如果临时表的大小&gt;该值，那么将放到磁盘中，也就是磁盘临时表</p>
<h4 id="无条件查询"><a href="#无条件查询" class="headerlink" title="无条件查询"></a>无条件查询</h4><ul>
<li>无条件查询的时候如果只有order by create_time ，即便create_time有索引也不会用到，因为优化器会认为走二级索引再回表成本比全表排序扫描更高</li>
<li>无条件查询但是使用了order by create_time limit m ，如果m值较小是可以走索引的，即使没有二级索引，mysql针对order by limit 也做了优化，也就是上面提到的堆排序</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL调优</title>
    <url>/2022/01/07/MySQL/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/18-SQL%E8%B0%83%E4%BC%98/</url>
    <content><![CDATA[<h3 id="对索引字段做函数操作"><a href="#对索引字段做函数操作" class="headerlink" title="对索引字段做函数操作"></a>对索引字段做函数操作</h3><ol>
<li><p>对索引字段做函数操作。可能会破坏索引值的有序性，因此优化器就会放弃走树搜索的功能</p>
<p>常见的场景如下：</p>
<ul>
<li><p>隐式类型转换</p>
<p>比如说某张表的字段是int类型，但是查询时是varchar类型，那么会mysql会将varchar类型进行转换，从而导致索引失效</p>
</li>
<li><p>隐式字符编码转换</p>
<p>比如说两张表，连接的字段的编码类型不同，一个是utf8，一个是uft8mb4，那么将这两个字段进行连接的时候会产生编码转换，也会导致索引失效</p>
</li>
<li><p>最基本的where id+1=100也会导致索引失效，因为id+1 mysql会认为破坏了索引值的有序性，需要写成where id=99才行</p>
</li>
</ul>
</li>
<li><p><font color=red>也就是我们需要保证where中“=”或者“&lt;“或者其他符合的左边列没有任何操作，一旦有任何操作将会导致优化器放弃走搜索树的功能</font></p>
</li>
</ol>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>查询速度优化</title>
    <url>/2022/01/07/MySQL/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/19-%E6%9F%A5%E8%AF%A2%E9%80%9F%E5%BA%A6%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h3 id="查询语句很慢"><a href="#查询语句很慢" class="headerlink" title="查询语句很慢"></a>查询语句很慢</h3><h4 id="查询长时间不返回"><a href="#查询长时间不返回" class="headerlink" title="查询长时间不返回"></a>查询长时间不返回</h4><ol>
<li><p>等MDL写锁</p>
</li>
<li><p>等flush</p>
</li>
<li><p>等行锁（已经有了写锁）</p>
<ul>
<li><p>查询哪条语句在等待</p>
<p><code>mysql&gt; select from t sys.innodb_lock_waits where locked_table= &#39;test&#39;.&#39;t&#39;\G</code></p>
</li>
<li><p>查询到之后不应该使用<code>kill query &#123;pid&#125;</code>,因为这样只是终止当前被阻塞的查询，而占用锁的那个操作还是没有被终止，因此需要使用<code>kill &#123;pid&#125;</code>,这样等待的操作和占用当前行锁的操作都会被终止</p>
</li>
</ul>
</li>
</ol>
<h3 id="查询慢"><a href="#查询慢" class="headerlink" title="查询慢"></a>查询慢</h3><p>可能是由于mvcc的机制导致的</p>
<p>想象这样一种场景：</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20211031113622.png" alt="image-20211031113607948" style="zoom:50%;" />

<p>可以看到sessionA的<code>select * from t where id=1</code>查询的是100万之前的版本，而<code>select * from t where id=1 lock in share mode</code>查询的是当前版本，因此第一个查询语句需要经过100万个版本才能查询到当前sessionA的版本，而第二个查询语句只需要查询当前的版本，因此第二个查询语句比第一个查询语句快得多。</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>间隙锁</title>
    <url>/2022/01/07/MySQL/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/20-21%E9%97%B4%E9%9A%99%E9%94%81/</url>
    <content><![CDATA[<h3 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h3><h3 id="间隙锁"><a href="#间隙锁" class="headerlink" title="间隙锁"></a>间隙锁</h3><ol>
<li><p>注意非唯一索引存储的时候是和id存储在一起的，也就是说当我们写这样的查询语句时使用的是覆盖索引</p>
<p><code>select id from t where c=1 </code></p>
<p>(id为当前t的主键，c为当前t的非唯一索引)</p>
</li>
<li><p><font color=red>锁是加在索引上面的，在查找过程中访问到的对象才会被加锁</font></p>
<p>c为非唯一索引，id为唯一索引</p>
<img src="C:\Users\Cooper\AppData\Roaming\Typora\typora-user-images\image-20211101105650925.png" alt="image-20211101105650925" style="zoom:50%;" />

<p>在这种情况下可以看到锁首先是加在c上面的，其次索引是唯一索引并没有被访问到，因为有了覆盖索引，因此并不需要访问主键索引，主键索引没有加锁</p>
<p>并且<strong>这里是lock in share mode</strong>,如果是for update系统就会认为你要更新接下来的数据，那么就会锁定主键索引</p>
</li>
<li><p>对于order by desc</p>
<p>这种情况需要从后往前进行分析，除了优化2的向右遍历到最后一个不满足等值条件的时候，也需向左进行扫描</p>
</li>
</ol>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL性能优化</title>
    <url>/2022/01/07/MySQL/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/22-MySQL%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<ol>
<li><p>短连接风暴</p>
<ul>
<li><p>出现原因</p>
<p>mysql建立连接的成本很高，除了正常的网络连接三次握手外，还需要做登陆权限判断和获得这个连接的数据读写权限</p>
</li>
<li><p>解决方法</p>
<ul>
<li><p>kill 掉占着连接但是不工作的线程</p>
<p>设置<code>wait_timeout</code>参数</p>
<p>这里需要注意一下如果连接数过多，应当<strong>优先断开事务外空闲太久的连接</strong>，实在不行再断开事务内空闲太久的连接</p>
<p>（查看该连接事务在事务内：<code>select * from information_schema.innodb_trx</code>）</p>
<p><font color=red>注意：当mysql主动断开一个连接之后，有些应用端收到错误之后并不会重新连接，而是会直接复用这个已经不能复用的句柄进行重试。例如在springboot与druid结合的时候，默认spring.datasource.testOnBorrow=false，当连接池中的连接被数据库主动关闭了，如果这些连接不被其他线程会受到 话，它们不会被连接池废除，也不会重新被创建，占用连接池的名额</font></p>
<p>SpringBoot中的属性：</p>
<ul>
<li><code>spring.datasource.testOnBorrow</code>:当从连接池借用连接时，是否测试该连接（会对性能有一些损耗）自动进行重连</li>
</ul>
<p>​       在durid中，默认为false</p>
<p>​       在mybatis中默认为true</p>
<p>​        <a href="https://blog.csdn.net/zhanlai_wei/article/details/78139511">参考</a></p>
<ul>
<li><p><code>spring.datasource.validation-query指定获取连接时连接校验的sql查询语句</code></p>
<p>在mysql上就是<code>spring.datasource.validationQuery=SELECT 1</code>(不同数据库右边不同)</p>
</li>
</ul>
</li>
<li><p>减少连接过程的消耗</p>
<p>跳过权限验证</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>慢查询性能问题</p>
<ul>
<li><p>索引未设计好</p>
<p>解决方法：</p>
<ol>
<li>在备库上执行<code>set sql_log_bin=off</code>,再在备库上添加索引</li>
<li>最后执行主备切换</li>
<li>在当前备库上执行<code>set sql_log_bin=off</code>，然后添加索引</li>
</ol>
</li>
<li><p>SQL未写好</p>
<p>如果MySQL版本是5.7以及以上的版本，可以采用<code>query_rewrite</code>功能</p>
<p>也就是可以将线上执行的索引替换掉</p>
</li>
<li><p>MySQL选错了索引</p>
</li>
</ul>
</li>
</ol>
<ol start="3">
<li><p>QPS突增问题</p>
<ul>
<li>全新业务bug导致的，如果是白名单一个一个加的，那么可以直接将全新业务对应的白名单去掉</li>
<li>如果新功能使用的是单独数据库用户，那么可以将这个用户删掉，然后断开现有连接</li>
<li>如果是和主体功能绑定到一起的，通过<code>query_rewrite</code>将sql语句直接写成select 1</li>
</ul>
<p>我觉得最重要的一点是<strong>业务和数据库一一对应，最好每一个业务对应一个用户</strong></p>
</li>
<li><p>出现大事务磁盘占满的情况</p>
<p>有可能是因为事务过大，导致binlog在落盘的时候出现问题</p>
<p>注意这个流程都是对于一个事物来讲的。一旦事物提交，binlog cache和binlog 临时文件都会释放掉，因为binlog已经固化到了binlog file。同时如果事物中包含多个DML语句，那么他们共享的一套的binlog cache和binlog 临时文件。</p>
<ol>
<li>事物开启。</li>
<li>执行dml语句，在dml语句第一次执行的时候会分配内存空间binlog cache。</li>
<li>执行dml语句期间生成的event不断写入到binlog cache。</li>
<li>如果binlog cache的空间已经满了，则将binlog cache的数据写入到binlog临时文件，同时清空binlog cache。如果binlog临时文件的大小大于了max_binlog_cache_size的设置则抛错ERROR 1197 (HY000)。</li>
<li>事物提交，整个binlog cache和binlog临时文件数据全部写入到binlog file中进行固化，释放binlog cache和binlog临时文件。但是注意此时binlog cache的内存空间留用供下次事物使用，但是binlog临时文件被截断为0，保留文件描述符。其实也就是IO_CACHE(参考后文)保留，并且保留IO_CACHE中的分配的内存空间，和物理文件描述符。</li>
<li>断开连接，这个过程会释放IO_CACHE同时释放其持有的binlog cache内存空间以及持有的binlog 临时文件。</li>
</ol>
</li>
</ol>
<ol start="5">
<li><p>如果一个数据库是被客户端的压力打满导致无法响应，那么重启数据库是没有用的</p>
<p>因为重启之后业务请求还是会继续进行发送，而由于重启，buffer pool被清空，可能会导致语句执行得更慢</p>
</li>
</ol>
<ol start="6">
<li>如果一个表上出现多个单字段索引，可能会出现优化器选择索引合并算法的线下，但是实际上，索引合并算法效率并不好，最好将其中的一个索引改为联合索引的方法比较好</li>
</ol>
<ol start="7">
<li><p>客户端程序的连接器，连接器完成会做一些诸如show columns的操场，在短连接模式下影响非常大</p>
<p>我们在review项目的时候不仅review业务代码，也需要review连接器的行为，一般做法就是在测试环境中将general_log打开，用业务行为触发连接，通过general log分析连接器的行为</p>
</li>
</ol>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据保证</title>
    <url>/2022/01/07/MySQL/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/23-MySQL%E6%95%B0%E6%8D%AE%E4%BF%9D%E8%AF%81/</url>
    <content><![CDATA[<h3 id="binlog写入机制"><a href="#binlog写入机制" class="headerlink" title="binlog写入机制"></a>binlog写入机制</h3><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><ol>
<li><p>日志写入到binlog cache</p>
</li>
<li><p>事务提交时将binlog cache写入到binlog中</p>
<p><font color=red>注意：一个事务的binlog是不能被拆开的，无论这个事务多大，也必须确保一次性写入</font></p>
</li>
</ol>
<h4 id="机制"><a href="#机制" class="headerlink" title="机制"></a>机制</h4><p>系统给binlog cache分配了一块内存，<strong>每个线程</strong>一个（<code>binlog_cache_size</code>控制其大小，如果超过了该参数规定大小，则暂存到磁盘，也就是写到tmp中），但是所有线程共用同一份binlog文件</p>
<h3 id="redo-log写入机制"><a href="#redo-log写入机制" class="headerlink" title="redo log写入机制"></a>redo log写入机制</h3><h4 id="流程-1"><a href="#流程-1" class="headerlink" title="流程"></a>流程</h4><ol>
<li>日志写入到redo log buffer中</li>
<li>落盘</li>
</ol>
<h4 id="机制-1"><a href="#机制-1" class="headerlink" title="机制"></a>机制</h4><ol>
<li><p>redo log buffer中的内容不是每次生成后都要直接持久化到磁盘中的</p>
</li>
<li><p>有可能事务还没有提交的时候，redo log buffer中的部分日志有可能会被持久化到磁盘，情况如下</p>
<ul>
<li><p>后台线程每一秒会将redo log buffer持久化到磁盘</p>
</li>
<li><p>redo log buffer占用的空间即将达到innodb_log_buffer_size一半的时候后台线程会主动写盘</p>
</li>
<li><p>并行事务提交的时候，顺带将这个事务的redo log buffer持久化到磁盘</p>
</li>
</ul>
</li>
</ol>
<h3 id="组提交"><a href="#组提交" class="headerlink" title="组提交"></a>组提交</h3><h4 id="redo-log的组提交"><a href="#redo-log的组提交" class="headerlink" title="redo log的组提交"></a>redo log的组提交</h4><p>比如说有一个场景下，有三个事务按顺序到达（trx1,trx2,trx3为并发事务，彼此间不受影响），并且都已经写完了redo log buffer,那么组提交的顺序为</p>
<ol>
<li>trx1是第一个到达的，会被选为这组的leader</li>
<li>等trx1要开始写盘的时候，这个组中已经有了三个事务，这时候LSN变成了160</li>
<li>trx1去写盘的时候，带的就是LSN=160，因此等trx1返回的时候，所有LSN小于等于160的redo log都已经被持久化到磁盘</li>
<li>这时候trx2和trx3就可以直接返回了</li>
</ol>
<p><strong>优点</strong>：一次组提交中，组员越多越好，节约磁盘的IOPS的效果越好</p>
<h4 id="binlog组提交"><a href="#binlog组提交" class="headerlink" title="binlog组提交"></a>binlog组提交</h4><p>为了使得binlog也能够组提交，引入了<strong>三阶段提交</strong></p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20211104110946.png" alt="image-20211104110941020" style="zoom:50%;" />

<p>（图是经过淘宝优化后的组提交）</p>
<p>MySQL通过<strong>两阶段提交</strong>(<strong>内部XA的两阶段提交</strong>)很好地解决了这一问题：</p>
<p><strong>第一阶段：</strong>InnoDB prepare，持有prepare_commit_mutex，并且write/sync redo log； 将回滚段设置为Prepared状态，binlog不作任何操作；</p>
<p><strong>第二阶段：</strong>包含两步，1&gt; write/sync Binlog； 2&gt; InnoDB commit (写入COMMIT标记后释放prepare_commit_mutex)；</p>
<p>以 binlog 的写入与否作为事务提交成功与否的标志，innodb commit标志并不是事务成功与否的标志。因为此时的事务崩溃恢复过程如下：</p>
<p>1&gt; 崩溃恢复时，扫描最后一个Binlog文件，提取其中的xid；<br> 2&gt; InnoDB维持了状态为Prepare的事务链表，将这些事务的xid和Binlog中记录的xid做比较，如果在Binlog中存在，则提交，否则回滚事务。</p>
<p>通过这种方式，可以让InnoDB和Binlog中的事务状态保持一致。如果在写入innodb commit标志时崩溃，则恢复时，会重新对commit标志进行写入；</p>
<p>在prepare阶段崩溃，则会回滚，在write/sync binlog阶段崩溃，也会回滚。这种事务提交的实现是MySQL5.6之前的实现。</p>
<p><strong>4. binlog 组提交</strong></p>
<p>上面的事务的两阶段提交过程是5.6之前版本中的实现，有严重的缺陷。当sync_binlog=1时，很明显上述的第二阶段中的 write/sync binlog会成为瓶颈，<strong>而且还是持有全局大锁(prepare_commit_mutex: prepare 和 commit共用一把锁)，这会导致性能急剧下降</strong>。解决办法就是MySQL5.6中的 binlog组提交。</p>
<p><strong>4.1 MySQL5.6中的binlog group commit:</strong></p>
<p>将<strong>Binlog Group Commit</strong>的过程拆分成了三个阶段：</p>
<p>1&gt; flush stage 将各个线程的binlog从cache写到文件中;</p>
<p>2&gt; sync stage 对binlog做fsync操作（如果需要的话；<strong>最重要的就是这一步，对多个线程的binlog合并写入磁盘</strong>）；</p>
<p>3&gt; <strong>commit stage</strong> <em>为各个线程做*<em>引擎层的</em>事务commit(这里不用写redo log，*<em>在prepare阶段已写</em></em>)。<strong>每个stage同时只有一个线程在操作</strong>。**(<strong>分成三个阶段，每个阶段的任务分配给一个专门的线程，这是典型的并发优化</strong>)</p>
<p>这种实现的<strong>优势在于三个阶段可以并发执行，从而提升效率</strong>。注意prepare阶段没有变，还是write/sync redo log.</p>
<p>(另外：5.7中引入了<strong>MTS</strong>：多线程slave复制，也是通过binlog组提交实现的，在binlog组提交时，给每一个组提交打上一个seqno，然后在slave中就可以按照master中一样按照seqno的大小顺序，进行事务组提交了。)</p>
<p><strong>4.2</strong> <strong>MySQL5.7中的binlog group commit:</strong></p>
<p>淘宝对binlog group commit进行了进一步的优化，其原理如下：</p>
<p>从XA恢复的逻辑我们可以知道，只要保证InnoDB Prepare的redo日志在写Binlog前完成write/sync即可。因此我们对Group Commit的第一个stage的逻辑做了些许修改，大概描述如下：</p>
<p>Step1. InnoDB Prepare，记录当前的LSN到thd中；<br> Step2. 进入Group Commit的flush stage；Leader搜集队列，同时算出队列中最大的LSN。<br> Step3. 将InnoDB的redo log write/fsync到指定的LSN  (<strong>注：这一步就是redo log的组写入。因为小于等于LSN的redo log被一次性写入到ib_logfile[0|1]</strong>)<br> Step4. 写Binlog并进行随后的工作(sync Binlog, InnoDB commit , etc)</p>
<p>也就是将 redo log的write/sync延迟到了 binlog group commit的 flush stage 之后，sync binlog之前。</p>
<p>通过延迟写redo log的方式，显式的为redo log做了一次组写入(<strong>redo log group write</strong>)，并减少了(redo log) log_sys-&gt;mutex的竞争。</p>
<p>也就是将 binlog group commit 对应的redo log也进行了 group write. 这样binlog 和 redo log都进行了优化。</p>
<h3 id="WAL机制的好处"><a href="#WAL机制的好处" class="headerlink" title="WAL机制的好处"></a>WAL机制的好处</h3><ol>
<li>redo log和binlog都是顺序写，磁盘顺序写比随机写速度快</li>
<li>组提交机制。可以大幅降低磁盘的IOPS消耗</li>
</ol>
<h3 id="mysql-性能出现了瓶颈，主要在IO上，可以通过如下方法解决"><a href="#mysql-性能出现了瓶颈，主要在IO上，可以通过如下方法解决" class="headerlink" title="mysql 性能出现了瓶颈，主要在IO上，可以通过如下方法解决"></a>mysql 性能出现了瓶颈，主要在IO上，可以通过如下方法解决</h3><ol>
<li>设置binlog_group_commit_sync_delay和binlog_group_commit_sync_no_delay_count减少binlog的写盘次数，故意等待，但是会增加语句响应时间</li>
<li>将sync_binlog设置大于1的值，风险是掉电会丢失binloig日志 （binlog不落盘）</li>
<li>将innodb_flush_log_at_trx_commit设置为2，风险是主机掉电会丢失数据 （redo log不落盘）</li>
</ol>
<h3 id="sync-no-delay-count-gt-sync-binlog-如果两者都设置了那么前者优先级高"><a href="#sync-no-delay-count-gt-sync-binlog-如果两者都设置了那么前者优先级高" class="headerlink" title="sync_no_delay_count&gt;sync_binlog (如果两者都设置了那么前者优先级高)"></a>sync_no_delay_count&gt;sync_binlog (如果两者都设置了那么前者优先级高)</h3><p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20211104113418.png" alt="image-20211104113415197"></p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL主备一致保证</title>
    <url>/2022/01/07/MySQL/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/24-MySQL%E4%B8%BB%E5%A4%87%E4%B8%80%E8%87%B4%E4%BF%9D%E8%AF%81/</url>
    <content><![CDATA[<h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><ol>
<li>备库上通过change master命令，设置主库A的IP、端口、用户名、密码以及要从哪个位置开始请求binlog，这个位置包含的文件名和日志偏移量</li>
<li>在备库上执行start slave命令，这时候备库会启动两个线程，分别为io_thread何sql_thread。其中io_thread负责与主库建立连接</li>
<li>主库A校验完用户名和密码之后开始按照备库B传过来的位置，从本地读取binlog，发给B</li>
<li>备库B拿到binlog后写到本地文件，也就是中转日志（relay log）</li>
<li>sql_thread读取中转日志，解析出日志里的命令，并执行</li>
</ol>
<h4 id="binlog的三种格式"><a href="#binlog的三种格式" class="headerlink" title="binlog的三种格式"></a>binlog的三种格式</h4><ul>
<li><p>statement</p>
<p>只记录下执行的语句</p>
<p><strong>缺点</strong>：有可能导致主从不一致的发生，例子如下：</p>
<p>执行<code>delete from t where a&gt;=4 and t_modified&lt;&#39;2018-11-10&#39; limit 1;</code></p>
<p>(a和t_modified都是索引)</p>
<p>存在的风险为：在主库执行这条sql语句的时候，用的是索引a，而在备库执行这条sql的却使用了索引t_modified，因此会导致主从不一致</p>
</li>
<li><p>row</p>
<p>row格式的binlog中没有sql语句的原文，而是会记录下具体的记录，比如上面对于statement风险举的例子来说，就会记录下当前被删除的行的具体信息</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20211105101405.png" alt="image-20211105101404045"></p>
<p>​    <strong>缺点</strong>：很占用空间</p>
<p>​    <strong>优点</strong>：由于会把具体的数据记录下来，因此恢复的时候很好回复</p>
</li>
<li><p>mixed</p>
<p>statement和row的结合</p>
</li>
</ul>
<h4 id="恢复数据"><a href="#恢复数据" class="headerlink" title="恢复数据"></a>恢复数据</h4><p>最好使用mysqlbinlog工具对数据进行恢复</p>
<h4 id="循环复制"><a href="#循环复制" class="headerlink" title="循环复制"></a>循环复制</h4><p>对于双主的结构，也就是两者互为主从。如果避免循环复制呢？</p>
<p>备库在接到binlog并在重放的过程中，会生成与原binlog的server id相同的binlog</p>
<p>每个库在收到从自己的主库发过来的日志后，会先判断server id，如果和自己的相同，表示这个日志是自己生成的，就直接丢弃这个日志</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL主备时延</title>
    <url>/2022/01/07/MySQL/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/25-26MySQL%E4%B8%BB%E5%A4%87%E6%97%B6%E5%BB%B6/</url>
    <content><![CDATA[<h3 id="MySQL主备时延"><a href="#MySQL主备时延" class="headerlink" title="MySQL主备时延"></a>MySQL主备时延</h3><h4 id="主备时延的大小"><a href="#主备时延的大小" class="headerlink" title="主备时延的大小"></a>主备时延的大小</h4><ul>
<li><p>计算方法</p>
<p>备库取出当前正在执行的事务A的时间-主库当前事务Abinlog中记录时间</p>
</li>
<li><p>相关字段</p>
<p><code>show slave status</code>中的<code>seconds_behind_master</code></p>
<p>注意：如果当前主备的系统时间不一致，备库连接到主库的时候会通过执行select unix_timestamp()函数来获取当前主库的系统时间，如果发现与自己不一致会在计算<code>seconds_behind_master</code>自动减去该差值</p>
</li>
</ul>
<h4 id="主备时延的来源"><a href="#主备时延的来源" class="headerlink" title="主备时延的来源"></a>主备时延的来源</h4><ul>
<li><p>备库所在的机器性能要比主库所在的机器性能差</p>
</li>
<li><p>备库的压力较大</p>
<p>解决方法</p>
<ul>
<li>一主多从，让从库减轻备库读的压力</li>
<li>通过binlog输出到外部系统，比如hadoop，让外部系统通过统计类查询的能力</li>
</ul>
</li>
<li><p>大事务</p>
<p>主库必须等待事务执行完成才会写入binlog，再传给备库，可以看到主库的执行时间越长，那么主备延时也就越厉害</p>
<p>常见的场景如下：</p>
<ul>
<li>一次性delete太多数据</li>
<li>大表DDL</li>
</ul>
</li>
<li><p>备库的并行复制能力</p>
</li>
</ul>
<h4 id="主备切换策略"><a href="#主备切换策略" class="headerlink" title="主备切换策略"></a>主备切换策略</h4><ul>
<li><p>可靠性优先策略</p>
<p>步骤：</p>
<ol>
<li>判断备库B现在的<code>seconds_behind_master</code>,如果小于某个值（比如5秒）继续下一步，<br>否则持续重试这一步；</li>
<li>把主库A改成只读状态，即把readonly设置为true,</li>
<li>判断备库B的<code>seconds_behind_master</code>的值，直到这个值变成0为止；</li>
<li>把备库B改成可读写状态，也就是把readonly设置为false;</li>
<li>把业务请求切到备库B</li>
</ol>
</li>
</ul>
<ul>
<li><p>可用性优先策略</p>
<p>强行将可靠性优先策略的步骤4、5调整到最开始执行，也就是说不等主备数据同步，直接把连接切到备库，让备库可以读写</p>
<p>风险：可能会引起主备不一致</p>
</li>
</ul>
<h3 id="MySQL备库并行复制"><a href="#MySQL备库并行复制" class="headerlink" title="MySQL备库并行复制"></a>MySQL备库并行复制</h3><h4 id="MySQL-5-6并行复制策略"><a href="#MySQL-5-6并行复制策略" class="headerlink" title="MySQL 5.6并行复制策略"></a>MySQL 5.6并行复制策略</h4><ul>
<li><p>mysql官方</p>
<p>支持按库并行，如果主库上存在多个DB，那么不同的DB上面SQL可以分发到不同的线程上执行</p>
</li>
<li><p>MariaDB</p>
<ol>
<li><p>在一组里面一起提交的事务（在一组里面提交的事务一定不会修改同一行），有一个相同的commitid，下一组就是commitid+1;</p>
</li>
<li><p>commitid直接写到binlog里面；</p>
</li>
<li><p>传到备库应用的时候，相同commitid的事务分发到多个worker执行；</p>
</li>
<li><p>这一组全部执行完成后，coordinator再去取下一批。</p>
</li>
</ol>
<p>缺点：如果某一组事务中有一个事务非常大，那么等待的时间会非常长，浪费资源</p>
</li>
</ul>
<h4 id="MySQL-5-7并行复制策略"><a href="#MySQL-5-7并行复制策略" class="headerlink" title="MySQL 5.7并行复制策略"></a>MySQL 5.7并行复制策略</h4><ol>
<li>同时处于prepare状态的事务，在备库执行时是可以并行的；</li>
<li>处于prepare状态的事务，与处于commit状态的事务之间，在备库执行时也是可以并行的。</li>
</ol>
<p>对于<code>binlog_group_commit_sync_delay</code>和<code>binlog_group_sync_no_delay_count</code>参数的调整可以拉长binlog从write到fsync的时间以减少binlog的写盘次数同时也可以让同组中的事务更多一些，这样在备库执行的时候并发量就会更大一些</p>
<p><font color=red>注意：”处于prepare状态的事务，可以并行“ 在实现上是，主库在写binlog的时候会给这些binlog里面记commitid和sequenceno,来说明事务之间在主库上并行prepare的状态,也就是在备库执行的时候可以并发执行</font></p>
<h4 id="MySQL-5-7-22并行策略"><a href="#MySQL-5-7-22并行策略" class="headerlink" title="MySQL 5.7.22并行策略"></a>MySQL 5.7.22并行策略</h4><p>增加了一个新的并行复制策略：<code>binlog-transaction-dependency-tracking</code></p>
<p>有三种可选值</p>
<ol>
<li><p>commit_order</p>
<p>根据同时进入的prepare和commit来判断是否可以并行</p>
</li>
<li><p>writeset</p>
<p>对于事务更新的每一行，计算出这一行的hash值组成集合writeset，如果两个事务没有操作相同的行，那么可以并行</p>
</li>
<li><p>writeset_session</p>
<p>在2的基础上多了约束，即在主库上同一个线程先后执行的两个事务，在备库执行的时候需要保证相同的先后顺序</p>
</li>
</ol>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL主从</title>
    <url>/2022/01/07/MySQL/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/27-MySQL%E4%B8%BB%E4%BB%8E/</url>
    <content><![CDATA[<h3 id="MySQL主从"><a href="#MySQL主从" class="headerlink" title="MySQL主从"></a>MySQL主从</h3><h4 id="在一主多从架构下，主库故障后主备切换-（主备和主从的切换原理都差不多）"><a href="#在一主多从架构下，主库故障后主备切换-（主备和主从的切换原理都差不多）" class="headerlink" title="在一主多从架构下，主库故障后主备切换 （主备和主从的切换原理都差不多）"></a>在一主多从架构下，主库故障后主备切换 （主备和主从的切换原理都差不多）</h4><ul>
<li><p>基于位点的切换</p>
<p>当从节点指向新的主节点时，需要执行一条命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CHANGE MASTER TO </span><br><span class="line">MASTER_HOST=$host_name </span><br><span class="line">MASTER_PORT=$port </span><br><span class="line">MASTER_USER=$user_name </span><br><span class="line">MASTER_PASSWORD=$password </span><br><span class="line">MASTER_LOG_FILE=$master_log_name</span><br><span class="line">MASTER_LOG_POS=$master_log_pos</span><br></pre></td></tr></table></figure>

<p>不可避免的就是需要设置日志偏移量，但是从节点进行切换的时候很难获取到精确的位置，并且有时候会出现发生错误的情况</p>
<p>比如说当从库已经同步了一条插入命令，但是切换的时候偏移量之后的日志也有该条命令，那么就有可能发送冲突</p>
<p>解决方法</p>
<ul>
<li>主动跳过该事物</li>
<li>设置<code>slave_skip_errors</code>参数，直接设置跳过指定的参数直到同步关系建立完成再将该参数设置为空</li>
</ul>
</li>
</ul>
<ul>
<li><p>基于gtid的切换</p>
<ul>
<li><p>gtid的定义</p>
<p>GTID=server_uuid:gno</p>
<p><code>server_uuid为当前实例的唯一标识</code></p>
<p><code>gno是事务提交时才会分配的，往往是连续的</code></p>
</li>
<li><p>主库和从库都会维护一个gtid的集合，用来表示当前该实例已经执行过的所有事务</p>
<p>具体步骤如下：（备库为实例B，主库为A‘）</p>
<ol>
<li><p> 实例 B 指定主库 A’，基于主备协议建立连接。</p>
</li>
<li><p> 实例 B 把 set_b 发给主库 A’。</p>
</li>
<li><p> 实例 A’算出 set_a 与 set_b 的差集，也就是所有存在于 set_a，但是不存在于 set_b 的 GITD 的集合，判断 A’本地是否包含了这个差集需要的所有 binlog 事务。 </p>
</li>
</ol>
<p>   a. 如果不包含，表示 A’已经把实例 B 需要的 binlog 给删掉了，直接返回错误；</p>
<p>   b. 如果确认全部包含，A’从自己的 binlog 文件里面，找出第一个不在 set_b 的事务，发给 B；</p>
<ol start="4">
<li> 之后就从这个事务开始，往后读文件，按顺序取 binlog 发给 B 去执行。</li>
</ol>
</li>
<li><p>备库如何跳过不想要的事务</p>
<p>找到主库该事物对应的gtid，执行命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set GTID_NEXT=&quot;server_uuid_of_Y:gno&quot;; </span><br><span class="line">begin; </span><br><span class="line">commit;</span><br><span class="line">set gtid_next=automatic;</span><br><span class="line">start slave;</span><br></pre></td></tr></table></figure>

<p>意思就是提交一个空事务并且该空事务的gtid赋值为不想要的事务的gtid，那么在同步的时候就会跳过该gtid</p>
</li>
</ul>
</li>
</ul>
<p>​        </p>
<ul>
<li><p><strong>基于位点和基于gtid的不同之处</strong></p>
<p>基于位点的是备库主动找主库要</p>
<p>基于gtid的是主库主动发给备库想要的</p>
</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL读写分离</title>
    <url>/2022/01/07/MySQL/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/28-MySQL%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/</url>
    <content><![CDATA[<h3 id="MySQL读写分离造成的过期读"><a href="#MySQL读写分离造成的过期读" class="headerlink" title="MySQL读写分离造成的过期读"></a>MySQL读写分离造成的过期读</h3><p>解决方案</p>
<ol>
<li><p>强制走主库</p>
<p>将查询请求进行分类</p>
<ul>
<li>对于必须要拿到最新结果的请求，强制将其发布到主库上</li>
<li>对于可以读到旧数据的请求，将其发到从库上</li>
</ul>
</li>
<li><p>sleep方案</p>
<p>主库更新后，读从库之前先sleep一下</p>
<p>缺点：会降低查询速度</p>
</li>
<li><p>判断主备无延迟</p>
<ul>
<li><p>判断<code>seconds_behind_master</code>是否已经等于0，等于0才能对执行查询请求</p>
</li>
<li><p>对比位点</p>
<p><code>master_log_file</code>与<code>relay_master_log_file</code>是否相等</p>
<p><code>read_master_log_pos</code>与<code>exec_master_log_pos</code>是否相等</p>
<p>如果都相等，则说明同步已完成</p>
</li>
<li><p>对比GTID</p>
<p><code>retrieved_gtid_set</code>与<code>executed_gtid_set</code>两个集合是否相等</p>
<p>相等则说明同步完成</p>
</li>
</ul>
</li>
<li><p>配合semi-sync（半同步复制）</p>
<p>出现的原因：因为有时候客户端收到来自主库的执行成功相应之后，但此时从库还没有收到来自主库的log，这时候如果使用3中的方法都会出现过期读的现象</p>
<p>semi-sync的思想</p>
<ol>
<li>事务提交时主库把binlog发给从库</li>
<li>从库收到之后返回给主库一个ack</li>
<li>主库收到ack后才能向客户端发送“事务完成”的确认</li>
</ol>
</li>
</ol>
<p>​        缺陷：对于一主多从的场景下，只要有一个从发送了ack，那么就会主就会向客户端发送确认消息，但是如果此时的查询未落在发送ack的从上时，就会发生过                    期读现象</p>
<ol start="5">
<li><p>不需要等待主备完全同步</p>
<p>思想：如果多个事务都在进行执行，然而我要查询的只是第一个事务，那么我只需要等待第一个事务同步完毕就可以进行查询了，而无需等待所有的事务都完成再进行查询</p>
<ul>
<li><p>等主库位点方案</p>
<p><code>select master_pos_wait(file, pos[, timeout])</code></p>
<p>该方法查询的是：这个命令在<font color=red>从库</font>上执行开始直到应用完file和pos表示的binlog位置执行了多少个事务</p>
<p>此处的<code>file</code>和<code>pos</code>是在主库上查询出来的，也就是当主库上执行完第一个事务之后查询出来的内容</p>
<p>使用该方法可以查询到从库从执行该语句开始直到应用到file和pos表示的binlog的位置（也就是主库上第一个事务执行完后binlog的fileName和pos）执行了多少个事务</p>
<p>查询的结果如下：</p>
<ul>
<li>如果执行期间备库同步线程发生了异常，则返回null</li>
<li>如果等待超过N秒，即超时返回-1</li>
<li>如果刚开始执行的时候就发现已经执行过这个位置，作为返回0</li>
<li>正常情况下返回这一时间段内执行事务的数量</li>
</ul>
<p>当查询的结果&gt;=0时，表示该从库一定已经有了第一个事务的数据了</p>
<p>缺陷：该方法不仅需要查询从库，同时需要查询主库</p>
</li>
<li><p>GTID方案</p>
<p><code>select wait_for_executed_gtid_set(gtid_set, 1);</code></p>
<p>该查询的意思：等待直到该库执行的事务中包含传入的gtid_set，返回0，如果超时返回1</p>
<p>也就是说只要在超时界限内该gtid_set表示的事务执行了，那么就会返回0</p>
<p>缺陷：该方法需要对mysql源码进行改造</p>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>如何判断某一个数据库是否出现了问题</title>
    <url>/2022/01/07/MySQL/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/29-%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E6%9F%90%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93%E6%98%AF%E5%90%A6%E5%87%BA%E7%8E%B0%E4%BA%86%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="如何判断某一个数据库是否出现了问题"><a href="#如何判断某一个数据库是否出现了问题" class="headerlink" title="如何判断某一个数据库是否出现了问题"></a>如何判断某一个数据库是否出现了问题</h3><h4 id="select-1判断"><a href="#select-1判断" class="headerlink" title="select 1判断"></a>select 1判断</h4><p>缺点：只能说明该库所在的进程还在，但是无法说明主库没有问题</p>
<p>比如说mysql的并发查询的上限是3，那么select 1作为第四个接入进来的时候是可以直接返回的，但是实际上现在的并发查询已经达到了最大值</p>
<p><font color=red>注意：并发查询和并发连接是有区别的，当锁进入等待以后，并发线程的计数会-1</font></p>
<p>通常情况下，<code>innodb_thread_concurrency</code>设置为64-128之间最好，值为0表示不作限制</p>
<h4 id="查表判断"><a href="#查表判断" class="headerlink" title="查表判断"></a>查表判断</h4><p>比如<code>select * from mysql.health_check</code></p>
<p>通过该方法可以检测出由于并发线程过多导致的数据库不可用</p>
<p>缺点：无法知道空间是否满了</p>
<h4 id="更新判断"><a href="#更新判断" class="headerlink" title="更新判断"></a>更新判断</h4><p><code>update mysql.health_check set t_modified=now();</code></p>
<p>可以通过该方法对存储空间进行判断，如果满了会阻塞</p>
<p>对于双主模式下的更新判断，需要注意不能让主备之间的更新产生冲突,如果主库和备库都是用相同的更新命令，就可能会出现行冲突，导致主备同步停止</p>
<p><code>insert into mysql.health_check(id, t_modified) values (@@server_id, now()) on duplicate key update</code></p>
<p>缺点：当系统的IO资源很少了，但是利用更新判断这些语句去检查耗费的资源比较少，因此可能无法察觉异常</p>
<h4 id="内部统计"><a href="#内部统计" class="headerlink" title="内部统计"></a>内部统计</h4><p>查询<code>file_summary_by_event_name</code>中的</p>
<p><code>event_name=&#39;wait/io/file/innodb/innodb_log_file</code>（redo log情况）</p>
<p><code>event_name = &quot;wait/io/file/sql/binlog&quot;</code> （binlog情况）</p>
<p>可以通过<code>MAX_TIMER_WAIT</code>来判断IO请求时间是否超时</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>考虑利用更新判断与内部统计相结合</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>锁</title>
    <url>/2022/01/07/MySQL/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/30-%E9%94%81/</url>
    <content><![CDATA[<h3 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a>加锁</h3><p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20211118092532.png" alt="image-20211118092523466"></p>
<h4 id="不等号里面的等值查询"><a href="#不等号里面的等值查询" class="headerlink" title="不等号里面的等值查询"></a>不等号里面的等值查询</h4><ul>
<li><p><code>select * from t where id&gt;9 and id&lt;12 order by id desc for update;</code></p>
<p>此处因为是降序，因此需要先考虑id&lt;12,那么就需要考虑到（0,5]，最终范围为（0,15）</p>
<p><font color=red>这里在寻找&lt;12的时候需要找到第一个不满足的条件即同时要满足&gt;9,因为扫描到10的时候依然还有满足&gt;9的，因此需要继续往下进行扫描，也就是扫描到5，到5的话加上netx-key lock的话才就(0,5]</font></p>
</li>
<li><p><code>select * from t where id&gt;9 and id&lt;12 for update;</code></p>
<p>这样的话就是升序，也就直接先考虑id&gt;9，也就是（10,15]，最终范围为（5,15）</p>
</li>
</ul>
<h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h4><ol>
<li>要避免死锁需要对同一组资源，尽量按照顺相同的顺序访问，否则很容易在并发时发送死锁</li>
<li>在发生死锁的时候，for update往往占用的资源更多，回滚成本更大，因此InnoDB会选择回滚成本较小的lock in share mode语言进行回滚</li>
</ol>
<h4 id="锁的扩大"><a href="#锁的扩大" class="headerlink" title="锁的扩大"></a>锁的扩大</h4><p><code>select * from t where id &gt;10 and id &lt;=15 for update</code></p>
<p>锁住的范围为（5,10）（10,15] （因为10没有用上因此不会被锁住）</p>
<p>但是将id=10这行删除然后在insert进去，就会发现删除可以，无法插入进去，因为删除之后锁住的范围变成了（5,15]</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL查询大量数据</title>
    <url>/2022/01/07/MySQL/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/33-MySQL%E6%9F%A5%E8%AF%A2%E5%A4%A7%E9%87%8F%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h3 id="MySQL查询大量数据"><a href="#MySQL查询大量数据" class="headerlink" title="MySQL查询大量数据"></a>MySQL查询大量数据</h3><h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><ol>
<li>获取一行并写入到net_buffer（由net_buffer_length决定，默认为16k）中</li>
<li>重复获取行知道net_buffer写满，调用网络接口发出去</li>
<li>如果发送成功则清空net_buffer，继续获取下一行并写入net_buffer</li>
<li>如果发送函数返回EAGAIN或WASWWOULDBLOCK,则表示本地网络栈(socket send buffer写满)进入等待知道网络栈可以重新写则继续发送</li>
</ol>
<h4 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h4><ul>
<li><p><font color=red>MySQL是边读边发的</font></p>
</li>
<li><p>对于线上业务来说，如果一个查询的返回结果不是很多，尽量先使用mysql_store_result接口将结果缓存到本地</p>
</li>
</ul>
<h3 id="MySQL缓存"><a href="#MySQL缓存" class="headerlink" title="MySQL缓存"></a>MySQL缓存</h3><p>MySQL因为使用了buffer pool，因此每次查询的时候会使用到该缓冲区，其查询的表现为<strong>内存命中率</strong></p>
<h4 id="LRU"><a href="#LRU" class="headerlink" title="LRU"></a>LRU</h4><p>MySQL的内存管理使用的是LRU算法</p>
<p>但是由于会出现全表扫描这种情况，那么也就将原来内存中的记录都挤出去，从而导致整体的内存命中率降低</p>
<p>因此。MySQL优化了该算法，如下：</p>
<p>MySQL按照5:3的比例将整个LRU链表分成了young区和old区，靠近链表头部的5/8区域为young区，靠近链表尾部的3/8是old区</p>
<p>流程如下：</p>
<ol>
<li><p>如果访问的数据页在young区中，则将该数据页移到链表头部</p>
</li>
<li><p>如果访问的数据页不在当前内存中，则会淘汰掉链表尾部的数据页，但是新插入的数据页会放置到<strong>old区的开头位置</strong></p>
<p>处于old区的数据页每次被访问都要做如下判断：</p>
<ul>
<li>如果该数据页在链表中的存在时间超过1s，则将其移动到链表头部</li>
<li>如果该数据页在LRU链表中的存在时间小于1s，位置保持不变。</li>
</ul>
<p>该1s是由参数<code>innodb_old_blocks_time</code>控制的</p>
</li>
</ol>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Join查询</title>
    <url>/2022/01/07/MySQL/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/34-35join%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h3 id="Join查询"><a href="#Join查询" class="headerlink" title="Join查询"></a>Join查询</h3><p><code>select * from t1 straight_join t2 on (t1.a=t2.a)</code> </p>
<p>t1和t2的a字段上有索引</p>
<ul>
<li>index nested-loop join （建议）</li>
</ul>
<p>​    如果被驱动表查询的字段有索引，在join查询相比较于单表查询（先查询t1的所有数据再带入到t2中进行查询）是有优势的</p>
<p>​    该种join查询的扫描行数为N+N<em>2</em>log<sub>2</sub>M  (N为t1的行数，M为t2的行数) （<em>2</em>log<sub>2</sub>M是因为依靠数查询需要两次，一次是走索引a，一次是走主键索引）</p>
<ul>
<li><p>如果被驱动表上没有索引</p>
<ul>
<li><p>simple nested-loop join （非常不建议，MySQL并没有使用该索引）</p>
<p>被驱动表查询的字段没有索引</p>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>block nested-loop join（MySQL选择的方式）</p>
<p>算法执行流程如下：</p>
<ol>
<li>将表a的需要查询的字段都放入buffer中</li>
<li>对于被驱动表顺序扫描每一行数据，判断join条件是否满足，如果语句中有where语句则先使用where语句进行过滤</li>
<li>将满足条件的数据进行返回</li>
</ol>
<p>有时候由于表过大，因此需要分段进行比较大小，由于是存放在内存中的，因此虽然时间复杂度上和<code>simple nested-loop join</code>差不多，但是是在内存中比较，因此速度快一些</p>
<p>如果使用了该种排序，explain会出现<code>block nested-loop join</code>这个字段</p>
<ul>
<li><p>需要进行分段比较，扫描行数为N+$\lambda$$\times$N$\times$M（$\lambda$是分段的数量，和join_buffer_size、N有关）</p>
<p>因此join_buffer_size越大，扫描行数越少</p>
</li>
</ul>
</li>
</ul>
<p>​      <font color=red>缺陷：</font></p>
<ol>
<li><p>对于IO有较大影响</p>
</li>
<li><p>需要多次判断，如果是大表则会占用较多的CPU</p>
</li>
<li><p>可能会导致buffer pool的热数据淘汰，影响内存命中率</p>
<p>  情况如下：</p>
<ul>
<li>多次扫描一个冷表，并且语句执行时间超过1s，则下次扫描该冷表时就会将冷表的数据页移到链表头部</li>
<li>一个正常的数据页想要进行young区域，必须隔1s，但是由于join的不断读磁盘和淘汰内存页，有可能进入old区域的数据页在1s内就被淘汰了</li>
</ul>
</li>
</ol>
<h3 id="Join查询原则"><a href="#Join查询原则" class="headerlink" title="Join查询原则"></a>Join查询原则</h3><p>小表驱动大表</p>
<h4 id="小表的定义"><a href="#小表的定义" class="headerlink" title="小表的定义"></a>小表的定义</h4><p>两个表按照各自的条件进行过滤完成之后，计算参与join各个字段的总数据量，数据量小的那个表就是小表</p>
<h3 id="Join优化"><a href="#Join优化" class="headerlink" title="Join优化"></a>Join优化</h3><h4 id="前置知识-Multi-Range-Read优化"><a href="#前置知识-Multi-Range-Read优化" class="headerlink" title="前置知识  Multi-Range Read优化"></a>前置知识  Multi-Range Read优化</h4><ul>
<li><p>优化目的</p>
<p>使得随机读变为顺序读</p>
</li>
<li><p>优化流程</p>
<ol>
<li><p>根据索引将满足条件的记录放到read_rnd_buffer中（read_rnd_buffer的大小由read_rnd_buffer确定，默认为256k）</p>
</li>
<li><p>将read_rnd_buffer中的id进行递增排序</p>
</li>
<li><p>根据排序后的id数组，依次到主键id索引中查询记录并返回</p>
<p>如果步骤1中read_rnd_buffer放满了，则先执行2，3，然后循环</p>
</li>
</ol>
</li>
<li><p>启用MRR</p>
<p>现在的优化器不倾向于使用MRR，如果想要稳定使用MRR，则需要设置<code>set optimizer_switch=&quot;mrr_cost_based=off&quot;</code></p>
</li>
<li><p>体现</p>
<p>explain了之后会显示using MRR</p>
</li>
</ul>
<h4 id="使用index-nested-loop-join时用到的优化-（Batched-Key-Access-）"><a href="#使用index-nested-loop-join时用到的优化-（Batched-Key-Access-）" class="headerlink" title="使用index nested-loop join时用到的优化 （Batched Key Access ）"></a>使用index nested-loop join时用到的优化 （Batched Key Access ）</h4><ul>
<li><p>核心思想</p>
<p>将驱动表查询到的id放入到join_buffer中，然后将整个join_buffer中的id与被驱动表中的数据进行对比</p>
</li>
<li><p>好处</p>
<p>避免了查询驱动表中的一条数据就和被驱动表中的数据进行比较</p>
</li>
<li><p>启用BKA</p>
<p><code>set optimizer_switch=&quot;mrr=on,mrr_cost_based=off,batched_key_access=on&quot;</code></p>
</li>
</ul>
<h4 id="使用block-nested-loop-join时用到的优化-（Batched-Key-Access-）"><a href="#使用block-nested-loop-join时用到的优化-（Batched-Key-Access-）" class="headerlink" title="使用block nested-loop join时用到的优化 （Batched Key Access ）"></a>使用block nested-loop join时用到的优化 （Batched Key Access ）</h4><ul>
<li><p>核心思想</p>
<p>在被驱动表上加上索引，将BNL转为NLJ，再利用Batched Key Access</p>
</li>
<li><p>问题</p>
<p>当被驱动表需要查询到的数据比较少，但被驱动表又比较大时，建立索引是不合适的</p>
<ul>
<li>解决法案<ul>
<li>建立临时索引表</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="hash-join"><a href="#hash-join" class="headerlink" title="hash join"></a>hash join</h4><ul>
<li><p>核心思想</p>
<p>如果join_buffer中维护的不是一个无序数组，而是一个哈希表，则只需要每次先查询被驱动表的数据，然后查看该记录是否在join_buffer中的hash表中即可</p>
</li>
<li><p>问题</p>
<p>官方没有安排</p>
<ul>
<li><p>解决方案</p>
<p>我们可以自己分两次查询，第一次查询驱动表然后将数据存入到hash表中，第二次查询被驱动表，然后遍历分别在hash表查询是否存在，存在则做拼接操作</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>用户临时表</title>
    <url>/2022/01/07/MySQL/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/36-%E7%94%A8%E6%88%B7%E4%B8%B4%E6%97%B6%E8%A1%A8/</url>
    <content><![CDATA[<h3 id="用户临时表"><a href="#用户临时表" class="headerlink" title="用户临时表"></a>用户临时表</h3><ol>
<li><p>创建</p>
<p><code>create temporary table(xxxx)</code></p>
</li>
<li><p>性质</p>
<ul>
<li>临时表可以同名，只要不在同一个session里面</li>
<li>临时表会在session自动释放之后自动删除</li>
<li>临时表的操作会传递给备库，<font color=red>只有当binlog_format=statment/mixed</font>才会进行传递</li>
<li>对于备库来说，应用日志线程都是共用的，那么如何实现临时表可以同名呢？因为在记录binlog的时候会将该语句执行的主库线程id写到binlog中</li>
</ul>
</li>
<li><p>注意</p>
<p>临时表的自动回收主要用于session异常断开，MySQL异常重启，对于由线程池来操作的连接还是需要主动进行临时表的删除</p>
</li>
</ol>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>何时使用内部临时表</title>
    <url>/2022/01/07/MySQL/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/37-%E4%BD%95%E6%97%B6%E4%BD%BF%E7%94%A8%E5%86%85%E9%83%A8%E4%B8%B4%E6%97%B6%E8%A1%A8/</url>
    <content><![CDATA[<h3 id="何时使用内部临时表"><a href="#何时使用内部临时表" class="headerlink" title="何时使用内部临时表"></a>何时使用内部临时表</h3><h4 id="union执行流程"><a href="#union执行流程" class="headerlink" title="union执行流程"></a>union执行流程</h4><p>例子 <code>(select 1000 as f) union (select id from t1 order by id desc limit 2) </code></p>
<p>流程如下</p>
<ol>
<li>创建一个内存临时表，该临时表只有一个整型字段f，且f是主键字段</li>
<li>执行第一个子查询，得到1000这个值并存入临时表中</li>
<li>执行第二个子查询，并将查询到的内容插入到临时表中（如果查询的结果与第一个子查询的结果有重复，则会去重）</li>
<li>从临时表中按行取出数据并返回结果，删除临时表</li>
</ol>
<h4 id="group-by执行流程"><a href="#group-by执行流程" class="headerlink" title="group by执行流程"></a>group by执行流程</h4><p>例子<code>select id%10 as m,count(*) as c from t1 group by m;</code></p>
<p>流程如下：</p>
<ol>
<li>创建内存临时表，表中有两个字段m和c，主键为m；</li>
<li>扫描表t1中的索引a，依次取出叶子节点上的id值并计算id%10的结果，记为x<ul>
<li>如果临时表中没有主键为x的行，就插入记录（x,1）</li>
<li>如果有，则将该行的c加1</li>
</ul>
</li>
<li>遍历完成后，在根据字段m做排序，最终返回结果</li>
</ol>
<h5 id="优化1-使用索引"><a href="#优化1-使用索引" class="headerlink" title="优化1 使用索引"></a>优化1 使用索引</h5><p>主要思想:如果可以保证输入的数据是有序的，也就是group by m中的m是表t1的一个索引（也就是将id%10在表中构建成另外一个索引），</p>
<p><code>alter table t1 add column z int generated always as (id %10), add index(z);</code></p>
<p>那么在查询到时候就会按照0-9的顺序进行查询，那么只要相同的依次累加最终就会得到当前相同m的个数。</p>
<p>比如m的数据组成如下：</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20211128102053.png" alt="image-20211128102044716"></p>
<p>那么0的就有x个，1的就有y个依次类推，这样就不需要存储临时表然后排序再进行统计相同0的个数，1的个数等等。</p>
<h5 id="优化2-直接排序"><a href="#优化2-直接排序" class="headerlink" title="优化2 直接排序"></a>优化2 直接排序</h5><p>如果加索引不是很好，那么就进行直接排序。</p>
<p>主要思想如下：</p>
<ul>
<li><p>如果group by 需要统计的数据量不大，尽量只使用内存临时表，也可以通过调大<code>tmp_table_size</code>参数避免使用磁盘临时表</p>
</li>
<li><p>如果数据量很大，使用<code>SQL_BIG_RESULT</code>这个提示，告诉优化器直接使用排序算法得到的结果</p>
<p><code>select SQL_BIG_RESULT id%10 as m, count(*) as c from t1 group by m;</code></p>
<p>​    执行流程如下：</p>
<pre><code> 1. 初始化sort_buffer，放入一个整型字段m
 2. 扫描表t1的索引a，依次取出里面的id值并将id%10的值存入到sort_buffer中
 3. 扫描完成后对sort_buffer中的字段m进行排序（如果sort_buffer内存不够用，则会利用磁盘临时文件辅助排序）
 4. 排序完成后得到有序数组，结果如下图所示：
</code></pre>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20211128102053.png" alt="image-20211128102044716"></p>
</li>
</ul>
<p>​            （这里和优化1得到的m的数据组成是一样的，注意区别在于优化1是索引结果得来的，直接取的数据就是这样子，而优化2中的直接排序是直接进行排序之后得到这样的结果）</p>
<p>​          5. 统计相同m的个数并返回结果</p>
<p>​        </p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Memory引擎</title>
    <url>/2022/01/07/MySQL/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/38-MySQL%20Memory%E5%BC%95%E6%93%8E/</url>
    <content><![CDATA[<h2 id="Memory引擎和InnoDB引擎数据组织方式"><a href="#Memory引擎和InnoDB引擎数据组织方式" class="headerlink" title="Memory引擎和InnoDB引擎数据组织方式"></a>Memory引擎和InnoDB引擎数据组织方式</h2><h3 id="Memory引擎-（索引组织表）"><a href="#Memory引擎-（索引组织表）" class="headerlink" title="Memory引擎 （索引组织表）"></a>Memory引擎 （索引组织表）</h3><p>内存表的数据部分以数组的方式单独存放（数据和主键索引是分开存放的），主键id索引里存放的是每个数据的位置。</p>
<p>主键id是hash索引，因此主键id并非是有序的。</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20220107150733.png" alt="image-20220107150731284"></p>
<h3 id="InnoDB引擎-（堆组织表）"><a href="#InnoDB引擎-（堆组织表）" class="headerlink" title="InnoDB引擎 （堆组织表）"></a>InnoDB引擎 （堆组织表）</h3><p>数据存放在主键索引上（数据和主键索引是放在一起的），其他索引上保存的是主键id</p>
<h2 id="Memory与InnoDB比较"><a href="#Memory与InnoDB比较" class="headerlink" title="Memory与InnoDB比较"></a>Memory与InnoDB比较</h2><ol>
<li>InnoDB数据是有序存放的，memory的数据是按照写入顺序存放的</li>
<li>InnoDB因为顺序存放的原因，在插入数据的时候只能在固定的地方进行插入（这也是数据空洞存在的原因），而memory只要有空位就可以插入</li>
<li>数据位置发生变化的时候InnoDB只需要修改主键索引，memory需要修改所有索引（因为索引记录了每个数据的位置，因此可能修改一个数据的位置影响到其他数据的位置，比如说最第一次插入的元素被删除了，那么后面元素位置的都会需要-1）</li>
<li>InnoDB使用主键查询时只需要走一次索引，使用普通索引查询时需要走两次索引。memory索引都是一样的</li>
<li>InnoDB支持变长数据，但是memory不支持Blob和Text字段，并且每个字段的长度都是固定的，即使存储的内容长度不一致</li>
</ol>
<h2 id="Memory的两种索引组织方式"><a href="#Memory的两种索引组织方式" class="headerlink" title="Memory的两种索引组织方式"></a>Memory的两种索引组织方式</h2><h3 id="hash索引"><a href="#hash索引" class="headerlink" title="hash索引"></a>hash索引</h3><p>本身使用的就是hash索引，在等值查询时非常快</p>
<h3 id="B-Tree索引"><a href="#B-Tree索引" class="headerlink" title="B-Tree索引"></a>B-Tree索引</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table t1 add index a_btree_index using btree (id)</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20220107150758.png" alt="image-20220107150757289"></p>
<h2 id="Memory引擎的缺陷"><a href="#Memory引擎的缺陷" class="headerlink" title="Memory引擎的缺陷"></a>Memory引擎的缺陷</h2><ol>
<li>锁的粒度太大（使用的是表锁）</li>
<li>在高可用场景下<ul>
<li>备库重启，数据清空，这时候客户端发送update语句就会导致找不到更新的行</li>
<li>在双主架构下，数据库B重启之后会往binlog中写入一行delete from xxx的记录，这时候B会将该记录发送给A，A就会清空该xxx表</li>
</ul>
</li>
</ol>
<h2 id="使用memory的场景"><a href="#使用memory的场景" class="headerlink" title="使用memory的场景"></a>使用memory的场景</h2><p>如果用到了内存临时表（用户主动创建的临时表 create temporary table xxx），可以考虑将该表的引擎设置为memory</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>自增主键不连续的原因</title>
    <url>/2022/01/07/MySQL/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/39-%E8%87%AA%E5%A2%9E%E4%B8%BB%E9%94%AE%E4%B8%8D%E8%BF%9E%E7%BB%AD%E7%9A%84%E5%8E%9F%E5%9B%A0/</url>
    <content><![CDATA[<h2 id="自增主键值"><a href="#自增主键值" class="headerlink" title="自增主键值"></a>自增主键值</h2><h3 id="查看当前表自增主键到哪里"><a href="#查看当前表自增主键到哪里" class="headerlink" title="查看当前表自增主键到哪里"></a>查看当前表自增主键到哪里</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show create table t\G;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20220107171231.png" alt="image-20220107171230215"></p>
<h3 id="自增主键值保存的位置"><a href="#自增主键值保存的位置" class="headerlink" title="自增主键值保存的位置"></a>自增主键值保存的位置</h3><ul>
<li><p>MySQL 5.7 以及之前</p>
<p>自增值保存在内存中，没有进行持久化</p>
<p>每次重启之后打开表会查看当前自增值的最大值，依次+1作为当前自增值</p>
</li>
<li><p>MySQL 8.0</p>
<p>将自增值记录在redo log中，重启之后依据redo log的记录</p>
</li>
</ul>
<h2 id="自增值修改机制"><a href="#自增值修改机制" class="headerlink" title="自增值修改机制"></a>自增值修改机制</h2><ul>
<li><p>如果自增值所在的字段值为0、null或者未指定值则使用当前表系统给定的自增值</p>
</li>
<li><p>如果给定了值X，当前自增值为Y，直接使用语句里给定的值。但是自增值会发生如下变化：</p>
<ul>
<li><p>X&lt;Y</p>
<p>当前自增值不变</p>
</li>
<li><p>X≥Y</p>
<p>当前自增值修改为新的自增值</p>
</li>
</ul>
</li>
</ul>
<h2 id="自增值不连续的场景"><a href="#自增值不连续的场景" class="headerlink" title="自增值不连续的场景"></a>自增值不连续的场景</h2><h3 id="唯一键冲突导致自增值不连续"><a href="#唯一键冲突导致自增值不连续" class="headerlink" title="唯一键冲突导致自增值不连续"></a>唯一键冲突导致自增值不连续</h3><p>当前插入的记录与原有的记录有冲突，但是自增值会在遇到冲突之间+1，并且不会回退，那么在冲突之后自增值已经+1了（实际上有了冲突并未插入成功），下一次插入的自增值就是最开始的自增值+2</p>
<h3 id="事务回滚导致自增值不连续"><a href="#事务回滚导致自增值不连续" class="headerlink" title="事务回滚导致自增值不连续"></a>事务回滚导致自增值不连续</h3><p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20220107171251.png" alt="image-20220107171250394"></p>
<h3 id="自增锁优化导致自增值不连续"><a href="#自增锁优化导致自增值不连续" class="headerlink" title="自增锁优化导致自增值不连续"></a>自增锁优化导致自增值不连续</h3><p>对于批量插入的语句，MySQL自身有批量申请自增id的策略：</p>
<ol>
<li>第一次申请自增id，分配1个</li>
<li>第二次申请分配2个</li>
<li>第三次申请分配4个</li>
<li>依次类推，每次申请的数量是上次的2倍</li>
</ol>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20220107171307.png" alt="image-20220107171306277"></p>
<p>过程如下：</p>
<ol>
<li>申请id=1</li>
<li>申请id=2-3</li>
<li>申请id=4-7 （此次只有id=4被用到，其余都浪费了）</li>
<li>申请id = 8</li>
</ol>
<h2 id="自增值不回退的原因"><a href="#自增值不回退的原因" class="headerlink" title="自增值不回退的原因"></a>自增值不回退的原因</h2><p>自增值不回退是为了提升性能</p>
<p>考虑如下场景：</p>
<p>两个事务并发执行，事务A插入id=2，事务B插入id=3，假设事务B插入成功，但是事务A出现了唯一键冲突，此时运行自增进行回退，那么下次事务申请到id=2没问题，但是又会申请到id=3从而冲突。</p>
<h2 id="自增锁的优化"><a href="#自增锁的优化" class="headerlink" title="自增锁的优化"></a>自增锁的优化</h2><ul>
<li><p>在MySQL 5.1之前自增锁的范围是语句级别，只有当前语句执行完才会释放自增锁</p>
</li>
<li><p>MySQL 5.1.22引入参数<code>innodb_autoinc_lock_mod</code>,默认值为1</p>
<p>0：采用MySQL 5.1 之前的策略</p>
<p>1：普通insert语句，自增锁在申请之后就立刻释放，但是批量插入语句需要等到语句结束后才会释放</p>
<p>​      批量插入需要的等到语句结束后才释放的原因：</p>
<p>​       <img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20220107152339.png" alt="image-20220107152336635"></p>
<p>如果session B在每次申请完自增id时就释放自增锁，那么有可能在这条语句执行期间session A的最后一条语句执行，从而将session B的插入顺序打乱，</p>
<p>例如</p>
<p>session B插入两条记录 （1,1,1）（2,2,2）</p>
<p>session A 插入 （3,5,5）</p>
<p>session B插入两条记录 （4,3,3）（5,4,4）</p>
<p>但是如果此时binlog是statement格式（记录的都是原始的插入SQL语句），那么会导致该binlog在用到从库上执行时会发生id都是连续一致的情况,例如</p>
<p>binlog记录的是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into t2(c,d) select c,d from t;</span><br><span class="line">insert into t2 values(null,5,5)</span><br></pre></td></tr></table></figure>

<p>  那么在从库上进行重发的时候记录的就是</p>
<p>  （1,1,1）（2,2,2）（3,3,3）（4,4,4）（5,5,5）</p>
<p>  从而与主库的不一致</p>
</li>
</ul>
<p>​        <font color=red>  因此在生产上面对批量插入的场景，可以将<code>innodb_autoinc_lock_mod</code>设置为2，<code>binlog_format</code> 设置为row提高并发性，因为row格式下可以很好的记录下每一条记录的变化位置以及相应的值</font></p>
<p>​    2：所有申请自增主键的动作在申请后就释放自增锁</p>
<ul>
<li><p>批量插入自增主键优化</p>
<p>对于批量插入的语句，MySQL自身有批量申请自增id的策略：</p>
<ol>
<li>第一次申请自增id，分配1个</li>
<li>第二次申请分配2个</li>
<li>第三次申请分配4个</li>
<li>依次类推，每次申请的数量是上次的2倍</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>insert语句的锁</title>
    <url>/2022/01/07/MySQL/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/40-insert%E8%AF%AD%E5%8F%A5%E7%9A%84%E9%94%81/</url>
    <content><![CDATA[<h3 id="insert-…-select-语句"><a href="#insert-…-select-语句" class="headerlink" title="insert … select 语句"></a>insert … select 语句</h3><h4 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h4><p>如果在RR隔离级别下并且<code>binlog_format=statement</code>的话，如果出现<code>insert ... select xx from t</code>（对全表进行select）,那么整个表t的所有行和间隙都会被加锁</p>
<h4 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h4><p>为了使得日志和数据的一致性</p>
<h3 id="insert循环写入"><a href="#insert循环写入" class="headerlink" title="insert循环写入"></a>insert循环写入</h3><h4 id="现象-1"><a href="#现象-1" class="headerlink" title="现象"></a>现象</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into t(c,d) (select c+1,d from t)</span><br></pre></td></tr></table></figure>

<p>类似于这种的，插入和查询都是针对<font color=red>同一张表（也就是循环写入）</font>，会用到临时表，在此过程中会对表t做全表扫描，给表t的所有间隙都加上共享的next-key lock，因此在该语句执行期间不能在该表上插入数据</p>
<h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><p>使用临时表，也就是将插入和查询的表分开</p>
<p>比如上面的就可以优化成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create temporary table temp_t(c int,d int) engine=memory;</span><br><span class="line">insert into temp_t(select c+1,d from t);</span><br><span class="line">insert into t select * from temp_t;</span><br><span class="line">drop table temp_t;</span><br></pre></td></tr></table></figure>

<h3 id="insert-唯一键-主键-冲突"><a href="#insert-唯一键-主键-冲突" class="headerlink" title="insert 唯一键/主键 冲突"></a>insert 唯一键/主键 冲突</h3><h4 id="现象-2"><a href="#现象-2" class="headerlink" title="现象"></a>现象</h4><p>insert语句出现了唯一键或者主键冲突，不仅会报错，还会在加上<font color=red>共享</font>的next-key lock（如果当前事务一直没有提提交的话）</p>
<h3 id="insert-into-…-on-duplicate-key-update（冲突后就执行后面的update语句）"><a href="#insert-into-…-on-duplicate-key-update（冲突后就执行后面的update语句）" class="headerlink" title="insert into … on duplicate key update（冲突后就执行后面的update语句）"></a>insert into … on duplicate key update（冲突后就执行后面的update语句）</h3><h4 id="现象-3"><a href="#现象-3" class="headerlink" title="现象"></a>现象</h4><p>insert语句出现了唯一键或者主键冲突，不仅会报错，还会在加上<font color=red>排他</font>的next-key lock（如果当前事务一直没有提提交的话）</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>表的复制</title>
    <url>/2022/01/07/MySQL/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/41-%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6/</url>
    <content><![CDATA[<h2 id="mysqldump"><a href="#mysqldump" class="headerlink" title="mysqldump"></a>mysqldump</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqldump -hhost -Pport -u$user --add-locks=0 --no-create-info --single-transaction  --set-gtid-purged=OFF db1 t --where=&quot;a&gt;900&quot; --result-file=/client_tmp/t.sql</span><br></pre></td></tr></table></figure>

<ol>
<li>–single-transaction 的作用是，在导出数据的时候不需要对表 db1.t 加表锁，而是使用 START TRANSACTION WITH CONSISTENT SNAPSHOT 的方法；</li>
<li>–add-locks 设置为 0，表示在输出的文件结果里，不增加” LOCK TABLES t WRITE;” ；</li>
<li>–no-create-info 的意思是，不需要导出表结构；</li>
<li>–set-gtid-purged=off 表示的是，不输出跟 GTID 相关的信息；</li>
<li>–result-file 指定了输出文件的路径，其中 client 表示生成的文件是在客户端机器上的。</li>
</ol>
<p>默认生成的insert语句是一条，后面有许多的value对</p>
<p>如果想每一行都是一条插入语句，可以加上<code>–skip-extended-insert</code></p>
<h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -h127.0.0.1 -P13000  -uroot db2 -e &quot;source /client_tmp/t.sql&quot;</span><br></pre></td></tr></table></figure>



<h2 id="导出csv文件"><a href="#导出csv文件" class="headerlink" title="导出csv文件"></a>导出csv文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from db1.t where a&gt;900 into outfile &#x27;/server_tmp/t.csv&#x27;;</span><br></pre></td></tr></table></figure>

<p>注意：该条语句生成的文件是在MySQL所在的主机上，不在客户端所在的主机上</p>
<h3 id="导入-1"><a href="#导入-1" class="headerlink" title="导入"></a>导入</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">load data （local）infile &#x27;/server_tmp/t.csv&#x27; into table db2.t;</span><br></pre></td></tr></table></figure>

<p>注意：不加local 是读取服务端文件，加local是读取客户端文件</p>
<h2 id="物理拷贝"><a href="#物理拷贝" class="headerlink" title="物理拷贝"></a>物理拷贝</h2><p>只能在MySQL 5.6及以上版本使用</p>
<p>假设我们现在的目标是在 db1 库下，复制一个跟表 t 相同的表 r，具体的执行步骤如下：</p>
<ol>
<li>执行 create table r like t，创建一个相同表结构的空表；</li>
<li>执行 alter table r discard tablespace，这时候 r.ibd 文件会被删除；</li>
<li>执行 flush table t for export，这时候 db1 目录下会生成一个 t.cfg 文件；</li>
<li>在 db1 目录下执行 cp t.cfg r.cfg; cp t.ibd r.ibd；这两个命令（这里需要注意的是，拷贝得到的两个文件，MySQL 进程要有读写权限）；</li>
<li>执行 unlock tables，这时候 t.cfg 文件会被删除；</li>
<li>执行 alter table r import tablespace，将这个 r.ibd 文件作为表 r 的新的表空间，由于这个文件的数据内容和 t.ibd 是相同的，所以表 r 中就有了和表 t 相同的数据。</li>
</ol>
<p>缺陷：只能全表拷贝</p>
<p>注意：物理拷贝文件权限所属用户需要修改（如果是root用户拷贝的文件并且mysql是mysql用户启动的，需要将拷贝的文件权限改为mysql用户），不然会报import tablespace找不到文件</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2022/01/07/MySQL/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/44/</url>
    <content><![CDATA[<ol>
<li><p>MySQL中对于NULL和任何值执行等值判断或者不等值判断都会返回NULL，也就是说如果有where a=b ，其中a或者b任意一个或者两个都为null都会返回null</p>
</li>
<li><p>如果想到达到left join的效果，不能将被驱动表的字段放在where条件里面做等值或者不等值判断，<font color=red>必须都写在on里面</font></p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>一条SQL执行流程</title>
    <url>/2022/01/07/MySQL/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%B8%80%E6%9D%A1SQL%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210803155743.png" alt="MYSQL语句执行流程图"></p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch常见问题</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ElasticSearch/es%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<ol>
<li><p>集群无法连接</p>
<p>yml配置文件错误</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201103175415.png" alt="image-20201103175319796"></p>
</li>
</ol>
<ol start="2">
<li><p>在springboot中类中无法使用ik分词注解</p>
<p>可能没有es中没有配置ik分词器插件</p>
</li>
<li><p>spring集成 的es与es版本不匹配</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201103175854.png" alt="image-20201103175540402"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ElasticSearch/es%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB/</url>
    <content><![CDATA[<p>使用elasticdump/elasticsearch-dump （<a href="https://www.npmjs.com/package/elasticdump%EF%BC%89">https://www.npmjs.com/package/elasticdump）</a></p>
<p>可以通过docker或者npm进行迁移数据</p>
<ul>
<li><p>数据从本地导入到es</p>
<p><code>docker run --rm -ti -v /root:/tmp elasticdump/elasticsearch-dump   --output=http://172.23.27.120:9201/communtiy   --input=/tmp/result.json   --type=data</code></p>
<p>/root路径下有对应的result文件，相当于把/root下的文件都映射到容器内的/tmp路径下</p>
</li>
<li></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>初识ElasticSearch</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ElasticSearch/%E5%88%9D%E8%AF%86ElasticSearch/</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><blockquote>
<p>elasticsearch:</p>
</blockquote>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">安装：</span></span><br><span class="line">     <span class="attr">1</span> <span class="string">解压，</span></span><br><span class="line">     <span class="attr">2</span> <span class="string">bin</span></span><br><span class="line">     <span class="attr">3</span> <span class="string">启动</span></span><br><span class="line"><span class="attr">目录：</span></span><br><span class="line">     <span class="attr">bin</span> <span class="string">启动文件</span></span><br><span class="line">     <span class="attr">config</span> <span class="string">配置文件</span></span><br><span class="line">         <span class="attr">log4j2</span> <span class="string">日志配置文件</span></span><br><span class="line">         <span class="meta">jvm.options</span> <span class="string">java 虚拟机相关的配置</span></span><br><span class="line">         <span class="meta">elasticsearch.yml</span> <span class="string">elasticsearch 的配置文件！ 默认 9200 端口！ 跨域！</span></span><br><span class="line">         <span class="attr">lib</span> <span class="string">相关jar包</span></span><br><span class="line">         <span class="attr">logs</span> <span class="string">日志！</span></span><br><span class="line">         <span class="attr">modules</span> <span class="string">功能模块</span></span><br><span class="line">         <span class="attr">plugins</span> <span class="string">插件！</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>安装可视化插件：</p>
</blockquote>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">安装：</span></span><br><span class="line">          <span class="attr">1</span> <span class="string">elasticsearch-head-master，解压</span></span><br><span class="line">          <span class="attr">2</span> <span class="string">npm install npm run start ， 需要node环境</span></span><br><span class="line">          <span class="attr">3</span> <span class="string">解决跨域问题，elasticsearch-&gt;config-&gt;elasticsearch.yml配置：</span></span><br><span class="line">             <span class="meta">http.cors.enabled</span>: <span class="string">true</span></span><br><span class="line">             <span class="meta">http.cors.allow-origin</span>: <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Kibana:</p>
</blockquote>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">1、解压后端的目录</span></span><br><span class="line"><span class="attr">2、启动</span></span><br><span class="line"><span class="attr">3、访问测试</span></span><br><span class="line"><span class="meta">4、开发工具！</span> <span class="string">（Post、curl、head、谷歌浏览器插件测试！）</span></span><br><span class="line"><span class="meta">5、汉化,i18n.locale</span>: <span class="string">&quot;zh-CN&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="ES核心概念"><a href="#ES核心概念" class="headerlink" title="ES核心概念"></a>ES核心概念</h3><blockquote>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200819203156.png" alt="在这里插入图片描述"></p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200819203203.png" alt="在这里插入图片描述"></p>
<h2 id="IK分词器插件-可以添加自己的词典"><a href="#IK分词器插件-可以添加自己的词典" class="headerlink" title="IK分词器插件(可以添加自己的词典)"></a>IK分词器插件(可以添加自己的词典)</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">安装：</span></span><br><span class="line">	<span class="meta">1、https</span>:<span class="string">//github.com/medcl/elasticsearch-analysis-ik</span></span><br><span class="line">	<span class="meta">2、下载完毕之后，放入到我们的elasticsearch</span> <span class="string">插件,plugins目录</span></span><br><span class="line">	<span class="attr">3、重启观察ES，可以看到ik分词器被加载了！</span></span><br><span class="line">	<span class="meta">4、elasticsearch-plugin</span> <span class="string">可以通过这个命令来查看加载进来的插件</span></span><br><span class="line">	<span class="attr">5、使用kibana测试！</span></span><br><span class="line"><span class="attr">其他：</span></span><br><span class="line">	<span class="attr">ik_smart</span> <span class="string">和 ik_max_word，其中 ik_smart 为最少切分，ik_max_word为最细 粒度划分！</span></span><br><span class="line">	<span class="meta">config/IKAnalyzer.cfg.xml</span>  <span class="string">添加加载分词规则，main.dic默认加载 (必定添加main)</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>method</th>
<th>url地址</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>PUT</td>
<td>localhost:9200/索引名称/类型名称/文档id</td>
<td>创建文档（指定文档id）</td>
</tr>
<tr>
<td>POST</td>
<td>localhost:9200/索引名称/类型名称</td>
<td>创建文档（随机文档id）</td>
</tr>
<tr>
<td>_update</td>
<td>llocalhost:9200/索引名称/类型名称/文档id/_update</td>
<td>修改文档</td>
</tr>
<tr>
<td>DELETE</td>
<td>localhost:9200/索引名称/类型名称/文档id</td>
<td>删除文档</td>
</tr>
<tr>
<td>GET</td>
<td>localhost:9200/索引名称/类型名称/文档id</td>
<td>查询文档通过文档id</td>
</tr>
<tr>
<td>POST</td>
<td>localhost:9200/索引名称/类型名称/_search</td>
<td>查询所有数据</td>
</tr>
</tbody></table>
<h3 id="构建自己的字典"><a href="#构建自己的字典" class="headerlink" title="构建自己的字典"></a>构建自己的字典</h3><p>使得狂神说 成为一个词。<br>5.1新增一个 “cyx.dic”<br><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200819203222.png" alt="在这里插入图片描述"><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200819203237.png" alt="在这里插入图片描述"></p>
<h3 id="把自己的dic-添加到配置中"><a href="#把自己的dic-添加到配置中" class="headerlink" title="把自己的dic 添加到配置中"></a>把自己的dic 添加到配置中</h3><p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200819203302.png" alt="在这里插入图片描述"><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200819203309.png" alt="在这里插入图片描述"></p>
<h3 id="重启-elasticsearch和kibana"><a href="#重启-elasticsearch和kibana" class="headerlink" title="重启 elasticsearch和kibana"></a>重启 elasticsearch和kibana</h3><p>加载了编写的dic<br><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200819203317.png" alt="在这里插入图片描述"><br>重新编译，这两个都把狂神说合在一起作为一个词</p>
<h2 id="api操作"><a href="#api操作" class="headerlink" title="api操作"></a>api操作</h2><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PUT /zgc/user/<span class="number">1</span>    <span class="comment">//此处会自动帮我们封装好每个field对于的类型  不需要我们指定类型  比如age就默认封装为long类型</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;name&quot;</span>: <span class="string">&quot;狂神说java&quot;</span>,</span><br><span class="line"><span class="string">&quot;age&quot;</span> : <span class="number">10</span>,</span><br><span class="line"><span class="string">&quot;desc&quot;</span>: <span class="string">&quot;还行&quot;</span>,</span><br><span class="line"><span class="string">&quot;tags&quot;</span>: [<span class="string">&quot;技术宅&quot;</span>,<span class="string">&quot;帅哥&quot;</span>,<span class="string">&quot;渣男&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="PUT更新"><a href="#PUT更新" class="headerlink" title="PUT更新"></a>PUT更新</h3><p><strong>空的字段会覆盖，不推荐</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PUT /zgc/user/<span class="number">1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;name&quot;</span>: <span class="string">&quot;狂神说123&quot;</span>,</span><br><span class="line"><span class="string">&quot;desc&quot;</span>: <span class="string">&quot;一顿操作猛如虎，一看工资2500&quot;</span>,</span><br><span class="line"><span class="string">&quot;tags&quot;</span>: [<span class="string">&quot;技术宅&quot;</span>,<span class="string">&quot;温暖&quot;</span>,<span class="string">&quot;直男&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="POST更新"><a href="#POST更新" class="headerlink" title="POST更新"></a>POST更新</h3><p><strong>灵活，推荐</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">POST /zgc/user/<span class="number">1</span>/_update</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;doc&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;狂神说222222&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">GET /zgc/user/<span class="number">1</span>  <span class="comment">//查询zgc中id=1的文档</span></span><br><span class="line"></span><br><span class="line">GET /test  <span class="comment">//查询test库的信息</span></span><br></pre></td></tr></table></figure>

<h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DELETE /test  <span class="comment">//删除test库</span></span><br></pre></td></tr></table></figure>



<h4 id="1-分词并且搜索词拆分"><a href="#1-分词并且搜索词拆分" class="headerlink" title="1. 分词并且搜索词拆分"></a>1. 分词并且搜索词拆分</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询文档1、2</span></span><br><span class="line">POST /zgc/user/_search?q=name:狂神说java</span><br></pre></td></tr></table></figure>

<h4 id="2-分词并且搜索词拆分"><a href="#2-分词并且搜索词拆分" class="headerlink" title="2. 分词并且搜索词拆分"></a>2. 分词并且搜索词拆分</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">GET /zgc/user/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;狂神说&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="source指定字段-sort排序"><a href="#source指定字段-sort排序" class="headerlink" title="_source指定字段,sort排序"></a>_source指定字段,sort排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">GET /zgc/user/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;狂神说&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  , <span class="string">&quot;_source&quot;</span>: [<span class="string">&quot;name&quot;</span>,<span class="string">&quot;tags&quot;</span>,<span class="string">&quot;age&quot;</span>]</span><br><span class="line">  ,<span class="string">&quot;sort&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;age&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;order&quot;</span>: <span class="string">&quot;asc&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">  ,<span class="string">&quot;from&quot;</span>: <span class="number">0</span></span><br><span class="line">  ,<span class="string">&quot;size&quot;</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="must-（and），should-（or），must-not-（not）"><a href="#must-（and），should-（or），must-not-（not）" class="headerlink" title="must （and），should （or），must_not （not）"></a>must （and），should （or），must_not （not）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">GET /zgc/user/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;must_not&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;java&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;age&quot;</span>: <span class="string">&quot;10&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="匹配多个值-or并且搜索词拆分"><a href="#匹配多个值-or并且搜索词拆分" class="headerlink" title="匹配多个值 or并且搜索词拆分"></a>匹配多个值 or并且搜索词拆分</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">GET /zgc/user/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;tags&quot;</span>: <span class="string">&quot;男  帅哥&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="term-”不能把搜索词拆分“-如果该字段的属性是keyword的话，但是如果为text，是可以调用分词器进行拆分后进行查找"><a href="#term-”不能把搜索词拆分“-如果该字段的属性是keyword的话，但是如果为text，是可以调用分词器进行拆分后进行查找" class="headerlink" title="term ”不能把搜索词拆分“(如果该字段的属性是keyword的话，但是如果为text，是可以调用分词器进行拆分后进行查找)"></a>term ”不能把搜索词拆分“(如果该字段的属性是keyword的话，但是如果为text，是可以调用分词器进行拆分后进行查找)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">GET /zgc/user/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;term&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;狂&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="filter-过滤器"><a href="#filter-过滤器" class="headerlink" title="filter:过滤器"></a>filter:过滤器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># query-&gt;bool-&gt;filter</span><br><span class="line"># filter比query快的原因：</span><br><span class="line"># <span class="number">1</span> query:会先比较查询条件，然后计算分值，最后返回文档结果；filter: <span class="number">1</span> 对结果进行缓存 <span class="number">2</span> 避免计算分值</span><br><span class="line">GET /zgc/user/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;filter&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;range&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;age&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;gte&quot;</span>: <span class="number">10</span>,</span><br><span class="line">            <span class="string">&quot;lte&quot;</span>: <span class="number">200</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="高亮查询"><a href="#高亮查询" class="headerlink" title="高亮查询"></a>高亮查询</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">GET /zgc/user/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;狂神&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ,<span class="string">&quot;highlight&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;fields&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;name&quot;</span>:&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义高亮查询"><a href="#自定义高亮查询" class="headerlink" title="自定义高亮查询"></a>自定义高亮查询</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">GET /zgc/user/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;狂神&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ,<span class="string">&quot;highlight&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;fields&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;name&quot;</span>:&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ,<span class="string">&quot;pre_tags&quot;</span>: <span class="string">&quot;&lt;p class=&#x27;key&#x27; style=&#x27;color:red&#x27; &gt;&quot;</span></span><br><span class="line">    ,<span class="string">&quot;post_tags&quot;</span>: <span class="string">&quot;&lt;/p&gt;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="term和match"><a href="#term和match" class="headerlink" title="term和match"></a><font color=red>term和match</font></h3><ul>
<li>term是精确查询，也就是会根据字段的类型（比如说name:text,desc:keyword）</li>
</ul>
<p>那么使用term查询name的时候就会调用分词器解析后对name进行查询，但是对于desc查询的时候就会想desc的内容当作整体，不使用分词器进行分词查询，而是作为整体查询</p>
<ul>
<li><p>match</p>
<p>使用分词器进行查询，不管字段的类型时text还是keyword都使用分词器解析之后进行查询</p>
</li>
</ul>
<h3 id="集成SpringBoot"><a href="#集成SpringBoot" class="headerlink" title="集成SpringBoot"></a>集成SpringBoot</h3><p><a href="https://www.elastic.co/guide/en/elasticsearch/client/index.html">https://www.elastic.co/guide/en/elasticsearch/client/index.html</a><br><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200819203327.png" alt="在这里插入图片描述"><br><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200819203336.png" alt="在这里插入图片描述"></p>
<h3 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h3><p>&lt;elasticsearch.version&gt;7.6.1&lt;/elasticsearch.version&gt;</p>
<h3 id="springboot配置"><a href="#springboot配置" class="headerlink" title="springboot配置"></a>springboot配置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 新建ElasticSearchClientConfig文件</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticSearchClientConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestHighLevelClient <span class="title">restHighLevelClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        RestHighLevelClient client = <span class="keyword">new</span> RestHighLevelClient(</span><br><span class="line">                RestClient.builder(</span><br><span class="line">                        <span class="keyword">new</span> HttpHost(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">9200</span>, <span class="string">&quot;http&quot;</span>)</span><br><span class="line">                )</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>包，搜autoconfigure-&gt;搜elasticearch-&gt;ElasticsearchRestClientAutoConfiguration</p>
<p>@Import({RestClientBuilderConfiguration.class, RestHighLevelClientConfiguration.class, RestClientFallbackConfiguration.class})</p>
<h3 id="索引操作"><a href="#索引操作" class="headerlink" title="索引操作"></a>索引操作</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RestHighLevelClient restHighLevelClient;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建索引</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">	CreateIndexRequest createIndexRequest = <span class="keyword">new</span> CreateIndexRequest(<span class="string">&quot;zgc_index&quot;</span>);</span><br><span class="line">	CreateIndexResponse createIndexResponse = restHighLevelClient.indices().create(createIndexRequest, RequestOptions.DEFAULT);</span><br><span class="line">	System.out.println(createIndexResponse);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//org.elasticsearch.client.indices.CreateIndexResponse@998a69c8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断索引是否存在</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">existIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">	GetIndexRequest getIndexRequest = <span class="keyword">new</span> GetIndexRequest(<span class="string">&quot;zgc_index&quot;</span>);</span><br><span class="line">	<span class="keyword">boolean</span> exists = restHighLevelClient.indices().exists(getIndexRequest, RequestOptions.DEFAULT);</span><br><span class="line">	System.out.println(exists);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除索引</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">	DeleteIndexRequest deleteIndexRequest = <span class="keyword">new</span> DeleteIndexRequest(<span class="string">&quot;zgc_index&quot;</span>);</span><br><span class="line">	AcknowledgedResponse delete = restHighLevelClient.indices().delete(deleteIndexRequest, RequestOptions.DEFAULT);</span><br><span class="line">	System.out.println(delete);</span><br><span class="line">	System.out.println(delete.isAcknowledged());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//org.elasticsearch.action.support.master.AcknowledgedResponse@4ee</span></span><br><span class="line"><span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h3 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElasticsearchApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;restHighLevelClient&quot;)</span>  <span class="comment">//指明此处是获取的我们自己配置的RestHighLevelClient对象</span></span><br><span class="line">    RestHighLevelClient restHighLevelClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试索引的创建</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取创建索引的请求</span></span><br><span class="line">        CreateIndexRequest request = <span class="keyword">new</span> CreateIndexRequest(<span class="string">&quot;cooper_index&quot;</span>);</span><br><span class="line">        <span class="comment">//客户端执行请求 IndicesClient 请求后获得响应</span></span><br><span class="line">        CreateIndexResponse response = restHighLevelClient.indices().create(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试获取索引</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        GetIndexRequest request = <span class="keyword">new</span> GetIndexRequest(<span class="string">&quot;cooper_index&quot;</span>);</span><br><span class="line">        <span class="keyword">boolean</span> exists = restHighLevelClient.indices().exists(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(exists);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试删除索引</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        DeleteIndexRequest request = <span class="keyword">new</span> DeleteIndexRequest(<span class="string">&quot;cooper_index&quot;</span>);</span><br><span class="line">        AcknowledgedResponse response = restHighLevelClient.indices().delete(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(response.isAcknowledged());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试添加文档</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAddDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">&quot;cooper&quot;</span>,<span class="number">22</span>);</span><br><span class="line">        <span class="comment">//创建请求</span></span><br><span class="line">        IndexRequest request = <span class="keyword">new</span> IndexRequest(<span class="string">&quot;cooper_index&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//规则 put/cooper_index/_doc/1</span></span><br><span class="line">        request.id(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        request.timeout(<span class="string">&quot;1s&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将数据请求放入到json中</span></span><br><span class="line">        request.source(JSON.toJSONString(user), XContentType.JSON);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//客户端发送请求并获取响应结果</span></span><br><span class="line">        IndexResponse response = restHighLevelClient.index(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        System.out.println(response.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询是否存在该字段</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIsExist</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        GetRequest request = <span class="keyword">new</span> GetRequest(<span class="string">&quot;cooper_index&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        request.fetchSourceContext(<span class="keyword">new</span> FetchSourceContext(<span class="keyword">false</span>));<span class="comment">//不获取返回的_source的上下文  提高查询的效率</span></span><br><span class="line">        request.storedFields(<span class="string">&quot;_none&quot;</span>);</span><br><span class="line">        <span class="keyword">boolean</span> exists = restHighLevelClient.exists(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(exists);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取文档信息</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        GetRequest request = <span class="keyword">new</span> GetRequest(<span class="string">&quot;cooper_index&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        GetResponse response = restHighLevelClient.get(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(response.getSourceAsString());<span class="comment">//打印文档内容</span></span><br><span class="line">        System.out.println(response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新文档信息</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        UpdateRequest request = <span class="keyword">new</span> UpdateRequest(<span class="string">&quot;cooper_index&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        request.timeout(<span class="string">&quot;1s&quot;</span>);</span><br><span class="line"></span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">&quot;Aaron&quot;</span>,<span class="number">10</span>);</span><br><span class="line">        request.doc(JSON.toJSONString(user),XContentType.JSON);</span><br><span class="line"></span><br><span class="line">        UpdateResponse response = restHighLevelClient.update(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(response.status());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除文档信息</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        DeleteRequest request = <span class="keyword">new</span> DeleteRequest(<span class="string">&quot;cooper_index&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        request.timeout(<span class="string">&quot;1s&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        DeleteResponse response = restHighLevelClient.delete(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(response.status());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="批量插入和查询"><a href="#批量插入和查询" class="headerlink" title="批量插入和查询"></a>批量插入和查询</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//批量插入数据</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBulkRequest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BulkRequest request = <span class="keyword">new</span> BulkRequest();</span><br><span class="line">        request.timeout(<span class="string">&quot;10s&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        users.add(<span class="keyword">new</span> User(<span class="string">&quot;Aaron1&quot;</span>,<span class="number">1</span>));</span><br><span class="line">        users.add(<span class="keyword">new</span> User(<span class="string">&quot;Aaron2&quot;</span>,<span class="number">2</span>));</span><br><span class="line">        users.add(<span class="keyword">new</span> User(<span class="string">&quot;Aaron3&quot;</span>,<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;users.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            request.add(<span class="keyword">new</span> IndexRequest(<span class="string">&quot;cooper_index&quot;</span>).id(<span class="string">&quot;&quot;</span>+(i+<span class="number">1</span>)).</span><br><span class="line">                    source(JSON.toJSONString(users.get(i)),XContentType.JSON)); <span class="comment">//此处如果不添加id的话，系统会给你随机分配一个id</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        BulkResponse bulkResponse = restHighLevelClient.bulk(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(bulkResponse.hasFailures());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//批量查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSearch</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest();</span><br><span class="line">        <span class="comment">//构建查询条件</span></span><br><span class="line">        SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询条件可以使用QueryBuilder工具来实现</span></span><br><span class="line">        <span class="comment">//termQuery为精确查询</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//此处必须写成name.keyword 不能只写name 因为</span></span><br><span class="line">        <span class="comment">//elasticsearch 里默认的IK分词器是会将每一个中文都进行了分词的切割，所以你直接想查一整个词，或者一整句话是无返回结果的</span></span><br><span class="line">        TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(<span class="string">&quot;name.keyword&quot;</span>, <span class="string">&quot;Aaron1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        sourceBuilder.query(termQueryBuilder);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        sourceBuilder.timeout(<span class="keyword">new</span> TimeValue(<span class="number">60</span>, TimeUnit.SECONDS));</span><br><span class="line"></span><br><span class="line">        request.source(sourceBuilder);</span><br><span class="line"></span><br><span class="line">        SearchResponse search = restHighLevelClient.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        System.out.println(JSON.toJSONString(search.getHits()));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;========&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : search.getHits().getHits()) &#123;</span><br><span class="line">            System.out.println(hit.getSourceAsMap());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="京东搜索实战"><a href="#京东搜索实战" class="headerlink" title="京东搜索实战"></a>京东搜索实战</h3><h4 id="访问静态页面"><a href="#访问静态页面" class="headerlink" title="访问静态页面"></a>访问静态页面</h4><p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200819203417.png" alt="在这里插入图片描述"><br><strong>注意:上文修改ElasticSearch版本包的添加config包和其文件，导入静态资源</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server.port=<span class="number">9090</span></span><br><span class="line"># 关闭thymeleaf的缓存</span><br><span class="line">spring.thymeleaf.cache=<span class="keyword">false</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Jd</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&#123;&quot;/&quot;, &quot;/jd&quot;&#125;)</span></span><br><span class="line"><span class="comment">//    @ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">jd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 可以访问首页</span></span><br></pre></td></tr></table></figure>

<h4 id="数据爬取"><a href="#数据爬取" class="headerlink" title="数据爬取"></a>数据爬取</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//需要导入jsoup包</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jsoup<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsoup<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//编写工具类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HtmlParseUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> HtmlParseUtil().parseID(<span class="string">&quot;java&quot;</span>).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Content&gt; <span class="title">parseID</span><span class="params">(String keyword)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String url = <span class="string">&quot;https://search.jd.com/Search?keyword=&quot;</span>+keyword;</span><br><span class="line">        <span class="comment">//解析网页</span></span><br><span class="line">        Document document = Jsoup.parse(<span class="keyword">new</span> URL(url),<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">        Element element = document.getElementById(<span class="string">&quot;J_goodsList&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Elements elements = element.getElementsByTag(<span class="string">&quot;li&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Content&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Element el : elements) &#123;</span><br><span class="line">            String img = el.getElementsByTag(<span class="string">&quot;img&quot;</span>).eq(<span class="number">0</span>).attr(<span class="string">&quot;src&quot;</span>);</span><br><span class="line">            String price = el.getElementsByClass(<span class="string">&quot;p-price&quot;</span>).eq(<span class="number">0</span>).text();</span><br><span class="line">            String title = el.getElementsByClass(<span class="string">&quot;p-name&quot;</span>).eq(<span class="number">0</span>).text();</span><br><span class="line"></span><br><span class="line"><span class="comment">//            System.out.println(&quot;================&quot;);</span></span><br><span class="line"><span class="comment">//            System.out.println(img);</span></span><br><span class="line"><span class="comment">//            System.out.println(price);</span></span><br><span class="line"><span class="comment">//            System.out.println(title);</span></span><br><span class="line">            Content content = <span class="keyword">new</span> Content();</span><br><span class="line">            content.setImg(img);</span><br><span class="line">            content.setPrice(price);</span><br><span class="line">            content.setTitle(title);</span><br><span class="line"></span><br><span class="line">            list.add(content);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="数据存进es"><a href="#数据存进es" class="headerlink" title="数据存进es"></a>数据存进es</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zgc.esjd3.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.zgc.esjd3.pojo.Content;</span><br><span class="line"><span class="keyword">import</span> com.zgc.esjd3.util.HtmlParseUtil;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.bulk.BulkRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.bulk.BulkResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.index.IndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.xcontent.XContentType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient restHighLevelClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Jsoup数据放es</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">parseContent</span><span class="params">(String keyword)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BulkRequest bulkRequest = <span class="keyword">new</span> BulkRequest();</span><br><span class="line">        bulkRequest.timeout(<span class="string">&quot;3m&quot;</span>);</span><br><span class="line">        ArrayList&lt;Content&gt; contents = <span class="keyword">new</span> HtmlParseUtil().parseJd(keyword);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; contents.size(); i++) &#123;</span><br><span class="line">            bulkRequest.add(<span class="keyword">new</span> IndexRequest(<span class="string">&quot;jd_index&quot;</span>).id(<span class="string">&quot;&quot;</span> + (i + <span class="number">1</span>)).source(JSON.toJSONString(contents.get(i)), XContentType.JSON));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        BulkResponse bulk = restHighLevelClient.bulk(bulkRequest, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="keyword">return</span> !bulk.hasFailures();  <span class="comment">// hasFailures返回false为成功</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/jdTest/&#123;keyword&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">jdTest</span><span class="params">(<span class="meta">@PathVariable</span> String keyword)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(keyword);</span><br><span class="line">    <span class="keyword">boolean</span> b = contentService.parseContent(keyword);</span><br><span class="line">    System.out.println(b);</span><br><span class="line">    <span class="keyword">return</span> keyword;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 访问http://localhost:9090/jdTest/java，成功把数据录入es</span></span><br></pre></td></tr></table></figure>

<h4 id="实现搜索功能"><a href="#实现搜索功能" class="headerlink" title="实现搜索功能"></a>实现搜索功能</h4><p>//分页+搜索+高亮业务编写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; searchPage(String keyword, <span class="keyword">int</span> pageNo, <span class="keyword">int</span> pageSize) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (pageNo &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            pageNo = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 查询请求</span></span><br><span class="line">        SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(<span class="string">&quot;jd_index&quot;</span>);</span><br><span class="line">        <span class="comment">// 查询构造</span></span><br><span class="line">        SearchSourceBuilder searchSourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//分页</span></span><br><span class="line">        searchSourceBuilder.from(pageNo);</span><br><span class="line">        searchSourceBuilder.size(pageSize);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//精准匹配</span></span><br><span class="line">        TermQueryBuilder queryBuilder = QueryBuilders.termQuery(<span class="string">&quot;title&quot;</span>, keyword);</span><br><span class="line">        searchSourceBuilder.query(queryBuilder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//高亮</span></span><br><span class="line">        HighlightBuilder highlightBuilder = <span class="keyword">new</span> HighlightBuilder();</span><br><span class="line">        highlightBuilder.field(<span class="string">&quot;title&quot;</span>);<span class="comment">//设置高亮的字段</span></span><br><span class="line">        highlightBuilder.requireFieldMatch(<span class="keyword">false</span>); <span class="comment">//多处高亮</span></span><br><span class="line">        highlightBuilder.preTags(<span class="string">&quot;&lt;span style= &#x27;color:red&#x27;&gt;&quot;</span>);</span><br><span class="line">        highlightBuilder.postTags(<span class="string">&quot;&lt;/span&gt;&quot;</span>);</span><br><span class="line">        searchSourceBuilder.highlighter(highlightBuilder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行搜索</span></span><br><span class="line">        searchRequest.source(searchSourceBuilder);</span><br><span class="line">        SearchResponse search = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(search);</span><br><span class="line">        ArrayList&lt;Map&lt;String, Object&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : search.getHits()) &#123;</span><br><span class="line">            <span class="comment">//解析高亮的字段，将原来的字段换为我们高亮的字段即可</span></span><br><span class="line">            Map&lt;String, HighlightField&gt; highlightFields = hit.getHighlightFields();</span><br><span class="line">            HighlightField title1 = highlightFields.get(<span class="string">&quot;title&quot;</span>);</span><br><span class="line">            Map&lt;String, Object&gt; sourceAsMap = hit.getSourceAsMap();<span class="comment">//原来的结果</span></span><br><span class="line">            <span class="comment">//解析高亮的字段，将原来的字段换为我们高亮的字段即可</span></span><br><span class="line">            <span class="keyword">if</span> (title1 != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Text[] fragments = title1.fragments();</span><br><span class="line">                String n_title = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="keyword">for</span> (Text text : fragments) &#123;</span><br><span class="line">                    n_title += text;</span><br><span class="line">                &#125;</span><br><span class="line">                sourceAsMap.put(<span class="string">&quot;title&quot;</span>, n_title);<span class="comment">//高亮字段替换掉原来的内容 也就是将原来的title替换为高亮的title</span></span><br><span class="line">            &#125;</span><br><span class="line">            list.add(sourceAsMap);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/search/&#123;keyword&#125;/&#123;pageNo&#125;/&#123;pageSize&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; search(<span class="meta">@PathVariable</span> String keyword, <span class="meta">@PathVariable</span> Integer pageNo, <span class="meta">@PathVariable</span> Integer pageSize) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">return</span> contentService.searchPage(keyword,pageNo,pageSize);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="number">1234567891011</span></span><br></pre></td></tr></table></figure>

<h4 id="下载-vue"><a href="#下载-vue" class="headerlink" title="下载 vue:"></a><strong>下载 vue:</strong></h4><p>cnpm install vue<br>cnpm install axios<br>把两个文件放入static<br><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200819203435.png" alt="在这里插入图片描述"><br><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200819203428.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200810191845839.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FkbWluNzQxYWRtaW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200819203441.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ElasticSearch/%E5%B8%B8%E8%A7%81%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<ol>
<li><p>docker启动es</p>
<p><code>docker run -e ES_JAVA_OPTS=&quot;-Xms256m -Xmx256m&quot; -d -p 9200:9200 -p 9300:9300 -v /usr/local/120_service/services/es/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml -v /usr/local/120_service/services/es/data:/usr/share/elasticsearch/data -v /usr/local/120_service/services/es/plugins:/usr/share/elasticsearch/plugins --name elastic elasticsearch:7.6.2</code></p>
</li>
<li><p>查看所有索引</p>
<p>curl ‘172.23.27.120:9200/_cat/INDICES?v’</p>
</li>
<li><p>删除索引</p>
<p>curl -XDELETE <a href="http://172.23.27.120:9201/%7Bindex_name%7D">http://172.23.27.120:9201/{index_name}</a></p>
</li>
<li><p>查看索引字段</p>
<p>curl -XGET ‘172.23.27.120:9201/community/_mapping?pretty’ -H ‘Content-Type:application/json’</p>
</li>
<li><p>查看数据</p>
<p>curl -XGET ‘172.23.27.120:9200/communtiy/_search?pretty’ -H ‘Content-Type:application/json’</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>MongoDB基本语法</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/MongoDB/MongoDB%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h5 id="查询数据库"><a href="#查询数据库" class="headerlink" title="查询数据库"></a>查询数据库</h5><p>show dbs</p>
<h5 id="进入数据库"><a href="#进入数据库" class="headerlink" title="进入数据库"></a>进入数据库</h5><p>use {xxx};</p>
<h5 id="向数据库的指定collection中插入一个文档（此处以student集合为例）"><a href="#向数据库的指定collection中插入一个文档（此处以student集合为例）" class="headerlink" title="向数据库的指定collection中插入一个文档（此处以student集合为例）"></a>向数据库的指定collection中插入一个文档（此处以student集合为例）</h5><p>db.student.insert({</p>
<p>​    username:”Aaron”</p>
<p>});</p>
<h5 id="查询集合中的文档"><a href="#查询集合中的文档" class="headerlink" title="查询集合中的文档"></a>查询集合中的文档</h5><ul>
<li><p>查询所有文档</p>
<p>db.student.find();</p>
<p>返回的是数组，如果需要查询具体的属性需要添加索引</p>
<p>比如：db.student.find()[0].id;</p>
</li>
<li><p>查询指定文档</p>
<p>db.student.find({username:”Aaron”});</p>
</li>
</ul>
<h5 id="统计文档数量"><a href="#统计文档数量" class="headerlink" title="统计文档数量"></a>统计文档数量</h5><p>db.student.find().count();</p>
<h5 id="添加属性"><a href="#添加属性" class="headerlink" title="添加属性"></a>添加属性</h5><p>db.student.update({username:”Aaron”},{$set:{address:”beijing”}});</p>
<h5 id="修改文档属性"><a href="#修改文档属性" class="headerlink" title="修改文档属性"></a>修改文档属性</h5><ul>
<li><p>增加(sal属性≤1000的增加400)</p>
<p>db.student.updateMany({sal:{$let:1000}},{$inc:{sal:400}});</p>
</li>
</ul>
<h5 id="删除属性"><a href="#删除属性" class="headerlink" title="删除属性"></a>删除属性</h5><p>db.student.update.({username:”Aaron”},{$unset:{address:1}});</p>
<h5 id="替换文档"><a href="#替换文档" class="headerlink" title="替换文档"></a>替换文档</h5><p>db.student.replaceOne({username:”Aaron”},{username:”Marry”});</p>
<p> (一定需要注意此处替换之后是后面的文档完全替换掉前面的，也就是查询到username为Aaron的文档被替换为一个只有username为Marry的文档)</p>
<h5 id="插入内嵌文档"><a href="#插入内嵌文档" class="headerlink" title="插入内嵌文档"></a>插入内嵌文档</h5><p>MongoDB的文档属性值也可以是一个文档，也就是内嵌文档</p>
<p>db.student.update({username:”Cooper”},{$set:{hobby:{cities:[“beijing”,”NewYork”,”chendu”]}}});</p>
<h5 id="向内嵌文档中插入属性-想数组中插入属性使用push或者addToSet，不是set"><a href="#向内嵌文档中插入属性-想数组中插入属性使用push或者addToSet，不是set" class="headerlink" title="向内嵌文档中插入属性(想数组中插入属性使用push或者addToSet，不是set)"></a>向内嵌文档中插入属性(想数组中插入属性使用push或者addToSet，不是set)</h5><p>db.student.update({username:”Cooper”},{$push:{“hobby.cities”:”shenzhen”}});</p>
<p>db.student.update({username:”Cooper”},{$addToSet:{“hobby.cities”:”shenzhen”}});</p>
<p>push与addToSet的区别：</p>
<p>addToSet不可以可以重复添加元素，push可以</p>
<h5 id="查询内嵌文档属性-内嵌属性需要添加引号"><a href="#查询内嵌文档属性-内嵌属性需要添加引号" class="headerlink" title="查询内嵌文档属性(内嵌属性需要添加引号)"></a>查询内嵌文档属性(内嵌属性需要添加引号)</h5><p>db.student.find({“hobby.cities”:”chendu”});</p>
<h5 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h5><p>db.student.deleteOne({username:”Cooper”});</p>
<p>db.student.remove({“hobby.cities”:”beijing”});</p>
<h5 id="删除集合"><a href="#删除集合" class="headerlink" title="删除集合"></a>删除集合</h5><p>db.student.remove()</p>
<p>Db.student.drop()</p>
<h5 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h5><ol>
<li><p>“&gt;”</p>
<p>db.student.find({num:{$gt:500}});</p>
<ol start="2">
<li>“&lt;”</li>
</ol>
<p>db.student.find({num:{$lt:500}});</p>
<ol start="3">
<li>“=”</li>
</ol>
<p>db.student.find({num:{$eq:500}});</p>
<ol start="4">
<li>“&lt;xxx&lt;”</li>
</ol>
<p>db.student.find({num:{$gt:500,$lt:800}});</p>
<ol start="5">
<li>“&lt; xxx or  &gt;xxx”</li>
</ol>
<p>db.student.find({$or:[{num:{$gt:800,$lt:500}]});</p>
<ol start="6">
<li>“&gt;=”</li>
</ol>
<p>db.student.find({num:{$gte:500}});</p>
<ol start="7">
<li>设置显示数据的个数(以10条为例)</li>
</ol>
<p>db.student.find().limit(10);</p>
<ol start="8">
<li>查询20-30条数据</li>
</ol>
<p>db.student.find().skip(20).limit(10);</p>
</li>
<li><p>多属性查询</p>
<p>db.Object.find({“path”:/2021/,sz:{$lt:4194304}}).count()</p>
</li>
</ol>
<h5 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h5><ul>
<li><p>升序（按照sal属性排序）</p>
<p>db.student.find().sort({sal:1})  </p>
</li>
<li><p>降序</p>
<p>db.student.find().sort({sal:-1})  </p>
</li>
<li><p>多属性排序(先按照sal属性进行排序，如果sal相等，则按照id进行排序)</p>
<p>db.student.find().sort({sal:-1，id:1})  </p>
</li>
</ul>
<h5 id="投影-希望显示则属性标为1，id是默认显示的，如果不想显示则-id标志为0"><a href="#投影-希望显示则属性标为1，id是默认显示的，如果不想显示则-id标志为0" class="headerlink" title="投影(希望显示则属性标为1，id是默认显示的，如果不想显示则_id标志为0)"></a>投影(希望显示则属性标为1，id是默认显示的，如果不想显示则_id标志为0)</h5><p>db.student.find({},{sal:1,_id:0})</p>
<h5 id="效率对比"><a href="#效率对比" class="headerlink" title="效率对比"></a>效率对比</h5><p>向student中插入2000条数据</p>
<ol>
<li><p>for(var i = 1;i&lt;=2000;i++)</p>
<p>{</p>
<p>​    db.student.insert({num:i});</p>
<p>}</p>
<p>此方法执行效率较慢</p>
</li>
<li><p>var arr = [];</p>
<p>for(var i = 1;i&lt;=2000;i++)</p>
<p>{</p>
<p>​    arr.push({num:i})</p>
<p>}</p>
<p>db.student.insert(arr);</p>
<p>先把数字添加到数组中，最后统一添加到集合中，效率较高</p>
</li>
</ol>
]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB安装</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/MongoDB/MongoDB%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<ol>
<li><p>下载安装包</p>
</li>
<li><p>打开bin目录并在此打开terminal</p>
</li>
<li><p>指定创建数据库的位置</p>
<p><code>sudo ./mongod --dbpath=/Users/cooper/Documents/Code/Plugins/mongodb/data/db/</code></p>
<p>也可指定log的位置</p>
</li>
<li><p>打开的端口号为27017</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200831151941.png" alt="image-20200831151932966" style="zoom:200%;" />

<p>出现该字样代表服务已经打开</p>
</li>
<li><p>打开客户端</p>
<p>进入到bin目录下输入./mongo</p>
</li>
</ol>
]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>文档对应关系</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/MongoDB/%E6%96%87%E6%A1%A3%E5%AF%B9%E5%BA%94%E5%85%B3%E7%B3%BB/</url>
    <content><![CDATA[<h5 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h5><p>通过内嵌文档表现出一对一的关系</p>
<p>db.wifeAndhusband.insert([{</p>
<p>​        name:”黄蓉”,</p>
<p>​        husband:{</p>
<p>​        name:”郭靖”，</p>
<p>}</p>
<p>}，</p>
<p>{</p>
<p>​        name:”黑寡妇”,</p>
<p>​        husband:{</p>
<p>​        name:”浩克”，</p>
<p>}</p>
<p>}</p>
<p>])</p>
<h5 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h5><ul>
<li><p>通过内嵌文档来体现</p>
</li>
<li><p>通过id来实现</p>
<p>db.users.insert({username:”zbj”});</p>
<p>db.users.insert({username:”swk”});</p>
<p>db.order.insert({list:[‘香蕉’,’西瓜’,’苹果’],user_id:’5f4cb9d21afecac72006be92’});</p>
<p>var user_id=db.users.findOne({username:’swk’})._id;</p>
<p>db.order.find({user_id:’5f4cb9ca1afecac72006be91’});</p>
</li>
</ul>
<h5 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h5><p>通过id数组来实现，具体做法就是将一对多中的id改为id数组</p>
]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>一对多和多对一查询</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Mybatis/%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%92%8C%E5%A4%9A%E5%AF%B9%E4%B8%80%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h2 id="多对一的处理"><a href="#多对一的处理" class="headerlink" title="多对一的处理"></a>多对一的处理</h2><p>多对一的理解：</p>
<ul>
<li>多个学生对应一个老师</li>
<li>如果对于学生这边，就是一个多对一的现象，即从学生这边关联一个老师！</li>
</ul>
<blockquote>
<p>数据库设计</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200804212025.png" alt="img"></p>
<h4 id="按查询嵌套处理"><a href="#按查询嵌套处理" class="headerlink" title="按查询嵌套处理"></a>按查询嵌套处理</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">       <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">       <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.kuang.mapper.StudentMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   需求：获取所有学生及对应老师的信息</span></span><br><span class="line"><span class="comment">   思路：</span></span><br><span class="line"><span class="comment">       1. 获取所有学生的信息</span></span><br><span class="line"><span class="comment">       2. 根据获取的学生信息的老师ID-&gt;获取该老师的信息</span></span><br><span class="line"><span class="comment">       3. 思考问题，这样学生的结果集中应该包含老师，该如何处理呢，数据库中我们一般使用关联查询？</span></span><br><span class="line"><span class="comment">           1. 做一个结果集映射：StudentTeacher</span></span><br><span class="line"><span class="comment">           2. StudentTeacher结果集的类型为 Student</span></span><br><span class="line"><span class="comment">           3. 学生中老师的属性为teacher，对应数据库中为tid。</span></span><br><span class="line"><span class="comment">              多个 [1,...）学生关联一个老师=&gt; 一对一，一对多</span></span><br><span class="line"><span class="comment">           4. 查看官网找到：association – 一个复杂类型的关联；使用它来处理关联查询</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudents&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher&quot;</span>&gt;</span></span><br><span class="line">    select * from student</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--association关联属性 property属性名 javaType属性类型 column在多的一方的表中的列名--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span>  <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getTeacher&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   这里传递过来的id，只有一个属性的时候，下面可以写任何值</span></span><br><span class="line"><span class="comment">   association中column多参数配置：</span></span><br><span class="line"><span class="comment">       column=&quot;&#123;key=value,key=value&#125;&quot;</span></span><br><span class="line"><span class="comment">       其实就是键值对的形式，key是传给下个sql的取值名称，value是片段一中sql查询的字段名。</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span></span><br><span class="line">      select * from teacher where id = #&#123;tid&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="按结果嵌套处理"><a href="#按结果嵌套处理" class="headerlink" title="按结果嵌套处理"></a>按结果嵌套处理</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">按查询结果嵌套处理</span></span><br><span class="line"><span class="comment">思路：</span></span><br><span class="line"><span class="comment">   1. 直接查询出结果，进行结果集的映射</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudents2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher2&quot;</span> &gt;</span></span><br><span class="line">  select s.id sid, s.name sname , t.name tname</span><br><span class="line">  from student s,teacher t</span><br><span class="line">  where s.tid = t.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--关联对象property 关联对象在Student实体类中的属性--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>



<hr>
<h2 id="一对多的处理"><a href="#一对多的处理" class="headerlink" title="一对多的处理"></a>一对多的处理</h2><p>一对多的理解：</p>
<ul>
<li>一个老师拥有多个学生</li>
<li>如果对于老师这边，就是一个一对多的现象，即从一个老师下面拥有一群学生（集合）！</li>
</ul>
<h4 id="按结果嵌套处理-1"><a href="#按结果嵌套处理-1" class="headerlink" title="按结果嵌套处理"></a>按结果嵌套处理</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.kuang.mapper.TeacherMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   思路:</span></span><br><span class="line"><span class="comment">       1. 从学生表和老师表中查出学生id，学生姓名，老师姓名</span></span><br><span class="line"><span class="comment">       2. 对查询出来的操作做结果集映射</span></span><br><span class="line"><span class="comment">           1. 集合的话，使用collection！</span></span><br><span class="line"><span class="comment">               JavaType和ofType都是用来指定对象类型的</span></span><br><span class="line"><span class="comment">               JavaType是用来指定pojo中属性的类型</span></span><br><span class="line"><span class="comment">               ofType指定的是映射到list集合属性中pojo的类型。</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent&quot;</span>&gt;</span></span><br><span class="line">      select s.id sid, s.name sname , t.name tname, t.id tid</span><br><span class="line">      from student s,teacher t</span><br><span class="line">      where s.tid = t.id and t.id=#&#123;id&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span>  <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="按查询嵌套处理-1"><a href="#按查询嵌套处理-1" class="headerlink" title="按查询嵌套处理"></a>按查询嵌套处理</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent2&quot;</span>&gt;</span></span><br><span class="line">select * from teacher where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--column是一对多的外键 , 写的是一的主键的列名--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;ArrayList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getStudentByTeacherId&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentByTeacherId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">  select * from student where tid = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>1、关联-association</p>
<p>2、集合-collection</p>
<p>3、所以association是用于一对一和多对一，而collection是用于一对多的关系</p>
<p>4、JavaType和ofType都是用来指定对象类型的</p>
<ul>
<li>JavaType是用来指定pojo中属性的类型</li>
<li>ofType指定的是映射到list集合属性中pojo的类型。</li>
</ul>
<p><strong>注意说明：</strong></p>
<p>1、保证SQL的可读性，尽量通俗易懂</p>
<p>2、根据实际要求，尽量编写性能更高的SQL语句</p>
<p>3、注意属性名和字段不一致的问题</p>
<p>4、注意一对多和多对一 中：字段和属性对应的问题</p>
<p>5、尽量使用Log4j，通过日志来查看自己的错误</p>
]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>分页处理</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Mybatis/%E5%88%86%E9%A1%B5%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h4 id="分页目的"><a href="#分页目的" class="headerlink" title="分页目的"></a>分页目的</h4><p>​    在学习mybatis等持久层框架的时候，会经常对数据进行增删改查操作，使用最多的是对数据库进行查询操作，如果查询大量数据的时候，我们往往使用分页进行查询，也就是每次处理小部分数据，这样对数据库压力就在可控范围内。</p>
<p>使用Limit分页</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#语法</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">table</span> LIMIT stratIndex，pageSize</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">table</span> LIMIT <span class="number">5</span>,<span class="number">10</span>; <span class="operator">/</span><span class="operator">/</span> 检索记录行 <span class="number">6</span><span class="number">-15</span>  </span><br><span class="line"></span><br><span class="line">#为了检索从某一个偏移量到记录集的结束所有的记录行，可以指定第二个参数为 <span class="number">-1</span>：    </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">table</span> LIMIT <span class="number">95</span>,<span class="number">-1</span>; <span class="operator">/</span><span class="operator">/</span> 检索记录行 <span class="number">96</span><span class="operator">-</span>last.  </span><br><span class="line"></span><br><span class="line">#如果只给定一个参数，它表示返回最大的记录行数目：   </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">table</span> LIMIT <span class="number">5</span>; <span class="operator">/</span><span class="operator">/</span>检索前 <span class="number">5</span> 个记录行  </span><br><span class="line"></span><br><span class="line">#换句话说，LIMIT n 等价于 LIMIT <span class="number">0</span>,n。 </span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>动态sql</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Mybatis/%E5%8A%A8%E6%80%81SQL/</url>
    <content><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>什么是动态SQL：<strong>动态SQL指的是根据不同的查询条件 , 生成不同的Sql语句.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">官网描述：</span><br><span class="line">MyBatis 的强大特性之一便是它的动态 SQL。如果你有使用 JDBC 或其它类似框架的经验，你就能体会到根据不同条件拼接 SQL 语句的痛苦。例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL 这一特性可以彻底摆脱这种痛苦。</span><br><span class="line">虽然在以前使用动态 SQL 并非一件易事，但正是 MyBatis 提供了可以被用在任意 SQL 映射语句中的强大的动态 SQL 语言得以改进这种情形。</span><br><span class="line">动态 SQL 元素和 JSTL 或基于类似 XML 的文本处理器相似。在 MyBatis 之前的版本中，有很多元素需要花时间了解。MyBatis 3 大大精简了元素种类，现在只需学习原来一半的元素便可。MyBatis 采用功能强大的基于 OGNL 的表达式来淘汰其它大部分元素。</span><br><span class="line"></span><br><span class="line">  -------------------------------</span><br><span class="line">  - if</span><br><span class="line">  - choose (when, otherwise)</span><br><span class="line">  - trim (where, set)</span><br><span class="line">  - foreach</span><br><span class="line">  -------------------------------</span><br></pre></td></tr></table></figure>

<p>我们之前写的 SQL 语句都比较简单，如果有比较复杂的业务，我们需要写复杂的 SQL 语句，往往需要拼接，而拼接 SQL ，稍微不注意，由于引号，空格等缺失可能都会导致错误。</p>
<p>那么怎么去解决这个问题呢？这就要使用 mybatis 动态SQL，通过 if, choose, when, otherwise, trim, where, set, foreach等标签，可组合成非常灵活的SQL语句，从而在提高 SQL 语句的准确性的同时，也大大提高了开发人员的效率。</p>
<hr>
<h4 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h4><p><strong>需求：根据作者名字和博客名字来查询博客！如果作者名字为空，那么只根据博客名字查询，反之，则根据作者名来查询</strong></p>
<p>1、编写接口类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需求1</span></span><br><span class="line"><span class="function">List&lt;Blog&gt; <span class="title">queryBlogIf</span><span class="params">(Map map)</span></span>;</span><br></pre></td></tr></table></figure>

<p>2、编写SQL语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--需求1：</span></span><br><span class="line"><span class="comment">根据作者名字和博客名字来查询博客！</span></span><br><span class="line"><span class="comment">如果作者名字为空，那么只根据博客名字查询，反之，则根据作者名来查询</span></span><br><span class="line"><span class="comment">select * from blog where title = #&#123;title&#125; and author = #&#123;author&#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIf&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">  select * from blog where</span><br><span class="line">   <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">      title = #&#123;title&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">      and author = #&#123;author&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3、测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryBlogIf</span><span class="params">()</span></span>&#123;</span><br><span class="line">   SqlSession session = MybatisUtils.getSession();</span><br><span class="line">   BlogMapper mapper = session.getMapper(BlogMapper.class);</span><br><span class="line"></span><br><span class="line">   HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">   map.put(<span class="string">&quot;title&quot;</span>,<span class="string">&quot;Mybatis如此简单&quot;</span>);</span><br><span class="line">   map.put(<span class="string">&quot;author&quot;</span>,<span class="string">&quot;狂神说&quot;</span>);</span><br><span class="line">   List&lt;Blog&gt; blogs = mapper.queryBlogIf(map);</span><br><span class="line"></span><br><span class="line">   System.out.println(blogs);</span><br><span class="line"></span><br><span class="line">   session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样写我们可以看到，如果 author 等于 null，那么查询语句为 select * from user where title=#{title},但是如果title为空呢？那么查询语句为 select * from user where and author=#{author}，这是错误的 SQL 语句，如何解决呢？请看下面的 where 语句！</p>
<hr>
<h4 id="Where"><a href="#Where" class="headerlink" title="Where"></a>Where</h4><p>修改上面的SQL语句；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;select id=&quot;queryBlogIf&quot; parameterType=&quot;map&quot; resultType=&quot;blog&quot;&gt;</span><br><span class="line">  select * from blog</span><br><span class="line">   &lt;where&gt;</span><br><span class="line">       &lt;if test=&quot;title != null&quot;&gt;</span><br><span class="line">          title = #&#123;title&#125;</span><br><span class="line">       &lt;/if&gt;</span><br><span class="line">       &lt;if test=&quot;author != null&quot;&gt;</span><br><span class="line">          and author = #&#123;author&#125;</span><br><span class="line">       &lt;/if&gt;</span><br><span class="line">   &lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<p>这个“where”标签会知道如果它包含的标签中有返回值的话，它就插入一个‘where’。此外，如果标签返回的内容是以AND 或OR 开头的，则它会剔除掉。</p>
<hr>
<h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><p>同理，上面的对于查询 SQL 语句包含 where 关键字，如果在进行更新操作的时候，含有 set 关键词，我们怎么处理呢？</p>
<p>1、编写接口方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateBlog</span><span class="params">(Map map)</span></span>;</span><br></pre></td></tr></table></figure>

<p>2、sql配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注意set是用的逗号隔开--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBlog&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">  update blog</span><br><span class="line">     <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">            title = #&#123;title&#125;,</span><br><span class="line">         <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">            author = #&#123;author&#125;</span><br><span class="line">         <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">  where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3、测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateBlog</span><span class="params">()</span></span>&#123;</span><br><span class="line">   SqlSession session = MybatisUtils.getSession();</span><br><span class="line">   BlogMapper mapper = session.getMapper(BlogMapper.class);</span><br><span class="line"></span><br><span class="line">   HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">   map.put(<span class="string">&quot;title&quot;</span>,<span class="string">&quot;动态SQL&quot;</span>);</span><br><span class="line">   map.put(<span class="string">&quot;author&quot;</span>,<span class="string">&quot;秦疆&quot;</span>);</span><br><span class="line">   map.put(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;9d6a763f5e1347cebda43e2a32687a77&quot;</span>);</span><br><span class="line"></span><br><span class="line">   mapper.updateBlog(map);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="choose语句"><a href="#choose语句" class="headerlink" title="choose语句"></a>choose语句</h4><p>有时候，我们不想用到所有的查询条件，只想选择其中的一个，查询条件有一个满足即可，使用 choose 标签可以解决此类问题，类似于 Java 的 switch 语句</p>
<p>1、编写接口方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;Blog&gt; <span class="title">queryBlogChoose</span><span class="params">(Map map)</span></span>;</span><br></pre></td></tr></table></figure>

<p>2、sql配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogChoose&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">  select * from blog</span><br><span class="line">   <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">                title = #&#123;title&#125;</span><br><span class="line">           <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">              and author = #&#123;author&#125;</span><br><span class="line">           <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">              and views = #&#123;views&#125;</span><br><span class="line">           <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3、测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryBlogChoose</span><span class="params">()</span></span>&#123;</span><br><span class="line">   SqlSession session = MybatisUtils.getSession();</span><br><span class="line">   BlogMapper mapper = session.getMapper(BlogMapper.class);</span><br><span class="line"></span><br><span class="line">   HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">   map.put(<span class="string">&quot;title&quot;</span>,<span class="string">&quot;Java如此简单&quot;</span>);</span><br><span class="line">   map.put(<span class="string">&quot;author&quot;</span>,<span class="string">&quot;狂神说&quot;</span>);</span><br><span class="line">   map.put(<span class="string">&quot;views&quot;</span>,<span class="number">9999</span>);</span><br><span class="line">   List&lt;Blog&gt; blogs = mapper.queryBlogChoose(map);</span><br><span class="line"></span><br><span class="line">   System.out.println(blogs);</span><br><span class="line"></span><br><span class="line">   session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h4><p>有时候可能某个 sql 语句我们用的特别多，为了增加代码的重用性，简化代码，我们需要将这些代码抽取出来，然后使用时直接调用。</p>
<p><strong>提取SQL片段：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;if-title-author&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">      title = #&#123;title&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">      and author = #&#123;author&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>引用SQL片段：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIf&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">  select * from blog</span><br><span class="line">   <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 引用 sql 片段，如果refid 指定的不在本文件中，那么需要在前面加上 namespace --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;if-title-author&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 在这里还可以引用其他的 sql 片段 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<p>①、最好基于 单表来定义 sql 片段，提高片段的可重用性</p>
<p>②、在 sql 片段中不要包括 where</p>
<hr>
<h4 id="Foreach"><a href="#Foreach" class="headerlink" title="Foreach"></a>Foreach</h4><p>将数据库中前三个数据的id修改为1,2,3；</p>
<p>需求：我们需要查询 blog 表中 id 分别为1,2,3的博客信息</p>
<p>1、编写接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;Blog&gt; <span class="title">queryBlogForeach</span><span class="params">(Map map)</span></span>;</span><br></pre></td></tr></table></figure>

<p>2、编写SQL语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogForeach&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">  select * from blog</span><br><span class="line">   <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       collection:指定输入对象中的集合属性</span></span><br><span class="line"><span class="comment">       item:每次遍历生成的对象</span></span><br><span class="line"><span class="comment">       open:开始遍历时的拼接字符串</span></span><br><span class="line"><span class="comment">       close:结束时拼接的字符串</span></span><br><span class="line"><span class="comment">       separator:遍历对象之间需要拼接的字符串</span></span><br><span class="line"><span class="comment">       select * from blog where 1=1 and (id=1 or id=2 or id=3)</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span>  <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">open</span>=<span class="string">&quot;and (&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;or&quot;</span>&gt;</span></span><br><span class="line">          id=#&#123;id&#125;</span><br><span class="line">       <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3、测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryBlogForeach</span><span class="params">()</span></span>&#123;</span><br><span class="line">   SqlSession session = MybatisUtils.getSession();</span><br><span class="line">   BlogMapper mapper = session.getMapper(BlogMapper.class);</span><br><span class="line"></span><br><span class="line">   HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">   List&lt;Integer&gt; ids = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">   ids.add(<span class="number">1</span>);</span><br><span class="line">   ids.add(<span class="number">2</span>);</span><br><span class="line">   ids.add(<span class="number">3</span>);</span><br><span class="line">   map.put(<span class="string">&quot;ids&quot;</span>,ids);</span><br><span class="line"></span><br><span class="line">   List&lt;Blog&gt; blogs = mapper.queryBlogForeach(map);</span><br><span class="line"></span><br><span class="line">   System.out.println(blogs);</span><br><span class="line"></span><br><span class="line">   session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>其实动态 sql 语句的编写往往就是一个拼接的问题，为了保证拼接准确，我们最好首先要写原生的 sql 语句出来，然后在通过 mybatis 动态sql 对照着改，防止出错。多在实践中使用才是熟练掌握它的技巧。</p>
]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>缓存</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Mybatis/%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<h4 id="Mybatis缓存"><a href="#Mybatis缓存" class="headerlink" title="Mybatis缓存"></a>Mybatis缓存</h4><ul>
<li><p>MyBatis包含一个非常强大的查询缓存特性，它可以非常方便地定制和配置缓存。缓存可以极大的提升查询效率。</p>
</li>
<li><p>MyBatis系统中默认定义了两级缓存：<strong>一级缓存</strong>和<strong>二级缓存</strong></p>
</li>
<li><ul>
<li>默认情况下，只有一级缓存开启。（SqlSession级别的缓存，也称为本地缓存）</li>
<li>二级缓存需要手动开启和配置，他是基于namespace级别的缓存。</li>
<li>为了提高扩展性，MyBatis定义了缓存接口Cache。我们可以通过实现Cache接口来自定义二级缓存</li>
</ul>
</li>
</ul>
<hr>
<h4 id="一级缓存（默认系统自动开启）"><a href="#一级缓存（默认系统自动开启）" class="headerlink" title="一级缓存（默认系统自动开启）"></a>一级缓存（默认系统自动开启）</h4><p>一级缓存也叫本地缓存：</p>
<ul>
<li>与数据库同一次会话期间查询到的数据会放在本地缓存中。</li>
<li>以后如果需要获取相同的数据，直接从缓存中拿，没必须再去查询数据库；</li>
</ul>
<p>一级缓存是SqlSession级别的缓存，是一直开启的，我们关闭不了它；</p>
<p>一级缓存失效情况：没有使用到当前的一级缓存，效果就是，还需要再向数据库中发起一次查询请求！</p>
<p>1、sqlSession不同</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryUserById</span><span class="params">()</span></span>&#123;</span><br><span class="line">   SqlSession session = MybatisUtils.getSession();</span><br><span class="line">   SqlSession session2 = MybatisUtils.getSession();</span><br><span class="line">   UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">   UserMapper mapper2 = session2.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">   User user = mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">   System.out.println(user);</span><br><span class="line">   User user2 = mapper2.queryUserById(<span class="number">1</span>);</span><br><span class="line">   System.out.println(user2);</span><br><span class="line">   System.out.println(user==user2);</span><br><span class="line"></span><br><span class="line">   session.close();</span><br><span class="line">   session2.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>观察结果：发现发送了两条SQL语句！</p>
<p>结论：<strong>每个sqlSession中的缓存相互独立</strong></p>
<p>2、sqlSession相同，查询条件不同</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryUserById</span><span class="params">()</span></span>&#123;</span><br><span class="line">   SqlSession session = MybatisUtils.getSession();</span><br><span class="line">   UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">   UserMapper mapper2 = session.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">   User user = mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">   System.out.println(user);</span><br><span class="line">   User user2 = mapper2.queryUserById(<span class="number">2</span>);</span><br><span class="line">   System.out.println(user2);</span><br><span class="line">   System.out.println(user==user2);</span><br><span class="line"></span><br><span class="line">   session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>观察结果：发现发送了两条SQL语句！很正常的理解</p>
<p>结论：<strong>当前缓存中，不存在这个数据</strong></p>
<p>3、sqlSession相同，两次查询之间执行了增删改操作！</p>
<p>增加方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改用户</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(Map map)</span></span>;</span><br></pre></td></tr></table></figure>

<p>编写SQL</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">  update user set name = #&#123;name&#125; where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryUserById</span><span class="params">()</span></span>&#123;</span><br><span class="line">   SqlSession session = MybatisUtils.getSession();</span><br><span class="line">   UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">   User user = mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">   System.out.println(user);</span><br><span class="line"></span><br><span class="line">   HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">   map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;kuangshen&quot;</span>);</span><br><span class="line">   map.put(<span class="string">&quot;id&quot;</span>,<span class="number">4</span>);</span><br><span class="line">   mapper.updateUser(map);</span><br><span class="line"></span><br><span class="line">   User user2 = mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">   System.out.println(user2);</span><br><span class="line"></span><br><span class="line">   System.out.println(user==user2);</span><br><span class="line"></span><br><span class="line">   session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>观察结果：查询在中间执行了增删改操作后，重新执行了</p>
<p>结论：<strong>因为增删改操作可能会对当前数据产生影响</strong></p>
<p>4、sqlSession相同，手动清除一级缓存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryUserById</span><span class="params">()</span></span>&#123;</span><br><span class="line">   SqlSession session = MybatisUtils.getSession();</span><br><span class="line">   UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">   User user = mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">   System.out.println(user);</span><br><span class="line"></span><br><span class="line">   session.clearCache();<span class="comment">//手动清除缓存</span></span><br><span class="line"></span><br><span class="line">   User user2 = mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">   System.out.println(user2);</span><br><span class="line"></span><br><span class="line">   System.out.println(user==user2);</span><br><span class="line"></span><br><span class="line">   session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一级缓存就是一个map</p>
<hr>
<h4 id="二级缓存（需要手动配置）"><a href="#二级缓存（需要手动配置）" class="headerlink" title="二级缓存（需要手动配置）"></a>二级缓存（需要手动配置）</h4><ul>
<li><p>二级缓存也叫全局缓存，一级缓存作用域太低了，所以诞生了二级缓存</p>
</li>
<li><p>基于namespace级别的缓存，一个名称空间，对应一个二级缓存；</p>
</li>
<li><p>工作机制</p>
</li>
<li><ul>
<li><p>一个会话查询一条数据，这个数据就会被放在当前会话的一级缓存中；</p>
</li>
<li><p>如果当前会话关闭了，这个会话对应的一级缓存就没了；但是我们想要的是，会话关闭了，一级缓存中的数据被保存到二级缓存中；</p>
</li>
<li><p>新的会话查询信息，就可以从二级缓存中获取内容；</p>
</li>
<li><p>不同的mapper查出的数据会放在自己对应的缓存（map）中；</p>
</li>
</ul>
</li>
</ul>
<h5 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h5><p>1、开启全局缓存 【mybatis-config.xml】</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、去每个mapper.xml中配置使用二级缓存，这个配置非常简单；【xxxMapper.xml】</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">官方示例=====&gt;查看官方文档</span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span></span></span><br><span class="line"><span class="tag"> <span class="attr">eviction</span>=<span class="string">&quot;FIFO&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">flushInterval</span>=<span class="string">&quot;60000&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">size</span>=<span class="string">&quot;512&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">readOnly</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">这个更高级的配置创建了一个 FIFO 缓存，每隔 60 秒刷新，最多可以存储结果对象或列表的 512 个引用，而且返回的对象被认为是只读的，因此对它们进行修改可能会在不同线程中的调用者产生冲突。</span><br></pre></td></tr></table></figure>



<h5 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h5><ul>
<li>只要开启了二级缓存，我们在同一个Mapper中的查询，可以在二级缓存中拿到数据</li>
<li>查出的数据都会被默认先放在一级缓存中</li>
<li><strong>只有会话提交或者关闭以后</strong>，一级缓存中的数据才会转到二级缓存中</li>
</ul>
<hr>
<h4 id="缓存原理图"><a href="#缓存原理图" class="headerlink" title="缓存原理图"></a>缓存原理图</h4><p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200805155548" alt="img"></p>
<hr>
<h4 id="自定义配置缓存"><a href="#自定义配置缓存" class="headerlink" title="自定义配置缓存"></a>自定义配置缓存</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span> = <span class="string">“org.acme.FooMapper”</span> &gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span> = <span class="string">“org.mybatis.caches.ehcache.EhcacheCache”</span> /&gt;</span>  选择自己想要的缓存种类</span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>增删改</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Mybatis/%E5%A2%9E%E5%88%A0%E6%94%B9/</url>
    <content><![CDATA[<p>对于<strong>增删改</strong>的操作，每次执行时必须提交事务，也就是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">session.commit(); <span class="comment">//提交事务,重点!不写的话不会提交到数据库</span></span><br></pre></td></tr></table></figure>

<p>这句话如果不写的话，数据库中将不会有增删改的操作</p>
<p>也可以在利用**sqlSessionFactory.openSession(true)**这样的话可以在获取session的时候就自动打开了自动提交事务的功能</p>
]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>配置解析</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Mybatis/%E9%85%8D%E7%BD%AE%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<blockquote>
<p>核心配置文件</p>
</blockquote>
<ul>
<li>mybatis-config.xml 系统核心配置文件</li>
<li>MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。</li>
<li>能配置的内容如下：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">configuration（配置）</span><br><span class="line">properties（属性）</span><br><span class="line">settings（设置）</span><br><span class="line">typeAliases（类型别名）</span><br><span class="line">typeHandlers（类型处理器）</span><br><span class="line">objectFactory（对象工厂）</span><br><span class="line">plugins（插件）</span><br><span class="line">environments（环境配置）</span><br><span class="line">environment（环境变量）</span><br><span class="line">transactionManager（事务管理器）</span><br><span class="line">dataSource（数据源）</span><br><span class="line">databaseIdProvider（数据库厂商标识）</span><br><span class="line">mappers（映射器）</span><br><span class="line">&lt;!-- 注意元素节点的顺序！顺序不对会报错 --&gt;</span><br></pre></td></tr></table></figure>

<p>我们可以阅读 mybatis-config.xml 上面的dtd的头文件！</p>
<blockquote>
<p>environments元素</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;...&quot;</span> <span class="attr">value</span>=<span class="string">&quot;...&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>配置MyBatis的多套运行环境，将SQL映射到多个不同的数据库上，必须指定其中一个为默认运行环境（通过default指定）</p>
</li>
<li><p>子元素节点：<strong>environment</strong></p>
</li>
<li><ul>
<li><p>dataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源。</p>
</li>
<li><p>数据源是必须配置的。</p>
</li>
<li><p>有三种内建的数据源类型</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">type=&quot;[UNPOOLED|POOLED|JNDI]&quot;）</span><br></pre></td></tr></table></figure></li>
<li><p>unpooled：这个数据源的实现只是每次被请求时打开和关闭连接。</p>
</li>
<li><p><strong>pooled</strong>：这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来 , 这是一种使得并发 Web 应用快速响应请求的流行处理方式。</p>
</li>
<li><p>jndi：这个数据源的实现是为了能在如 Spring 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的引用。</p>
</li>
<li><p>数据源也有很多第三方的实现，比如dbcp，c3p0，druid等等….</p>
</li>
<li><p>详情：点击查看官方文档</p>
</li>
<li><p>这两种事务管理器类型都不需要设置任何属性。</p>
</li>
<li><p>具体的一套环境，通过设置id进行区别，id保证唯一！</p>
</li>
<li><p>子元素节点：transactionManager - [ 事务管理器 ]</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 语法 --&gt;</span><br><span class="line">&lt;transactionManager type=&quot;[ JDBC | MANAGED ]&quot;/&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>子元素节点：<strong>数据源（dataSource）</strong></p>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>mappers元素</p>
</blockquote>
<p><strong>mappers</strong></p>
<ul>
<li>映射器 : 定义映射SQL语句文件</li>
<li>既然 MyBatis 的行为其他元素已经配置完了，我们现在就要定义 SQL 映射语句了。但是首先我们需要告诉 MyBatis 到哪里去找到这些语句。Java 在自动查找这方面没有提供一个很好的方法，所以最佳的方式是告诉 MyBatis 到哪里去找映射文件。你可以使用相对于类路径的资源引用， 或完全限定资源定位符（包括 <code>file:///</code> 的 URL），或类名和包名等。映射器是MyBatis中最核心的组件之一，在MyBatis 3之前，只支持xml映射器，即：所有的SQL语句都必须在xml文件中配置。而从MyBatis 3开始，还支持接口映射器，这种映射器方式允许以Java代码的方式注解定义SQL语句，非常简洁。</li>
</ul>
<p><strong>引入资源方式</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/builder/PostMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用完全限定资源定位符（URL） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">&quot;file:///var/mappers/AuthorMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">使用映射器接口实现类的完全限定类名</span></span><br><span class="line"><span class="comment">需要配置文件名称和接口名称一致，并且位于同一目录下</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.builder.AuthorMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">将包内的映射器接口实现全部注册为映射器</span></span><br><span class="line"><span class="comment">但是需要配置文件名称和接口名称一致，并且位于同一目录下</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;org.mybatis.builder&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>Mapper文件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">       <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">       <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.kuang.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>namespace中文意思：命名空间，作用如下：</p>
</li>
<li><ul>
<li>namespace的命名必须跟某个接口同名</li>
<li>接口中的方法与映射文件中sql语句id应该一一对应</li>
</ul>
</li>
<li><ol>
<li>namespace和子元素的id联合保证唯一  , 区别不同的mapper</li>
<li>绑定DAO接口</li>
<li>namespace命名规则 : 包名+类名</li>
</ol>
</li>
</ul>
<p>MyBatis 的真正强大在于它的映射语句，这是它的魔力所在。由于它的异常强大，映射器的 XML 文件就显得相对简单。如果拿它跟具有相同功能的 JDBC 代码进行对比，你会立即发现省掉了将近 95% 的代码。MyBatis 为聚焦于 SQL 而构建，以尽可能地为你减少麻烦。</p>
<blockquote>
<p>Properties优化</p>
</blockquote>
<p>数据库这些属性都是可外部配置且可动态替换的，既可以在典型的 Java 属性文件中配置，亦可通过 properties 元素的子元素来传递。具体的官方文档</p>
<p>我们来优化我们的配置文件</p>
<p>第一步 ; 在资源目录下新建一个db.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>

<p>第二步 : 将文件导入properties 配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--导入properties文件--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mapper/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>更多操作，可以查看官方文档！【演示带领学习】</p>
<ul>
<li>配置文件优先级问题</li>
<li>新特性：使用占位符</li>
</ul>
<blockquote>
<p>typeAliases优化</p>
</blockquote>
<p>类型别名是为 Java 类型设置一个短的名字。它只和 XML 配置有关，存在的意义仅在于用来减少类完全限定名的冗余。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置别名,注意顺序--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当这样配置时，<code>User</code>可以用在任何使用<code>com.kuang.pojo.User</code>的地方。</p>
<p>也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，比如:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.kuang.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>每一个在包 <code>com.kuang.pojo</code> 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。</p>
<p>若有注解，则别名为其注解值。见下面的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Alias(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>去官网查看一下Mybatis默认的一些类型别名！</p>
<blockquote>
<p>其他配置浏览</p>
</blockquote>
<p><strong>设置</strong></p>
<ul>
<li><p>设置（settings）相关 =&gt; 查看帮助文档</p>
</li>
<li><ul>
<li>懒加载</li>
<li>日志实现</li>
<li>缓存开启关闭</li>
</ul>
</li>
<li><p>一个配置完整的 settings 元素的示例如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;multipleResultSetsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useColumnLabel&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useGeneratedKeys&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PARTIAL&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingUnknownColumnBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;WARNING&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultExecutorType&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SIMPLE&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultStatementTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;25&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultFetchSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;safeRowBoundsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;localCacheScope&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SESSION&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;jdbcTypeForNull&quot;</span> <span class="attr">value</span>=<span class="string">&quot;OTHER&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadTriggerMethods&quot;</span> <span class="attr">value</span>=<span class="string">&quot;equals,clone,hashCode,toString&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>类型处理器</strong></p>
<ul>
<li>无论是 MyBatis 在预处理语句（PreparedStatement）中设置一个参数时，还是从结果集中取出一个值时， 都会用类型处理器将获取的值以合适的方式转换成 Java 类型。</li>
<li>你可以重写类型处理器或创建你自己的类型处理器来处理不支持的或非标准的类型。【了解即可】</li>
</ul>
<p><strong>对象工厂</strong></p>
<ul>
<li>MyBatis 每次创建结果对象的新实例时，它都会使用一个对象工厂（ObjectFactory）实例来完成。</li>
<li>默认的对象工厂需要做的仅仅是实例化目标类，要么通过默认构造方法，要么在参数映射存在的时候通过有参构造方法来实例化。</li>
<li>如果想覆盖对象工厂的默认行为，则可以通过创建自己的对象工厂来实现。【了解即可】</li>
</ul>
<blockquote>
<p>生命周期和作用域</p>
</blockquote>
<p><strong>作用域（Scope）和生命周期</strong></p>
<p>理解我们目前已经讨论过的不同作用域和生命周期类是至关重要的，因为错误的使用会导致非常严重的并发问题。</p>
<p>我们可以先画一个流程图，分析一下Mybatis的执行过程！</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200803163346.png" alt="img"></p>
<p><strong>作用域理解</strong></p>
<ul>
<li>SqlSessionFactoryBuilder 的作用在于创建 SqlSessionFactory，创建成功后，SqlSessionFactoryBuilder 就失去了作用，所以它只能存在于创建 SqlSessionFactory 的方法中，而不要让其长期存在。因此 <strong>SqlSessionFactoryBuilder 实例的最佳作用域是方法作用域</strong>（也就是局部方法变量）。</li>
<li>SqlSessionFactory 可以被认为是一个数据库连接池，它的作用是创建 SqlSession 接口对象。因为 MyBatis 的本质就是 Java 对数据库的操作，所以 SqlSessionFactory 的生命周期存在于整个 MyBatis 的应用之中，所以一旦创建了 SqlSessionFactory，就要长期保存它，直至不再使用 MyBatis 应用，所以可以认为 SqlSessionFactory 的生命周期就等同于 MyBatis 的应用周期。</li>
<li>由于 SqlSessionFactory 是一个对数据库的连接池，所以它占据着数据库的连接资源。如果创建多个 SqlSessionFactory，那么就存在多个数据库连接池，这样不利于对数据库资源的控制，也会导致数据库连接资源被消耗光，出现系统宕机等情况，所以尽量避免发生这样的情况。</li>
<li>因此在一般的应用中我们往往希望 SqlSessionFactory 作为一个单例，让它在应用中被共享。所以说 <strong>SqlSessionFactory 的最佳作用域是应用作用域。</strong></li>
<li>如果说 SqlSessionFactory 相当于数据库连接池，那么 SqlSession 就相当于一个数据库连接（Connection 对象），你可以在一个事务里面执行多条 SQL，然后通过它的 commit、rollback 等方法，提交或者回滚事务。所以它应该存活在一个业务请求中，处理完整个请求后，应该关闭这条连接，让它归还给 SqlSessionFactory，否则数据库资源就很快被耗费精光，系统就会瘫痪，所以用 try…catch…finally… 语句来保证其正确关闭。</li>
<li><strong>所以 SqlSession 的最佳的作用域是请求或方法作用域。</strong></li>
</ul>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200803163354" alt="img"></p>
]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ使用情况</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/RabbitMQ/RabbbitMQ%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5/</url>
    <content><![CDATA[<h4 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h4><p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200904210658.png" alt="image-20200904210654601"></p>
<h4 id="应用解耦"><a href="#应用解耦" class="headerlink" title="应用解耦"></a>应用解耦</h4><p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200904210803.png" alt="image-20200904210801377"></p>
<h4 id="流量削峰"><a href="#流量削峰" class="headerlink" title="流量削峰"></a>流量削峰</h4><p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200904211618.png" alt="image-20200904211616017"></p>
]]></content>
      <categories>
        <category>RabbitMQ</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ安装</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/RabbitMQ/RabbitMQ%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h3 id="Linux环境下安装RabbitMQ"><a href="#Linux环境下安装RabbitMQ" class="headerlink" title="Linux环境下安装RabbitMQ"></a>Linux环境下安装RabbitMQ</h3><h5 id="下载对应的包（3个包）"><a href="#下载对应的包（3个包）" class="headerlink" title="下载对应的包（3个包）"></a>下载对应的包（3个包）</h5><ol>
<li><p>erlang</p>
<p>下载的版本要与RabbitMQ对应<em><a href="https://www.rabbitmq.com/which-erlang.html">https://www.rabbitmq.com/which-erlang.html</a></em></p>
<p><a href="https://dl.bintray.com/rabbitmq-erlang/rpm/erlang/22/el/7/x86_64/">erlang版本</a></p>
<ol start="2">
<li>RabbitMQ</li>
</ol>
<p><a href="https://www.rabbitmq.com/download.html">https://www.rabbitmq.com/download.html</a></p>
<ol start="3">
<li>依赖包</li>
</ol>
<p>rabbitmq安装依赖于socat，所以需要下载socat。</p>
</li>
</ol>
<p>　　socat下载地址：<a href="http://repo.iotti.biz/CentOS/6/x86_64/[socat-1.7.3.2-1.el6.lux.x86_64.rpm](http://repo.iotti.biz/CentOS/6/x86_64/socat-1.7.3.2-1.el6.lux.x86_64.rpm)">http://repo.iotti.biz/CentOS/6/x86_64/[socat-1.7.3.2-1.el6.lux.x86_64.rpm](http://repo.iotti.biz/CentOS/6/x86_64/socat-1.7.3.2-1.el6.lux.x86_64.rpm)</a></p>
<p>　　根据自身需求下载对应系统socat依赖：(<a href="http://repo.iotti.biz/CentOS/">http://repo.iotti.biz/CentOS/</a>)</p>
<h5 id="安装包（一定要注意安装顺序）"><a href="#安装包（一定要注意安装顺序）" class="headerlink" title="安装包（一定要注意安装顺序）"></a>安装包（一定要注意安装顺序）</h5><p><strong>一定按照以下顺序安装</strong>：</p>
<p>　　① rpm -ivh erlang-22.2.4-1.el7.x86_64.rpm </p>
<p>　　②rpm -ivh socat-1.7.3.2-1.el6.lux.x86_64.rpm</p>
<p>　　③ rpm -ivh rabbitmq-server-3.8.8-1.el7.noarch.rpm </p>
<p><a href="https://www.cnblogs.com/qinghuaL/p/11597695.html">如果安装版本失败了，则可以卸载重新安装</a></p>
<h5 id="配置Rabbit-config文件"><a href="#配置Rabbit-config文件" class="headerlink" title="配置Rabbit.config文件"></a>配置Rabbit.config文件</h5><ul>
<li><p>有可能在/usr/share/doc/rabbitmq-server-3.8.8/目录下有Rabbit.config的模板</p>
</li>
<li><p>找到后修改第61行</p>
</li>
</ul>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200907213456.png" alt="image-20200907213450706" style="zoom:50%;" />

<p>​        %%去除，并将其后的“,”去除</p>
<ul>
<li><p>将其复制到 /etc/rabbitmq/目录下</p>
<p>如果没有找到，则自己复制一份config（<a href="https://blog.csdn.net/xiaoming1563/article/details/82385486%EF%BC%89">https://blog.csdn.net/xiaoming1563/article/details/82385486）</a></p>
</li>
</ul>
<h5 id="安装RabbitMQ的WEB插件"><a href="#安装RabbitMQ的WEB插件" class="headerlink" title="安装RabbitMQ的WEB插件"></a>安装RabbitMQ的WEB插件</h5><p><code>rabbitmq-plugins enable rabbitmq_management</code></p>
<h5 id="如果无法通过guest进行访问"><a href="#如果无法通过guest进行访问" class="headerlink" title="如果无法通过guest进行访问"></a>如果无法通过guest进行访问</h5><p>新增用户进行访问即可</p>
<ul>
<li><p>查询用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rabbitmqctl list_users</span><br></pre></td></tr></table></figure></li>
<li><p>新增用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rabbitmqctl add_user <span class="string">&#x27;username&#x27;</span> <span class="string">&#x27;password&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li><p>授权（虚拟机授权）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rabbitmqctl set_permissions -p <span class="string">&quot;/&quot;</span> <span class="string">&quot;username&quot;</span> <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>设置用户角色（必须设置，否则无法登陆）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rabbitmqctl set_user_tags username administrator</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="访问端口"><a href="#访问端口" class="headerlink" title="访问端口"></a>访问端口</h5><p><a href="http://ip:15672/">http://ip:15672</a></p>
<p>​        </p>
]]></content>
      <categories>
        <category>RabbitMQ</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ集群</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/RabbitMQ/RabbitMQ%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<h4 id="集群架构"><a href="#集群架构" class="headerlink" title="集群架构"></a>集群架构</h4><h5 id="普通集群（副本集群）"><a href="#普通集群（副本集群）" class="headerlink" title="普通集群（副本集群）"></a>普通集群（副本集群）</h5><p>​    默认情况下：RabbitMQ代理所有操作所需的所有数据/状态将跨所有节点复制，这方面的一个例外是消息队列，默认情况下，消息队列位于一个节点上，尽管它们是可以从所有节点看到和访问。</p>
<p>​    也就说从节点只复制了除了消息队列以外的所有信息（例如交换机的信息），但是就是没有复制消息队列的信息，<font color=red><strong>那么当主节点宕机之后，消息队列也就会随主节点的消失而消失了，无法通过从节点进行访问</strong></font>。</p>
<p>​    架构图：</p>
<p>​        <img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200907142249.png" alt="image-20200907142236833" style="zoom:50%;position=center" /></p>
<p>​    核心缺陷：</p>
<p>​        <strong>主节点宕机之后，消息队列也就会随主节点的消失而消失了，无法通过从节点进行访问</strong></p>
<p>​    </p>
<h5 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h5><p>​        按照Rabbit安装教程安装好之后</p>
<ul>
<li><p>编辑/etc/hosts  添加主从节点</p>
<ul>
<li><p>同步erlang cookie</p>
<p>scp /var/lib/rabbitmq/.erlang.cookie  root@ip:/var/lib/rabbitmq/</p>
</li>
</ul>
</li>
<li><p>master后台启动</p>
</li>
<li><p>从节点停止启动</p>
<p><code>rabbitmq stop_app</code></p>
</li>
<li><p>从节点加入集群</p>
<p><code>rabbitmqctl join_cluster rabbit@&#123;主节点&#125;</code></p>
</li>
<li><p>启动从节点</p>
<p><code>rabbitmq start_app</code></p>
</li>
</ul>
<h5 id="镜像集群"><a href="#镜像集群" class="headerlink" title="镜像集群"></a>镜像集群</h5><p><font color=red><strong>当主节点宕机之后，消息队列不会随主节点的消失而消失了，可以通过从节点进行访问</strong></font></p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200908103655.png" alt="image-20200908103649744" style="zoom:50%;" />

<p>在原来普通集群的基础上进行配置</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200908105025.png" alt="image-20200908104515651" style="zoom:50%;" />

]]></content>
      <categories>
        <category>RabbitMQ</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合RabbitMQ</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/RabbitMQ/SpringBoot%E6%95%B4%E5%90%88RabbitMQ/</url>
    <content><![CDATA[<h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>



<h4 id="五种Provider"><a href="#五种Provider" class="headerlink" title="五种Provider"></a>五种Provider</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">RabbitTemplate template;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHelloWorld</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    template.convertAndSend(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWork</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">        template.convertAndSend(<span class="string">&quot;work&quot;</span>,<span class="string">&quot;Hello World &quot;</span>+i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFanout</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    template.convertAndSend(<span class="string">&quot;springboot_logs&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;Fanout模型&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDirect</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    template.convertAndSend(<span class="string">&quot;direct&quot;</span>,<span class="string">&quot;error&quot;</span>,<span class="string">&quot;direct模型&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTopic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    template.convertAndSend(<span class="string">&quot;topic&quot;</span>,<span class="string">&quot;error.error&quot;</span>,<span class="string">&quot;topic模型&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="五种Consumer"><a href="#五种Consumer" class="headerlink" title="五种Consumer"></a>五种Consumer</h4><h5 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queuesToDeclare = @Queue(&quot;hello&quot;))</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(String message)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;message   &quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Work"><a href="#Work" class="headerlink" title="Work"></a>Work</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queuesToDeclare = @Queue(&quot;work&quot;))</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive1</span><span class="params">(String message)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;message1 &quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queuesToDeclare = @Queue(&quot;work&quot;))</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive2</span><span class="params">(String message)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;message2 &quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Direct"><a href="#Direct" class="headerlink" title="Direct"></a>Direct</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectConsumer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RabbitListener(bindings = &#123;</span></span><br><span class="line"><span class="meta">            @QueueBinding(</span></span><br><span class="line"><span class="meta">                    value = @Queue,//未指定queue名称则创建临时queue</span></span><br><span class="line"><span class="meta">                    exchange = @Exchange(value = &quot;direct&quot;,type = &quot;direct&quot;),//绑定交换机 默认类型时direct</span></span><br><span class="line"><span class="meta">                    key = &#123;&quot;info&quot;,&quot;error&quot;&#125;</span></span><br><span class="line"><span class="meta">            )</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive1</span><span class="params">(String message)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1 &quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = &#123;</span></span><br><span class="line"><span class="meta">            @QueueBinding(</span></span><br><span class="line"><span class="meta">                    value = @Queue,//未指定queue名称则创建临时queue</span></span><br><span class="line"><span class="meta">                    exchange = @Exchange(value = &quot;direct&quot;,type = &quot;direct&quot;),//绑定交换机</span></span><br><span class="line"><span class="meta">                    key = &#123;&quot;info&quot;&#125;</span></span><br><span class="line"><span class="meta">            )</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive2</span><span class="params">(String message)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;2 &quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Topic"><a href="#Topic" class="headerlink" title="Topic"></a>Topic</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicConsumer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RabbitListener(bindings = &#123;</span></span><br><span class="line"><span class="meta">            @QueueBinding(</span></span><br><span class="line"><span class="meta">                    value = @Queue,//未指定queue名称则创建临时queue</span></span><br><span class="line"><span class="meta">                    exchange = @Exchange(value = &quot;topic&quot;,type = &quot;topic&quot;),//绑定交换机 默认类型时direct</span></span><br><span class="line"><span class="meta">                    key = &#123;&quot;info.*&quot;,&quot;error.*&quot;&#125;</span></span><br><span class="line"><span class="meta">            )</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive1</span><span class="params">(String message)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1 &quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = &#123;</span></span><br><span class="line"><span class="meta">            @QueueBinding(</span></span><br><span class="line"><span class="meta">                    value = @Queue,//未指定queue名称则创建临时queue</span></span><br><span class="line"><span class="meta">                    exchange = @Exchange(value = &quot;topic&quot;,type = &quot;topic&quot;),//绑定交换机</span></span><br><span class="line"><span class="meta">                    key = &#123;&quot;info.#&quot;,&quot;#.error.#&quot;&#125;</span></span><br><span class="line"><span class="meta">            )</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive2</span><span class="params">(String message)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;2 &quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Fanout"><a href="#Fanout" class="headerlink" title="Fanout"></a>Fanout</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutConsumer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RabbitListener(bindings = &#123;</span></span><br><span class="line"><span class="meta">            @QueueBinding(</span></span><br><span class="line"><span class="meta">                    value = @Queue,//未指定queue名称则创建临时queue</span></span><br><span class="line"><span class="meta">                    exchange = @Exchange(value = &quot;springboot_logs&quot;,type = &quot;fanout&quot;)//绑定交换机</span></span><br><span class="line"><span class="meta">            )</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive1</span><span class="params">(String message)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1 &quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = &#123;</span></span><br><span class="line"><span class="meta">            @QueueBinding(</span></span><br><span class="line"><span class="meta">                    value = @Queue,//未指定queue名称则创建临时queue</span></span><br><span class="line"><span class="meta">                    exchange = @Exchange(value = &quot;springboot_logs&quot;,type = &quot;fanout&quot;)</span></span><br><span class="line"><span class="meta">            )</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive2</span><span class="params">(String message)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;2 &quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>RabbitMQ</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ模型</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/RabbitMQ/rabbitmq%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h4 id="直连模型"><a href="#直连模型" class="headerlink" title="直连模型"></a>直连模型</h4><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200904110719.png" alt="image-20200904110714767" style="zoom:50%;" />

<p>在上图的模型中，有以下概念：</p>
<ul>
<li>P:生产者，也就是需要发送消息的程序</li>
<li>C:消费者，消息的接收者</li>
<li>queue：消息队列，可以缓存消息，生产者往其中投递消息，消费者从其中取出消息</li>
</ul>
<p>🌰</p>
<p>Provider</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line"><span class="comment">//设置连接主机</span></span><br><span class="line">factory.setHost(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line"><span class="comment">//设置连接端口</span></span><br><span class="line">factory.setPort(<span class="number">5672</span>);</span><br><span class="line"><span class="comment">//设置连接虚拟主机</span></span><br><span class="line">factory.setVirtualHost(<span class="string">&quot;/ems&quot;</span>);</span><br><span class="line"><span class="comment">//设置账户密码</span></span><br><span class="line">factory.setUsername(<span class="string">&quot;ems&quot;</span>);</span><br><span class="line">factory.setPassword(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取连接对象</span></span><br><span class="line">Connection connection = factory.newConnection();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取连接通道</span></span><br><span class="line">Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定对应的消息队列</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 参数s 队列名称  不存在则自动创建</span></span><br><span class="line"><span class="comment"> * 参数b 队列是否需要持久化  （不包括消息持久化）</span></span><br><span class="line"><span class="comment"> * 参数b1 是否需要独占队列(当前队列只运行当前连接可用？)</span></span><br><span class="line"><span class="comment"> * 参数b2 是否在消费完成后自动删除队列</span></span><br><span class="line"><span class="comment"> * 参数 map  额外的附加参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">channel.queueDeclare(<span class="string">&quot;hello&quot;</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 参数s 交换机名称</span></span><br><span class="line"><span class="comment"> * 参数s1 路由规则</span></span><br><span class="line"><span class="comment"> * 参数3 传递消息额外设置  (例如消息持久化 MessageProperties.PERSISTENT_TEXT_PLAIN)</span></span><br><span class="line"><span class="comment"> * 参数4  消息的具体内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">channel.basicPublish(<span class="string">&quot;&quot;</span>,<span class="string">&quot;hello&quot;</span>,<span class="keyword">null</span>,<span class="string">&quot;hello rabbotmq&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">channel.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure>

<p>Consumer</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line"> <span class="comment">//设置连接主机</span></span><br><span class="line"> factory.setHost(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line"> <span class="comment">//设置连接端口</span></span><br><span class="line"> factory.setPort(<span class="number">5672</span>);</span><br><span class="line"> <span class="comment">//设置连接虚拟主机</span></span><br><span class="line"> factory.setVirtualHost(<span class="string">&quot;/ems&quot;</span>);</span><br><span class="line"> <span class="comment">//设置账户密码</span></span><br><span class="line"> factory.setUsername(<span class="string">&quot;ems&quot;</span>);</span><br><span class="line"> factory.setPassword(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//获取连接对象</span></span><br><span class="line"> Connection connection = factory.newConnection();</span><br><span class="line"></span><br><span class="line"> <span class="comment">//获取连接通道</span></span><br><span class="line"> Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line"> <span class="comment">//绑定对应的消息队列  要保证生产者和消费者各项参数严格对应上 ，比如说生产者持久化了，那么消费者也需要持久化</span></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 参数s 队列名称  不存在则自动创建</span></span><br><span class="line"><span class="comment">  * 参数b 队列是否需要持久化</span></span><br><span class="line"><span class="comment">  * 参数b1 是否需要独占队列(当前队列只运行当前连接可用？)</span></span><br><span class="line"><span class="comment">  * 参数b2 是否在消费完成后自动删除队列  （消费者断开连接之后队列才会被删除掉）</span></span><br><span class="line"><span class="comment">  * 参数 map  额外的附加参数</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> channel.queueDeclare(<span class="string">&quot;hello&quot;</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//接受是一个多线程，持续监听队列中的消息 最好不要关闭连接  在测试的时候不能再@Test注释的方法中写，因为@Test修饰的方法不支持多线程</span></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 参数1 队列 名称</span></span><br><span class="line"><span class="comment">  * 参数2 开始消息的自动确认</span></span><br><span class="line"><span class="comment">  * 参数3 消费时的回调接口</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">channel.basicConsume(<span class="string">&quot;hello&quot;</span>,<span class="keyword">true</span>,<span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(body));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h4 id="任务模型"><a href="#任务模型" class="headerlink" title="任务模型"></a>任务模型</h4><p>​    当消息处理比较耗时时，生成消息的速度会远远大于消息的消费速度，长此以往，消息就会堆积越来越多，无法及时处理。此时可以使用任务模型（work模型）：<strong>让多个消费者绑定到一个队列，共同消费队列中的信息</strong>。队列中的消息一旦消费就会消失，因此任务不会被重复执行。</p>
<p>​    任务队列默认在分发任务的时候是平均分配任务的，比如有两个消费者，那么每个消费者接收到任务是总任务的一般（默认情况下即使两个消费者的工作效率不相同也会平均任务）</p>
<ul>
<li>P: 生产者 任务的发布者</li>
<li>C1: 消费者-1 领取任务并且完成任务，假设完成速度较慢</li>
<li>C2: 消费者-2 领取任务并且完成任务，假设完成速度较快</li>
</ul>
<h5 id="基础班（平均主义）"><a href="#基础班（平均主义）" class="headerlink" title="基础班（平均主义）"></a>基础班（平均主义）</h5><p>🌰</p>
<p>Provider</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> Channel channel = utils.getChannel();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绑定对应的消息队列</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数s 队列名称  不存在则自动创建</span></span><br><span class="line"><span class="comment">     * 参数b 队列是否需要持久化  （不包括消息持久化）</span></span><br><span class="line"><span class="comment">     * 参数b1 是否需要独占队列(当前队列只运行当前连接可用？)</span></span><br><span class="line"><span class="comment">     * 参数b2 是否在消费完成后自动删除队列</span></span><br><span class="line"><span class="comment">     * 参数 map  额外的附加参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    channel.queueDeclare(<span class="string">&quot;hello&quot;</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        channel.basicPublish(<span class="string">&quot;&quot;</span>,<span class="string">&quot;hello&quot;</span>,<span class="keyword">null</span>,(i+<span class="string">&quot;   hello rabbotmq&quot;</span>).getBytes());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Consumer1，2代码都相同</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RabbitMQUtils utils = <span class="keyword">new</span> RabbitMQUtils();</span><br><span class="line">Channel channel = utils.getChannel();</span><br><span class="line"></span><br><span class="line">channel.queueDeclare(<span class="string">&quot;hello&quot;</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//接受是一个多线程，持续监听队列中的消息 最好不要关闭连接  在测试的时候不能再@Test注释的方法中写，因为@Test修饰的方法不支持多线程</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 参数1 队列 名称</span></span><br><span class="line"><span class="comment"> * 参数2 开始消息的自动确认</span></span><br><span class="line"><span class="comment"> * 参数3 消费时的回调接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">channel.basicConsume(<span class="string">&quot;hello&quot;</span>,<span class="keyword">true</span>,<span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(body));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<p><strong>缺陷：</strong></p>
<p>​        如果两个消费者有一个消费者突然宕机，但是它才处理了自己消息总量的一半，那么剩下的消息就会丢失掉。</p>
<h5 id="进阶版（能者多劳）"><a href="#进阶版（能者多劳）" class="headerlink" title="进阶版（能者多劳）"></a>进阶版（能者多劳）</h5><p><code>channel.basicConsume(&quot;hello&quot;,true,new DefaultConsumer(channel))</code></p>
<p><strong>此处的的第二个参数是autoAck，如果为true则自动帮消费者确认收到消息（也就是不管你消费者有没有执行完都一股脑全部都把消息给你，不管你有没有有消化完），否则不自动确认必须手动确认才会接受下一个消息。</strong></p>
<p>Provdeir和上面一样</p>
<p>Consumer1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">    RabbitMQUtils utils = <span class="keyword">new</span> RabbitMQUtils();</span><br><span class="line">    Channel channel = utils.getChannel();</span><br><span class="line"></span><br><span class="line">    channel.queueDeclare(<span class="string">&quot;hello&quot;</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">    channel.basicQos(<span class="number">1</span>);<span class="comment">//每次只能消费一个，不一股脑全部接受</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//接受是一个多线程，持续监听队列中的消息 最好不要关闭连接  在测试的时候不能再@Test注释的方法中写，因为@Test修饰的方法不支持多线程</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数1 队列 名称</span></span><br><span class="line"><span class="comment">     * 参数2 开始消息的自动确认</span></span><br><span class="line"><span class="comment">     * 参数3 消费时的回调接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    channel.basicConsume(<span class="string">&quot;hello&quot;</span>,<span class="keyword">false</span>,<span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(body));</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 手动确认</span></span><br><span class="line"><span class="comment">             * 参数1 确认队列中的哪个具体消息的标志</span></span><br><span class="line"><span class="comment">           	 * 参数2 false 是否开启多个消息同时确认</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.basicAck(envelope.getDeliveryTag(),<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Consumer2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">    RabbitMQUtils utils = <span class="keyword">new</span> RabbitMQUtils();</span><br><span class="line">    Channel channel = utils.getChannel();</span><br><span class="line"></span><br><span class="line">    channel.queueDeclare(<span class="string">&quot;hello&quot;</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">    channel.basicQos(<span class="number">1</span>);<span class="comment">//每次只能消费一个，不一股脑全部接受</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//接受是一个多线程，持续监听队列中的消息 最好不要关闭连接  在测试的时候不能再@Test注释的方法中写，因为@Test修饰的方法不支持多线程</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数1 队列 名称</span></span><br><span class="line"><span class="comment">     * 参数2 开始消息的自动确认</span></span><br><span class="line"><span class="comment">     * 参数3 消费时的回调接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    channel.basicConsume(<span class="string">&quot;hello&quot;</span>,<span class="keyword">false</span>,<span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(body));</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 手动确认</span></span><br><span class="line"><span class="comment">             * 参数1 确认队列中的哪个具体消息的标志</span></span><br><span class="line"><span class="comment">           	 * 参数2 false 是否开启多个消息同时确认</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.basicAck(envelope.getDeliveryTag(),<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="广播模型"><a href="#广播模型" class="headerlink" title="广播模型"></a>广播模型</h4><p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200904094730.png" alt="image-20200904094726571"></p>
<p>​    在广播模式下，消息发送流程如下：</p>
<pre><code>- 可以有多个消费者
- **每个消费者有自己的queue**
- **每个队列都要绑定到exchange**
- **生产者发送的消息只能发送到交换机**，交换机决定要发送给哪个队列，生产者无法决定
- 交换机把消息发送给绑定过的所有队列
- 队列的消费者都能拿到消息，实现一条消息被多个消费者消费
</code></pre>
<p>​    </p>
<p>🌰</p>
<p>Provider</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Channel channel = utils.getChannel();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通道绑定交换机</span></span><br><span class="line"><span class="comment"> * 参数1 交换机名称</span></span><br><span class="line"><span class="comment"> * 参数2 交换机类型</span></span><br><span class="line"><span class="comment"> * 如果指定交换机不存在会进行自动创建</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">channel.exchangeDeclare(<span class="string">&quot;logs&quot;</span>,<span class="string">&quot;fanout&quot;</span>);</span><br><span class="line"></span><br><span class="line">channel.basicPublish(<span class="string">&quot;logs&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="keyword">null</span>,<span class="string">&quot;fanout hello&quot;</span>.getBytes());</span><br><span class="line">utils.closeChannelAndConnection();</span><br></pre></td></tr></table></figure>

<p>ConsumerX</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RabbitMQUtils utils = <span class="keyword">new</span> RabbitMQUtils();</span><br><span class="line">Channel channel = utils.getChannel();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通道绑定交换机</span></span><br><span class="line"><span class="comment"> * 参数1 交换机名称</span></span><br><span class="line"><span class="comment"> * 参数2 交换机类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">channel.exchangeDeclare(<span class="string">&quot;logs&quot;</span>,<span class="string">&quot;fanout&quot;</span>);</span><br><span class="line"><span class="comment">//获取临时队列</span></span><br><span class="line">String queue = channel.queueDeclare().getQueue();</span><br><span class="line"><span class="comment">//绑定交换机和队列</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 参数1 队列名称</span></span><br><span class="line"><span class="comment"> * 参数2 交换机名称</span></span><br><span class="line"><span class="comment"> * 参数3 路由规则  此处是扇形模型，因此不需要添加路由规则</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">channel.queueBind(queue,<span class="string">&quot;logs&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">channel.basicConsume(queue,<span class="keyword">true</span>,<span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者1&quot;</span>+<span class="keyword">new</span> String(body));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h4 id="路由模型"><a href="#路由模型" class="headerlink" title="路由模型"></a>路由模型</h4><h5 id="Direct"><a href="#Direct" class="headerlink" title="Direct"></a>Direct</h5><p>​        定义：在某些场景中我们希望不同的消息被不同的队列消费</p>
<p>​        在Direct模型下：</p>
<ul>
<li><p>队列与交换机的绑定不能是任意的绑定，而是需要指定一个RoutingKey（路由key）</p>
</li>
<li><p>消息的发送方在向exchange发送消息时，也必须指定消息的RoutingKey</p>
</li>
<li><p>Exchange不再把消息交给每一个绑定的队列，而是根据消息的RoutingKey进行判断，只有队列的RoutingKey与消息的RoutingKey完全一致才会接收到下消息</p>
<p>流程如下：</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200904094812.png" alt="image-20200904094810078"></p>
</li>
</ul>
<p>​        图解</p>
<pre><code>    - P:生产者，向exchange发送消息，发送消息时，会指定一个RoutingKey
    - X:交换机，接收生产者的消息，然后把消息传递给与RoutingKey完全匹配的队列
    - C1:消费者，其所在队列指定了需要RoutingKey为error的消息
    - C2：消费者，其所在队列指定了需要RoutingKey为info、error、warning的消息
</code></pre>
<p>​        </p>
<p>🌰</p>
<p>Provider</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Channel channel = utils.getChannel();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通道绑定交换机</span></span><br><span class="line"><span class="comment"> * 参数1 交换机名称</span></span><br><span class="line"><span class="comment"> * 参数2 交换机类型</span></span><br><span class="line"><span class="comment"> * 如果指定交换机不存在会进行自动创建</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">channel.exchangeDeclare(<span class="string">&quot;logs_direct&quot;</span>,<span class="string">&quot;direct&quot;</span>);</span><br><span class="line"></span><br><span class="line">String routingKey = <span class="string">&quot;info&quot;</span>;</span><br><span class="line">channel.basicPublish(<span class="string">&quot;logs_direct&quot;</span>,routingKey,<span class="keyword">null</span>,(<span class="string">&quot;hello&quot;</span>+routingKey).getBytes());</span><br><span class="line">utils.closeChannelAndConnection();</span><br></pre></td></tr></table></figure>

<p>Consumer</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RabbitMQUtils utils = <span class="keyword">new</span> RabbitMQUtils();</span><br><span class="line">Channel channel = utils.getChannel();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通道绑定交换机</span></span><br><span class="line"><span class="comment"> * 参数1 交换机名称</span></span><br><span class="line"><span class="comment"> * 参数2 交换机类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">channel.exchangeDeclare(<span class="string">&quot;logs_direct&quot;</span>,<span class="string">&quot;direct&quot;</span>);</span><br><span class="line"><span class="comment">//获取临时队列</span></span><br><span class="line">String queue = channel.queueDeclare().getQueue();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定交换机和队列</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 参数1 队列名称</span></span><br><span class="line"><span class="comment"> * 参数2 交换机名称</span></span><br><span class="line"><span class="comment"> * 参数3 路由规则</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">channel.queueBind(queue,<span class="string">&quot;logs_direct&quot;</span>,<span class="string">&quot;info&quot;</span>);</span><br><span class="line">channel.queueBind(queue,<span class="string">&quot;logs_direct&quot;</span>,<span class="string">&quot;error&quot;</span>);</span><br><span class="line">channel.queueBind(queue,<span class="string">&quot;logs_direct&quot;</span>,<span class="string">&quot;track&quot;</span>);</span><br><span class="line"></span><br><span class="line">channel.basicConsume(queue,<span class="keyword">true</span>,<span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者&quot;</span>+<span class="keyword">new</span> String(body));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>​    </p>
<h5 id="Topic"><a href="#Topic" class="headerlink" title="Topic"></a>Topic</h5><p>​        Topic类型与Exchange与Direct相比，都是可以根据RoutingKey把消息路由到不同的队列。只不过Topic类型的Exchange可以让队列在绑定RoutingKey的时候使用通配符。这种模型RoutingKey一般都是由一个或多个单词组成，多个单词之间以 “.”分割。</p>
<p>​        <img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200904110731.png" alt="image-20200904105708765" style="zoom:50%;" /></p>
<p>​    通配符类型</p>
<ul>
<li><p>*</p>
<p>匹配不多不少恰好一个单词</p>
<p>如audit.*  只能匹配audit.irs 也就是audit后面只跟一个单词</p>
</li>
<li><h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>匹配一个或多个词</p>
<p>如audit.# 匹配audit.irs.corporation或者audit.irs等</p>
</li>
</ul>
<p>🌰</p>
<p>Provider</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Channel channel = utils.getChannel();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通道绑定交换机</span></span><br><span class="line"><span class="comment"> * 参数1 交换机名称</span></span><br><span class="line"><span class="comment"> * 参数2 交换机类型</span></span><br><span class="line"><span class="comment"> * 如果指定交换机不存在会进行自动创建</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">channel.exchangeDeclare(<span class="string">&quot;logs_topic&quot;</span>,<span class="string">&quot;topic&quot;</span>);</span><br><span class="line"></span><br><span class="line">String routingKey = <span class="string">&quot;user.save&quot;</span>;</span><br><span class="line">channel.basicPublish(<span class="string">&quot;logs_topic&quot;</span>,routingKey,<span class="keyword">null</span>,(<span class="string">&quot;hello&quot;</span>+routingKey).getBytes());</span><br><span class="line">utils.closeChannelAndConnection();</span><br></pre></td></tr></table></figure>

<p>Consumer</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RabbitMQUtils utils = <span class="keyword">new</span> RabbitMQUtils();</span><br><span class="line">Channel channel = utils.getChannel();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通道绑定交换机</span></span><br><span class="line"><span class="comment"> * 参数1 交换机名称</span></span><br><span class="line"><span class="comment"> * 参数2 交换机类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">channel.exchangeDeclare(<span class="string">&quot;logs_topic&quot;</span>,<span class="string">&quot;topic&quot;</span>);</span><br><span class="line"><span class="comment">//获取临时队列</span></span><br><span class="line">String queue = channel.queueDeclare().getQueue();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定交换机和队列</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 参数1 队列名称</span></span><br><span class="line"><span class="comment"> * 参数2 交换机名称</span></span><br><span class="line"><span class="comment"> * 参数3 路由规则</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">channel.queueBind(queue,<span class="string">&quot;logs_topic&quot;</span>,<span class="string">&quot;user.*&quot;</span>);</span><br><span class="line"></span><br><span class="line">channel.basicConsume(queue,<span class="keyword">true</span>,<span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者&quot;</span>+<span class="keyword">new</span> String(body));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>RabbitMQ</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-Mybatis整合</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Spring/Spring-Mybatis%E6%95%B4%E5%90%88/</url>
    <content><![CDATA[<h4 id="Spring和Mybatis整合步骤"><a href="#Spring和Mybatis整合步骤" class="headerlink" title="Spring和Mybatis整合步骤"></a>Spring和Mybatis整合步骤</h4><ol>
<li><p> 创建实体类（实体类中的各个属性需要与数据库中表的字段一致，否则会会出现查询为NULL的情况）</p>
</li>
<li><p>绑定数据库的连接信息并注册为dataSource</p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/test?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8<span class="symbol">&amp;amp;</span>useSSL=false&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;12345678&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<pre><code>3. 注册SqlSessionFactory，这样测试时就不需要通过代码获取SqlSessionFactory

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        配置Mybatis的相关信息--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name=&quot;configLocation&quot; value=&quot;classpath:mapper/*.xml&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        配置mapper的位置信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mapper/UserMapper.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

此处的mapperLocations需要注意一下：最好加上，否则会有概率报找不到mapper

同时mapperLocations配置如下：

**如果Mapper.xml与Mapper.class在同一个包下且同名，spring扫描Mapper.class的同时会自动扫描同名的Mapper.xml并装配到Mapper.class。**

**如果Mapper.xml与Mapper.class不在同一个包下或者不同名，就必须使用配置mapperLocations指定mapper.xml的位置。**

**此时spring是通过识别mapper.xml中的 &lt;mapper namespace=&quot;com.fan.mapper.UserDao&quot;&gt; namespace的值来确定对应的Mapper.class的。**

4. 注册SqlSession，测试时不需要获取sqlSession，要注意这里只能使用构造函数传入sqlSessionFactory即要填写构造函数的参数 （因为此处SqlSessionTemplate该类没有set方法，因此无法直接注入sqlSessionFactory，需要通过构造函数注入）

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

5. 注册mapper，

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mapper.UserMapperImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSession&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</code></pre>
<ol start="6">
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">UserMapper userMapper = context.getBean(<span class="string">&quot;userMapper&quot;</span>, UserMapper.class);</span><br><span class="line"><span class="keyword">for</span>(User user1 :userMapper.selectUser())</span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(user1.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><p>spring-dao.xml（此处我没有配置Mybatis的额外信息（例如别名之类的），因此没有写Mybatis.xml）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span> <span class="attr">xmlns:util</span>=<span class="string">&quot;http://www.springframework.org/schema/util&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-aop.xsd http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  如果想要注解配置的话需要声明这句话--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;pojo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/test?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8<span class="symbol">&amp;amp;</span>useSSL=false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;12345678&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        配置Mybatis的相关信息--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name=&quot;configLocation&quot; value=&quot;classpath:mapper/*.xml&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        配置mapper的位置信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mapper/UserMapper.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mapper.UserMapperImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSession&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>实体类</p>
<p>User</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="meta">@Value(&quot;Cooper&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value(&quot;18&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="meta">@Value(&quot;Cooper@163.com&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>数据库中对应的表</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200728094933.png" alt="image-20200728094917670" style="zoom:50%;" />



<p>UserMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--绑定接口  以及需要对数据库操作的指令--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span> = <span class="string">&quot;mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from test.WebUser;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果出现出现 Could not resolve type alias ‘****’异常。出现这个异常的原因有可能有两个</p>
<ol>
<li><p>  没有配置实体类的别名Alias,如果在mybatis的mapper中映射实体类不写包名，需要配置别名</p>
</li>
<li><p>resultMap和resultType写混了。通常这种情况会出现在select语句中。<select>标签的resultMap应该是mapper中<resultMap>的id，而resultType是一个具体的类型，也就是实体类的类名或者java基本数据类型int、long、string等。</p>
<p>  <a href="https://blog.csdn.net/xushiyu1996818/article/details/89075069">resultMap和resultType的差别</a></p>
</li>
</ol>
<p>UserMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>UserMapperImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperImpl</span> <span class="keyword">implements</span> <span class="title">UserMapper</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SqlSessionTemplate sqlSession;<span class="comment">//不能忘记 此处sqlSession在配置文件中注入</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSqlSession</span><span class="params">(SqlSessionTemplate sqlSession)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sqlSession = sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="keyword">return</span> mapper.selectUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>test</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    UserMapper userMapper = context.getBean(<span class="string">&quot;userMapper&quot;</span>, UserMapper.class);</span><br><span class="line">    <span class="keyword">for</span>(User user1 :userMapper.selectUser())</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(user1.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>pom文件（<font color = red>mybatis有两个依赖</font>）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- mysql依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a><font color =  red>注意</font></h5><p>如果运行编译后报错</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200728095535.png" alt="image-20200728095529742" style="zoom:50%;" />

<p>查看target中有没有UserMapper.xml等其他资源，如果没有，有可能是meaven静态资源被默认过滤掉了</p>
<p>需要在pom.xml中添加如下代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--目录具体看自己的设置--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring事务声明</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Spring/Spring%E4%BA%8B%E5%8A%A1%E5%A3%B0%E6%98%8E/</url>
    <content><![CDATA[<h5 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h5><p>​    当处理一些事务的时候有可能会连续执行几个步骤，其中任何一个步骤出错都导致整个步骤执行失败。</p>
<p>​    比如说我想在数据库中插入一条消息并删除一条消息，如果删除消息失败了，那么也将导致插入消息失败，而不是插入消息成功，删除消息失败。</p>
<p>​    <strong>相当于保证原子性</strong></p>
<h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><ol>
<li><p>配置声明式事务</p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    配置声明式事务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<pre><code>2. ```xml
&lt;!--    结合AOP实现事务织入--&gt;
&lt;!--    配置事务通知--&gt;
    &lt;tx:advice id=&quot;txAdvice&quot; transaction-manager=&quot;transactionManager&quot;&gt;
&lt;!--        给哪些方法配置事务--&gt;
&lt;!--        配置事务的传播特性 new propagation=&amp;#45;&amp;#45;--&gt;
        &lt;tx:attributes&gt;
            &lt;tx:method name=&quot;add&quot; propagation=&quot;REQUIRED&quot;&gt;&lt;/tx:method&gt;
            &lt;tx:method name=&quot;query&quot; read-only=&quot;true&quot;&gt;&lt;/tx:method&gt;
            &lt;tx:method name=&quot;delete&quot; propagation=&quot;REQUIRED&quot;/&gt;
            &lt;tx:method name=&quot;update&quot; propagation=&quot;REQUIRED&quot;/&gt;
            &lt;tx:method name=&quot;*&quot; propagation=&quot;REQUIRED&quot;/&gt;
        &lt;/tx:attributes&gt;
    &lt;/tx:advice&gt;
   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">3. 配置事务切入</span><br><span class="line"></span><br><span class="line">   ```xml</span><br><span class="line">   &lt;!--    配置事务切入--&gt;</span><br><span class="line">       &lt;aop:config&gt;</span><br><span class="line">           &lt;aop:pointcut id=&quot;txPointCut&quot; expression=&quot;execution(* mapper.*.*(..))&quot;/&gt;</span><br><span class="line">           &lt;aop:advisor advice-ref=&quot;txAdvice&quot; pointcut-ref=&quot;txPointCut&quot;&gt;&lt;/aop:advisor&gt;</span><br><span class="line">       &lt;/aop:config&gt;</span><br></pre></td></tr></table></figure>
</code></pre>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring初始</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Spring/Spring%E5%88%9D%E8%AF%86/</url>
    <content><![CDATA[<h3 id="Spring各个版本的关系"><a href="#Spring各个版本的关系" class="headerlink" title="Spring各个版本的关系"></a>Spring各个版本的关系</h3><p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20211231092456.png" alt="image-20211231092443987"></p>
<p>SpringBoot1.x  对应Spring 4.x</p>
<p>SpringBoot2.x 对应Spring5.x</p>
<h3 id="Spring的模块化特性"><a href="#Spring的模块化特性" class="headerlink" title="Spring的模块化特性"></a>Spring的模块化特性</h3><p>Spring是由一个个小的模块组成的，开发的时候需要做到按需使用</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20211231093859.png" alt="image-20211231093852480"></p>
<h3 id="Spring编程模型"><a href="#Spring编程模型" class="headerlink" title="Spring编程模型"></a>Spring编程模型</h3><ul>
<li><p>面向对象编程</p>
<ul>
<li><p>契约接口</p>
<p>Aware、BeanPostProcessor…</p>
</li>
<li><p>设计模式</p>
<p>观察者模式、组合模式、模板模式</p>
</li>
<li><p>对象继承</p>
<p>Abstract*类型</p>
</li>
</ul>
</li>
<li><p>面向切面编程</p>
<ul>
<li><p>动态代理</p>
<p>jdkDynamicAopProxy</p>
</li>
<li><p>字节码提升</p>
<p>ASM、CGLib、AspectJ…</p>
</li>
</ul>
</li>
<li><p>面向元编程</p>
<ul>
<li><p>注解</p>
<p>模式注解 @Component、@Service、@Respository</p>
</li>
<li><p>配置</p>
<p>Environment抽象、PropertySources、BeanDefinition</p>
</li>
<li><p>泛型</p>
<p>GenericTypeResolver、ResolveType</p>
</li>
</ul>
</li>
<li><p>面向函数编程</p>
<ul>
<li><p>函数接口</p>
<p>lambda、Reactive</p>
</li>
</ul>
</li>
<li><p>面向模块编程</p>
</li>
</ul>
<p>​        maven artifacts、Spring @Enable*</p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Spring/spring%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<ol>
<li>idea有反编译源码的功能 即使不在maven中下载源码也可以查看源码</li>
</ol>
<h3 id="bean工厂"><a href="#bean工厂" class="headerlink" title="bean工厂"></a>bean工厂</h3><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210319093142.png" alt="image-20210319093127876" style="zoom:50%;" />

<ol>
<li><p>register方法的作用是注册spring中的config类</p>
</li>
<li><p>refresh方法是最重要的方法，作用在于将注册的bean放到工厂中去，其实就是一个map –&gt; &lt;beanName,beanDefinition&gt;</p>
<p>当然我们可以继承一些spring中的类去编写一个注册bean的方法，自己完成bean的注册过程</p>
</li>
<li><p>我们之前所说的spring容器只是一个map对象，也就是单例池</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210319101306.png" alt="image-20210319101304751"></p>
<p>真正的spring容器由如下组成：</p>
<ul>
<li>beanDefinition</li>
<li> beanFactoryPostProcess</li>
<li>beanDefinition Map</li>
<li>bean factory</li>
<li>singletonObjects</li>
</ul>
</li>
<li><p>spring中的一些注解类似于@Autowired @Resource 等都是spring的beanPostProcessor的子类对其完成操作的</p>
<p>beanPostProcessor是一个非常重要的类，尤其是其子类</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot定时任务</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SpringBoot/SpringBoot%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<p>项目开发中经常需要执行一些定时任务，比如需要在每天凌晨的时候，分析一次前一天的日志信息，Spring为我们提供了异步执行任务调度的方式，提供了两个接口。</p>
<ul>
<li>TaskExecutor接口</li>
<li>TaskScheduler接口</li>
</ul>
<p>两个注解：</p>
<ul>
<li>@EnableScheduling</li>
<li>@Scheduled</li>
</ul>
<p><strong>cron表达式：</strong></p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200812104952.png" alt="img"></p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200812104956.png" alt="img"></p>
<p><strong>测试步骤：</strong></p>
<p>1、创建一个ScheduledService</p>
<p>我们里面存在一个hello方法，他需要定时执行，怎么处理呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledService</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//秒   分   时     日   月   周几</span></span><br><span class="line">   <span class="comment">//0 * * * * MON-FRI</span></span><br><span class="line">   <span class="comment">//注意cron表达式的用法；</span></span><br><span class="line">   <span class="meta">@Scheduled(cron = &quot;0 * * * * 0-7&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;hello.....&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、这里写完定时任务之后，我们需要在主程序上增加@EnableScheduling 开启定时任务功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableAsync</span> <span class="comment">//开启异步注解功能</span></span><br><span class="line"><span class="meta">@EnableScheduling</span> <span class="comment">//开启基于注解的定时任务</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootTaskApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       SpringApplication.run(SpringbootTaskApplication.class, args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、我们来详细了解下cron表达式；</p>
<p><a href="http://www.bejson.com/othertools/cron/">http://www.bejson.com/othertools/cron/</a></p>
<p>4、常用的表达式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">（1）0/2 * * * * ?   表示每2秒 执行任务</span><br><span class="line">（1）0 0/2 * * * ?   表示每2分钟 执行任务</span><br><span class="line">（1）0 0 2 1 * ?   表示在每月的1日的凌晨2点调整任务</span><br><span class="line">（2）0 15 10 ? * MON-FRI   表示周一到周五每天上午10:15执行作业</span><br><span class="line">（3）0 15 10 ? 6L 2002-2006   表示2002-2006年的每个月的最后一个星期五上午10:15执行作</span><br><span class="line">（4）0 0 10,14,16 * * ?   每天上午10点，下午2点，4点</span><br><span class="line">（5）0 0/30 9-17 * * ?   朝九晚五工作时间内每半小时</span><br><span class="line">（6）0 0 12 ? * WED   表示每个星期三中午12点</span><br><span class="line">（7）0 0 12 * * ?   每天中午12点触发</span><br><span class="line">（8）0 15 10 ? * *   每天上午10:15触发</span><br><span class="line">（9）0 15 10 * * ?     每天上午10:15触发</span><br><span class="line">（10）0 15 10 * * ?   每天上午10:15触发</span><br><span class="line">（11）0 15 10 * * ? 2005   2005年的每天上午10:15触发</span><br><span class="line">（12）0 * 14 * * ?     在每天下午2点到下午2:59期间的每1分钟触发</span><br><span class="line">（13）0 0/5 14 * * ?   在每天下午2点到下午2:55期间的每5分钟触发</span><br><span class="line">（14）0 0/5 14,18 * * ?     在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发</span><br><span class="line">（15）0 0-5 14 * * ?   在每天下午2点到下午2:05期间的每1分钟触发</span><br><span class="line">（16）0 10,44 14 ? 3 WED   每年三月的星期三的下午2:10和2:44触发</span><br><span class="line">（17）0 15 10 ? * MON-FRI   周一至周五的上午10:15触发</span><br><span class="line">（18）0 15 10 15 * ?   每月15日上午10:15触发</span><br><span class="line">（19）0 15 10 L * ?   每月最后一日的上午10:15触发</span><br><span class="line">（20）0 15 10 ? * 6L   每月的最后一个星期五上午10:15触发</span><br><span class="line">（21）0 15 10 ? * 6L 2002-2005   2002年至2005年的每月的最后一个星期五上午10:15触发</span><br><span class="line">（22）0 15 10 ? * 6#3   每月的第三个星期五上午10:15触发</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot异步任务</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SpringBoot/SpringBoot%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<h2 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h2><p>1、创建一个service包</p>
<p>2、创建一个类AsyncService</p>
<p>异步处理还是非常常用的，比如我们在网站上发送邮件，后台会去发送邮件，此时前台会造成响应不动，直到邮件发送完毕，响应才会成功，所以我们一般会采用多线程的方式去处理这些任务。</p>
<p>编写方法，假装正在处理数据，使用线程设置一些延时，模拟同步等待的情况；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">       System.out.println(<span class="string">&quot;业务进行中....&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、编写controller包</p>
<p>4、编写AsyncController类</p>
<p>我们去写一个Controller测试一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   AsyncService asyncService;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">       asyncService.hello();</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5、访问<a href="http://localhost:8080/hello%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%EF%BC%8C3%E7%A7%92%E5%90%8E%E5%87%BA%E7%8E%B0success%EF%BC%8C%E8%BF%99%E6%98%AF%E5%90%8C%E6%AD%A5%E7%AD%89%E5%BE%85%E7%9A%84%E6%83%85%E5%86%B5%E3%80%82">http://localhost:8080/hello进行测试，3秒后出现success，这是同步等待的情况。</a></p>
<p>问题：我们如果想让用户直接得到消息，就在后台使用多线程的方式进行处理即可，但是每次都需要自己手动去编写多线程的实现的话，太麻烦了，我们只需要用一个简单的办法，在我们的方法上加一个简单的注解即可，如下：</p>
<p>6、给hello方法添加@Async注解；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//告诉Spring这是一个异步方法</span></span><br><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">       e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">   System.out.println(<span class="string">&quot;业务进行中....&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SpringBoot就会自己开一个线程池，进行调用！但是要让这个注解生效，我们还需要在主程序上添加一个注解@EnableAsync ，开启异步注解功能；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableAsync</span> <span class="comment">//开启异步注解功能</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootTaskApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       SpringApplication.run(SpringbootTaskApplication.class, args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>7、重启测试，网页瞬间响应，后台代码依旧执行！</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合Shiro</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SpringBoot/SpringBoot%E6%95%B4%E5%90%88Shiro/</url>
    <content><![CDATA[<h4 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.theborakompanioni/thymeleaf-extras-shiro --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.theborakompanioni<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-shiro<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="编写ShiroConfig配置类"><a href="#编写ShiroConfig配置类" class="headerlink" title="编写ShiroConfig配置类"></a>编写ShiroConfig配置类</h4><p>UserRealm.class (授权和认证类)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserServiceImpl userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//授权</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//建立授权信息</span></span><br><span class="line">        SimpleAuthorizationInfo authorizationInfo = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加授权</span></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        User user = (User) subject.getPrincipal();<span class="comment">//从认证的的时候添加的principal获取User</span></span><br><span class="line">        authorizationInfo.addStringPermission(user.getPerms());<span class="comment">//添加</span></span><br><span class="line">        <span class="keyword">return</span> authorizationInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//认证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="comment">//用户名和密码  从数据库中取出</span></span><br><span class="line"><span class="comment">//        String username = &quot;cooper&quot;;</span></span><br><span class="line"><span class="comment">//        String password = &quot;123456&quot;;</span></span><br><span class="line"></span><br><span class="line">        UsernamePasswordToken userToken = (UsernamePasswordToken) token;<span class="comment">//获取用户登录的信息，也就是前端数据传到后台封装好的用户数据</span></span><br><span class="line">        <span class="comment">//连接数据库</span></span><br><span class="line">        User user = userService.getUserByName(userToken.getUsername());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(user==<span class="keyword">null</span>)<span class="comment">//查无此人</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;<span class="comment">//用户名不对则抛出异常</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将user存放到shrio的session中</span></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        Session session = subject.getSession();</span><br><span class="line">        session.setAttribute(<span class="string">&quot;loginUser&quot;</span>,user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//密码认证是shiro自己做的，我们不参与 &amp;&amp;  认证的的时候添加principal的对象User</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(user,user.getPassword(),<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ShiroConfig.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">getShiroFilterFactoryBean</span><span class="params">(<span class="meta">@Qualifier(&quot;securityManager&quot;)</span> DefaultWebSecurityManager securityManager)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ShiroFilterFactoryBean bean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">        <span class="comment">//设置安全管理器</span></span><br><span class="line">        bean.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加shiro内置过滤器</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            anon:无需认证即可访问</span></span><br><span class="line"><span class="comment">            authc:必须认证了才可以访问</span></span><br><span class="line"><span class="comment">            user:必须拥有记住我功能才能用</span></span><br><span class="line"><span class="comment">            perms:拥有某个资源的权限才能访问</span></span><br><span class="line"><span class="comment">            role:拥有某个角色权限才能访问</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Map&lt;String,String&gt; filterMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拦截 &amp;&amp; 授权</span></span><br><span class="line">        <span class="comment">//filterMap.put(&quot;/user/*&quot;,&quot;authc&quot;);</span></span><br><span class="line"></span><br><span class="line">        filterMap.put(<span class="string">&quot;/user/add&quot;</span>,<span class="string">&quot;perms[user:add]&quot;</span>);</span><br><span class="line"></span><br><span class="line">        filterMap.put(<span class="string">&quot;/user/update&quot;</span>,<span class="string">&quot;perms[user:update]&quot;</span>);</span><br><span class="line"></span><br><span class="line">        bean.setFilterChainDefinitionMap(filterMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定制未授权页面</span></span><br><span class="line">        bean.setUnauthorizedUrl(<span class="string">&quot;/noauth&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置登录的请求</span></span><br><span class="line">        bean.setLoginUrl(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;securityManager&quot;)</span> <span class="comment">//此处的@Qualifier是为了使用正确的类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">getDefaultWebSecurityManager</span><span class="params">(<span class="meta">@Qualifier(&quot;userRealm&quot;)</span> UserRealm userRealm)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        DefaultWebSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        <span class="comment">//关联UserRealm</span></span><br><span class="line">        securityManager.setRealm(userRealm);</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建realm对象，需要自定义类</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserRealm <span class="title">userRealm</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserRealm();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//整合ShiroDialect  用来整合thymeleaf和shiro</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroDialect <span class="title">getShiroDialect</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ShiroDialect();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="编写pojo"><a href="#编写pojo" class="headerlink" title="编写pojo"></a>编写pojo</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cooper.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String perms;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, String password, String perms)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">        <span class="keyword">this</span>.perms = perms;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPerms</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> perms;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPerms</span><span class="params">(String perms)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.perms = perms;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, perms=&#x27;&quot;</span> + perms + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="编写UserMapper和UserMapper-xml"><a href="#编写UserMapper和UserMapper-xml" class="headerlink" title="编写UserMapper和UserMapper.xml"></a>编写UserMapper和UserMapper.xml</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">User <span class="title">getUserByName</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.cooper.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByName&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;String&quot;</span>&gt;</span></span><br><span class="line">       select * from mybatis.test where name = #&#123;name&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="编写Service类"><a href="#编写Service类" class="headerlink" title="编写Service类"></a>编写Service类</h4><p>UserService接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function">User <span class="title">getUserByName</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUserByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.getUserByName(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="application-yaml配置文件"><a href="#application-yaml配置文件" class="headerlink" title="application.yaml配置文件"></a>application.yaml配置文件</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#数据库设置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">12345678</span></span><br><span class="line">    <span class="comment">#?serverTimezone=UTC解决时区的报错</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#这个必须要配置  相当于之前Mybatis.xml</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.cooper.pojo</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="编写Controller类"><a href="#编写Controller类" class="headerlink" title="编写Controller类"></a>编写Controller类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/toLogin&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toLogin</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String username, <span class="meta">@RequestParam(&quot;password&quot;)</span> String password, Model model)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//获取subject对象 也就是登录的对象</span></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        <span class="comment">//封装用户登录的数据</span></span><br><span class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(username, password);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            subject.login(token);<span class="comment">//执行登录方法，如果没有抛出异常则说明认证通过</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (UnknownAccountException e)</span><br><span class="line">        &#123;</span><br><span class="line">            model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;用户名不存在&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IncorrectCredentialsException e)</span><br><span class="line">        &#123;</span><br><span class="line">            model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;密码错误&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toLogin</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;add&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/update&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;update&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;/&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/noauth&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">noauth</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;未经授权，无法访问&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="编写页面"><a href="#编写页面" class="headerlink" title="编写页面"></a>编写页面</h4><p>main.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:shiro</span>=<span class="string">&quot;http://www.thymeleaf.org/thymeleaf-extras-shiro&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>欢迎<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;session.loginUser==null&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/login&#125;&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">shiro:hasPermisson</span> <span class="attr">name</span>=<span class="string">&quot;user:add&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/add&#125;&quot;</span>&gt;</span>add<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">shiro:hasPermisson</span> <span class="attr">name</span>=<span class="string">&quot;user:update&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/update&#125;&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>login.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/toLogin&#125;&quot;</span> <span class="attr">th:method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>add.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>add<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>add<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>update.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>update<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>update<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="数据库测试数据"><a href="#数据库测试数据" class="headerlink" title="数据库测试数据"></a>数据库测试数据</h4><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200811223222.png" alt="image-20200811223210497" style="zoom:50%;" />

<hr>
<h4 id="完成！"><a href="#完成！" class="headerlink" title="完成！"></a>完成！</h4>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Shiro</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合SpringSecurity</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SpringBoot/SpringBoot%E6%95%B4%E5%90%88SpringSecurity/</url>
    <content><![CDATA[<h3 id="认识SpringSecurity"><a href="#认识SpringSecurity" class="headerlink" title="认识SpringSecurity"></a>认识SpringSecurity</h3><p>Spring Security 是针对Spring项目的安全框架，也是Spring Boot底层安全模块默认的技术选型，他可以实现强大的Web安全控制，对于安全控制，我们仅需要引入 spring-boot-starter-security 模块，进行少量的配置，即可实现强大的安全管理！</p>
<p>记住几个类：</p>
<ul>
<li>WebSecurityConfigurerAdapter：自定义Security策略</li>
<li>AuthenticationManagerBuilder：自定义认证策略</li>
<li>@EnableWebSecurity：开启WebSecurity模式</li>
</ul>
<p>Spring Security的两个主要目标是 “认证” 和 “授权”（访问控制）。</p>
<p><strong>“认证”（Authentication）</strong></p>
<p>身份验证是关于验证您的凭据，如用户名/用户ID和密码，以验证您的身份。</p>
<p>身份验证通常通过用户名和密码完成，有时与身份验证因素结合使用。</p>
<p> <strong>“授权” （Authorization）</strong></p>
<p>授权发生在系统成功验证您的身份后，最终会授予您访问资源（如信息，文件，数据库，资金，位置，几乎任何内容）的完全权限。</p>
<p>这个概念是通用的，而不是只在Spring Security 中存在。</p>
<hr>
<h3 id="认证和授权"><a href="#认证和授权" class="headerlink" title="认证和授权"></a>认证和授权</h3><p>目前，我们的测试环境，是谁都可以访问的，我们使用 Spring Security 增加上认证和授权的功能</p>
<p>1、引入 Spring Security 模块</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、编写 Spring Security 配置类</p>
<p>参考官网：<a href="https://spring.io/projects/spring-security">https://spring.io/projects/spring-security</a> </p>
<p>查看我们自己项目中的版本，找到对应的帮助文档：</p>
<p><a href="https://docs.spring.io/spring-security/site/docs/5.3.0.RELEASE/reference/html5">https://docs.spring.io/spring-security/site/docs/5.3.0.RELEASE/reference/html5</a>  #servlet-applications 8.16.4</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JolV3xA4rEtxSCgbN76QbXheImAPwVia7gtcx2cNCUXAXbCJpst1geQCOElXLQMMvAibMLmYNqXF5g/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p>
<p>3、编写基础配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableWebSecurity</span> <span class="comment">// 开启WebSecurity模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4、定制请求的授权规则</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   <span class="comment">// 定制请求的授权规则</span></span><br><span class="line">   <span class="comment">// 首页所有人可以访问</span></span><br><span class="line">   http.authorizeRequests().antMatchers(<span class="string">&quot;/&quot;</span>).permitAll()</span><br><span class="line">  .antMatchers(<span class="string">&quot;/level1/**&quot;</span>).hasRole(<span class="string">&quot;vip1&quot;</span>)</span><br><span class="line">  .antMatchers(<span class="string">&quot;/level2/**&quot;</span>).hasRole(<span class="string">&quot;vip2&quot;</span>)</span><br><span class="line">  .antMatchers(<span class="string">&quot;/level3/**&quot;</span>).hasRole(<span class="string">&quot;vip3&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5、测试一下：发现除了首页都进不去了！因为我们目前没有登录的角色，因为请求需要登录的角色拥有对应的权限才可以！</p>
<p>6、在configure()方法中加入以下配置，开启自动配置的登录功能！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开启自动配置的登录功能</span></span><br><span class="line"><span class="comment">// /login 请求来到登录页</span></span><br><span class="line"><span class="comment">// /login?error 重定向到这里表示登录失败</span></span><br><span class="line">http.formLogin();</span><br></pre></td></tr></table></figure>

<p>7、测试一下：发现，没有权限的时候，会跳转到登录的页面！</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200810220902.png" alt="img" style="zoom:50%;" />

<p>8、查看刚才登录页的注释信息；</p>
<p>我们可以定义认证规则，重写configure(AuthenticationManagerBuilder auth)方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义认证规则</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//在内存中定义，也可以在jdbc中去拿....</span></span><br><span class="line">   auth.inMemoryAuthentication()</span><br><span class="line">          .withUser(<span class="string">&quot;kuangshen&quot;</span>).password(<span class="string">&quot;123456&quot;</span>).roles(<span class="string">&quot;vip2&quot;</span>,<span class="string">&quot;vip3&quot;</span>)</span><br><span class="line">          .and()</span><br><span class="line">          .withUser(<span class="string">&quot;root&quot;</span>).password(<span class="string">&quot;123456&quot;</span>).roles(<span class="string">&quot;vip1&quot;</span>,<span class="string">&quot;vip2&quot;</span>,<span class="string">&quot;vip3&quot;</span>)</span><br><span class="line">          .and()</span><br><span class="line">          .withUser(<span class="string">&quot;guest&quot;</span>).password(<span class="string">&quot;123456&quot;</span>).roles(<span class="string">&quot;vip1&quot;</span>,<span class="string">&quot;vip2&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>9、测试，我们可以使用这些账号登录进行测试！发现会报错！</p>
<p>There is no PasswordEncoder mapped for the id “null”</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200810220925.png" alt="img" style="zoom:50%;" />

<p>10、原因，我们要将前端传过来的密码进行某种方式加密，否则就无法登录，修改代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义认证规则</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   <span class="comment">//在内存中定义，也可以在jdbc中去拿....</span></span><br><span class="line">   <span class="comment">//Spring security 5.0中新增了多种加密方式，也改变了密码的格式。</span></span><br><span class="line">   <span class="comment">//要想我们的项目还能够正常登陆，需要修改一下configure中的代码。我们要将前端传过来的密码进行某种方式加密</span></span><br><span class="line">   <span class="comment">//spring security 官方推荐的是使用bcrypt加密方式。</span></span><br><span class="line">   </span><br><span class="line">   auth.inMemoryAuthentication().passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder())</span><br><span class="line">          .withUser(<span class="string">&quot;kuangshen&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip2&quot;</span>,<span class="string">&quot;vip3&quot;</span>)</span><br><span class="line">          .and()</span><br><span class="line">          .withUser(<span class="string">&quot;root&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip1&quot;</span>,<span class="string">&quot;vip2&quot;</span>,<span class="string">&quot;vip3&quot;</span>)</span><br><span class="line">          .and()</span><br><span class="line">          .withUser(<span class="string">&quot;guest&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip1&quot;</span>,<span class="string">&quot;vip2&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>11、测试，发现，登录成功，并且每个角色只能访问自己认证下的规则！搞定</p>
<hr>
<h3 id="权限控制和注销"><a href="#权限控制和注销" class="headerlink" title="权限控制和注销"></a>权限控制和注销</h3><p>1、开启自动配置的注销的功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定制请求的授权规则</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   <span class="comment">//....</span></span><br><span class="line">   <span class="comment">//开启自动配置的注销的功能</span></span><br><span class="line">      <span class="comment">// /logout 注销请求</span></span><br><span class="line">   http.logout();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、我们在前端，增加一个注销的按钮，index.html 导航栏中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/logout&#125;&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;address card icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 注销</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3、我们可以去测试一下，登录成功后点击注销，发现注销完毕会跳转到登录页面！</p>
<p>4、但是，我们想让他注销成功后，依旧可以跳转到首页，该怎么处理呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .logoutSuccessUrl(&quot;/&quot;); 注销成功来到首页</span></span><br><span class="line">http.logout().logoutSuccessUrl(<span class="string">&quot;/&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>5、测试，注销完毕后，发现跳转到首页OK</p>
<p>6、我们现在又来一个需求：用户没有登录的时候，导航栏上只显示登录按钮，用户登录之后，导航栏可以显示登录的用户信息及注销按钮！还有就是，比如kuangshen这个用户，它只有 vip2，vip3功能，那么登录则只显示这两个功能，而vip1的功能菜单不显示！这个就是真实的网站情况了！该如何做呢？</p>
<p>我们需要结合thymeleaf中的一些功能</p>
<p>sec：authorize=”isAuthenticated()”:是否认证登录！来显示不同的页面</p>
<p>Maven依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.thymeleaf.extras/thymeleaf-extras-springsecurity4 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>7、修改我们的 前端页面</p>
<ol>
<li><p>导入命名空间</p>
</li>
<li><p>```html<br>xmlns:sec=”<a href="http://www.thymeleaf.org/thymeleaf-extras-springsecurity5&quot;">http://www.thymeleaf.org/thymeleaf-extras-springsecurity5&quot;</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">3. 修改导航栏，增加认证判断</span><br><span class="line"></span><br><span class="line">4. ```html</span><br><span class="line">   &lt;!--登录注销--&gt;</span><br><span class="line">   &lt;div class=&quot;right menu&quot;&gt;</span><br><span class="line">   </span><br><span class="line">      &lt;!--如果未登录--&gt;</span><br><span class="line">      &lt;div sec:authorize=&quot;!isAuthenticated()&quot;&gt;</span><br><span class="line">          &lt;a class=&quot;item&quot; th:href=&quot;@&#123;/login&#125;&quot;&gt;</span><br><span class="line">              &lt;i class=&quot;address card icon&quot;&gt;&lt;/i&gt; 登录</span><br><span class="line">          &lt;/a&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">   </span><br><span class="line">      &lt;!--如果已登录--&gt;</span><br><span class="line">      &lt;div sec:authorize=&quot;isAuthenticated()&quot;&gt;</span><br><span class="line">          &lt;a class=&quot;item&quot;&gt;</span><br><span class="line">              &lt;i class=&quot;address card icon&quot;&gt;&lt;/i&gt;</span><br><span class="line">             用户名：&lt;span sec:authentication=&quot;principal.username&quot;&gt;&lt;/span&gt;</span><br><span class="line">             角色：&lt;span sec:authentication=&quot;principal.authorities&quot;&gt;&lt;/span&gt;</span><br><span class="line">          &lt;/a&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">   </span><br><span class="line">      &lt;div sec:authorize=&quot;isAuthenticated()&quot;&gt;</span><br><span class="line">          &lt;a class=&quot;item&quot; th:href=&quot;@&#123;/logout&#125;&quot;&gt;</span><br><span class="line">              &lt;i class=&quot;address card icon&quot;&gt;&lt;/i&gt; 注销</span><br><span class="line">          &lt;/a&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>8、重启测试，我们可以登录试试看，登录成功后确实，显示了我们想要的页面；</p>
<p>9、如果注销404了，就是因为它默认防止csrf跨站请求伪造，因为会产生安全问题，我们可以将请求改为post表单提交，或者在spring security中关闭csrf功能；我们试试：在 配置中增加 <code>http.csrf().disable();</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http.csrf().disable();<span class="comment">//关闭csrf功能:跨站请求伪造,默认只能通过post方式提交logout请求</span></span><br><span class="line">http.logout().logoutSuccessUrl(<span class="string">&quot;/&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>10、我们继续将下面的角色功能块认证完成！</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- sec:authorize=&quot;hasRole(&#x27;vip1&#x27;)&quot; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRole(&#x27;vip1&#x27;)&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui raised segment&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Level 1<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level1/1&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-1-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level1/2&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-1-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level1/3&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-1-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRole(&#x27;vip2&#x27;)&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui raised segment&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Level 2<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level2/1&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-2-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level2/2&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-2-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level2/3&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-2-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRole(&#x27;vip3&#x27;)&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui raised segment&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Level 3<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level3/1&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-3-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level3/2&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-3-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level3/3&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-3-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>11、测试一下！</p>
<p>12、权限控制和注销搞定！</p>
<h3 id="记住我"><a href="#记住我" class="headerlink" title="记住我"></a>记住我</h3><p>现在的情况，我们只要登录之后，关闭浏览器，再登录，就会让我们重新登录，但是很多网站的情况，就是有一个记住密码的功能，这个该如何实现呢？很简单</p>
<p>1、开启记住我功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定制请求的授权规则</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//。。。。。。。。。。。</span></span><br><span class="line">   <span class="comment">//记住我</span></span><br><span class="line">   http.rememberMe();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、我们再次启动项目测试一下，发现登录页多了一个记住我功能，我们登录之后关闭 浏览器，然后重新打开浏览器访问，发现用户依旧存在！</p>
<p>思考：如何实现的呢？其实非常简单</p>
<p>我们可以查看浏览器的cookie</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200810221417.png" alt="img"></p>
<p>3、我们点击注销的时候，可以发现，spring security 帮我们自动删除了这个 cookie</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200810221401.png" alt="img">4、结论：登录成功后，将cookie发送给浏览器保存，以后登录带上这个cookie，只要通过检查就可以免登录了。如果点击注销，则会删除这个cookie，具体的原理我们在JavaWeb阶段都讲过了，这里就不在多说了！</p>
<hr>
<h3 id="定制登录页"><a href="#定制登录页" class="headerlink" title="定制登录页"></a>定制登录页</h3><p>现在这个登录页面都是spring security 默认的，怎么样可以使用我们自己写的Login界面呢？</p>
<p>1、在刚才的登录页配置后面指定 loginpage</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http.formLogin().loginPage(<span class="string">&quot;/toLogin&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>2、然后前端也需要指向我们自己定义的 login请求</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/toLogin&#125;&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;address card icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 登录</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3、我们登录，需要将这些信息发送到哪里，我们也需要配置，login.html 配置提交请求及方式，**<font color = red>方式必须为post</font>**:</p>
<p>在 loginPage()源码中的注释上有写明：</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200810221353.png" alt="img"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/login&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;field&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">label</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui left icon input&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;user icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;field&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">label</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui left icon input&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;lock icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ui blue submit button&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4、这个请求提交上来，我们还需要验证处理，怎么做呢？我们可以查看formLogin()方法的源码！我们配置接收登录的用户名和密码的参数！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http.formLogin()</span><br><span class="line">  .usernameParameter(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">  .passwordParameter(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">  .loginPage(<span class="string">&quot;/toLogin&quot;</span>)</span><br><span class="line">  .loginProcessingUrl(<span class="string">&quot;/login&quot;</span>); <span class="comment">// 登陆表单提交请求</span></span><br></pre></td></tr></table></figure>

<p>5、在登录页增加记住我的多选框</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;remember&quot;</span>&gt;</span> 记住我</span><br></pre></td></tr></table></figure>

<p>6、后端验证处理！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定制记住我的参数！</span></span><br><span class="line">http.rememberMe().rememberMeParameter(<span class="string">&quot;remember&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>7、测试，OK</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>springsecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot邮件发送任务</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SpringBoot/SpringBoot%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<p>邮件发送，在我们的日常开发中，也非常的多，Springboot也帮我们做了支持</p>
<ul>
<li>邮件发送需要引入spring-boot-start-mail</li>
<li>SpringBoot 自动配置MailSenderAutoConfiguration</li>
<li>定义MailProperties内容，配置在application.yml中</li>
<li>自动装配JavaMailSender</li>
<li>测试邮件发送</li>
</ul>
<p><strong>测试：</strong></p>
<p>1、引入pom依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>看它引入的依赖，可以看到 jakarta.mail</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.mail<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、查看自动配置类：MailSenderAutoConfiguration</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200812103930.png" alt="img"></p>
<p>这个类中存在bean，JavaMailSenderImpl</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200812103922.png" alt="img"></p>
<p>然后我们去看下配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(</span></span><br><span class="line"><span class="meta">   prefix = &quot;spring.mail&quot;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailProperties</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_CHARSET;</span><br><span class="line">   <span class="keyword">private</span> String host;</span><br><span class="line">   <span class="keyword">private</span> Integer port;</span><br><span class="line">   <span class="keyword">private</span> String username;</span><br><span class="line">   <span class="keyword">private</span> String password;</span><br><span class="line">   <span class="keyword">private</span> String protocol = <span class="string">&quot;smtp&quot;</span>;</span><br><span class="line">   <span class="keyword">private</span> Charset defaultEncoding;</span><br><span class="line">   <span class="keyword">private</span> Map&lt;String, String&gt; properties;</span><br><span class="line">   <span class="keyword">private</span> String jndiName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、配置文件：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.mail.username</span>=<span class="string">24736743@qq.com</span></span><br><span class="line"><span class="meta">spring.mail.password</span>=<span class="string">你的qq授权码</span></span><br><span class="line"><span class="meta">spring.mail.host</span>=<span class="string">smtp.qq.com</span></span><br><span class="line"><span class="comment"># qq需要配置ssl</span></span><br><span class="line"><span class="meta">spring.mail.properties.mail.smtp.ssl.enable</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>

<p>获取授权码：在QQ邮箱中的设置-&gt;账户-&gt;开启pop3和smtp服务</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200812103910.png" alt="img"></p>
<p>4、Spring单元测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">JavaMailSenderImpl mailSender;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">//邮件设置1：一个简单的邮件</span></span><br><span class="line">   SimpleMailMessage message = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">   message.setSubject(<span class="string">&quot;通知-明天来狂神这听课&quot;</span>);</span><br><span class="line">   message.setText(<span class="string">&quot;今晚7:30开会&quot;</span>);</span><br><span class="line"></span><br><span class="line">   message.setTo(<span class="string">&quot;24736743@qq.com&quot;</span>);</span><br><span class="line">   message.setFrom(<span class="string">&quot;24736743@qq.com&quot;</span>);</span><br><span class="line">   mailSender.send(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads2</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">   <span class="comment">//邮件设置2：一个复杂的邮件</span></span><br><span class="line">   MimeMessage mimeMessage = mailSender.createMimeMessage();</span><br><span class="line">   MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(mimeMessage, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">   helper.setSubject(<span class="string">&quot;通知-明天来狂神这听课&quot;</span>);</span><br><span class="line">   helper.setText(<span class="string">&quot;&lt;b style=&#x27;color:red&#x27;&gt;今天 7:30来开会&lt;/b&gt;&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//发送附件</span></span><br><span class="line">   helper.addAttachment(<span class="string">&quot;1.jpg&quot;</span>,<span class="keyword">new</span> File(<span class="string">&quot;&quot;</span>));</span><br><span class="line">   helper.addAttachment(<span class="string">&quot;2.jpg&quot;</span>,<span class="keyword">new</span> File(<span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">   helper.setTo(<span class="string">&quot;24736743@qq.com&quot;</span>);</span><br><span class="line">   helper.setFrom(<span class="string">&quot;24736743@qq.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">   mailSender.send(mimeMessage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看邮箱，邮件接收成功！</p>
<p>我们只需要使用Thymeleaf进行前后端结合即可开发自己网站邮件收发功能了！</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot错误页面处理</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SpringBoot/SpringBoot%E9%94%99%E8%AF%AF%E9%A1%B5%E9%9D%A2%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<p>直接在</p>
<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20200810133249490.png" alt="image-20200810133249490" style="zoom:50%;" />

<p>添加对应的错误状态码的页面并且文件命名为状态码</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot集成Dubbo和Zookeeper</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SpringBoot/SpringBoot%E9%9B%86%E6%88%90Dubbo%E5%92%8CZookeeper/</url>
    <content><![CDATA[<h2 id="Dubbo"><a href="#Dubbo" class="headerlink" title="********Dubbo**********"></a><strong><em>*</em>*******Dubbo*********</strong>*</h2><p>Apache Dubbo |ˈdʌbəʊ| 是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。</p>
<p>dubbo官网 <a href="http://dubbo.apache.org/zh-cn/index.html">http://dubbo.apache.org/zh-cn/index.html</a></p>
<p>1.了解Dubbo的特性</p>
<p>2.查看官方文档</p>
<p><strong>dubbo基本概念</strong></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JJjARRqcZibY4ZPv60renshLSMRQe7NJpvDFrQMChLxI3BqIYQXrZvfs28iadQ1dDB4p84ydyb3KtQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p>
<p><strong>服务提供者</strong>（Provider）：暴露服务的服务提供方，服务提供者在启动时，向注册中心注册自己提供的服务。</p>
<p><strong>服务消费者</strong>（Consumer）：调用远程服务的服务消费方，服务消费者在启动时，向注册中心订阅自己所需的服务，服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</p>
<p><strong>注册中心</strong>（Registry）：注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者</p>
<p><strong>监控中心</strong>（Monitor）：服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心</p>
<p><strong>调用关系说明</strong></p>
<p>l 服务容器负责启动，加载，运行服务提供者。</p>
<p>l 服务提供者在启动时，向注册中心注册自己提供的服务。</p>
<p>l 服务消费者在启动时，向注册中心订阅自己所需的服务。</p>
<p>l 注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</p>
<p>l 服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</p>
<p>l 服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</p>
<h2 id="Dubbo环境搭建"><a href="#Dubbo环境搭建" class="headerlink" title="********Dubbo环境搭建**********"></a><strong><em>*</em>*******Dubbo环境搭建*********</strong>*</h2><p>点进dubbo官方文档，推荐我们使用Zookeeper 注册中心</p>
<p>什么是zookeeper呢？可以查看官方文档</p>
<h2 id="Window下安装zookeeper"><a href="#Window下安装zookeeper" class="headerlink" title="********Window下安装zookeeper**********"></a><strong><em>*</em>*******Window下安装zookeeper*********</strong>*</h2><p>1、下载zookeeper ：地址， 我们下载3.4.14 ， 最新版！解压zookeeper</p>
<p>2、运行/bin/zkServer.cmd ，初次运行会报错，没有zoo.cfg配置文件；</p>
<p>可能遇到问题：闪退 !</p>
<p>解决方案：编辑zkServer.cmd文件末尾添加pause 。这样运行出错就不会退出，会提示错误信息，方便找到原因。</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200812195046.png" alt="img"></p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200812195046.png" alt="img"></p>
<p>3、修改zoo.cfg配置文件</p>
<p>将conf文件夹下面的zoo_sample.cfg复制一份改名为zoo.cfg即可。</p>
<p>注意几个重要位置：</p>
<p>dataDir=./  临时数据存储的目录（可写相对路径）</p>
<p>clientPort=2181  zookeeper的端口号</p>
<p>修改完成后再次启动zookeeper</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200812195039.png" alt="img"></p>
<p>4、使用zkCli.cmd测试</p>
<p>ls /：列出zookeeper根下保存的所有节点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[zk: 127.0.0.1:2181(CONNECTED) 4] ls /</span><br><span class="line">[zookeeper]</span><br></pre></td></tr></table></figure>

<p>create –e /kuangshen 123：创建一个kuangshen节点，值为123</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200812195034.png" alt="img"></p>
<p>get /kuangshen：获取/kuangshen节点的值</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200812195028.png" alt="img"></p>
<p>我们再来查看一下节点</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200812195023.png" alt="img"></p>
<h2 id="window下安装dubbo-admin"><a href="#window下安装dubbo-admin" class="headerlink" title="********window下安装dubbo-admin**********"></a><strong><em>*</em>*******window下安装dubbo-admin*********</strong>*</h2><p>dubbo本身并不是一个服务软件。它其实就是一个jar包，能够帮你的java程序连接到zookeeper，并利用zookeeper消费、提供服务。</p>
<p>但是为了让用户更好的管理监控众多的dubbo服务，官方提供了一个可视化的监控程序dubbo-admin，不过这个监控即使不装也不影响使用。</p>
<p>我们这里来安装一下：</p>
<p><strong>1、下载dubbo-admin</strong></p>
<p>地址 ：<a href="https://github.com/apache/dubbo-admin/tree/master">https://github.com/apache/dubbo-admin/tree/master</a></p>
<p><strong>2、解压进入目录</strong></p>
<p>修改 dubbo-admin\src\main\resources \application.properties 指定zookeeper地址</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">7001</span></span><br><span class="line"><span class="meta">spring.velocity.cache</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">spring.velocity.charset</span>=<span class="string">UTF-8</span></span><br><span class="line"><span class="meta">spring.velocity.layout-url</span>=<span class="string">/templates/default.vm</span></span><br><span class="line"><span class="meta">spring.messages.fallback-to-system-locale</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">spring.messages.basename</span>=<span class="string">i18n/message</span></span><br><span class="line"><span class="meta">spring.root.password</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.guest.password</span>=<span class="string">guest</span></span><br><span class="line"></span><br><span class="line"><span class="meta">dubbo.registry.address</span>=<span class="string">zookeeper://127.0.0.1:2181</span></span><br></pre></td></tr></table></figure>

<p><strong>3、在项目目录下</strong>打包dubbo-admin</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">mvn clean package -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure>

<p><strong>第一次打包的过程有点慢，需要耐心等待！直到成功！</strong></p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200812195017.png" alt="img"></p>
<p>4、执行 dubbo-admin\target 下的dubbo-admin-0.0.1-SNAPSHOT.jar</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar dubbo-admin-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>

<p>【注意：zookeeper的服务一定要打开！】</p>
<p>执行完毕，我们去访问一下 <a href="http://localhost:7001/">http://localhost:7001/</a> ， 这时候我们需要输入登录账户和密码，我们都是默认的root-root；</p>
<p>登录成功后，查看界面</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200812195012.png" alt="img"></p>
<p>安装完成！</p>
<h2 id="SpringBoot-Dubbo-zookeeper"><a href="#SpringBoot-Dubbo-zookeeper" class="headerlink" title="SpringBoot + Dubbo + zookeeper"></a>SpringBoot + Dubbo + zookeeper</h2><h2 id="框架搭建"><a href="#框架搭建" class="headerlink" title="********框架搭建**********"></a><strong><em>*</em>*******框架搭建*********</strong>*</h2><p><strong>1. 启动zookeeper ！</strong></p>
<p><strong>2. IDEA创建一个空项目；</strong></p>
<p><strong>3.创建一个模块，实现服务提供者：provider-server ， 选择web依赖即可</strong></p>
<p><strong>4.项目创建完毕，我们写一个服务，比如卖票的服务；</strong></p>
<p>编写接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.provider.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TicketService</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getTicket</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.provider.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketServiceImpl</span> <span class="keyword">implements</span> <span class="title">TicketService</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getTicket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;《狂神说Java》&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>5.创建一个模块，实现服务消费者：consumer-server ， 选择web依赖即可</strong></p>
<p><strong>6.项目创建完毕，我们写一个服务，比如用户的服务；</strong></p>
<p>编写service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.consumer.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">   <span class="comment">//我们需要去拿去注册中心的服务</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>需求：现在我们的用户想使用买票的服务，这要怎么弄呢 ？</strong></p>
<h2 id="服务提供者"><a href="#服务提供者" class="headerlink" title="********服务提供者**********"></a><strong><em>*</em>*******服务提供者*********</strong>*</h2><p><strong>1、将服务提供者注册到注册中心，我们需要整合Dubbo和zookeeper，所以需要导包</strong></p>
<p><strong>我们从dubbo官网进入github，看下方的帮助文档，找到dubbo-springboot，找到依赖包</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Dubbo Spring Boot Starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>    </span><br></pre></td></tr></table></figure>

<p><strong>zookeeper的包我们去maven仓库下载，zkclient；</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.sgroschupf/zkclient --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.sgroschupf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>【新版的坑】zookeeper及其依赖包，解决日志冲突，还需要剔除日志依赖；</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入zookeeper --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--排除这个slf4j-log4j12--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>2、在springboot配置文件中配置dubbo相关属性！</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#当前应用名字</span></span><br><span class="line"><span class="meta">dubbo.application.name</span>=<span class="string">provider-server</span></span><br><span class="line"><span class="comment">#注册中心地址</span></span><br><span class="line"><span class="meta">dubbo.registry.address</span>=<span class="string">zookeeper://127.0.0.1:2181</span></span><br><span class="line"><span class="comment">#扫描指定包下服务</span></span><br><span class="line"><span class="meta">dubbo.scan.base-packages</span>=<span class="string">com.kuang.provider.service</span></span><br></pre></td></tr></table></figure>

<p><strong>3、在service的实现类中配置服务注解，发布服务！注意导包问题</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.annotation.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span> <span class="comment">//将服务发布出去  这里是dubbo的包</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//放在容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketServiceImpl</span> <span class="keyword">implements</span> <span class="title">TicketService</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getTicket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;《狂神说Java》&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>逻辑理解 ：应用启动起来，dubbo就会扫描指定的包下带有@component注解的服务，将它发布在指定的注册中心中！</strong></p>
<h2 id="服务消费者"><a href="#服务消费者" class="headerlink" title="********服务消费者**********"></a><strong><em>*</em>*******服务消费者*********</strong>*</h2><p><strong>1、导入依赖，和之前的依赖一样；</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--dubbo--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Dubbo Spring Boot Starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--zookeeper--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.sgroschupf/zkclient --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.sgroschupf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入zookeeper --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--排除这个slf4j-log4j12--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、<strong>配置参数</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#当前应用名字</span></span><br><span class="line"><span class="meta">dubbo.application.name</span>=<span class="string">consumer-server</span></span><br><span class="line"><span class="comment">#注册中心地址</span></span><br><span class="line"><span class="meta">dubbo.registry.address</span>=<span class="string">zookeeper://127.0.0.1:2181</span></span><br></pre></td></tr></table></figure>

<p><strong>3. 本来正常步骤是需要将服务提供者的接口打包，然后用pom文件导入，我们这里使用简单的方式，直接将服务的接口拿过来，<font color=red>路径必须保证正确</font>，即和服务提供者相同；</strong></p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200812194947.png" alt="img"></p>
<p><strong>4. 完善消费者的服务类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.consumer.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kuang.provider.service.TicketService;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.annotation.Reference;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span> <span class="comment">//注入到容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Reference</span> <span class="comment">//远程引用指定的服务，他会按照全类名进行匹配，看谁给注册中心注册了这个全类名</span></span><br><span class="line">   TicketService ticketService;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bugTicket</span><span class="params">()</span></span>&#123;</span><br><span class="line">       String ticket = ticketService.getTicket();</span><br><span class="line">       System.out.println(<span class="string">&quot;在注册中心买到&quot;</span>+ticket);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>5. 测试类编写；</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerServerApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   UserService userService;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       userService.bugTicket();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="启动测试"><a href="#启动测试" class="headerlink" title="********启动测试**********"></a><strong><em>*</em>*******启动测试*********</strong>*</h2><p><strong>1. 开启zookeeper</strong></p>
<p><strong>2. 打开dubbo-admin实现监控【可以不用做】</strong></p>
<p><strong>3. 开启服务者</strong></p>
<p><strong>4. 消费者消费测试，结果：</strong></p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200812194954.png" alt="img"></p>
<p><strong>监控中心 ：</strong></p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200812195001.png" alt="img"></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Dubbo</tag>
        <tag>Zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>html静态资源引入问题</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SpringBoot/hmtl%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%BC%95%E5%85%A5%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>两种方式访问static目录</p>
<pre><code>1. 直接超链接访问，根目录从public或static或resource开始 （根目录是/）
2. 采用th:@&#123;&#125; 路径写法同1
</code></pre>
<p><strong><font color = red>首页一般都用thymeleaf接管，这样即使你配置了servlet.context.path系统也会自动给你添加这个path</font></strong></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>WebSocket</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SpringBoot/websocket/</url>
    <content><![CDATA[<h3 id="传统技术"><a href="#传统技术" class="headerlink" title="传统技术"></a>传统技术</h3><ol>
<li><p>http</p>
<p>一问一答</p>
</li>
<li><p>socket</p>
<p>长链接，会占用资源</p>
</li>
</ol>
<h3 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h3><p><strong>优点：</strong></p>
<ul>
<li><strong>减小带宽开销</strong>。服务器和客户端在连接建立后，相比起 HTTP 请求，交换数据时用于协议控制的数据包头部相对较小，一般只有 2 字节；</li>
<li><strong>增强实时性</strong>。服务器可以随时主动给客户端下发数据，相对于 HTTP 请求需要等待客户端发起请求服务端才能响应，延迟明显更少，和传统的轮询比较，WebSocket 也可以在短时间内更有效率地传递数据；</li>
<li><strong>维持连接状态</strong>。在一些需要身份认证的场景下， HTTP 请求可能需要在每个请求都携带状态信息（服务器不记录每次的请求和响应信息），而 WebSocket 一次连接建立后就会保持住会话状态，这就使其成为一种有状态的协议，后续通信时就可以省略部分状态信息；</li>
<li><strong>更灵活的扩展支持</strong>。根据 <a href="https://link.zhihu.com/?target=https://tools.ietf.org/html/rfc6455">RFC6455 协议</a>，开发者可以对 WebSocket 自定义二进制帧，相对 HTTP，可以更轻松地处理二进制内容，此外开发者也自行扩展协议、实现部分自定义的子协议。</li>
<li><strong>更好的压缩效果</strong>。WebSocket 在适当的扩展支持下，可以沿用之前内容的上下文，在传递类似的数据时，可以显著地提高压缩率。</li>
</ul>
<p><strong>适用场景：</strong></p>
<ul>
<li><strong>需要及时响应的场景</strong>。当客户端需要对服务端发生的改变做出快速响应（尤其是客户端无法预测的响应）时，WebSocket 是非常适合的。例如开发一个客服系统，这往往要求实现多个用户实时沟通。如果使用 WebSocket，则每个对话都可以实时发送和接收消息。与 HTTP 相比，WebSocket 不需要考虑发送和接收的每个消息的 HTTP 请求/响应导致的开销，从而会有更高的执行效率。</li>
<li><strong>需要实时查询的场景</strong>。例如一名篮球迷想要查询比赛结果，如果比赛是上周结束的，那么比赛结果是固定的，HTTP 在这种情况下就非常适合。但是，如果是当前正在进行的比赛，得分会不断变化，并且更新频繁，在这种情况下，WebSocket 就是更好的选择。</li>
<li><strong>小负载的高频消息传递</strong>。如今越来越多的开发人员正在通过移动设备的 GPS 功能来记录 Web 应用程序的方位感知。如果我们需要记录一段时间内用户的位置信息，高频率发送更加细粒度的位置数据，从而起到实时分享功能（例如运动类 APP），WebSocket 所使用的 TCP 连接会让数据交换飞起来。</li>
<li><strong>多人协同的场景</strong>。例如近几年发展迅速的在线教育，学生可以足不出户，即可与老师以及其他同学一起进行实时沟通与交流，诸如布置作业、师生互动、问题讨论等等强实时交互类的场景都可交由 WebSocket 协议支撑完成，从而满足低延迟，高及时的场景要求。</li>
</ul>
<h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><p>一般就是三个函数实现就可以了</p>
<ol>
<li>打开函数</li>
<li>监听信息函数</li>
<li>关闭函数</li>
</ol>
<h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="string">&quot;ws://localhost:8080/Websocket/&quot;</span> + u[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="comment">// 打开websocket</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;WebSocket&#x27;</span> <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</span><br><span class="line">   <span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(url)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   layer.msg(<span class="string">&#x27;你的浏览器不支持Websocket!&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个是api的回调函数，会自动调用  握手成功会自动调用该函数</span></span><br><span class="line">ws.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从服务端获取推送的消息  监听消息</span></span><br><span class="line">ws.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> json = <span class="built_in">eval</span>(<span class="string">&quot;(&quot;</span> + ev.data + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">   <span class="comment">//前三个都是在监听是否在线</span></span><br><span class="line">   <span class="keyword">if</span> (json[<span class="string">&#x27;targetID&#x27;</span>] === <span class="string">&quot;syspush&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; json[<span class="string">&#x27;all_user_id&#x27;</span>].length; i++) &#123;</span><br><span class="line">         $(<span class="string">&#x27;#friend-id-&#x27;</span> + json[<span class="string">&#x27;all_user_id&#x27;</span>][i] + <span class="string">&quot; .layui-badge-dot&quot;</span>).css(<span class="string">&quot;background-color&quot;</span>, <span class="string">&quot;green&quot;</span>);</span><br><span class="line">         $(<span class="string">&#x27;#friend-id-&#x27;</span> + json[<span class="string">&#x27;all_user_id&#x27;</span>][i] + <span class="string">&quot; .isonline&quot;</span>).html(<span class="string">&quot;&amp;nbsp;在线&amp;nbsp;&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (json[<span class="string">&#x27;targetID&#x27;</span>] === <span class="string">&quot;onopen&quot;</span>) &#123;</span><br><span class="line">      $(<span class="string">&#x27;#friend-id-&#x27;</span> + json[<span class="string">&#x27;user_id&#x27;</span>] + <span class="string">&quot; .layui-badge-dot&quot;</span>).css(<span class="string">&quot;background-color&quot;</span>, <span class="string">&quot;green&quot;</span>);</span><br><span class="line">      $(<span class="string">&#x27;#friend-id-&#x27;</span> + json[<span class="string">&#x27;user_id&#x27;</span>] + <span class="string">&quot; .isonline&quot;</span>).html(<span class="string">&quot;&amp;nbsp;在线&amp;nbsp;&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (json[<span class="string">&#x27;targetID&#x27;</span>] === <span class="string">&quot;onclosed&quot;</span>) &#123;</span><br><span class="line">      $(<span class="string">&#x27;#friend-id-&#x27;</span> + json[<span class="string">&#x27;user_id&#x27;</span>] + <span class="string">&quot; .layui-badge-dot&quot;</span>).removeAttr(<span class="string">&quot;style&quot;</span>);</span><br><span class="line">      $(<span class="string">&#x27;#friend-id-&#x27;</span> + json[<span class="string">&#x27;user_id&#x27;</span>] + <span class="string">&quot; .isonline&quot;</span>).html(<span class="string">&quot;&amp;nbsp;离线&amp;nbsp;&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (json[<span class="string">&#x27;targetID&#x27;</span>] === <span class="string">&quot;send&quot;</span>) &#123;</span><br><span class="line">      $(<span class="string">&#x27;#friend-id-&#x27;</span> + json[<span class="string">&#x27;receiver_id&#x27;</span>] + <span class="string">&#x27; .msg&#x27;</span>).html(json[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line">      <span class="keyword">var</span> e = $(<span class="string">&#x27;#friend-id-&#x27;</span> + json[<span class="string">&#x27;receiver_id&#x27;</span>] + <span class="string">&#x27; .layui-badge&#x27;</span>);</span><br><span class="line">      e.html(<span class="built_in">parseInt</span>(e) + <span class="number">1</span>);</span><br><span class="line">      e.show();</span><br><span class="line">      <span class="keyword">var</span> e1 = $(<span class="string">&#x27;.chat-history ul&#x27;</span>);</span><br><span class="line">      <span class="keyword">if</span> (e1.attr(<span class="string">&#x27;id&#x27;</span>) === <span class="string">&#x27;chat-id-&#x27;</span> + json[<span class="string">&#x27;sender_id&#x27;</span>]) &#123;</span><br><span class="line">         e1.append(getMsgHtml(json, <span class="number">1</span>));</span><br><span class="line">         scrollTo($(<span class="string">&#x27;.chat-history&#x27;</span>));<span class="comment">//滑到最底部</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> e3 = $(<span class="string">&#x27;.chat-num-messages span&#x27;</span>);</span><br><span class="line">      e3.html(<span class="built_in">parseInt</span>(e3.html()) + <span class="number">1</span>)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开websocket 关闭websocket  是一个关闭的回调函数</span></span><br><span class="line">ws.onclose = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">   ws.close();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果出现异常，会调用这个方法</span></span><br><span class="line">ws.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送消息</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">postAction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">var</span> ctime = getCurrentTime();</span><br><span class="line">		<span class="keyword">var</span> content = $(<span class="string">&#x27;.Input_text&#x27;</span>).html();</span><br><span class="line">		$(<span class="string">&#x27;.chat-history ul&#x27;</span>).append(getMsgHtml(&#123;<span class="attr">content</span>: content, <span class="attr">ctime</span>: ctime&#125;, <span class="number">0</span>));</span><br><span class="line">		$(<span class="string">&#x27;#friend-id-&#x27;</span> + l[<span class="string">&#x27;friend_id&#x27;</span>] + <span class="string">&quot; .msg&quot;</span>).html(content.substring(<span class="number">0</span>, <span class="number">8</span>) + <span class="string">&#x27;...&#x27;</span>);</span><br><span class="line">		scrollTo($(<span class="string">&#x27;.chat-history&#x27;</span>));<span class="comment">//滑到最底部</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//发送消息</span></span><br><span class="line">		ws.send(<span class="built_in">JSON</span>.stringify(&#123;    <span class="comment">//实时推送信息</span></span><br><span class="line">			<span class="attr">targetID</span>: <span class="string">&quot;send&quot;</span>,</span><br><span class="line">			<span class="attr">sender_id</span>: u[<span class="string">&#x27;username&#x27;</span>],</span><br><span class="line">			<span class="attr">receiver_id</span>: l[<span class="string">&#x27;friend_id&#x27;</span>],</span><br><span class="line">			<span class="attr">content</span>: content,</span><br><span class="line">			<span class="attr">ctime</span>: ctime</span><br><span class="line">		&#125;));</span><br><span class="line">		insertChatRecord(u[<span class="string">&#x27;username&#x27;</span>], l[<span class="string">&#x27;friend_id&#x27;</span>], content, ctime);<span class="comment">//插入数据库</span></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="meta">@ServerEndpoint(value = &quot;/Websocket/&#123;user_id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebsocketServers</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ConcurrentHashMap&lt;String, Session&gt; sessionServer = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> String user_id;</span><br><span class="line">    <span class="keyword">private</span> Session session;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@OnOpen</span> 通道建立成功需要执行的操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(<span class="meta">@PathParam(value = &quot;user_id&quot;)</span> String user_id, Session session)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.session = session;</span><br><span class="line"></span><br><span class="line">        sessionServer.put(user_id, session);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.user_id = user_id;</span><br><span class="line"></span><br><span class="line">        JSONObject j = <span class="keyword">new</span> JSONObject();</span><br><span class="line"></span><br><span class="line">        j.put(<span class="string">&quot;targetID&quot;</span>, <span class="string">&quot;onopen&quot;</span>);</span><br><span class="line"></span><br><span class="line">        j.put(<span class="string">&quot;user_id&quot;</span>, <span class="keyword">this</span>.user_id);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String key : sessionServer.keySet()) &#123;</span><br><span class="line">            sessionServer.get(key).getAsyncRemote().sendText(j.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        JSONObject json = JSONObject.parseObject(message);</span><br><span class="line">        <span class="keyword">if</span> (json.get(<span class="string">&quot;targetID&quot;</span>).equals(<span class="string">&quot;send&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String key : sessionServer.keySet()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (key.equals(json.get(<span class="string">&quot;receiver_id&quot;</span>))) &#123;</span><br><span class="line">                    sessionServer.get(key).getAsyncRemote().sendText(message);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JSONObject j = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        j.put(<span class="string">&quot;targetID&quot;</span>, <span class="string">&quot;onclosed&quot;</span>);</span><br><span class="line">        j.put(<span class="string">&quot;user_id&quot;</span>, <span class="keyword">this</span>.user_id);</span><br><span class="line">        sessionServer.remove(<span class="keyword">this</span>.user_id);<span class="comment">//删除会话</span></span><br><span class="line">        <span class="keyword">for</span> (String key : sessionServer.keySet()) &#123;</span><br><span class="line">            sessionServer.get(key).getAsyncRemote().sendText(j.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnError</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable error)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Error&quot;</span>);</span><br><span class="line">        error.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//检测线上人数，也就是有没有上线，那个绿色小点</span></span><br><span class="line">    <span class="meta">@Scheduled(fixedRate = 3000)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pushStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JSONObject j = <span class="keyword">new</span> JSONObject();</span><br><span class="line"></span><br><span class="line">        j.put(<span class="string">&quot;targetID&quot;</span>, <span class="string">&quot;syspush&quot;</span>);</span><br><span class="line"></span><br><span class="line">        j.put(<span class="string">&quot;all_user_id&quot;</span>, sessionServer.keySet());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String key : sessionServer.keySet()) &#123;</span><br><span class="line">            sessionServer.get(key).getAsyncRemote().sendText(j.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>WebSocket</tag>
      </tags>
  </entry>
  <entry>
    <title>初始化</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SpringBoot/%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
    <content><![CDATA[<h4 id="初始SpringBoot"><a href="#初始SpringBoot" class="headerlink" title="初始SpringBoot"></a>初始SpringBoot</h4><ol>
<li><p><strong><font color=red>建包必须在Application的同级目录下建包</font></strong></p>
<p>原因：</p>
</li>
<li><p>项目打包</p>
<p>需要在pom文件中添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>​       点击package即可打包到target目录下，打包结果为一个jar包，里面内置了tomcat服务器</p>
<p>​        <img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200807095937.png" alt="image-20200807093434370" style="zoom:50%;" /></p>
<p>​        最终在终端找到该jar包 位置，然后</p>
<p>​        java  -jar {jar包名称}</p>
<p>​        即可完成部署</p>
<p>3.启动banner</p>
<p>​    生成<a href="https://www.bootschool.net/ascii/">SpringBoot banner网站</a> </p>
<p>​     将其内容保存为banner.txt </p>
<p>​    <img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200807100323.png" alt="image-20200807100318270" style="zoom:50%;" /></p>
<p>效果如下：</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200807100358.png" alt="image-20200807100353750" style="zoom:50%;" />

<hr>
<h4 id="原理探究"><a href="#原理探究" class="headerlink" title="原理探究"></a>原理探究</h4><ol>
<li><p>SpringBoot启动的时候加载主配置类，开启了自动配置功能**@EnableAutoConfiguration**</p>
</li>
<li><p><strong>@EnableAutoConfiguration</strong>的作用</p>
<ol>
<li><p>利用AutoConfigurationImportSelector给容器中导入一些组件</p>
</li>
<li><p>通过AutoConfigurationImportSelector下的selectImports方法中的getAutoConfigurationEntry方法调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);</span><br></pre></td></tr></table></figure></li>
<li><p>通过</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> List&lt;String&gt; <span class="title">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> </span>&#123;</span><br><span class="line">   List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),</span><br><span class="line">         getBeanClassLoader());</span><br><span class="line">   Assert.notEmpty(configurations, <span class="string">&quot;No auto configuration classes found in META-INF/spring.factories. If you &quot;</span></span><br><span class="line">         + <span class="string">&quot;are using a custom packaging, make sure that file is correct.&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> configurations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>中的loadFactoryNames方法扫描所有jar包类路径下的 META-INF/spring.factories</p>
</li>
<li><img src="/Users/cooper/Library/Application Support/typora-user-images/image-20200807233319533.png" alt="image-20200807233319533" style="zoom:50%;" />

<p>​    通过此方法将扫描到的内容包装成properties对象</p>
</li>
<li><p>```java<br>public static List<String> loadFactoryNames(Class&lt;?&gt; factoryType, @Nullable ClassLoader classLoader) {<br>   String factoryTypeName = factoryType.getName();<br>   return loadSpringFactories(classLoader).getOrDefault(factoryTypeName, Collections.emptyList());<br>}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">然后传递给String factoryTypeName = factoryType.getName(); 该类名通过</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),</span><br><span class="line">				getBeanClassLoader());</span><br></pre></td></tr></table></figure>

<p>中的getSpringFactoriesLoaderFactoryClass()得到</p>
</li>
<li><p>然后从properties中获取到EnableAutoConfiguration.class（类名）对应的值，然后把他们添加到容器中</p>
<p>也就是spring.factories中的  </p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200807234147.png" alt="image-20200807234142773" style="zoom:50%;" /></li>
</ol>
<p>​      相当于将spring.factories里面配置的所有EnableAutoConfiguration.class的值添加到了容器中</p>
<p>​     <font color = red> <strong>虽然说有这么多的自动配置类，但是必须有导入相应的start才会生效，否则配置类不生效</strong> </font></p>
<p>​      比如说我没有导入spring-boot-starter-redis这个启动项，那么</p>
<p>​      <img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200808090827.png" alt="image-20200808090820865" style="zoom:50%;" /></p>
<p>​      就不会生效，具体如下</p>
<p>​        <img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200808090900.png" alt="image-20200808090854243" style="zoom:50%;" /></p>
<p>​        反之，如果有start启动项，那么就会生效。</p>
<p>​        如果查看具体的生效的类有哪些呢？</p>
<p>​        可以在配置文件中添加debug: true</p>
<p>​        生效类</p>
<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20200808153606120.png" alt="image-20200808153606120" style="zoom:50%;" />



<p>​        未生效类</p>
<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20200808153655589.png" alt="image-20200808153655589" style="zoom:50%;" />



<ol start="7">
<li><p>总体流程图如下</p>
<ul>
<li><p>@EnableAutoConfiguration</p>
</li>
<li><p>```java<br>@Import(AutoConfigurationImportSelector.class)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  @Override</span><br><span class="line">  public String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">     if (!isEnabled(annotationMetadata)) &#123;</span><br><span class="line">        return NO_IMPORTS;</span><br><span class="line">     &#125;</span><br><span class="line">     AutoConfigurationEntry autoConfigurationEntry = getAutoConfigurationEntry(annotationMetadata);//获取自动配置实体</span><br><span class="line">     return StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>```java<br>protected AutoConfigurationEntry getAutoConfigurationEntry(AnnotationMetadata annotationMetadata) {<br>   if (!isEnabled(annotationMetadata)) {</p>
<pre><code>  return EMPTY_ENTRY;
</code></pre>
<p>   }<br>   AnnotationAttributes attributes = getAttributes(annotationMetadata);<br>   List<String> configurations = getCandidateConfigurations(annotationMetadata, attributes);//获取候选的配置<br>   configurations = removeDuplicates(configurations);<br>   Set<String> exclusions = getExclusions(annotationMetadata, attributes);<br>   checkExcludedClasses(configurations, exclusions);<br>   configurations.removeAll(exclusions);<br>   configurations = getConfigurationClassFilter().filter(configurations);<br>   fireAutoConfigurationImportEvents(configurations, exclusions);<br>   return new AutoConfigurationEntry(configurations, exclusions);<br>}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  protected Class&lt;?&gt; getSpringFactoriesLoaderFactoryClass() &#123;</span><br><span class="line">     return EnableAutoConfiguration.class;</span><br><span class="line">  &#125;//从properties中获取到EnableAutoConfiguration.class（类名）对应的值</span><br></pre></td></tr></table></figure></li>
<li><p>```java<br>public static List<String> loadFactoryNames(Class&lt;?&gt; factoryType, @Nullable ClassLoader classLoader) {<br>   String factoryTypeName = factoryType.getName();//获取名称<br>   return loadSpringFactories(classLoader).getOrDefault(factoryTypeName, Collections.emptyList());<br>}</p>
<p>private static Map&lt;String, List<String>&gt; loadSpringFactories(@Nullable ClassLoader classLoader) {<br>   MultiValueMap&lt;String, String&gt; result = cache.get(classLoader);<br>   if (result != null) {</p>
<pre><code>  return result;
</code></pre>
<p>   }</p>
<p>   try {</p>
<pre><code>  Enumeration&lt;URL&gt; urls = (classLoader != null ?
        classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :
        ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));
  result = new LinkedMultiValueMap&lt;&gt;();
  while (urls.hasMoreElements()) &#123;
     URL url = urls.nextElement();
     UrlResource resource = new UrlResource(url);
     Properties properties = PropertiesLoaderUtils.loadProperties(resource);
     for (Map.Entry&lt;?, ?&gt; entry : properties.entrySet()) &#123;
        String factoryTypeName = ((String) entry.getKey()).trim();
        for (String factoryImplementationName : StringUtils.commaDelimitedListToStringArray((String) entry.getValue())) &#123;
           result.add(factoryTypeName, factoryImplementationName.trim());//通过此方法将扫描到的内容包装成properties对象
        &#125;
     &#125;
  &#125;
  cache.put(classLoader, result);
  return result;
</code></pre>
<p>   }<br>   catch (IOException ex) {</p>
<pre><code>  throw new IllegalArgumentException(&quot;Unable to load factories from location [&quot; +
        FACTORIES_RESOURCE_LOCATION + &quot;]&quot;, ex);
</code></pre>
<p>   }<br>}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  protected List&lt;String&gt; getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes) &#123;</span><br><span class="line">     List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),</span><br><span class="line">           getBeanClassLoader());//获取最终配置的全部内容</span><br><span class="line">     Assert.notEmpty(configurations, &quot;No auto configuration classes found in META-INF/spring.factories. If you &quot;</span><br><span class="line">           + &quot;are using a custom packaging, make sure that file is correct.&quot;);</span><br><span class="line">     return configurations;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
</ol>
<hr>
<p>每一个xxxAutoConfiguration类都是容器中的一个组件，都将其加入到容器中，用他们来自动配置</p>
<p>每一个自动配置类都进行自动配置</p>
<p>下面以HttpEncodingAutoConfiguration为例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span><span class="comment">//表明这是一个配置类</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(ServerProperties.class)</span><span class="comment">//启动指定类的ConfigurationProperties功能，将配置文件中的值和ServerProperties.class绑定起来并将ServerProperties加入到ioc容器中</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)</span><span class="comment">//判断当前应用是否为web应用，如果是则当前配置类生效</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnClass(CharacterEncodingFilter.class)</span><span class="comment">//判断当前项目有没有这个类</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;server.servlet.encoding&quot;, value = &quot;enabled&quot;, matchIfMissing = true)</span><span class="comment">//判断配置文件中是否存在某个配置，server.servlet.encoding.enabled；如果不存在，判断也是成立的，也就是说我们配置文件中不配置server.servlet.encoding.enabled = true,默认也是生效的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//已经和SpringBoot配置文件映射了</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Encoding properties;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//只有一个有参构造器的情况下，参数的值就会从容器中拿</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">HttpEncodingAutoConfiguration</span><span class="params">(ServerProperties properties)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.properties = properties.getServlet().getEncoding();</span><br><span class="line">	&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Bean</span><span class="comment">//给容器中添加一个组件，这个组件中的某些值需要从properties中获取</span></span><br><span class="line">	<span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> CharacterEncodingFilter <span class="title">characterEncodingFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		CharacterEncodingFilter filter = <span class="keyword">new</span> OrderedCharacterEncodingFilter();</span><br><span class="line">		filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());</span><br><span class="line">		filter.setForceRequestEncoding(<span class="keyword">this</span>.properties.shouldForce(Encoding.Type.REQUEST));</span><br><span class="line">		filter.setForceResponseEncoding(<span class="keyword">this</span>.properties.shouldForce(Encoding.Type.RESPONSE));</span><br><span class="line">		<span class="keyword">return</span> filter;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>精髓：</p>
<ul>
<li>SpringBoot启动加载大量的自动配置类</li>
<li>我们看我们需要的功能有没有SpringBoot默认写好的自动配置类</li>
<li>我们来看这些自动配置类中有哪些组件（只要要用的组件有，就不需要再配置）</li>
<li>给容器中的自动配置类添加组件时，会从properties中获取某些属性，我们就可以在配置文件中指定这些属性的值</li>
</ul>
<ol start="3">
<li><p>```java<br>@SpringBootConfiguration</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   表明该类是一个配置类（Indicates that a class provides Spring Boot application）</span><br><span class="line"></span><br><span class="line">4. ```java</span><br><span class="line">   @ComponentScan</span><br></pre></td></tr></table></figure>

<p>扫描当前主启动类（也就是有@SpringBootApplication标注的那个类）的同级包 </p>
<p>这样说明为什么要将包放在和@SpringBootApplication标注的那个类的同级目录下，如果不放，则扫描不到</p>
</li>
</ol>
<hr>
<h4 id="SpringBoot的run方法启动"><a href="#SpringBoot的run方法启动" class="headerlink" title="SpringBoot的run方法启动"></a>SpringBoot的run方法启动</h4><p>分析该方法主要分两部分，一部分是SpringApplication的实例化，二是run方法的执行；</p>
<p><strong>这个类主要做了以下四件事情：</strong></p>
<p>1、推断应用的类型是普通的项目还是Web项目</p>
<p>2、查找并加载所有可用初始化器 ， 设置到initializers属性中</p>
<p>3、找出所有的应用程序监听器，设置到listeners属性中</p>
<p>4、推断并设置main方法的定义类，找到运行的主类</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200808093037.png" alt="image-20200808093025507"></p>
<hr>
<h4 id="propertie与yaml的使用"><a href="#propertie与yaml的使用" class="headerlink" title="propertie与yaml的使用"></a>propertie与yaml的使用</h4><h5 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h5><p>​        <img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200808172929.png" alt="image-20200808102844143" style="zoom:50%;" /></p>
<p>​    如果名称为application.properties则会被SpringBoot识别，否则需要在类上加上注解@PropertySource(value = “classpath:hello.properties”)</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200808172939.png" alt="image-20200808103218052" style="zoom:50%;" />

<p>这里需要注意如果你自己定义的properties文件和application.propertie文件同时存在并且两者都有相同的属性值，不管你加不加注解@PropertySource，SpringBoot都会选择application.propertie中的属性值进行读取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@PropertySource(value = &quot;classpath:hello.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value((&quot;$&#123;age&#125;&quot;))</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; map;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure>

<h5 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//@PropertySource(value = &quot;classpath:hello.properties&quot;)</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Value(&quot;$&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//@Value((&quot;$&#123;age&#125;&quot;))</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; map;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure>

<p>yaml: <font color = red><strong>键与值之间需要用空格隔开</strong></font></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">Person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">Cooper</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">22</span></span><br><span class="line">  <span class="attr">list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">code</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">girls</span></span><br><span class="line">  <span class="attr">map:</span> &#123;<span class="string">k1:v1</span>,<span class="string">k2:v2</span>&#125;</span><br><span class="line">  <span class="attr">dog:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">小虎</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>



<p>如果你想有一些动态的表达的话，可以使用表达式。</p>
<p>比如说${random.UUID}等等，直接可以在yaml表达式中添加</p>
<p>比如我想要人的名字带有一个独一无二的UUID，则可以写成name: Cooper_${random.UUID}</p>
<p>yaml也支持松散绑定</p>
<p>比如Person中有一个属性为last_name,那么yaml中写成lastName也是可以识别出来的</p>
<hr>
<h4 id="JSR303校验"><a href="#JSR303校验" class="headerlink" title="JSR303校验"></a>JSR303校验</h4><p>本质：提供了一种数据校验标准</p>
<table>
<thead>
<tr>
<th align="left"><strong>Constraint</strong></th>
<th align="left"><strong>详细信息</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>@Null</code></td>
<td align="left">被注释的元素必须为 <code>null</code></td>
</tr>
<tr>
<td align="left"><code>@NotNull</code></td>
<td align="left">被注释的元素必须不为 <code>null</code></td>
</tr>
<tr>
<td align="left"><code>@AssertTrue</code></td>
<td align="left">被注释的元素必须为 <code>true</code></td>
</tr>
<tr>
<td align="left"><code>@AssertFalse</code></td>
<td align="left">被注释的元素必须为 <code>false</code></td>
</tr>
<tr>
<td align="left"><code>@Min(value)</code></td>
<td align="left">被注释的元素必须是一个数字，其值必须大于等于指定的最小值</td>
</tr>
<tr>
<td align="left"><code>@Max(value)</code></td>
<td align="left">被注释的元素必须是一个数字，其值必须小于等于指定的最大值</td>
</tr>
<tr>
<td align="left"><code>@DecimalMin(value)</code></td>
<td align="left">被注释的元素必须是一个数字，其值必须大于等于指定的最小值</td>
</tr>
<tr>
<td align="left"><code>@DecimalMax(value)</code></td>
<td align="left">被注释的元素必须是一个数字，其值必须小于等于指定的最大值</td>
</tr>
<tr>
<td align="left"><code>@Size(max, min)</code></td>
<td align="left">被注释的元素的大小必须在指定的范围内</td>
</tr>
<tr>
<td align="left"><code>@Digits (integer, fraction)</code></td>
<td align="left">被注释的元素必须是一个数字，其值必须在可接受的范围内</td>
</tr>
<tr>
<td align="left"><code>@Past</code></td>
<td align="left">被注释的元素必须是一个过去的日期</td>
</tr>
<tr>
<td align="left"><code>@Future</code></td>
<td align="left">被注释的元素必须是一个将来的日期</td>
</tr>
<tr>
<td align="left"><code>@Pattern(value)</code></td>
<td align="left">被注释的元素必须符合指定的正则表达式</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left"><strong>Constraint</strong></th>
<th align="left"><strong>详细信息</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>@Email</code></td>
<td align="left">被注释的元素必须是电子邮箱地址</td>
</tr>
<tr>
<td align="left"><code>@Length</code></td>
<td align="left">被注释的字符串的大小必须在指定的范围内</td>
</tr>
<tr>
<td align="left"><code>@NotEmpty</code></td>
<td align="left">被注释的字符串的必须非空</td>
</tr>
<tr>
<td align="left"><code>@Range</code></td>
<td align="left">被注释的元素必须在合适的范围内</td>
</tr>
</tbody></table>
<p>想要启动该数据校验需要在pom文件中加入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Validated</span><span class="comment">//注解不能忘记</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Email(message = &quot;邮箱格式错误...&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="SpringBoot多环境配置"><a href="#SpringBoot多环境配置" class="headerlink" title="SpringBoot多环境配置"></a>SpringBoot多环境配置</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="静态资源映射"><a href="#静态资源映射" class="headerlink" title="静态资源映射"></a>静态资源映射</h4><h5 id="我们先来聊聊这个静态资源映射规则："><a href="#我们先来聊聊这个静态资源映射规则：" class="headerlink" title="我们先来聊聊这个静态资源映射规则："></a><strong>我们先来聊聊这个静态资源映射规则：</strong></h5><p>SpringBoot中，SpringMVC的web配置都在 WebMvcAutoConfiguration 这个配置类里面；</p>
<p>我们可以去看看 WebMvcAutoConfigurationAdapter 中有很多配置方法；</p>
<p>有一个方法：addResourceHandlers 添加资源处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">        <span class="comment">// 已禁用默认资源处理</span></span><br><span class="line">        logger.debug(<span class="string">&quot;Default resource handling disabled&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 缓存控制</span></span><br><span class="line">    Duration cachePeriod = <span class="keyword">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class="line">    CacheControl cacheControl = <span class="keyword">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class="line">    <span class="comment">// webjars 配置</span></span><br><span class="line">    <span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">&quot;/webjars/**&quot;</span>)) &#123;</span><br><span class="line">        customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>)</span><br><span class="line">                                             .addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>)</span><br><span class="line">                                             .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 静态资源配置</span></span><br><span class="line">    String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">    <span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">        customizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)</span><br><span class="line">                                             .addResourceLocations(getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations()))</span><br><span class="line">                                             .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>读一下源代码：比如所有的 /webjars/** ， 都需要去 classpath:/META-INF/resources/webjars/ 找对应的资源；</p>
<hr>
<h5 id="什么是webjars-呢？"><a href="#什么是webjars-呢？" class="headerlink" title="什么是webjars 呢？"></a>什么是webjars 呢？</h5><p>Webjars本质就是以jar包的方式引入我们的静态资源 ， 我们以前要导入一个静态资源文件，直接导入即可。</p>
<p>使用SpringBoot需要使用Webjars，我们可以去搜索一下：</p>
<p>网站：<a href="https://www.webjars.org/">https://www.webjars.org</a> </p>
<p>要使用jQuery，我们只要要引入jQuery对应版本的pom依赖即可！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    </span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>导入完毕，查看webjars目录结构，并访问Jquery.js文件！</p>
<img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LheYVC0eZ6Rjt0MVjviaRZ6wt4N51VrTR1uzYBRo97UEoMJSnY1I0475oCajSe50e3tW5j0SXVwRA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img" style="zoom:50%;" />

<p>访问：只要是静态资源，SpringBoot就会去对应的路径寻找资源，我们这里访问：<a href="http://localhost:8080/webjars/jquery/3.4.1/jquery.js">http://localhost:8080/webjars/jquery/3.4.1/jquery.js</a></p>
<img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LheYVC0eZ6Rjt0MVjviaRZ6JzDrsHnyDZbfzsBxwR77xMoM2ia3ic9b8uyOngzt3aH8QztXugXM2jhA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img" style="zoom:50%;" />

<hr>
<h5 id="第二种静态资源映射规则"><a href="#第二种静态资源映射规则" class="headerlink" title="第二种静态资源映射规则"></a>第二种静态资源映射规则</h5><p>那我们项目中要是使用自己的静态资源该怎么导入呢？我们看下一行代码；</p>
<p>我们去找staticPathPattern发现第二种映射规则 ：/** , 访问当前的项目任意资源，它会去找 resourceProperties 这个类，我们可以点进去看一下分析：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 进入方法</span></span><br><span class="line"><span class="keyword">public</span> String[] getStaticLocations() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.staticLocations;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 找到对应的值</span></span><br><span class="line"><span class="keyword">private</span> String[] staticLocations = CLASSPATH_RESOURCE_LOCATIONS;</span><br><span class="line"><span class="comment">// 找到路径</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = &#123; </span><br><span class="line">    <span class="string">&quot;classpath:/META-INF/resources/&quot;</span>,</span><br><span class="line">  <span class="string">&quot;classpath:/resources/&quot;</span>, </span><br><span class="line">    <span class="string">&quot;classpath:/static/&quot;</span>, </span><br><span class="line">    <span class="string">&quot;classpath:/public/&quot;</span> </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>ResourceProperties 可以设置和我们静态资源有关的参数；这里面指向了它会去寻找资源的文件夹，即上面数组的内容。</p>
<p>所以得出结论，以下四个目录存放的静态资源可以被我们识别：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;classpath:/META-INF/resources/&quot;</span></span><br><span class="line"><span class="string">&quot;classpath:/resources/&quot;</span></span><br><span class="line"><span class="string">&quot;classpath:/static/&quot;</span></span><br><span class="line"><span class="string">&quot;classpath:/public/&quot;</span></span><br></pre></td></tr></table></figure>

<p>我们可以在resources根目录下新建对应的文件夹，都可以存放我们的静态文件；</p>
<p>默认的优先级是/META-INF/resources/&gt;resource&gt;static（默认）&gt;public</p>
<p>比如我们访问 <a href="http://localhost:8080/1.js">http://localhost:8080/1.js</a> , 他就会去这些文件夹中寻找对应的静态资源文件；</p>
<hr>
<h5 id="自定义静态资源路径"><a href="#自定义静态资源路径" class="headerlink" title="自定义静态资源路径"></a>自定义静态资源路径</h5><p>我们也可以自己通过配置文件来指定一下，哪些文件夹是需要我们放静态资源文件的，在application.properties中配置；</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.resources.static-locations</span>=<span class="string">classpath:/coding/,classpath:/kuang/</span></span><br></pre></td></tr></table></figure>

<p>一旦自己定义了静态文件夹的路径，原来的自动配置就都会失效了！</p>
<p>因为自定义的静态文件夹路径没有相应的处理的函数</p>
<hr>
<h4 id="Thymeleaf"><a href="#Thymeleaf" class="headerlink" title="Thymeleaf"></a>Thymeleaf</h4><p><strong><font color = red>template文件里面的资源必须经过Controller访问才能够接触到</font></strong></p>
<h5 id="引入Thymeleaf"><a href="#引入Thymeleaf" class="headerlink" title="引入Thymeleaf"></a>引入Thymeleaf</h5><p>怎么引入呢，对于springboot来说，什么事情不都是一个start的事情嘛，我们去在项目中引入一下。给大家三个网址：</p>
<p>Thymeleaf 官网：<a href="https://www.thymeleaf.org/">https://www.thymeleaf.org/</a></p>
<p>Thymeleaf 在Github 的主页：<a href="https://github.com/thymeleaf/thymeleaf">https://github.com/thymeleaf/thymeleaf</a></p>
<p>Spring官方文档：找到我们对应的版本</p>
<p><a href="https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter">https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter</a> </p>
<p>找到对应的pom依赖：可以适当点进源码看下本来的包！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--thymeleaf--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    </span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Maven会自动下载jar包，我们可以去看下下载的东西；</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200808202707.png" alt="img"></p>
<hr>
<h5 id="Thymeleaf分析"><a href="#Thymeleaf分析" class="headerlink" title="Thymeleaf分析"></a>Thymeleaf分析</h5><p>前面呢，我们已经引入了Thymeleaf，那这个要怎么使用呢？</p>
<p>我们首先得按照SpringBoot的自动配置原理看一下我们这个Thymeleaf的自动配置规则，在按照那个规则，我们进行使用。</p>
<p>我们去找一下Thymeleaf的自动配置类：ThymeleafProperties</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(</span></span><br><span class="line"><span class="meta">    prefix = &quot;spring.thymeleaf&quot;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_ENCODING;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">&quot;classpath:/templates/&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">&quot;.html&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> checkTemplate = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> checkTemplateLocation = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> String prefix = <span class="string">&quot;classpath:/templates/&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String suffix = <span class="string">&quot;.html&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String mode = <span class="string">&quot;HTML&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> Charset encoding;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以在其中看到默认的前缀和后缀！</p>
<p>我们只需要把我们的html页面放在类路径下的templates下，thymeleaf就可以帮我们自动渲染了。</p>
<p>使用thymeleaf什么都不需要配置，只需要将他放在指定的文件夹下即可！</p>
<hr>
<h5 id="Thymeleaf-语法学习"><a href="#Thymeleaf-语法学习" class="headerlink" title="Thymeleaf 语法学习"></a>Thymeleaf 语法学习</h5><p>要学习语法，还是参考官网文档最为准确，我们找到对应的版本看一下；</p>
<p>Thymeleaf 官网：<a href="https://www.thymeleaf.org/">https://www.thymeleaf.org/</a> ， 简单看一下官网！我们去下载Thymeleaf的官方文档！</p>
<p><strong>我们做个最简单的练习 ：我们需要查出一些数据，在页面中展示</strong></p>
<p>1、修改测试请求，增加数据传输；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/t1&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    <span class="comment">//存入数据</span></span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;Hello,Thymeleaf&quot;</span>);</span><br><span class="line">    <span class="comment">//classpath:/templates/test.html</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、我们要使用thymeleaf，需要在html文件中导入命名空间的约束，方便提示。</p>
<p>我们可以去官方文档的#3中看一下命名空间拿来过来：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">xmlns:th=&quot;http://www.thymeleaf.org&quot;</span><br></pre></td></tr></table></figure>

<p>3、我们去编写下前端页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>狂神说<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>测试页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--th:text就是将div中的内容设置为它指定的值，和之前学习的Vue一样--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4、启动测试！</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200808203110.png" alt="img"></p>
<p>5.小测试</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>  <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--    可以进行转义--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:utext</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    这样无法取出--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>$&#123;msg&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:each</span>=<span class="string">&quot;user:$&#123;list&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:each</span>=<span class="string">&quot;user:$&#123;list&#125;&quot;</span>&gt;</span>[[$&#123;user&#125;]]<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200808205448.png" alt="image-20200808205441647" style="zoom:50%;" />

<hr>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>扩展SpringMVC</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SpringBoot/%E6%89%A9%E5%B1%95SpringMVC/</url>
    <content><![CDATA[<h4 id="ContentNegotiatingViewResolver-内容协商视图解析器"><a href="#ContentNegotiatingViewResolver-内容协商视图解析器" class="headerlink" title="ContentNegotiatingViewResolver 内容协商视图解析器"></a><strong>ContentNegotiatingViewResolver 内容协商视图解析器</strong></h4><p>自动配置了ViewResolver，就是我们之前学习的SpringMVC的视图解析器；</p>
<p>即根据方法的返回值取得视图对象（View），然后由视图对象决定如何渲染（转发，重定向）。</p>
<p>我们去看看这里的源码：我们找到 WebMvcAutoConfiguration ， 然后搜索ContentNegotiatingViewResolver。找到如下方法！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(ViewResolver.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = &quot;viewResolver&quot;, value = ContentNegotiatingViewResolver.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ContentNegotiatingViewResolver <span class="title">viewResolver</span><span class="params">(BeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">    ContentNegotiatingViewResolver resolver = <span class="keyword">new</span> ContentNegotiatingViewResolver();</span><br><span class="line">    resolver.setContentNegotiationManager(beanFactory.getBean(ContentNegotiationManager.class));</span><br><span class="line">    <span class="comment">// ContentNegotiatingViewResolver使用所有其他视图解析器来定位视图，因此它应该具有较高的优先级</span></span><br><span class="line">    resolver.setOrder(Ordered.HIGHEST_PRECEDENCE);</span><br><span class="line">    <span class="keyword">return</span> resolver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以点进这类看看！找到对应的解析视图的代码；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Nullable</span> <span class="comment">// 注解说明：@Nullable 即参数可为null</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">resolveViewName</span><span class="params">(String viewName, Locale locale)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    RequestAttributes attrs = RequestContextHolder.getRequestAttributes();</span><br><span class="line">    Assert.state(attrs <span class="keyword">instanceof</span> ServletRequestAttributes, <span class="string">&quot;No current ServletRequestAttributes&quot;</span>);</span><br><span class="line">    List&lt;MediaType&gt; requestedMediaTypes = <span class="keyword">this</span>.getMediaTypes(((ServletRequestAttributes)attrs).getRequest());</span><br><span class="line">    <span class="keyword">if</span> (requestedMediaTypes != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取候选的视图对象</span></span><br><span class="line">        List&lt;View&gt; candidateViews = <span class="keyword">this</span>.getCandidateViews(viewName, locale, requestedMediaTypes);</span><br><span class="line">        <span class="comment">// 选择一个最适合的视图对象，然后把这个对象返回</span></span><br><span class="line">        View bestView = <span class="keyword">this</span>.getBestView(candidateViews, requestedMediaTypes, attrs);</span><br><span class="line">        <span class="keyword">if</span> (bestView != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> bestView;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// .....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们继续点进去看，他是怎么获得候选的视图的呢？</p>
<p>getCandidateViews中看到他是把所有的视图解析器拿来，进行while循环，挨个解析！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Iterator var5 = <span class="keyword">this</span>.viewResolvers.iterator();</span><br></pre></td></tr></table></figure>

<p>所以得出结论：<strong>ContentNegotiatingViewResolver 这个视图解析器就是用来组合所有的视图解析器的</strong> </p>
<p>我们再去研究下他的组合逻辑，看到有个属性viewResolvers，看看它是在哪里进行赋值的！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initServletContext</span><span class="params">(ServletContext servletContext)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里它是从beanFactory工具中获取容器中的所有视图解析器</span></span><br><span class="line">    <span class="comment">// ViewRescolver.class 把所有的视图解析器来组合的</span></span><br><span class="line">    Collection&lt;ViewResolver&gt; matchingBeans = BeanFactoryUtils.beansOfTypeIncludingAncestors(<span class="keyword">this</span>.obtainApplicationContext(), ViewResolver.class).values();</span><br><span class="line">    ViewResolver viewResolver;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.viewResolvers == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.viewResolvers = <span class="keyword">new</span> ArrayList(matchingBeans.size());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...............</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>既然它是在容器中去找视图解析器，我们是否可以猜想，我们就可以去实现一个视图解析器了呢？</p>
<p>我们可以自己给容器中去添加一个视图解析器；这个类就会帮我们自动的将它组合进来；<strong>我们去实现一下</strong></p>
<p>1、我们在我们的主程序中去写一个视图解析器来试试；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span> <span class="comment">//放到bean中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ViewResolver <span class="title">myViewResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyViewResolver();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//我们写一个静态内部类，视图解析器就需要实现ViewResolver接口</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyViewResolver</span> <span class="keyword">implements</span> <span class="title">ViewResolver</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">resolveViewName</span><span class="params">(String s, Locale locale)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、怎么看我们自己写的视图解析器有没有起作用呢？</p>
<p>我们给 DispatcherServlet 中的 doDispatch方法 加个断点进行调试一下，因为所有的请求都会走到这个方法中</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7Idia351qHgmH2vbzurk1Pp6QBbBv34R87hGpeWiaPnuYhBG1FlfdhtZxlIKicA2Y4kHy9XqRicibmQkWQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p>
<p>3、我们启动我们的项目，然后随便访问一个页面，看一下Debug信息；</p>
<p>找到this</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200809085116.png" alt="img"></p>
<p>找到视图解析器，我们看到我们自己定义的就在这里了；</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7Idia351qHgmH2vbzurk1Pp67xW1M2s2aOnolP1tAedrqAtUuBHRjz7ALePedpHkpz9MXVyLwe6wYw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p>
<p>所以说，我们如果想要使用自己定制化的东西，我们只需要给容器中添加这个组件就好了！剩下的事情SpringBoot就会帮我们做了！</p>
<hr>
<h4 id="转换器和格式化器"><a href="#转换器和格式化器" class="headerlink" title="转换器和格式化器"></a>转换器和格式化器</h4><p>找到格式化转换器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FormattingConversionService <span class="title">mvcConversionService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 拿到配置文件中的格式化规则</span></span><br><span class="line">    WebConversionService conversionService = </span><br><span class="line">        <span class="keyword">new</span> WebConversionService(<span class="keyword">this</span>.mvcProperties.getDateFormat());</span><br><span class="line">    addFormatters(conversionService);</span><br><span class="line">    <span class="keyword">return</span> conversionService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>点击去：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDateFormat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.dateFormat;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Date format to use. For instance, `dd/MM/yyyy`. 默认的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String dateFormat;</span><br></pre></td></tr></table></figure>

<p>可以看到在我们的Properties文件中，我们可以进行自动配置它！</p>
<p>如果配置了自己的格式化方式，就会注册到Bean中生效，我们可以在配置文件中配置日期格式化的规则：</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7Idia351qHgmH2vbzurk1Pp6zdySrKJPkADN9jtsIpz6QPOyC2nI04l0EiaAOMuU47pwiaPq2RrhUdaA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p>
<p>其余的就不一一举例了，大家可以下去多研究探讨即可！</p>
<hr>
<h4 id="修改SpringBoot的默认配置"><a href="#修改SpringBoot的默认配置" class="headerlink" title="修改SpringBoot的默认配置"></a>修改SpringBoot的默认配置</h4><p>这么多的自动配置，原理都是一样的，通过这个WebMVC的自动配置原理分析，我们要学会一种学习方式，通过源码探究，得出结论；这个结论一定是属于自己的，而且一通百通。</p>
<p>SpringBoot的底层，大量用到了这些设计细节思想，所以，没事需要多阅读源码！得出结论；</p>
<p>SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（如果用户自己配置@bean），如果有就用用户配置的，如果没有就用自动配置的；</p>
<p>如果有些组件可以存在多个，比如我们的视图解析器，就将用户配置的和自己默认的组合起来！</p>
<p><strong>扩展使用SpringMVC</strong>  官方文档如下：</p>
<p>If you want to keep Spring Boot MVC features and you want to add additional MVC configuration (interceptors, formatters, view controllers, and other features), you can add your own @Configuration class of type WebMvcConfigurer but without @EnableWebMvc. If you wish to provide custom instances of RequestMappingHandlerMapping, RequestMappingHandlerAdapter, or ExceptionHandlerExceptionResolver, you can declare a WebMvcRegistrationsAdapter instance to provide such components.</p>
<p>我们要做的就是编写一个@Configuration注解类，并且类型要为WebMvcConfigurer，还不能标注@EnableWebMvc注解；我们去自己写一个；我们新建一个包叫config，写一个类MyMvcConfig；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//应为类型要求为WebMvcConfigurer，所以我们实现其接口</span></span><br><span class="line"><span class="comment">//可以使用自定义类扩展MVC的功能</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 浏览器发送/test ， 就会跳转到test页面；</span></span><br><span class="line">        registry.addViewController(<span class="string">&quot;/test&quot;</span>).setViewName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们去浏览器访问一下：</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7Idia351qHgmH2vbzurk1Pp6smNnW3fpooPSQpiaoMajpXYGDoH0aQnv8awIibPa9eKkJhewdMrTtLTg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p>
<p><strong>确实也跳转过来了！所以说，我们要扩展SpringMVC，官方就推荐我们这么去使用，既保SpringBoot留所有的自动配置，也能用我们扩展的配置！</strong></p>
<p>我们可以去分析一下原理：</p>
<p>1、WebMvcAutoConfiguration 是 SpringMVC的自动配置类，里面有一个类WebMvcAutoConfigurationAdapter</p>
<p>2、这个类上有一个注解，在做其他自动配置时会导入：@Import(EnableWebMvcConfiguration.class)</p>
<p>3、我们点进EnableWebMvcConfiguration这个类看一下，它继承了一个父类：DelegatingWebMvcConfiguration</p>
<p>这个父类中有这样一段代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> WebMvcConfigurerComposite configurers = <span class="keyword">new</span> WebMvcConfigurerComposite();</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 从容器中获取所有的webmvcConfigurer</span></span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfigurers</span><span class="params">(List&lt;WebMvcConfigurer&gt; configurers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.configurers.addWebMvcConfigurers(configurers);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4、我们可以在这个类中去寻找一个我们刚才设置的viewController当做参考，发现它调用了一个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.configurers.addViewControllers(registry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5、我们点进去看一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">    Iterator var2 = <span class="keyword">this</span>.delegates.iterator();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(var2.hasNext()) &#123;</span><br><span class="line">        <span class="comment">// 将所有的WebMvcConfigurer相关配置来一起调用！包括我们自己配置的和Spring给我们配置的</span></span><br><span class="line">        WebMvcConfigurer delegate = (WebMvcConfigurer)var2.next();</span><br><span class="line">        delegate.addViewControllers(registry);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以得出结论：所有的WebMvcConfiguration都会被作用，不止Spring自己的配置类，我们自己的配置类当然也会被调用；</p>
<hr>
<h4 id="全面接管SpringMVC"><a href="#全面接管SpringMVC" class="headerlink" title="全面接管SpringMVC"></a>全面接管SpringMVC</h4><p>官方文档：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">If you want to take complete control of Spring MVCyou can add your own <span class="meta">@Configuration</span> annotated with <span class="meta">@EnableWebMvc</span>.</span><br></pre></td></tr></table></figure>

<p>全面接管即：SpringBoot对SpringMVC的自动配置不需要了，所有都是我们自己去配置！</p>
<p>只需在我们的配置类中要加一个@EnableWebMvc。</p>
<p>我们看下如果我们全面接管了SpringMVC了，我们之前SpringBoot给我们配置的静态资源映射一定会无效，我们可以去测试一下；</p>
<p>不加注解之前，访问首页：</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7Idia351qHgmH2vbzurk1Pp6ic2wzwiaMd6YwOHuK1fcn3ibhuXD60XiarS9NLdTIDJJicFZJt1wQ0ibuUxg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p>
<p>给配置类加上注解：@EnableWebMvc</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7Idia351qHgmH2vbzurk1Pp68kRH4rPKMyhAdkIL46HW90qsSoyMcNibRxDbfu7iboWM6AMRr5tFSicPA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p>
<p>我们发现所有的SpringMVC自动配置都失效了！回归到了最初的样子；</p>
<p><strong>当然，我们开发中，不推荐使用全面接管SpringMVC</strong></p>
<p>思考问题？为什么加了一个注解，自动配置就失效了！我们看下源码：</p>
<p>1、这里发现它是导入了一个类，我们可以继续进去看</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;DelegatingWebMvcConfiguration.class&#125;)</span><span class="keyword">public</span> <span class="meta">@interface</span> EnableWebMvc &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>2、它继承了一个父类 WebMvcConfigurationSupport</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;  </span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、我们来回顾一下Webmvc自动配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class &#125;)</span></span><br><span class="line"><span class="comment">// 这个注解的意思就是：容器中没有这个组件的时候，这个自动配置类才生效</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,</span></span><br><span class="line"><span class="meta">    ValidationAutoConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcAutoConfiguration</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总结一句话：</p>
<p>​    @EnableWebMvc将WebMvcConfigurationSupport组件导入进来了(就是我们自定义的配置类)，又因为<code>@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</code>，所以系统默认的<code>WebMvcConfigurationSupport.class</code>失效了。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>整合Mybatis</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SpringBoot/%E6%95%B4%E5%90%88Mybatis/</url>
    <content><![CDATA[<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p><strong>1、导入 MyBatis 所需要的依赖</strong>  （当然你自己数据库的依赖也要导入）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>2、配置数据库连接信息（不变）</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">12345678</span></span><br><span class="line">    <span class="comment">#?serverTimezone=UTC解决时区的报错</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/springboot?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#这个必须要配置  相当于之前Mybatis.xml</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.cooper.pojo</span></span><br></pre></td></tr></table></figure>



<p><strong>3、测试数据库是否连接成功！</strong></p>
<p>**4、创建实体类，导入 Lombok！ ** <a href="https://blog.csdn.net/STUDENTstudent123/article/details/105078108/"> 这里说明一下为何实体类无需注入</a></p>
<p>Department.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String departmentName;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>5、创建mapper目录以及对应的 Mapper 接口</strong></p>
<p>DepartmentMapper.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@Mapper : 表示本类是一个 MyBatis 的 Mapper</span></span><br><span class="line"><span class="meta">@Mapper</span>  <span class="comment">//此处的@Mapper如果不加的话，需要在SpringBootApplication启动类中加上@MapperScan（包名）来代替</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DepartmentMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取所有部门信息</span></span><br><span class="line">    <span class="function">List&lt;Department&gt; <span class="title">getDepartments</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过id获得部门</span></span><br><span class="line">    <span class="function">Department <span class="title">getDepartment</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>6、对应的Mapper映射文件</strong></p>
<p>DepartmentMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.kuang.mapper.DepartmentMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDepartments&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Department&quot;</span>&gt;</span></span><br><span class="line">       select * from department;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDepartment&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Department&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">       select * from department where id = #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>7、maven配置资源过滤问题</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>8、编写部门的 DepartmentController 进行测试！</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepartmentController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DepartmentMapper departmentMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 查询全部部门</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getDepartments&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Department&gt; <span class="title">getDepartments</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> departmentMapper.getDepartments();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询全部部门</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getDepartment/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Department <span class="title">getDepartment</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> departmentMapper.getDepartment(id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>启动项目访问进行测试！</strong></p>
<p><a href="https://www.jianshu.com/p/0e466a21185c">mybatis的坑</a></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>配置Druid数据源</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SpringBoot/%E9%85%8D%E7%BD%AEDruid%E6%95%B0%E6%8D%AE%E6%BA%90/</url>
    <content><![CDATA[<h4 id="Druid简介"><a href="#Druid简介" class="headerlink" title="Druid简介"></a>Druid简介</h4><p>Java程序很大一部分要操作数据库，为了提高性能操作数据库的时候，又不得不使用数据库连接池。</p>
<p>Druid 是阿里巴巴开源平台上一个数据库连接池实现，结合了 C3P0、DBCP 等 DB 池的优点，同时加入了日志监控。</p>
<p>Druid 可以很好的监控 DB 池连接和 SQL 的执行情况，天生就是针对监控而生的 DB 连接池。</p>
<p>Druid已经在阿里巴巴部署了超过600个应用，经过一年多生产环境大规模部署的严苛考验。</p>
<p>Spring Boot 2.0 以上默认使用 Hikari 数据源，可以说 Hikari 与 Driud 都是当前 Java Web 上最优秀的数据源，我们来重点介绍 Spring Boot 如何集成 Druid 数据源，如何实现数据库监控。</p>
<p>Github地址：<a href="https://github.com/alibaba/druid/">https://github.com/alibaba/druid/</a></p>
<p><strong>com.alibaba.druid.pool.DruidDataSource 基本配置参数如下：</strong></p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200810150132.png" alt="image-20200810150131056" style="zoom:50%;" />

<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200810150427.png" alt="image-20200810150155589" style="zoom:50%;" />

<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200810150508.png" alt="image-20200810150213847" style="zoom:50%;" />

<h4 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h4><p>1、添加上 Druid 数据源依赖。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、切换数据源；之前已经说过 Spring Boot 2.0 以上默认使用 com.zaxxer.hikari.HikariDataSource 数据源，但可以 通过 spring.datasource.type 指定数据源。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/springboot?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span> <span class="comment"># 自定义数据源</span></span><br></pre></td></tr></table></figure>

<p>3、数据源切换之后，在测试类中注入 DataSource，然后获取到它，输出一看便知是否成功切换；</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200810145916.png" alt="image-20200810145539875"></p>
<p>4、切换成功！既然切换成功，就可以设置数据源连接初始化大小、最大连接数、等待时间、最小连接数 等设置项；可以查看源码</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="comment">#?serverTimezone=UTC解决时区的报错</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/springboot?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#Spring Boot 默认是不注入这些属性值的，需要自己绑定</span></span><br><span class="line">    <span class="comment">#druid 数据源专有配置</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入</span></span><br><span class="line">    <span class="comment">#如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority</span></span><br><span class="line">    <span class="comment">#则导入 log4j 依赖即可，Maven 地址：https://mvnrepository.com/artifact/log4j/log4j</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br></pre></td></tr></table></figure>

<p>5、导入Log4j 的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>6、现在需要程序员自己为 DruidDataSource 绑定全局配置文件中的参数，再添加到容器中，而不再使用 Spring Boot 的自动生成了；我们需要 自己添加 DruidDataSource 组件到容器中，并绑定属性；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       将自定义的 Druid数据源添加到容器中，不再让 Spring Boot 自动创建</span></span><br><span class="line"><span class="comment">       绑定全局配置文件中的 druid 数据源属性到 com.alibaba.druid.pool.DruidDataSource从而让它们生效</span></span><br><span class="line"><span class="comment">       @ConfigurationProperties(prefix = &quot;spring.datasource&quot;)：作用就是将 全局配置文件中</span></span><br><span class="line"><span class="comment">       前缀为 spring.datasource的属性值注入到 com.alibaba.druid.pool.DruidDataSource 的同名参数中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druidDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>7、去测试类中测试一下；看是否成功！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringbootDataJdbcApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//DI注入数据源</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//看一下默认数据源</span></span><br><span class="line">        System.out.println(dataSource.getClass());</span><br><span class="line">        <span class="comment">//获得连接</span></span><br><span class="line">        Connection connection =   dataSource.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line"></span><br><span class="line">        DruidDataSource druidDataSource = (DruidDataSource) dataSource;</span><br><span class="line">        System.out.println(<span class="string">&quot;druidDataSource 数据源最大连接数：&quot;</span> + druidDataSource.getMaxActive());</span><br><span class="line">        System.out.println(<span class="string">&quot;druidDataSource 数据源初始化连接数：&quot;</span> + druidDataSource.getInitialSize());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果 ：可见配置参数已经生效！</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200810145859.png" alt="image-20200810145858745" style="zoom:50%;" />



<hr>
<h4 id="配置Druid数据源监控"><a href="#配置Druid数据源监控" class="headerlink" title="配置Druid数据源监控"></a>配置Druid数据源监控</h4><p><strong><font color=red>在此处也体现了Servlet和Filter注册的方法（相当于在web.xml中对Servlet和Filter进行配置）</font></strong></p>
<p>Druid 数据源具有监控的功能，并提供了一个 web 界面方便用户查看，类似安装 路由器 时，人家也提供了一个默认的 web 页面。</p>
<p>所以第一步需要设置 Druid 的后台管理页面，比如 登录账号、密码 等；配置后台管理；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置 Druid 监控管理后台的Servlet；</span></span><br><span class="line"><span class="comment">//内置 Servlet 容器时没有web.xml文件，所以使用 Spring Boot 的注册 Servlet 方式</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">statViewServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ServletRegistrationBean bean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> StatViewServlet(), <span class="string">&quot;/druid/*&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这些参数可以在 com.alibaba.druid.support.http.StatViewServlet </span></span><br><span class="line">    <span class="comment">// 的父类 com.alibaba.druid.support.http.ResourceServlet 中找到</span></span><br><span class="line">    Map&lt;String, String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    initParams.put(<span class="string">&quot;loginUsername&quot;</span>, <span class="string">&quot;admin&quot;</span>); <span class="comment">//后台管理界面的登录账号  loginUsername不能写成其他的</span></span><br><span class="line">    initParams.put(<span class="string">&quot;loginPassword&quot;</span>, <span class="string">&quot;123456&quot;</span>); <span class="comment">//后台管理界面的登录密码 loginPassword不能写成其他的</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//后台允许谁可以访问</span></span><br><span class="line">    <span class="comment">//initParams.put(&quot;allow&quot;, &quot;localhost&quot;)：表示只有本机可以访问</span></span><br><span class="line">    <span class="comment">//initParams.put(&quot;allow&quot;, &quot;&quot;)：为空或者为null时，表示允许所有访问</span></span><br><span class="line">    initParams.put(<span class="string">&quot;allow&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="comment">//deny：Druid 后台拒绝谁访问</span></span><br><span class="line">    <span class="comment">//initParams.put(&quot;kuangshen&quot;, &quot;192.168.1.20&quot;);表示禁止此ip访问</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置初始化参数</span></span><br><span class="line">    bean.setInitParameters(initParams);</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置完毕后，我们可以选择访问 ：<a href="http://localhost:8080/druid/login.html">http://localhost:8080/druid/login.html</a></p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200810150010.png" alt="image-20200810150009180" style="zoom:50%;" />

<p>进入之后</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200810150027.png" alt="image-20200810150026074" style="zoom:50%;" />

<p><strong>配置 Druid web 监控 filter 过滤器</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置 Druid 监控 之  web 监控的 filter</span></span><br><span class="line"><span class="comment">//WebStatFilter：用于配置Web和Druid数据源之间的管理关联监控统计</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">webStatFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    FilterRegistrationBean bean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">    bean.setFilter(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//exclusions：设置哪些请求进行过滤排除掉，从而不进行统计</span></span><br><span class="line">    Map&lt;String, String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    initParams.put(<span class="string">&quot;exclusions&quot;</span>, <span class="string">&quot;*.js,*.css,/druid/*,/jdbc/*&quot;</span>);</span><br><span class="line">    bean.setInitParameters(initParams);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//&quot;/*&quot; 表示过滤所有请求</span></span><br><span class="line">    bean.setUrlPatterns(Arrays.asList(<span class="string">&quot;/*&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>平时在工作中，按需求进行配置即可，主要用作监控！</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>国际化</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SpringBoot/%E5%9B%BD%E9%99%85%E5%8C%96/</url>
    <content><![CDATA[<ol>
<li><p>在resource文件下添加如下文件</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200809213812.png" alt="image-20200809212446000" style="zoom:50%;" /></li>
<li><p>在login.properties文件下添加键值对</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200809213818.png" alt="image-20200809212549270" style="zoom: 33%;" /></li>
<li><p>因为国际化的相关类对应的properties对应的文件中</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200809213829.png" alt="image-20200809212721156" style="zoom:50%;" />

<p>basename是国际化配置文件的真实位置</p>
<p>所以在application.properties配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.messages.basename</span>=<span class="string">i18n.login</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写页面</p>
<p>注意点  国际化的值需要使用#{}</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">&quot;#&#123;login.tip&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">th:placeholder</span>=<span class="string">&quot;#&#123;login.username&#125;&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">th:placeholder</span>=<span class="string">&quot;#&#123;login.password&#125;&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>[[#&#123;login.btn&#125;]]<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/login.html(l=&#x27;zh_CN&#x27;)&#125;&quot;</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/login.html(l=&#x27;en_US&#x27;)&#125;&quot;</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置解析器</p>
<p>1.原理</p>
<p>在Spring中有一个国际化的Locale （区域信息对象）；里面有一个叫做LocaleResolver （获取区域信息对象）的解析器！</p>
<p>我们去我们webmvc自动配置文件，寻找一下！看到SpringBoot默认配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;spring.mvc&quot;, name = &quot;locale&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 容器中没有就自己配，有的话就用用户配置的</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.mvcProperties.getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FixedLocaleResolver(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 接收头国际化分解</span></span><br><span class="line">    AcceptHeaderLocaleResolver localeResolver = <span class="keyword">new</span> AcceptHeaderLocaleResolver();</span><br><span class="line">    localeResolver.setDefaultLocale(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">    <span class="keyword">return</span> localeResolver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>AcceptHeaderLocaleResolver 这个类中有一个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    Locale defaultLocale = <span class="keyword">this</span>.getDefaultLocale();</span><br><span class="line">    <span class="comment">// 默认的就是根据请求头带来的区域信息获取Locale进行国际化</span></span><br><span class="line">    <span class="keyword">if</span> (defaultLocale != <span class="keyword">null</span> &amp;&amp; request.getHeader(<span class="string">&quot;Accept-Language&quot;</span>) == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> defaultLocale;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Locale requestLocale = request.getLocale();</span><br><span class="line">        List&lt;Locale&gt; supportedLocales = <span class="keyword">this</span>.getSupportedLocales();</span><br><span class="line">        <span class="keyword">if</span> (!supportedLocales.isEmpty() &amp;&amp; !supportedLocales.contains(requestLocale)) &#123;</span><br><span class="line">            Locale supportedLocale = <span class="keyword">this</span>.findSupportedLocale(request, supportedLocales);</span><br><span class="line">            <span class="keyword">if</span> (supportedLocale != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> supportedLocale;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> defaultLocale != <span class="keyword">null</span> ? defaultLocale : requestLocale;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> requestLocale;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那假如我们现在想点击链接让我们的国际化资源生效，就需要让我们自己的Locale生效！</p>
<p>我们去自己写一个自己的LocaleResolver，可以在链接上携带区域信息！</p>
<p>修改一下前端页面的跳转连接：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/login.html(l=&#x27;zh_CN&#x27;)&#125;&quot;</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/login.html(l=&#x27;en_US&#x27;)&#125;&quot;</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>编写MyLocalResolver</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocalResolver</span> <span class="keyword">implements</span> <span class="title">LocaleResolver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">      	<span class="comment">//获取参数值以此来获取国家和地区值</span></span><br><span class="line">        String language = request.getParameter(<span class="string">&quot;l&quot;</span>);</span><br><span class="line"></span><br><span class="line">     		<span class="comment">//获取默认的国家和地区信息</span></span><br><span class="line">        Locale locale = Locale.getDefault();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(language))</span><br><span class="line">        &#123;</span><br><span class="line">            String[] array = language.split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">          	<span class="comment">//封装成locale</span></span><br><span class="line">            locale = <span class="keyword">new</span> Locale(array[<span class="number">0</span>],array[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> locale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Locale locale)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>注册到Config中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyLocalResolver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>配置Controller，映射地址</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&#123;&quot;login&quot;,&quot;login.html&quot;&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">international</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>测试</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200809213733.png" alt="image-20200809213724105" style="zoom:50%;" />

<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200809213754.png" alt="image-20200809213750939" style="zoom:50%;" /></li>
</ol>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Alibaba</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SpringCloud/Alibaba/</url>
    <content><![CDATA[<h4 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h4><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><h6 id="windows-版本"><a href="#windows-版本" class="headerlink" title="windows 版本"></a>windows 版本</h6><ol>
<li><p>需要环境Java8+Maven</p>
</li>
<li><p>下载Nacos（<a href="https://github.com/alibaba/nacos/releases/download/2.0.3/nacos-server-2.0.3.zip%EF%BC%89">https://github.com/alibaba/nacos/releases/download/2.0.3/nacos-server-2.0.3.zip）</a></p>
</li>
<li><p>运行Nacos （注意：需要对配置文件先进行修改）</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210818110853.png" alt="image-20210818110845467"></p>
</li>
<li><p>访问 <a href="http://localhost:8848/nacos">http://localhost:8848/nacos</a> 默认账号密码为nacos</p>
</li>
</ol>
<p><font color=red>注意：需要对数据库先进行数据库中表的创建</font></p>
<h6 id="docker-版本"><a href="#docker-版本" class="headerlink" title="docker 版本"></a>docker 版本</h6><ol>
<li><p><code>git clone https://github.com/nacos-group/nacos-docker.git cd nacos-docker</code></p>
</li>
<li><p><code>docker-compose -f example/standalone-mysql-5.7.yaml up</code></p>
<p><font color=red>注意：刚开始的运行的时候不会离开创建数据库中的表，因此过了一段时间之后可以发现表已经创建完成了，重启nacos即可</font></p>
<p><a href="https://github.com/alibaba/nacos/edit/master/distribution/conf/nacos-mysql.sql">创建表的sql</a></p>
</li>
</ol>
<h5 id="创建服务提供者并注册"><a href="#创建服务提供者并注册" class="headerlink" title="创建服务提供者并注册"></a>创建服务提供者并注册</h5><ul>
<li><p>父pom文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring cloud 阿里巴巴--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>子pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SpringCloud ailibaba nacos --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日常通用jar包配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-payment-provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">172.23</span><span class="number">.27</span><span class="number">.117</span><span class="string">:8848</span> <span class="comment">#配置Nacos地址</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li><p>创建主启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentApplication9001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentApplication9001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>创建测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/payment/nacos/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPayment</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;nacos registry, serverPort: &quot;</span>+ serverPort+<span class="string">&quot;\t id&quot;</span>+id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>查看注册服务情况</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210818150138.png" alt="image-20210818150136283"></p>
</li>
<li><p>复制多实例</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210818150903.png" alt="image-20210818150902058"></p>
</li>
</ul>
<h5 id="创建服务消费者并注册"><a href="#创建服务消费者并注册" class="headerlink" title="创建服务消费者并注册"></a>创建服务消费者并注册</h5><ul>
<li><p>因为其本身就引入了ribbon，因此可以直接做负载均衡</p>
</li>
<li><p>pom文件和提供者一样</p>
</li>
<li><p>yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">83</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-order-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#消费者将要去访问的微服务名称(注册成功进nacos的微服务提供者)</span></span><br><span class="line"><span class="attr">service-url:</span></span><br><span class="line">  <span class="attr">nacos-user-service:</span> <span class="string">http://nacos-payment-provider</span></span><br></pre></td></tr></table></figure></li>
<li><p>主启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderNacosApplication80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderNacosApplication80.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>config</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span>  <span class="comment">//负载均衡</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderNacosController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;service-url.nacos-user-service&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverURL;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/consumer/payment/nacos/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(serverURL+<span class="string">&quot;/payment/nacos/&quot;</span>+id,String.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h5><ul>
<li><p>pom 比前面的多了一个spring-cloud-starter-alibaba-nacos-config</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--nacos-config--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--nacos-discovery--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--web + actuator--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--一般基础配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>yaml</p>
<ul>
<li><p>bootstrap.yaml <font color=red>优先级最高</font></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nacos配置</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3377</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#Nacos服务注册中心地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#Nacos作为配置中心地址</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment">#指定yaml格式的配置</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># $&#123;spring.application.name&#125;-$&#123;spring.profile.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</span></span><br><span class="line"><span class="comment"># nacos-config-client-dev.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># nacos-config-client-test.yaml   ----&gt; config.info</span></span><br></pre></td></tr></table></figure></li>
<li><p>application.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span> <span class="comment"># 表示开发环境</span></span><br><span class="line">    <span class="comment">#active: test # 表示测试环境</span></span><br><span class="line"><span class="comment">#    active: info</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>主启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosConfigClientApplication3377</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(NacosConfigClientApplication3377.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span> <span class="comment">//支持Nacos的动态刷新功能。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;config.info&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String configInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/config/info&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfigInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>配置文件命名规则</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210818153254.png" alt="image-20210818153252263"></p>
</li>
</ul>
<h4 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel"></a>Sentinel</h4><p>阿里巴巴的豪猪哥</p>
<h5 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h5><h6 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h6><ol>
<li><p><code>docker pull bladex/sentinel-dashboard</code></p>
</li>
<li><p><code>docker run --name sentinel -d -p 8858:8858 -p 8179:8179 -d bladex/sentinel-dashboard</code></p>
<p>注意：一定要保留8179的端口</p>
</li>
</ol>
<h6 id="本地"><a href="#本地" class="headerlink" title="本地"></a>本地</h6><p>下载jar包，然后java -jar</p>
<h5 id="创建服务"><a href="#创建服务" class="headerlink" title="创建服务"></a>创建服务</h5><ul>
<li><p>pom文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SpringCloud ailibaba nacos --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SpringCloud ailibaba sentinel-datasource-nacos 后续做持久化用到--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SpringCloud ailibaba sentinel --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--openfeign--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SpringBoot整合Web组件+actuator --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日常通用jar包配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.6.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8401</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloudalibaba-sentinel-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">172.23</span><span class="number">.27</span><span class="number">.117</span><span class="string">:8848,172.23.27.117:8849,172.23.27.117:8850</span> <span class="comment">#Nacos服务注册中心地址</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="number">172.23</span><span class="number">.27</span><span class="number">.117</span><span class="string">:8858</span> <span class="comment">#配置Sentinel dashboard地址</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span></span><br><span class="line">        <span class="attr">clientIp:</span> <span class="number">10.17</span><span class="number">.100</span><span class="number">.186</span> <span class="comment">#服务所在地址 这里许需要写ip 不能写localhost</span></span><br><span class="line"><span class="comment">#      datasource:</span></span><br><span class="line"><span class="comment">#        ds1:</span></span><br><span class="line"><span class="comment">#          nacos:</span></span><br><span class="line"><span class="comment">#            server-addr: localhost:8848</span></span><br><span class="line"><span class="comment">#            dataId: cloudalibaba-sentinel-service</span></span><br><span class="line"><span class="comment">#            groupId: DEFAULT_GROUP</span></span><br><span class="line"><span class="comment">#            data-type: json</span></span><br><span class="line"><span class="comment">#            rule-type: flow</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 激活Sentinel对Feign的支持</span></span><br></pre></td></tr></table></figure></li>
<li><p>主启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SentinelApplication8041</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SentinelApplication8041.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowLimitController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/testA&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testA</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;------testA&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/testB&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testB</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        log.info(Thread.currentThread().getName()+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;...testB&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;------testB&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>这里需要Sentinel使用的懒加载，因此加载刚开始的时候会出现没有的现象，因此需要手动触发服务之后才会有显示</p>
</li>
</ul>
<h5 id="dashboard"><a href="#dashboard" class="headerlink" title="dashboard"></a>dashboard</h5><h6 id="流控规则"><a href="#流控规则" class="headerlink" title="流控规则"></a>流控规则</h6><ul>
<li><p>每秒的请求数控制</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210818185858.png" alt="image-20210818185854933"></p>
<p>图中显示的是每秒的请求数不能超过1个/s，超过则报错</p>
</li>
<li><p>线程数</p>
<p>线程数指的是内部处理的线程设定值</p>
</li>
<li><p>关联流控模式</p>
<p>程序A的并发量达到一定的程度，会限制B的并发量</p>
<p>比如说购物接口并发量很大导致支付接口压力很大，那么支付接口达到一定的压力之后就会限制购物接口的并发量</p>
</li>
<li><p>warmup配置</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210818191300.png" alt="image-20210818191259529"></p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210818191342.png" alt="image-20210818191341321">    </p>
</li>
<li><p>排队等待配置</p>
<p>匀速排队，让请求以均匀的速度通过，阈值类型必须设置为QPS</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210818191955.png" alt="image-20210818191953804"></p>
<p>每秒钟处理一个请求，如果请求太多并且等待时间超过10s，那么就会报错，否则会等待处理</p>
</li>
</ul>
<h6 id="降级"><a href="#降级" class="headerlink" title="降级"></a>降级</h6><ul>
<li><p>RT（响应时间）</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210818192958.png" alt="image-20210818192956671"></p>
<p>含义：当1s内有&gt;=5个请求过来并且其中有80%的请求的响应时间都&gt;200ms,那么会触发熔断器持续1s，1s之会恢复（不会像豪猪哥那样half恢复）</p>
</li>
<li><p>异常比例</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210818193301.png" alt="image-20210818193259510"></p>
<p>含义：当1s内有&gt;=5个请求过来并且其中有80%的请求都失败,那么会触发熔断器持续1s，1s之会慢慢恢复</p>
</li>
<li><p>异常数</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210818193557.png" alt="image-20210818193556129"></p>
<p>含义：当1min内有&gt;=5个请求过来并且其中有100个请求都失败,那么会触发熔断器持续1s，1s之会慢慢恢复（此处必须是都是分钟级别的）</p>
</li>
</ul>
<h6 id="热点key"><a href="#热点key" class="headerlink" title="热点key"></a>热点key</h6><p>controller配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/testHotKey&quot;)</span></span><br><span class="line"><span class="meta">@SentinelResource(value = &quot;testHotKey&quot;,blockHandler = &quot;deal_testHotKey&quot;)</span> <span class="comment">//@SentinelResource只负责在控制页面编写的规则，不负责其他的异常处理</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testHotKey</span><span class="params">(<span class="meta">@RequestParam(value = &quot;p1&quot;,required = false)</span> String p1,</span></span></span><br><span class="line"><span class="params"><span class="function">                         <span class="meta">@RequestParam(value = &quot;p2&quot;,required = false)</span> String p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//int age = 10/0;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;------testHotKey&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deal_testHotKey</span> <span class="params">(String p1, String p2, BlockException exception)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;------deal_testHotKey,o(╥﹏╥)o&quot;</span>;  <span class="comment">//sentinel系统默认的提示：Blocked by Sentinel (flow limiting)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210818194648.png" alt="image-20210818194646295"></p>
<p>含义：如果1s内testHotKey这个资源中的第1个参数的次数超过1，就会触发熔断，执行deal_testHotKey操作</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210818195419.png" alt="image-20210818195418073"></p>
<p>含义：如果1s内testHotKey这个资源中的第1个参数的次数超过1，就会触发熔断，执行deal_testHotKey操作，但是如果第1个参数值为Cooper，那么阈值就是200</p>
<h6 id="系统规则"><a href="#系统规则" class="headerlink" title="系统规则"></a>系统规则</h6><p>相当于是系统入口的大门检测，如果达到一定的条件，整个大门就会关闭</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210819111813.png" alt="image-20210819111811982"></p>
<p>如果整个系统的QPS总和达到10，就会不再处理请求，除非恢复</p>
<h6 id="自定义返回"><a href="#自定义返回" class="headerlink" title="自定义返回"></a>自定义返回</h6><ul>
<li><p>创建统一兜底类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerBlockHandler</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title">handlerException</span><span class="params">(BlockException exception)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">4444</span>,<span class="string">&quot;按客戶自定义,global handlerException----1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title">handlerException2</span><span class="params">(BlockException exception)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">4444</span>,<span class="string">&quot;按客戶自定义,global handlerException----2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RateLimitController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/byResource&quot;)</span></span><br><span class="line">    <span class="meta">@SentinelResource(value = &quot;byResource&quot;,blockHandler = &quot;handleException&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">byResource</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">&quot;按资源名称限流测试OK&quot;</span>,<span class="keyword">new</span> Payment(<span class="number">2020L</span>,<span class="string">&quot;serial001&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">handleException</span><span class="params">(BlockException exception)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>,exception.getClass().getCanonicalName()+<span class="string">&quot;\t 服务不可用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/rateLimit/byUrl&quot;)</span></span><br><span class="line">    <span class="meta">@SentinelResource(value = &quot;byUrl&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">byUrl</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">&quot;按url限流测试OK&quot;</span>,<span class="keyword">new</span> Payment(<span class="number">2020L</span>,<span class="string">&quot;serial002&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/rateLimit/customerBlockHandler&quot;)</span></span><br><span class="line">    <span class="meta">@SentinelResource(value = &quot;customerBlockHandler&quot;,</span></span><br><span class="line"><span class="meta">            blockHandlerClass = CustomerBlockHandler.class, //兜底类</span></span><br><span class="line"><span class="meta">            blockHandler = &quot;handlerException2&quot;)</span> <span class="comment">//选择的兜底方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">customerBlockHandler</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">&quot;按客戶自定义&quot;</span>,<span class="keyword">new</span> Payment(<span class="number">2020L</span>,<span class="string">&quot;serial003&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h6 id="SentinelResource的选项"><a href="#SentinelResource的选项" class="headerlink" title="@SentinelResource的选项"></a>@SentinelResource的选项</h6><p><font color=red>fallback管理的是java异常，blockHandler管理的是Sentinel控制台配置的规则</font></p>
<p>里面还有一个选项是exceptionsToIgnore的功能是忽略抛出的该异常，直接让其自生自灭</p>
<h6 id="整合openFeign"><a href="#整合openFeign" class="headerlink" title="整合openFeign"></a>整合openFeign</h6><ul>
<li><p>pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SpringCloud ailibaba nacos --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--openfeign--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日常通用jar包配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">84</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-order-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">172.23</span><span class="number">.27</span><span class="number">.117</span><span class="string">:8848,172.23.27.117:8849,172.23.27.117:8850</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="comment">#配置Sentinel dashboard地址</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8858</span></span><br><span class="line">        <span class="comment">#默认8719端口，假如被占用会自动从8719开始依次+1扫描,直至找到未被占用的端口</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span></span><br><span class="line">        <span class="attr">clientIp:</span> <span class="number">10.17</span><span class="number">.100</span><span class="number">.186</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#消费者将要去访问的微服务名称(注册成功进nacos的微服务提供者)</span></span><br><span class="line"><span class="attr">service-url:</span></span><br><span class="line">  <span class="attr">nacos-user-service:</span> <span class="string">http://nacos-payment-provider</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 激活Sentinel对Feign的支持</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
<li><p>service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;nacos-payment-provider&quot;,fallback = PaymentFallbackService.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/payment/nacos/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPayment</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>String id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentFallbackService</span> <span class="keyword">implements</span> <span class="title">PaymentService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPayment</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;PaymentFallbackService---------&quot;</span>+<span class="string">&quot;id&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/paymentSQL/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentSQL</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> String id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paymentService.getPayment(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>主启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentApplication9004</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentApplication9004.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h6 id="规则持久化"><a href="#规则持久化" class="headerlink" title="规则持久化"></a>规则持久化</h6><ul>
<li><p>yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8401</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloudalibaba-sentinel-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">172.23</span><span class="number">.27</span><span class="number">.117</span><span class="string">:8848,172.23.27.117:8849,172.23.27.117:8850</span> <span class="comment">#Nacos服务注册中心地址</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8858</span> <span class="comment">#配置Sentinel dashboard地址</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span></span><br><span class="line">        <span class="attr">clientIp:</span> <span class="number">10.17</span><span class="number">.100</span><span class="number">.186</span> <span class="comment">#服务所在地址 这里许需要写ip 不能写localhost</span></span><br><span class="line">      <span class="comment"># 注意这里的datasource  </span></span><br><span class="line">      <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">ds1:</span></span><br><span class="line">          <span class="attr">nacos:</span></span><br><span class="line">            <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">            <span class="attr">dataId:</span> <span class="string">cloudalibaba-sentinel-service</span></span><br><span class="line">            <span class="attr">groupId:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">            <span class="attr">data-type:</span> <span class="string">json</span></span><br><span class="line">            <span class="attr">rule-type:</span> <span class="string">flow</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 激活Sentinel对Feign的支持</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>在nacos中进行配置</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210819154354.png" alt="image-20210819154352951"></p>
<p>yaml：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;resource&quot;:</span> <span class="string">&quot;/rateLimit/byUrl&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;limitApp&quot;:</span> <span class="string">&quot;default&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;grade&quot;:</span> <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;count&quot;:</span> <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;strategy&quot;:</span> <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;controlBehavior&quot;:</span> <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;clusterMode&quot;:</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>规则：</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210819154441.png" alt="image-20210819154439916"></p>
<p>完成：</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210819154535.png" alt="image-20210819154532557"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
        <tag>Alibaba</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SpringCloud/SpringCloud/</url>
    <content><![CDATA[<h3 id="1-学习前言"><a href="#1-学习前言" class="headerlink" title="1. 学习前言"></a>1. 学习前言</h3><h4 id="1-1-内容概述"><a href="#1-1-内容概述" class="headerlink" title="1.1 内容概述"></a>1.1 内容概述</h4><blockquote>
<p>学习前提：</p>
</blockquote>
<ul>
<li>JavaSE</li>
<li>数据库</li>
<li>前端</li>
<li>Servlet</li>
<li>Http</li>
<li>Mybatis + Spring + SpringMVC</li>
<li>Springboot</li>
<li>Dubbo + Zookeeper + 分布式基础</li>
<li>Maven + Git</li>
<li>Ajax + Json</li>
<li>…</li>
</ul>
<blockquote>
<p>这个阶段如何学习?</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">三层架构 + MVC</span><br><span class="line"></span><br><span class="line">框架：</span><br><span class="line">	Spring(轻量级的Java开源框架)：解决企业开发的复杂性	IOC、AOP	</span><br><span class="line">	</span><br><span class="line">	SpringBoot(Spring的升级版)：新一代的JavaEE开发标准 自动装配</span><br><span class="line">	</span><br><span class="line">	模块化~	all in one</span><br><span class="line">	</span><br><span class="line">	模块化的开发===all in one 代码没发生变</span><br><span class="line">	</span><br><span class="line">微服务架构4个核心问题:</span><br><span class="line">	1. 服务很多,客户端怎么访问?</span><br><span class="line">	2. 这么多服务,服务之间如何通信?</span><br><span class="line">	3. 这么多服务,如何治理?</span><br><span class="line">	4. 服务挂了怎么办?</span><br><span class="line">	</span><br><span class="line">解决方案选型:</span><br><span class="line">	SpringCloud 是一种生态！	学习前提已经会使用Springboot,有分布式基础,了解Dubbo+ZooKeeper</span><br><span class="line"></span><br><span class="line">    1. Spring Cloud NetFlix(已经停止维护)：一站式解决方案！可解决上述4个核心问题</span><br><span class="line">		API网关：zuul组件</span><br><span class="line">		通信：Feign ---- HttpClient ---- Http通信方式,同步,阻塞</span><br><span class="line">		服务注册和发现：Eureka</span><br><span class="line">		熔断机制：Hystrix</span><br><span class="line">		......</span><br><span class="line"></span><br><span class="line">    2. Apache Dubbo Zookeeper：半自动！需要整合别人的</span><br><span class="line">    	API网关：没有,找第三方组件(比如整合zull组件),或者自己实现</span><br><span class="line">    	通信：Dubbo 是一个基于Java的高性能的RPC通信框架(性能比Feign强大)</span><br><span class="line">    	服务注册和发现：Zookeeper</span><br><span class="line">    	熔断机制：没有,需要借助Hystrix</span><br><span class="line"></span><br><span class="line">    3. Spring Cloud Alibaba：目前最新的一站式解决方案！可解决上述4个核心问题,更简单</span><br><span class="line">    	API网关：</span><br><span class="line">    	通信：</span><br><span class="line">		服务注册和发现：</span><br><span class="line">		熔断机制：</span><br><span class="line">		</span><br><span class="line">新概念：服务网格~ Server Mesh</span><br><span class="line">	istio</span><br><span class="line">	</span><br><span class="line">万变不离其宗4个问题：</span><br><span class="line">	1. API网关</span><br><span class="line">	2. HTTP,RPC通信</span><br><span class="line">	3. 注册和发现</span><br><span class="line">	4. 熔断机制</span><br></pre></td></tr></table></figure>

<h4 id="1-2-常见面试题"><a href="#1-2-常见面试题" class="headerlink" title="1.2 常见面试题"></a>1.2 常见面试题</h4><p>1.1 什么是微服务？</p>
<p>1.2 微服务之间是如何独立通讯的？</p>
<p>1.3 SpringCloud 和 Dubbo有那些区别？</p>
<p>1.4 SpringBoot 和 SpringCloud，请谈谈你对他们的理解</p>
<p>1.5 什么是服务熔断？什么是服务降级？</p>
<p>1.6 微服务的优缺点分别是什么？说下你在项目开发中遇到的坑</p>
<p>1.7 你所知道的微服务技术栈有哪些？列举一二</p>
<p>1.8 Eureka和Zookeeper都可以提供服务注册与发现的功能，请说说两者的区别</p>
<p>…</p>
<h3 id="2-微服务概述"><a href="#2-微服务概述" class="headerlink" title="2. 微服务概述"></a>2. 微服务概述</h3><h4 id="2-1-什么是微服务？"><a href="#2-1-什么是微服务？" class="headerlink" title="2.1 什么是微服务？"></a>2.1 什么是微服务？</h4><p><strong>什么是微服务？</strong>微服务(Microservice Architecture) 是近几年流行的一种架构思想，关于它的概念很难一言以蔽之。</p>
<p>究竟什么是微服务呢？我们在此引用ThoughtWorks 公司的首席科学家 Martin Fowler 于2014年提出的一段话：</p>
<p>原文：<a href="https://martinfowler.com/articles/microservices.html">https://martinfowler.com/articles/microservices.html</a></p>
<p>汉化：<a href="https://www.cnblogs.com/liuning8023/p/4493156.html">https://www.cnblogs.com/liuning8023/p/4493156.html</a></p>
<ul>
<li>就目前而言，对于微服务，业界并没有一个统一的，标准的定义。</li>
<li>但通常而言，微服务架构是一种架构模式，或者说是一种架构风格，<strong>它体长将单一的应用程序划分成一组小的服务</strong>，每个服务运行在其独立的自己的进程内，服务之间互相协调，互相配置，为用户提供最终价值，服务之间采用轻量级的通信机制(<strong>HTTP</strong>)互相沟通，每个服务都围绕着具体的业务进行构建，并且能狗被独立的部署到生产环境中，另外，应尽量避免统一的，集中式的服务管理机制，对具体的一个服务而言，应该根据业务上下文，选择合适的语言，工具(<strong>Maven</strong>)对其进行构建，可以有一个非常轻量级的集中式管理来协调这些服务，可以使用不同的语言来编写服务，也可以使用不同的数据存储。</li>
</ul>
<p><strong>再来从技术维度角度理解下：</strong></p>
<ul>
<li>微服务化的核心就是将传统的一站式应用，根据业务拆分成一个一个的服务，彻底地去耦合，每一个微服务提供单个业务功能的服务，一个服务做一件事情，从技术角度看就是一种小而独立的处理过程，类似进程的概念，能够自行单独启动或销毁，拥有自己独立的数据库。</li>
</ul>
<h4 id="2-2-微服务与微服务架构"><a href="#2-2-微服务与微服务架构" class="headerlink" title="2.2 微服务与微服务架构"></a>2.2 微服务与微服务架构</h4><p><strong>微服务</strong></p>
<p>强调的是服务的大小，它关注的是某一个点，是具体解决某一个问题/提供落地对应服务的一个服务应用，狭义的看，可以看作是IDEA中的一个个微服务工程，或者Moudel。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">IDEA 工具里面使用Maven开发的一个个独立的小Moudel，它具体是使用SpringBoot开发的一个小模块，专业的事情交给专业的模块来做，一个模块就做着一件事情。</span><br><span class="line">强调的是一个个的个体，每个个体完成一个具体的任务或者功能。</span><br></pre></td></tr></table></figure>

<p><strong>微服务架构</strong></p>
<p>一种新的架构形式，Martin Fowler 于2014年提出。</p>
<p>微服务架构是一种架构模式，它体长将单一应用程序划分成一组小的服务，服务之间相互协调，互相配合，为用户提供最终价值。每个服务运行在其独立的进程中，服务与服务之间采用轻量级的通信机制**(如HTTP)<strong>互相协作，每个服务都围绕着具体的业务进行构建，并且能够被独立的部署到生产环境中，另外，应尽量避免统一的，集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具</strong>(如Maven)**对其进行构建。</p>
<h4 id="2-3-微服务优缺点"><a href="#2-3-微服务优缺点" class="headerlink" title="2.3 微服务优缺点"></a>2.3 微服务优缺点</h4><p><strong>优点</strong></p>
<ul>
<li>单一职责原则；</li>
<li>每个服务足够内聚，足够小，代码容易理解，这样能聚焦一个指定的业务功能或业务需求；</li>
<li>开发简单，开发效率高，一个服务可能就是专一的只干一件事；</li>
<li>微服务能够被小团队单独开发，这个团队只需2-5个开发人员组成；</li>
<li>微服务是松耦合的，是有功能意义的服务，无论是在开发阶段或部署阶段都是独立的；</li>
<li>微服务能使用不同的语言开发；</li>
<li>易于和第三方集成，微服务允许容易且灵活的方式集成自动部署，通过持续集成工具，如jenkins，Hudson，bamboo；</li>
<li>微服务易于被一个开发人员理解，修改和维护，这样小团队能够更关注自己的工作成果，无需通过合作才能体现价值；</li>
<li>微服务允许利用和融合最新技术；</li>
<li><strong>微服务只是业务逻辑的代码，不会和HTML，CSS，或其他的界面混合;</strong></li>
<li><strong>每个微服务都有自己的存储能力，可以有自己的数据库，也可以有统一的数据库；</strong></li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>开发人员要处理分布式系统的复杂性；</li>
<li>多服务运维难度，随着服务的增加，运维的压力也在增大；</li>
<li>系统部署依赖问题；</li>
<li>服务间通信成本问题；</li>
<li>数据一致性问题；</li>
<li>系统集成测试问题；</li>
<li>性能和监控问题；</li>
</ul>
<h4 id="2-4-微服务技术栈有那些？"><a href="#2-4-微服务技术栈有那些？" class="headerlink" title="2.4 微服务技术栈有那些？"></a>2.4 微服务技术栈有那些？</h4><table>
<thead>
<tr>
<th><strong>微服务技术条目</strong></th>
<th>落地技术</th>
</tr>
</thead>
<tbody><tr>
<td>服务开发</td>
<td>SpringBoot、Spring、SpringMVC等</td>
</tr>
<tr>
<td>服务配置与管理</td>
<td>Netfix公司的Archaius、阿里的Diamond等</td>
</tr>
<tr>
<td>服务注册与发现</td>
<td>Eureka、Consul、Zookeeper等</td>
</tr>
<tr>
<td>服务调用</td>
<td>Rest、PRC、gRPC</td>
</tr>
<tr>
<td>服务熔断器</td>
<td>Hystrix、Envoy等</td>
</tr>
<tr>
<td>负载均衡</td>
<td>Ribbon、Nginx等</td>
</tr>
<tr>
<td>服务接口调用(客户端调用服务的简化工具)</td>
<td>Fegin等</td>
</tr>
<tr>
<td>消息队列</td>
<td>Kafka、RabbitMQ、ActiveMQ等</td>
</tr>
<tr>
<td>服务配置中心管理</td>
<td>SpringCloudConfig、Chef等</td>
</tr>
<tr>
<td>服务路由(API网关)</td>
<td>Zuul等</td>
</tr>
<tr>
<td>服务监控</td>
<td>Zabbix、Nagios、Metrics、Specatator等</td>
</tr>
<tr>
<td>全链路追踪</td>
<td>Zipkin、Brave、Dapper等</td>
</tr>
<tr>
<td>数据流操作开发包</td>
<td>SpringCloud Stream(封装与Redis，Rabbit，Kafka等发送接收消息)</td>
</tr>
<tr>
<td>时间消息总栈</td>
<td>SpringCloud Bus</td>
</tr>
<tr>
<td>服务部署</td>
<td>Docker、OpenStack、Kubernetes等</td>
</tr>
</tbody></table>
<h4 id="2-5-为什么选择SpringCloud作为微服务架构"><a href="#2-5-为什么选择SpringCloud作为微服务架构" class="headerlink" title="2.5 为什么选择SpringCloud作为微服务架构"></a>2.5 为什么选择SpringCloud作为微服务架构</h4><ol>
<li><p>选型依据</p>
<ul>
<li>整体解决方案和框架成熟度</li>
<li>社区热度</li>
<li>可维护性</li>
<li>学习曲线</li>
</ul>
</li>
<li><p>当前各大IT公司用的微服务架构有那些？</p>
<ul>
<li><p>阿里：dubbo+HFS</p>
</li>
<li><p>京东：JFS</p>
</li>
<li><p>新浪：Motan</p>
</li>
<li><p>当当网：DubboX</p>
<p>…</p>
</li>
</ul>
</li>
<li><p>各微服务框架对比</p>
</li>
</ol>
<table>
<thead>
<tr>
<th><strong>功能点/服务框架</strong></th>
<th>Netflix/SpringCloud</th>
<th>Motan</th>
<th>gRPC</th>
<th>Thrift</th>
<th>Dubbo/DubboX</th>
</tr>
</thead>
<tbody><tr>
<td>功能定位</td>
<td>完整的微服务框架</td>
<td>RPC框架，但整合了ZK或Consul，实现集群环境的基本服务注册发现</td>
<td>RPC框架</td>
<td>RPC框架</td>
<td>服务框架</td>
</tr>
<tr>
<td>支持Rest</td>
<td>是，Ribbon支持多种可拔插的序列号选择</td>
<td>否</td>
<td>否</td>
<td>否</td>
<td>否</td>
</tr>
<tr>
<td>支持RPC</td>
<td>否</td>
<td>是(Hession2)</td>
<td>是</td>
<td>是</td>
<td>是</td>
</tr>
<tr>
<td>支持多语言</td>
<td>是(Rest形式)</td>
<td>否</td>
<td>是</td>
<td>是</td>
<td>否</td>
</tr>
<tr>
<td>负载均衡</td>
<td>是(服务端zuul+客户端Ribbon)，zuul-服务，动态路由，云端负载均衡Eureka（针对中间层服务器）</td>
<td>是(客户端)</td>
<td>否</td>
<td>否</td>
<td>是(客户端)</td>
</tr>
<tr>
<td>配置服务</td>
<td>Netfix Archaius，Spring Cloud Config Server 集中配置</td>
<td>是(Zookeeper提供)</td>
<td>否</td>
<td>否</td>
<td>否</td>
</tr>
<tr>
<td>服务调用链监控</td>
<td>是(zuul)，zuul提供边缘服务，API网关</td>
<td>否</td>
<td>否</td>
<td>否</td>
<td>否</td>
</tr>
<tr>
<td>高可用/容错</td>
<td>是(服务端Hystrix+客户端Ribbon)</td>
<td>是(客户端)</td>
<td>否</td>
<td>否</td>
<td>是(客户端)</td>
</tr>
<tr>
<td>典型应用案例</td>
<td>Netflix</td>
<td>Sina</td>
<td>Google</td>
<td>Facebook</td>
<td></td>
</tr>
<tr>
<td>社区活跃程度</td>
<td>高</td>
<td>一般</td>
<td>高</td>
<td>一般</td>
<td>2017年后重新开始维护，之前中断了5年</td>
</tr>
<tr>
<td>学习难度</td>
<td>中等</td>
<td>低</td>
<td>高</td>
<td>高</td>
<td>低</td>
</tr>
<tr>
<td>文档丰富程度</td>
<td>高</td>
<td>一般</td>
<td>一般</td>
<td>一般</td>
<td>高</td>
</tr>
<tr>
<td>其他</td>
<td>Spring Cloud Bus为我们的应用程序带来了更多管理端点</td>
<td>支持降级</td>
<td>Netflix内部在开发集成gRPC</td>
<td>IDL定义</td>
<td>实践的公司比较多</td>
</tr>
</tbody></table>
<h3 id="3-SpringCloud入门概述"><a href="#3-SpringCloud入门概述" class="headerlink" title="3. SpringCloud入门概述"></a>3. SpringCloud入门概述</h3><h4 id="3-1-SpringCloud是什么？"><a href="#3-1-SpringCloud是什么？" class="headerlink" title="3.1 SpringCloud是什么？"></a>3.1 SpringCloud是什么？</h4><p>Spring官网：<a href="https://spring.io/">https://spring.io/</a></p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zczEuYmRzdGF0aWMuY29tLzcwY0Z1WFNoX1ExWW54R2twb1dLMUhGNmhoeS9pdC91PTM1NzgwMTc3ODAsMTIxODQyMDAyOSZmbT0yNiZncD0wLmpwZw?x-oss-process=image/format,png" alt="img"></p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zczIuYmRzdGF0aWMuY29tLzcwY0Z2blNoX1ExWW54R2twb1dLMUhGNmhoeS9pdC91PTE2Mzc3ODY4OTcsNzQ1MTM1MjUxJmZtPTI2JmdwPTAuanBn?x-oss-process=image/format,png" alt="img"></p>
<p>Spring Cloud provides tools for developers to quickly build some of the common patterns in distributed systems (e.g. configuration management, service discovery, circuit breakers, intelligent routing, micro-proxy, control bus, one-time tokens, global locks, leadership election, distributed sessions, cluster state). Coordination of distributed systems leads to boiler plate patterns, and using Spring Cloud developers can quickly stand up services and applications that implement those patterns. They will work well in any distributed environment, including the developer’s own laptop, bare metal data centres, and managed platforms such as Cloud Foundry.</p>
<p>翻译：</p>
<p>Spring Cloud为开发人员提供了快速构建分布式系统中的一些常见模式的工具(例如配置管理、服务发现、断路器、智能路由、微代理、控制总线、一次性令牌、全局锁、领导人选举、分布式会话、集群状态)。分布式系统的协调导致了锅炉板模式，而使用Spring Cloud开发人员可以快速建立实现这些模式的服务和应用程序。它们在任何分布式环境中都能很好地工作，包括开发人员自己的笔记本电脑、裸金属数据中心和云计算等托管平台。</p>
<h4 id="3-2-SpringCloud和SpringBoot的关系"><a href="#3-2-SpringCloud和SpringBoot的关系" class="headerlink" title="3.2 SpringCloud和SpringBoot的关系"></a>3.2 SpringCloud和SpringBoot的关系</h4><ul>
<li>SpringBoot专注于开苏方便的开发单个个体微服务；</li>
<li>SpringCloud是关注全局的微服务协调整理治理框架，它将SpringBoot开发的一个个单体微服务，整合并管理起来，为各个微服务之间提供：配置管理、服务发现、断路器、路由、为代理、事件总栈、全局锁、决策竞选、分布式会话等等集成服务；</li>
<li>SpringBoot可以离开SpringCloud独立使用，开发项目，但SpringCloud离不开SpringBoot，属于依赖关系；</li>
<li>**SpringBoot专注于快速、方便的开发单个个体微服务，SpringCloud关注全局的服务治理框架；</li>
</ul>
<h4 id="3-3-Dubbo-和-SpringCloud技术选型"><a href="#3-3-Dubbo-和-SpringCloud技术选型" class="headerlink" title="3.3 Dubbo 和 SpringCloud技术选型"></a>3.3 Dubbo 和 SpringCloud技术选型</h4><h5 id="1-分布式-服务治理Dubbo"><a href="#1-分布式-服务治理Dubbo" class="headerlink" title="1. 分布式+服务治理Dubbo"></a>1. 分布式+服务治理Dubbo</h5><p>目前成熟的互联网架构，应用服务化拆分+消息中间件</p>
<h5 id="2-Dubbo-和-SpringCloud对比"><a href="#2-Dubbo-和-SpringCloud对比" class="headerlink" title="2. Dubbo 和 SpringCloud对比"></a>2. Dubbo 和 SpringCloud对比</h5><p>可以看一下社区活跃度：</p>
<p><a href="https://github.com/dubbo">https://github.com/dubbo</a></p>
<p><a href="https://github.com/spring-cloud">https://github.com/spring-cloud</a></p>
<p><strong>对比结果：</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>Dubbo</th>
<th>SpringCloud</th>
</tr>
</thead>
<tbody><tr>
<td>服务注册中心</td>
<td>Zookeeper</td>
<td>Spring Cloud Netfilx Eureka</td>
</tr>
<tr>
<td>服务调用方式</td>
<td>RPC</td>
<td>REST API</td>
</tr>
<tr>
<td>服务监控</td>
<td>Dubbo-monitor</td>
<td>Spring Boot Admin</td>
</tr>
<tr>
<td>断路器</td>
<td>不完善</td>
<td>Spring Cloud Netfilx Hystrix</td>
</tr>
<tr>
<td>服务网关</td>
<td>无</td>
<td>Spring Cloud Netfilx Zuul</td>
</tr>
<tr>
<td>分布式配置</td>
<td>无</td>
<td>Spring Cloud Config</td>
</tr>
<tr>
<td>服务跟踪</td>
<td>无</td>
<td>Spring Cloud Sleuth</td>
</tr>
<tr>
<td>消息总栈</td>
<td>无</td>
<td>Spring Cloud Bus</td>
</tr>
<tr>
<td>数据流</td>
<td>无</td>
<td>Spring Cloud Stream</td>
</tr>
<tr>
<td>批量任务</td>
<td>无</td>
<td>Spring Cloud Task</td>
</tr>
</tbody></table>
<p><strong>最大区别：Spring Cloud 抛弃了Dubbo的RPC通信，采用的是基于HTTP的REST方式</strong></p>
<p>严格来说，这两种方式各有优劣。虽然从一定程度上来说，后者牺牲了服务调用的性能，但也避免了上面提到的原生RPC带来的问题。而且REST相比RPC更为灵活，服务提供方和调用方的依赖只依靠一纸契约，不存在代码级别的强依赖，这个优点在当下强调快速演化的微服务环境下，显得更加合适。</p>
<p><strong>品牌机和组装机的区别</strong></p>
<p><strong>社区支持与更新力度的区别</strong></p>
<p><strong>总结：</strong></p>
<p> <strong>二者解决的问题域不一样：Dubbo的定位是一款RPC框架，而SpringCloud的目标是微服务架构下的一站式解决方案。</strong></p>
<h4 id="3-4-SpringCloud能干嘛？"><a href="#3-4-SpringCloud能干嘛？" class="headerlink" title="3.4 SpringCloud能干嘛？"></a>3.4 SpringCloud能干嘛？</h4><ul>
<li>Distributed/versioned configuration 分布式/版本控制配置</li>
<li>Service registration and discovery 服务注册与发现</li>
<li>Routing 路由</li>
<li>Service-to-service calls 服务到服务的调用</li>
<li>Load balancing 负载均衡配置</li>
<li>Circuit Breakers 断路器</li>
<li>Distributed messaging 分布式消息管理</li>
<li>…</li>
</ul>
<h4 id="3-5-SpringCloud下载"><a href="#3-5-SpringCloud下载" class="headerlink" title="3.5 SpringCloud下载"></a>3.5 SpringCloud下载</h4><p>官网：<a href="http://projects.spring.io/spring-cloud/">http://projects.spring.io/spring-cloud/</a></p>
<p>版本号有点特别：</p>
<p><img src="https://img-blog.csdnimg.cn/20200521130004420.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5MTk4MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>SpringCloud没有采用数字编号的方式命名版本号，而是采用了伦敦地铁站的名称，<strong>同时根据字母表的顺序来对应版本时间顺序</strong>，比如最早的Realse版本：Angel，第二个Realse版本：Brixton，然后是Camden、Dalston、Edgware，目前最新的是Hoxton SR4 CURRENT GA通用稳定版。</p>
<p><strong>自学参考书：</strong></p>
<ul>
<li>SpringCloud Netflix 中文文档：<a href="https://springcloud.cc/spring-cloud-netflix.html">https://springcloud.cc/spring-cloud-netflix.html</a></li>
<li>SpringCloud 中文API文档(官方文档翻译版)：<a href="https://springcloud.cc/spring-cloud-dalston.html">https://springcloud.cc/spring-cloud-dalston.html</a></li>
<li>SpringCloud中国社区：<a href="http://springcloud.cn/">http://springcloud.cn/</a></li>
<li>SpringCloud中文网：<a href="https://springcloud.cc/">https://springcloud.cc</a></li>
</ul>
<h3 id="4-SpringCloud-Rest学习环境搭建：服务提供者"><a href="#4-SpringCloud-Rest学习环境搭建：服务提供者" class="headerlink" title="4. SpringCloud Rest学习环境搭建：服务提供者"></a>4. SpringCloud Rest学习环境搭建：服务提供者</h3><h4 id="4-1-介绍"><a href="#4-1-介绍" class="headerlink" title="4.1 介绍"></a>4.1 介绍</h4><ul>
<li>我们会使用一个Dept部门模块做一个微服务通用案例Consumer消费者(Client)通过REST调用Provider提供者(Server)提供的服务。</li>
<li>回顾Spring，SpringMVC，Mybatis等以往学习的知识。</li>
<li>Maven的分包分模块架构复习。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一个简单的Maven模块结构是这样的：</span><br><span class="line"></span><br><span class="line">-- app-parent: 一个父项目(app-parent)聚合了很多子项目(app-util\app-dao\app-web...)</span><br><span class="line">  |-- pom.xml</span><br><span class="line">  |</span><br><span class="line">  |-- app-core</span><br><span class="line">  ||---- pom.xml</span><br><span class="line">  |</span><br><span class="line">  |-- app-web</span><br><span class="line">  ||---- pom.xml</span><br><span class="line">  ......</span><br></pre></td></tr></table></figure>

<p>一个父工程带着多个Moudule子模块</p>
<p>MicroServiceCloud父工程(Project)下初次带着3个子模块(Module)</p>
<ul>
<li>microservicecloud-api 【封装的整体entity/接口/公共配置等】</li>
<li>microservicecloud-consumer-dept-80 【服务提供者】</li>
<li>microservicecloud-provider-dept-8001 【服务消费者】</li>
</ul>
<h4 id="4-2-SpringCloud版本选择"><a href="#4-2-SpringCloud版本选择" class="headerlink" title="4.2 SpringCloud版本选择"></a>4.2 SpringCloud版本选择</h4><p><strong>大版本说明</strong></p>
<table>
<thead>
<tr>
<th>SpringBoot</th>
<th>SpringCloud</th>
<th>关系</th>
</tr>
</thead>
<tbody><tr>
<td>1.2.x</td>
<td>Angel版本(天使)</td>
<td>兼容SpringBoot1.2x</td>
</tr>
<tr>
<td>1.3.x</td>
<td>Brixton版本(布里克斯顿)</td>
<td>兼容SpringBoot1.3x，也兼容SpringBoot1.4x</td>
</tr>
<tr>
<td>1.4.x</td>
<td>Camden版本(卡姆登)</td>
<td>兼容SpringBoot1.4x，也兼容SpringBoot1.5x</td>
</tr>
<tr>
<td>1.5.x</td>
<td>Dalston版本(多尔斯顿)</td>
<td>兼容SpringBoot1.5x，不兼容SpringBoot2.0x</td>
</tr>
<tr>
<td>1.5.x</td>
<td>Edgware版本(埃奇韦尔)</td>
<td>兼容SpringBoot1.5x，不兼容SpringBoot2.0x</td>
</tr>
<tr>
<td>2.0.x</td>
<td>Finchley版本(芬奇利)</td>
<td>兼容SpringBoot2.0x，不兼容SpringBoot1.5x</td>
</tr>
<tr>
<td>2.1.x</td>
<td>Greenwich版本(格林威治)</td>
<td></td>
</tr>
</tbody></table>
<p><strong>实际开发版本关系</strong></p>
<table>
<thead>
<tr>
<th>spring-boot-starter-parent</th>
<th></th>
<th>spring-cloud-dependencles</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><strong>版本号</strong></td>
<td><strong>发布日期</strong></td>
<td><strong>版本号</strong></td>
<td><strong>发布日期</strong></td>
</tr>
<tr>
<td>1.5.2.RELEASE</td>
<td>2017-03</td>
<td>Dalston.RC1</td>
<td>2017-x</td>
</tr>
<tr>
<td>1.5.9.RELEASE</td>
<td>2017-11</td>
<td>Edgware.RELEASE</td>
<td>2017-11</td>
</tr>
<tr>
<td>1.5.16.RELEASE</td>
<td>2018-04</td>
<td>Edgware.SR5</td>
<td>2018-10</td>
</tr>
<tr>
<td>1.5.20.RELEASE</td>
<td>2018-09</td>
<td>Edgware.SR5</td>
<td>2018-10</td>
</tr>
<tr>
<td>2.0.2.RELEASE</td>
<td>2018-05</td>
<td>Fomchiey.BULD-SNAPSHOT</td>
<td>2018-x</td>
</tr>
<tr>
<td>2.0.6.RELEASE</td>
<td>2018-10</td>
<td>Fomchiey-SR2</td>
<td>2018-10</td>
</tr>
<tr>
<td>2.1.4.RELEASE</td>
<td>2019-04</td>
<td>Greenwich.SR1</td>
<td>2019-03</td>
</tr>
</tbody></table>
<p><strong>使用后两个</strong></p>
<h4 id="4-3-创建父工程"><a href="#4-3-创建父工程" class="headerlink" title="4.3 创建父工程"></a>4.3 创建父工程</h4><ul>
<li>新建父工程项目springcloud，切记<strong>Packageing是pom模式</strong></li>
<li>主要是定义POM文件，将后续各个子模块公用的jar包等统一提取出来，类似一个抽象父类 <img src="https://img-blog.csdnimg.cn/20200521130052880.png#pic_center" alt="在这里插入图片描述"></li>
</ul>
<p><strong>pom.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.haust<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-api<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-provider-dept-8001<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-consumer-dept-80<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-eureka-7001<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-eureka-7002<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-eureka-7003<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-provider-dept-8002<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-provider-dept-8003<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-consumer-dept-feign<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-provider-dept-hystrix-8001<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-consumer-hystrix-dashboard<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-zuul-9527<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-config-server-3344<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-config-client-3355<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-config-eureka-7001<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-config-dept-8001<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--打包方式  pom--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.16.18<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--springCloud的依赖--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Greenwich.SR1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--SpringBoot--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--数据库--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--SpringBoot 启动器--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志测试~--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>父工程为springcloud，其下有多个子mudule，详情参考完整代码了解</p>
<p><img src="https://img-blog.csdnimg.cn/20200521130118985.png#pic_center" alt="在这里插入图片描述"></p>
<p>springcloud-consumer-dept-80访问springcloud-provider-dept-8001下的controller使用REST方式</p>
<p>如DeptConsumerController.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptConsumerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 理解：消费者，不应该有service层~</span></span><br><span class="line">    <span class="comment">// RestTemplate .... 供我们直接调用就可以了！ 注册到Spring中</span></span><br><span class="line">    <span class="comment">// (url, 实体：Map ,Class&lt;T&gt; responseType)</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate; <span class="comment">//提供多种便捷访问远程http服务的方法，简单的Restful服务模板~</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Ribbon。我们这里的地址，应该是一个变量，通过服务名来访问</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REST_URL_PREFIX = <span class="string">&quot;http://localhost:8001&quot;</span>;</span><br><span class="line">    <span class="comment">//private static final String REST_URL_PREFIX = &quot;http://SPRINGCLOUD-PROVIDER-DEPT&quot;;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/dept/add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(Dept dept)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.postForObject(REST_URL_PREFIX+<span class="string">&quot;/dept/add&quot;</span>,dept,Boolean.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/dept/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">get</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(REST_URL_PREFIX+<span class="string">&quot;/dept/get/&quot;</span>+id,Dept.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/dept/list&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(REST_URL_PREFIX+<span class="string">&quot;/dept/list&quot;</span>,List.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用RestTemplete先需要放入Spring容器中</p>
<p>ConfigBean.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigBean</span> </span>&#123;<span class="comment">//@Configuration -- spring  applicationContext.xml</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置负载均衡实现RestTemplate</span></span><br><span class="line">    <span class="comment">// IRule</span></span><br><span class="line">    <span class="comment">// RoundRobinRule 轮询</span></span><br><span class="line">    <span class="comment">// RandomRule 随机</span></span><br><span class="line">    <span class="comment">// AvailabilityFilteringRule ： 会先过滤掉，跳闸，访问故障的服务~，对剩下的进行轮询~</span></span><br><span class="line">    <span class="comment">// RetryRule ： 会先按照轮询获取服务~，如果服务获取失败，则会在指定的时间内进行，重试</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>springcloud-provider-dept-8001的dao接口调用springcloud-api模块下的pojo，可使用在springcloud-provider-dept-8001的pom文件导入springcloud-api模块依赖的方式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--我们需要拿到实体类，所以要配置api module--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.haust<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>springcloud-consumer-dept-80和springcloud-provider-dept-8001的pom.xml和父工程下的依赖基本一样，直接看完整代码即可，不再添加重复笔记。</p>
<h3 id="5-Eureka服务注册与发现"><a href="#5-Eureka服务注册与发现" class="headerlink" title="5. Eureka服务注册与发现"></a>5. Eureka服务注册与发现</h3><h4 id="5-1-什么是Eureka"><a href="#5-1-什么是Eureka" class="headerlink" title="5.1 什么是Eureka"></a>5.1 什么是Eureka</h4><ul>
<li>Netflix在涉及Eureka时，遵循的就是API原则.</li>
<li>Eureka是Netflix的有个子模块，也是核心模块之一。Eureka是基于REST的服务，用于定位服务，以实现云端中间件层服务发现和故障转移，服务注册与发现对于微服务来说是非常重要的，有了服务注册与发现，只需要使用服务的标识符，就可以访问到服务，而不需要修改服务调用的配置文件了，功能类似于Dubbo的注册中心，比如Zookeeper.</li>
</ul>
<h4 id="5-2-原理理解"><a href="#5-2-原理理解" class="headerlink" title="5.2 原理理解"></a>5.2 原理理解</h4><ul>
<li><strong>Eureka基本的架构</strong><ul>
<li>Springcloud 封装了Netflix公司开发的Eureka模块来实现服务注册与发现 (对比Zookeeper).</li>
<li>Eureka采用了C-S的架构设计，EurekaServer作为服务注册功能的服务器，他是服务注册中心.</li>
<li>而系统中的其他微服务，使用Eureka的客户端连接到EurekaServer并维持心跳连接。这样系统的维护人员就可以通过EurekaServer来监控系统中各个微服务是否正常运行，Springcloud 的一些其他模块 (比如Zuul) 就可以通过EurekaServer来发现系统中的其他微服务，并执行相关的逻辑.</li>
</ul>
</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20200521130157770.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5MTk4MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<ul>
<li>和Dubbo架构对比.</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20200521130222344.png#pic_center" alt="在这里插入图片描述"></p>
<ul>
<li>Eureka 包含两个组件：<strong>Eureka Server</strong> 和 <strong>Eureka Client</strong>.</li>
<li>Eureka Server 提供服务注册，各个节点启动后，回在EurekaServer中进行注册，这样Eureka Server中的服务注册表中将会储存所有课用服务节点的信息，服务节点的信息可以在界面中直观的看到.</li>
<li>Eureka Client 是一个Java客户端，用于简化EurekaServer的交互，客户端同时也具备一个内置的，使用轮询负载算法的负载均衡器。在应用启动后，将会向EurekaServer发送心跳 (默认周期为30秒) 。如果Eureka Server在多个心跳周期内没有接收到某个节点的心跳，EurekaServer将会从服务注册表中把这个服务节点移除掉 (默认周期为90s).</li>
<li><strong>三大角色</strong><ul>
<li>Eureka Server：提供服务的注册与发现</li>
<li>Service Provider：服务生产方，将自身服务注册到Eureka中，从而使服务消费方能狗找到</li>
<li>Service Consumer：服务消费方，从Eureka中获取注册服务列表，从而找到消费服务</li>
</ul>
</li>
<li>目前工程状况</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20200521130244579.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5MTk4MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h4 id="5-3-构建步骤"><a href="#5-3-构建步骤" class="headerlink" title="5.3 构建步骤"></a>5.3 构建步骤</h4><h5 id="1-eureka-server"><a href="#1-eureka-server" class="headerlink" title="1. eureka-server"></a>1. eureka-server</h5><ol>
<li><p>springcloud-eureka-7001 模块建立</p>
</li>
<li><p>pom.xml 配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导包~--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-eureka-server --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入Eureka Server依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--热部署工具--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>application.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Eureka配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span> <span class="comment">#Eureka服务端的实例名字</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment">#表示是否向 Eureka 注册中心注册自己(这个模块本身是服务器,所以不需要)</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment">#fetch-registry如果为false,则表示自己为注册中心</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment">#监控页面~</span></span><br><span class="line">      <span class="comment">#重写Eureka的默认端口以及访问路径 ---&gt;http://localhost:7001/eureka/</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure>

<p>源码中Eureka的默认端口以及访问路径:</p>
</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20200521130439891.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5MTk4MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<ol>
<li><p>主启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//启动之后，访问 http://localhost:7001/</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span> <span class="comment">//EnableEurekaServer 表示是 Eureka服务端的启动类，可以接受别人注册进来~</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServer_7001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaServer_7001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>启动成功后访问 <a href="http://localhost:7001/">http://localhost:7001/</a> 得到以下页面</p>
</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20200521130420201.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5MTk4MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h5 id="2-eureka-client"><a href="#2-eureka-client" class="headerlink" title="2. eureka-client"></a>2. eureka-client</h5><p><strong>调整之前创建的springlouc-provider-dept-8001</strong></p>
<ol>
<li><p>导入Eureca依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Eureka依赖--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-eureka --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>application中新增Eureca配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Eureka配置：配置服务注册中心地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka/</span></span><br></pre></td></tr></table></figure></li>
<li><p>为主启动类添加@EnableEurekaClient注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span> <span class="comment">//EnableEurekaClient 客户端的启动类，在服务启动后自动向注册中心注册服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptProvider_8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DeptProvider_8001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>先启动7001服务端后启动8001客户端进行测试，然后访问监控页<a href="http://localhost:7001/">http://localhost:7001/</a> 产看结果如图，成功</p>
</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20200521130507106.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5MTk4MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<ol>
<li><p>修改Eureka上的默认描述信息</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Eureka配置：配置服务注册中心地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">springcloud-provider-dept-8001</span> <span class="comment">#修改Eureka上的默认描述信息</span></span><br></pre></td></tr></table></figure>

<p>结果如图： <img src="https://img-blog.csdnimg.cn/20200521130659314.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5MTk4MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>如果此时停掉springcloud-provider-dept-8001 等30s后 监控会开启保护机制 <img src="https://img-blog.csdnimg.cn/20200521130557974.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5MTk4MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
</li>
<li><p>配置关于服务加载的监控信息</p>
</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20200521130718511.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5MTk4MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>pom.xml中添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--actuator完善监控信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>application.yml中添加配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#info配置</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">app.name:</span> <span class="string">haust-springcloud</span> <span class="comment">#项目的名称</span></span><br><span class="line">  <span class="attr">company.name:</span> <span class="string">com.haust</span> <span class="comment">#公司的名称</span></span><br></pre></td></tr></table></figure>

<p>此时刷新监控页，点击进入<img src="https://img-blog.csdnimg.cn/20200521130756988.png#pic_center" alt="在这里插入图片描述">跳转新页面显示如下内容：</p>
<p><img src="https://img-blog.csdnimg.cn/20200521130814308.png#pic_center" alt="在这里插入图片描述"></p>
<h5 id="3-EureKa自我保护机制：好死不如赖活着"><a href="#3-EureKa自我保护机制：好死不如赖活着" class="headerlink" title="3. EureKa自我保护机制：好死不如赖活着"></a>3. EureKa自我保护机制：好死不如赖活着</h5><p>一句话总结就是：<strong>某时刻某一个微服务不可用，eureka不会立即清理，依旧会对该微服务的信息进行保存！</strong></p>
<ul>
<li>默认情况下，当eureka server在一定时间内没有收到实例的心跳，便会把该实例从注册表中删除（<strong>默认是90秒</strong>），但是，如果短时间内丢失大量的实例心跳，便会触发eureka server的自我保护机制，比如在开发测试时，需要频繁地重启微服务实例，但是我们很少会把eureka server一起重启（因为在开发过程中不会修改eureka注册中心），<strong>当一分钟内收到的心跳数大量减少时，会触发该保护机制</strong>。可以在eureka管理界面看到Renews threshold和Renews(last min)，当后者（最后一分钟收到的心跳数）小于前者（心跳阈值）的时候，触发保护机制，会出现红色的警告：**EMERGENCY!EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY’RE NOT.RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEGING EXPIRED JUST TO BE SAFE.**从警告中可以看到，eureka认为虽然收不到实例的心跳，但它认为实例还是健康的，eureka会保护这些实例，不会把它们从注册表中删掉。</li>
<li>该保护机制的目的是避免网络连接故障，在发生网络故障时，微服务和注册中心之间无法正常通信，但服务本身是健康的，不应该注销该服务，如果eureka因网络故障而把微服务误删了，那即使网络恢复了，该微服务也不会重新注册到eureka server了，因为只有在微服务启动的时候才会发起注册请求，后面只会发送心跳和服务列表请求，这样的话，该实例虽然是运行着，但永远不会被其它服务所感知。所以，eureka server在短时间内丢失过多的客户端心跳时，会进入自我保护模式，该模式下，eureka会保护注册表中的信息，不在注销任何微服务，当网络故障恢复后，eureka会自动退出保护模式。自我保护模式可以让集群更加健壮。</li>
<li>但是我们在开发测试阶段，需要频繁地重启发布，如果触发了保护机制，则旧的服务实例没有被删除，这时请求有可能跑到旧的实例中，而该实例已经关闭了，这就导致请求错误，影响开发测试。所以，在开发测试阶段，我们可以把自我保护模式关闭，只需在eureka server配置文件中加上如下配置即可：<strong>eureka.server.enable-self-preservation=false</strong></li>
</ul>
<p>详细内容可以参考下这篇博客内容：<a href="https://blog.csdn.net/wudiyong22/article/details/80827594">https://blog.csdn.net/wudiyong22/article/details/80827594</a></p>
<h5 id="4-注册进来的微服务，获取一些消息（团队开发会用到）"><a href="#4-注册进来的微服务，获取一些消息（团队开发会用到）" class="headerlink" title="4. 注册进来的微服务，获取一些消息（团队开发会用到）"></a>4. 注册进来的微服务，获取一些消息（团队开发会用到）</h5><p>DeptController.java新增方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取一些配置的信息，得到具体的微服务！</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DiscoveryClient client;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//注册进来的微服务~，获取一些消息~</span></span><br><span class="line"> <span class="meta">@GetMapping(&quot;/dept/discovery&quot;)</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> Object <span class="title">discovery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="comment">//获取微服务列表的清单</span></span><br><span class="line">     List&lt;String&gt; services = client.getServices();</span><br><span class="line">     System.out.println(<span class="string">&quot;discovery=&gt;services:&quot;</span> + services);</span><br><span class="line">     <span class="comment">//得到一个具体的微服务信息,通过具体的微服务id，applicaioinName；</span></span><br><span class="line">     List&lt;ServiceInstance&gt; instances = client.getInstances(<span class="string">&quot;SPRINGCLOUD-PROVIDER-DEPT&quot;</span>);</span><br><span class="line">     <span class="keyword">for</span> (ServiceInstance instance : instances) &#123;</span><br><span class="line">         System.out.println(</span><br><span class="line">                 instance.getHost() + <span class="string">&quot;\t&quot;</span> + <span class="comment">// 主机名称</span></span><br><span class="line">                         instance.getPort() + <span class="string">&quot;\t&quot;</span> + <span class="comment">// 端口号</span></span><br><span class="line">                         instance.getUri() + <span class="string">&quot;\t&quot;</span> + <span class="comment">// uri</span></span><br><span class="line">                         instance.getServiceId() <span class="comment">// 服务id</span></span><br><span class="line">         );</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">this</span>.client;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20200521130913485.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5MTk4MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>主启动类中加入@EnableDiscoveryClient 注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span> <span class="comment">//在服务启动后自动注册到Eureka中！</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">//服务发现~</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptProvider_8001</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果如图：</p>
<p><img src="https://img-blog.csdnimg.cn/20200521131043195.png#pic_center" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20200521131103616.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5MTk4MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h4 id="5-4-Eureka：集群环境配置"><a href="#5-4-Eureka：集群环境配置" class="headerlink" title="5.4 Eureka：集群环境配置"></a>5.4 Eureka：集群环境配置</h4><h5 id="1-初始化"><a href="#1-初始化" class="headerlink" title="1.初始化"></a>1.初始化</h5><p>新建springcloud-eureka-7002、springcloud-eureka-7003 模块</p>
<p>1.为pom.xml添加依赖 (与springcloud-eureka-7001相同)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导包~--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-eureka-server --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入Eureka Server依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--热部署工具--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.application.yml配置(与springcloud-eureka-7001相同)</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7003</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Eureka配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span> <span class="comment">#Eureka服务端的实例名字</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment">#表示是否向 Eureka 注册中心注册自己(这个模块本身是服务器,所以不需要)</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment">#fetch-registry如果为false,则表示自己为注册中心</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment">#监控页面~</span></span><br><span class="line">      <span class="comment">#重写Eureka的默认端口以及访问路径 ---&gt;http://localhost:7001/eureka/</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure>

<p>3.主启动类(与springcloud-eureka-7001相同)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//启动之后，访问 http://localhost:7001/</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span> <span class="comment">//EnableEurekaServer 服务端的启动类，可以接受别人注册进来~</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServer_7003</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaServer_7003.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-集群成员相互关联"><a href="#2-集群成员相互关联" class="headerlink" title="2.集群成员相互关联"></a>2.集群成员相互关联</h5><p>配置一些自定义本机名字，找到本机hosts文件并打开</p>
<p><img src="https://img-blog.csdnimg.cn/20200521131127278.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5MTk4MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>在hosts文件最后加上，要访问的本机名称，默认是localhost</p>
<p><img src="https://img-blog.csdnimg.cn/20200521131141804.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5MTk4MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>修改application.yml的配置，如图为springcloud-eureka-7001配置，springcloud-eureka-7002/springcloud-eureka-7003同样分别修改为其对应的名称即可</p>
<p><img src="https://img-blog.csdnimg.cn/202005211312020.png#pic_center" alt="在这里插入图片描述"></p>
<p>在集群中使springcloud-eureka-7001关联springcloud-eureka-7002、springcloud-eureka-7003</p>
<p>完整的springcloud-eureka-7001下的application.yml如下</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Eureka配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7001.com</span> <span class="comment">#Eureka服务端的实例名字</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment">#表示是否向 Eureka 注册中心注册自己(这个模块本身是服务器,所以不需要)</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment">#fetch-registry如果为false,则表示自己为注册中心</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment">#监控页面~</span></span><br><span class="line">      <span class="comment">#重写Eureka的默认端口以及访问路径 ---&gt;http://localhost:7001/eureka/</span></span><br><span class="line">      <span class="comment"># 单机： defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br><span class="line">      <span class="comment"># 集群（关联）：7001关联7002、7003</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br></pre></td></tr></table></figure>

<p>同时在集群中使springcloud-eureka-7002关联springcloud-eureka-7001、springcloud-eureka-7003</p>
<p>完整的springcloud-eureka-7002下的application.yml如下</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7002</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Eureka配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7002.com</span> <span class="comment">#Eureka服务端的实例名字</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment">#表示是否向 Eureka 注册中心注册自己(这个模块本身是服务器,所以不需要)</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment">#fetch-registry如果为false,则表示自己为注册中心</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment">#监控页面~</span></span><br><span class="line">      <span class="comment">#重写Eureka的默认端口以及访问路径 ---&gt;http://localhost:7001/eureka/</span></span><br><span class="line">      <span class="comment"># 单机： defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br><span class="line">      <span class="comment"># 集群（关联）：7002关联7001、7003</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7003.com:7003/eureka/</span></span><br></pre></td></tr></table></figure>

<p>springcloud-eureka-7003配置方式同理可得.</p>
<p>通过springcloud-provider-dept-8001下的yml配置文件，修改<strong>Eureka配置：配置服务注册中心地址</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Eureka配置：配置服务注册中心地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment"># 注册中心地址7001-7003</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">springcloud-provider-dept-8001</span> <span class="comment">#修改Eureka上的默认描述信息</span></span><br></pre></td></tr></table></figure>

<p>这样模拟集群就搭建号了，就可以把一个项目挂载到三个服务器上了</p>
<p><img src="https://img-blog.csdnimg.cn/20200521131237217.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5MTk4MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h4 id="5-5-对比和Zookeeper区别"><a href="#5-5-对比和Zookeeper区别" class="headerlink" title="5.5 对比和Zookeeper区别"></a>5.5 对比和Zookeeper区别</h4><h6 id="1-回顾CAP原则"><a href="#1-回顾CAP原则" class="headerlink" title="1. 回顾CAP原则"></a><strong>1. 回顾CAP原则</strong></h6><p>RDBMS (MySQL\Oracle\sqlServer) ===&gt; ACID</p>
<p>NoSQL (Redis\MongoDB) ===&gt; CAP</p>
<h6 id="2-ACID是什么？"><a href="#2-ACID是什么？" class="headerlink" title="2. ACID是什么？"></a><strong>2. ACID是什么？</strong></h6><ul>
<li>A (Atomicity) 原子性</li>
<li>C (Consistency) 一致性</li>
<li>I (Isolation) 隔离性</li>
<li>D (Durability) 持久性</li>
</ul>
<h6 id="3-CAP是什么"><a href="#3-CAP是什么" class="headerlink" title="3. CAP是什么?"></a><strong>3. CAP是什么?</strong></h6><ul>
<li>C (Consistency) 强一致性</li>
<li>A (Availability) 可用性</li>
<li>P (Partition tolerance) 分区容错性</li>
</ul>
<p>CAP的三进二：CA、AP、CP</p>
<h6 id="4-CAP理论的核心"><a href="#4-CAP理论的核心" class="headerlink" title="4. CAP理论的核心"></a><strong>4. CAP理论的核心</strong></h6><ul>
<li>一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求</li>
<li>根据CAP原理，将NoSQL数据库分成了满足CA原则，满足CP原则和满足AP原则三大类<ul>
<li>CA：单点集群，满足一致性，可用性的系统，通常可扩展性较差</li>
<li>CP：满足一致性，分区容错的系统，通常性能不是特别高</li>
<li>AP：满足可用性，分区容错的系统，通常可能对一致性要求低一些</li>
</ul>
</li>
</ul>
<h6 id="5-作为分布式服务注册中心，Eureka比Zookeeper好在哪里？"><a href="#5-作为分布式服务注册中心，Eureka比Zookeeper好在哪里？" class="headerlink" title="5. 作为分布式服务注册中心，Eureka比Zookeeper好在哪里？"></a><strong>5. 作为分布式服务注册中心，Eureka比Zookeeper好在哪里？</strong></h6><p>著名的CAP理论指出，一个分布式系统不可能同时满足C (一致性) 、A (可用性) 、P (容错性)，由于分区容错性P再分布式系统中是必须要保证的，因此我们只能再A和C之间进行权衡。</p>
<ul>
<li>Zookeeper 保证的是CP</li>
<li>Eureka 保证的是AP</li>
</ul>
<p><strong>Zookeeper保证的是CP</strong></p>
<p> 当向注册中心查询服务列表时，我们可以容忍注册中心返回的是几分钟以前的注册信息，但不能接收服务直接down掉不可用。也就是说，<strong>服务注册功能对可用性的要求要高于一致性</strong>。但zookeeper会出现这样一种情况，当master节点因为网络故障与其他节点失去联系时，剩余节点会重新进行leader选举。问题在于，选举leader的时间太长，30-120s，且选举期间整个zookeeper集群是不可用的，这就导致在选举期间注册服务瘫痪。在云部署的环境下，因为网络问题使得zookeeper集群失去master节点是较大概率发生的事件，虽然服务最终能够恢复，但是，漫长的选举时间导致注册长期不可用，是不可容忍的。</p>
<p><strong>Eureka保证的是AP</strong></p>
<p> Eureka看明白了这一点，因此在设计时就优先保证可用性。<strong>Eureka各个节点都是平等的</strong>，几个节点挂掉不会影响正常节点的工作，剩余的节点依然可以提供注册和查询服务。而Eureka的客户端在向某个Eureka注册时，如果发现连接失败，则会自动切换至其他节点，只要有一台Eureka还在，就能保住注册服务的可用性，只不过查到的信息可能不是最新的，除此之外，Eureka还有之中自我保护机制，如果在15分钟内超过85%的节点都没有正常的心跳，那么Eureka就认为客户端与注册中心出现了网络故障，此时会出现以下几种情况：</p>
<ul>
<li>Eureka不在从注册列表中移除因为长时间没收到心跳而应该过期的服务</li>
<li>Eureka仍然能够接受新服务的注册和查询请求，但是不会被同步到其他节点上 (即保证当前节点依然可用)</li>
<li>当网络稳定时，当前实例新的注册信息会被同步到其他节点中</li>
</ul>
<p>因此，Eureka可以很好的应对因网络故障导致部分节点失去联系的情况，而不会像zookeeper那样使整个注册服务瘫痪</p>
<h3 id="6-Ribbon：负载均衡-基于客户端"><a href="#6-Ribbon：负载均衡-基于客户端" class="headerlink" title="6. Ribbon：负载均衡(基于客户端)"></a>6. Ribbon：负载均衡(基于客户端)</h3><h4 id="6-1-负载均衡以及Ribbon"><a href="#6-1-负载均衡以及Ribbon" class="headerlink" title="6.1 负载均衡以及Ribbon"></a>6.1 负载均衡以及Ribbon</h4><p><strong>Ribbon是什么？</strong></p>
<ul>
<li>Spring Cloud Ribbon 是基于Netflix Ribbon 实现的一套<strong>客户端负载均衡的工具</strong>。</li>
<li>简单的说，Ribbon 是 Netflix 发布的开源项目，主要功能是提供客户端的软件负载均衡算法，将 Netflix 的中间层服务连接在一起。Ribbon 的客户端组件提供一系列完整的配置项，如：连接超时、重试等。简单的说，就是在配置文件中列出 LoadBalancer (简称LB：负载均衡) 后面所有的及其，Ribbon 会自动的帮助你基于某种规则 (如简单轮询，随机连接等等) 去连接这些机器。我们也容易使用 Ribbon 实现自定义的负载均衡算法！</li>
</ul>
<p><strong>Ribbon能干嘛？</strong></p>
<ul>
<li>LB，即负载均衡 (LoadBalancer) ，在微服务或分布式集群中经常用的一种应用。</li>
<li>负载均衡简单的说就是将用户的请求平摊的分配到多个服务上，从而达到系统的HA (高用)。</li>
<li>常见的负载均衡软件有 Nginx、Lvs 等等。</li>
<li>Dubbo、SpringCloud 中均给我们提供了负载均衡，<strong>SpringCloud 的负载均衡算法可以自定义</strong>。</li>
<li>负载均衡简单分类：<ul>
<li>集中式LB<ul>
<li>即在服务的提供方和消费方之间使用独立的LB设施，如Nginx，由该设施负责把访问请求通过某种策略转发至服务的提供方！</li>
</ul>
</li>
<li>进程式LB<ul>
<li>将LB逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选出一个合适的服务器。</li>
<li><strong>Ribbon 就属于进程内LB</strong>，它只是一个类库，集成于消费方进程，消费方通过它来获取到服务提供方的地址！</li>
</ul>
</li>
<li></li>
</ul>
</li>
</ul>
<h4 id="6-2-集成Ribbon"><a href="#6-2-集成Ribbon" class="headerlink" title="6.2 集成Ribbon"></a>6.2 集成Ribbon</h4><p><strong>springcloud-consumer-dept-80</strong>向pom.xml中添加Ribbon和Eureka依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Ribbon--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Eureka: Ribbon需要从Eureka服务中心获取要拿什么--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在application.yml文件中配置Eureka</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Eureka配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment"># 不向 Eureka注册自己</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment"># 从三个注册中心中随机取一个去访问</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br></pre></td></tr></table></figure>

<p>主启动类加上@EnableEurekaClient注解，开启Eureka</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Ribbon 和 Eureka 整合以后，客户端可以直接调用，不用关心IP地址和端口号</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span> <span class="comment">//开启Eureka 客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptConsumer_80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DeptConsumer_80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自定义Spring配置类：ConfigBean.java 配置负载均衡实现RestTemplate</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigBean</span> </span>&#123;<span class="comment">//@Configuration -- spring  applicationContext.xml</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@LoadBalanced</span> <span class="comment">//配置负载均衡实现RestTemplate</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改conroller：DeptConsumerController.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Ribbon:我们这里的地址，应该是一个变量，通过服务名来访问</span></span><br><span class="line"><span class="comment">//private static final String REST_URL_PREFIX = &quot;http://localhost:8001&quot;;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REST_URL_PREFIX = <span class="string">&quot;http://SPRINGCLOUD-PROVIDER-DEPT&quot;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="6-3-使用Ribbon实现负载均衡"><a href="#6-3-使用Ribbon实现负载均衡" class="headerlink" title="6.3 使用Ribbon实现负载均衡"></a>6.3 使用Ribbon实现负载均衡</h4><p>流程图：</p>
<p><img src="https://img-blog.csdnimg.cn/20200521131315626.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5MTk4MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>1.新建两个服务提供者Moudle：springcloud-provider-dept-8003、springcloud-provider-dept-8002</p>
<p>2.参照springcloud-provider-dept-8001 依次为另外两个Moudle添加pom.xml依赖 、resourece下的mybatis和application.yml配置，Java代码</p>
<p>3.启动所有服务测试(根据自身电脑配置决定启动服务的个数)，访问<a href="http://eureka7001.com:7002/%E6%9F%A5%E7%9C%8B%E7%BB%93%E6%9E%9C">http://eureka7001.com:7002/查看结果</a></p>
<p><img src="https://img-blog.csdnimg.cn/20200521131332466.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5MTk4MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>测试访问<a href="http://localhost/consumer/dept/list">http://localhost/consumer/dept/list</a> 这时候随机访问的是服务提供者8003</p>
<p><img src="https://img-blog.csdnimg.cn/20200521131413295.png#pic_center" alt="在这里插入图片描述"></p>
<p>再次访问<a href="http://localhost/consumer/dept/list%E8%BF%99%E6%97%B6%E5%80%99%E9%9A%8F%E6%9C%BA%E7%9A%84%E6%98%AF%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E8%80%858001">http://localhost/consumer/dept/list这时候随机的是服务提供者8001</a></p>
<p><img src="https://img-blog.csdnimg.cn/20200521131431716.png#pic_center" alt="在这里插入图片描述"></p>
<p>以上这种<strong>每次访问<a href="http://localhost/consumer/dept/list%E9%9A%8F%E6%9C%BA%E8%AE%BF%E9%97%AE%E9%9B%86%E7%BE%A4%E4%B8%AD%E6%9F%90%E4%B8%AA%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E8%80%85%EF%BC%8C%E8%BF%99%E7%A7%8D%E6%83%85%E5%86%B5%E5%8F%AB%E5%81%9A%E8%BD%AE%E8%AF%A2">http://localhost/consumer/dept/list随机访问集群中某个服务提供者，这种情况叫做轮询</a></strong>，轮询算法在SpringCloud中可以自定义。</p>
<p><strong>如何切换或者自定义规则呢？</strong></p>
<p>在springcloud-provider-dept-80模块下的ConfigBean中进行配置，切换使用不同的规则</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigBean</span> </span>&#123;<span class="comment">//@Configuration -- spring  applicationContext.xml</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * IRule:</span></span><br><span class="line"><span class="comment">     * RoundRobinRule 轮询</span></span><br><span class="line"><span class="comment">     * RandomRule 随机</span></span><br><span class="line"><span class="comment">     * AvailabilityFilteringRule ： 会先过滤掉，跳闸，访问故障的服务~，对剩下的进行轮询~</span></span><br><span class="line"><span class="comment">     * RetryRule ： 会先按照轮询获取服务~，如果服务获取失败，则会在指定的时间内进行，重试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span> <span class="comment">//配置负载均衡实现RestTemplate</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">myRule</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RandomRule();<span class="comment">//使用随机规则</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也可以自定义规则，在myRule包下自定义一个配置类MyRule.java，注意：<strong>该包不要和主启动类所在的包同级，要跟启动类所在包同级</strong>：</p>
<p><img src="https://img-blog.csdnimg.cn/20200521131456478.png#pic_center" alt="在这里插入图片描述"></p>
<p>MyRule.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: csp1999</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/05/19/11:58</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 自定义规则</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">myRule</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyRandomRule();<span class="comment">//默认是轮询RandomRule,现在自定义为自己的</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主启动类开启负载均衡并指定自定义的MyRule配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Ribbon 和 Eureka 整合以后，客户端可以直接调用，不用关心IP地址和端口号</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="comment">//在微服务启动的时候就能加载自定义的Ribbon类(自定义的规则会覆盖原有默认的规则)</span></span><br><span class="line"><span class="meta">@RibbonClient(name = &quot;SPRINGCLOUD-PROVIDER-DEPT&quot;,configuration = MyRule.class)</span><span class="comment">//开启负载均衡,并指定自定义的规则</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptConsumer_80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DeptConsumer_80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自定义的规则(这里我们参考Ribbon中默认的规则代码自己稍微改动)：MyRandomRule.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRandomRule</span> <span class="keyword">extends</span> <span class="title">AbstractLoadBalancerRule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每个服务访问5次则换下一个服务(总共3个服务)</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * total=0,默认=0,如果=5,指向下一个服务节点</span></span><br><span class="line"><span class="comment">     * index=0,默认=0,如果total=5,index+1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> total = <span class="number">0</span>;<span class="comment">//被调用的次数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currentIndex = <span class="number">0</span>;<span class="comment">//当前是谁在提供服务</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//@edu.umd.cs.findbugs.annotations.SuppressWarnings(value = &quot;RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(ILoadBalancer lb, Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lb == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Server server = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (server == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Thread.interrupted()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            List&lt;Server&gt; upList = lb.getReachableServers();<span class="comment">//获得当前活着的服务</span></span><br><span class="line">            List&lt;Server&gt; allList = lb.getAllServers();<span class="comment">//获取所有的服务</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> serverCount = allList.size();</span><br><span class="line">            <span class="keyword">if</span> (serverCount == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * No servers. End regardless of pass, because subsequent passes</span></span><br><span class="line"><span class="comment">                 * only get more restrictive.</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//int index = chooseRandomInt(serverCount);//生成区间随机数</span></span><br><span class="line">            <span class="comment">//server = upList.get(index);//从或活着的服务中,随机获取一个</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//=====================自定义代码=========================</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (total &lt; <span class="number">5</span>) &#123;</span><br><span class="line">                server = upList.get(currentIndex);</span><br><span class="line">                total++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                total = <span class="number">0</span>;</span><br><span class="line">                currentIndex++;</span><br><span class="line">                <span class="keyword">if</span> (currentIndex &gt; upList.size()) &#123;</span><br><span class="line">                    currentIndex = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                server = upList.get(currentIndex);<span class="comment">//从活着的服务中,获取指定的服务来进行操作</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//======================================================</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (server == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * The only time this should happen is if the server list were</span></span><br><span class="line"><span class="comment">                 * somehow trimmed. This is a transient condition. Retry after</span></span><br><span class="line"><span class="comment">                 * yielding.</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                Thread.yield();</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (server.isAlive()) &#123;</span><br><span class="line">                <span class="keyword">return</span> (server);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Shouldn&#x27;t actually happen.. but must be transient or a bug.</span></span><br><span class="line">            server = <span class="keyword">null</span>;</span><br><span class="line">            Thread.yield();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> server;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">chooseRandomInt</span><span class="params">(<span class="keyword">int</span> serverCount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ThreadLocalRandom.current().nextInt(serverCount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> choose(getLoadBalancer(), key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initWithNiwsConfig</span><span class="params">(IClientConfig clientConfig)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-Feign：负载均衡-基于服务端"><a href="#7-Feign：负载均衡-基于服务端" class="headerlink" title="7.Feign：负载均衡(基于服务端)"></a>7.Feign：负载均衡(基于服务端)</h3><h4 id="7-1-Feign简介"><a href="#7-1-Feign简介" class="headerlink" title="7.1 Feign简介"></a>7.1 Feign简介</h4><p>Feign是声明式Web Service客户端，它让微服务之间的调用变得更简单，类似controller调用service。SpringCloud集成了Ribbon和Eureka，可以使用Feigin提供负载均衡的http客户端</p>
<p><strong>只需要创建一个接口，然后添加注解即可~</strong></p>
<p>Feign，主要是社区版，大家都习惯面向接口编程。这个是很多开发人员的规范。调用微服务访问两种方法</p>
<ol>
<li>微服务名字 【ribbon】</li>
<li>接口和注解 【feign】</li>
</ol>
<p><strong>Feign能干什么？</strong></p>
<ul>
<li>Feign旨在使编写Java Http客户端变得更容易</li>
<li>前面在使用Ribbon + RestTemplate时，利用RestTemplate对Http请求的封装处理，形成了一套模板化的调用方法。但是在实际开发中，由于对服务依赖的调用可能不止一处，往往一个接口会被多处调用，所以通常都会针对每个微服务自行封装一个客户端类来包装这些依赖服务的调用。所以，Feign在此基础上做了进一步的封装，由他来帮助我们定义和实现依赖服务接口的定义，在Feign的实现下，我们只需要创建一个接口并使用注解的方式来配置它 (类似以前Dao接口上标注Mapper注解，现在是一个微服务接口上面标注一个Feign注解)，即可完成对服务提供方的接口绑定，简化了使用Spring Cloud Ribbon 时，自动封装服务调用客户端的开发量。</li>
</ul>
<p><strong>Feign默认集成了Ribbon</strong></p>
<ul>
<li>利用Ribbon维护了MicroServiceCloud-Dept的服务列表信息，并且通过轮询实现了客户端的负载均衡，而与Ribbon不同的是，通过Feign只需要定义服务绑定接口且以声明式的方法，优雅而简单的实现了服务调用。</li>
</ul>
<h4 id="7-2-Feign的使用步骤"><a href="#7-2-Feign的使用步骤" class="headerlink" title="7.2 Feign的使用步骤"></a>7.2 Feign的使用步骤</h4><ol>
<li><p>创建springcloud-consumer-fdept-feign模块</p>
<p>拷贝springcloud-consumer-dept-80模块下的pom.xml，resource，以及java代码到springcloud-consumer-feign模块，并添加feign依赖。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Feign的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过Ribbon实现：—原来的controller：DeptConsumerController.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.haust.springcloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.haust.springcloud.pojo.Dept;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: csp1999</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/05/17/22:44</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptConsumerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 理解：消费者，不应该有service层~</span></span><br><span class="line">    <span class="comment">// RestTemplate .... 供我们直接调用就可以了！ 注册到Spring中</span></span><br><span class="line">    <span class="comment">// (url, 实体：Map ,Class&lt;T&gt; responseType)</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate; <span class="comment">//提供多种便捷访问远程http服务的方法，简单的Restful服务模板~</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Ribbon:我们这里的地址，应该是一个变量，通过服务名来访问</span></span><br><span class="line">    <span class="comment">//private static final String REST_URL_PREFIX = &quot;http://localhost:8001&quot;;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REST_URL_PREFIX = <span class="string">&quot;http://SPRINGCLOUD-PROVIDER-DEPT&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/dept/add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.postForObject(REST_URL_PREFIX + <span class="string">&quot;/dept/add&quot;</span>, dept, Boolean.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/dept/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">get</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(REST_URL_PREFIX + <span class="string">&quot;/dept/get/&quot;</span> + id, Dept.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/dept/list&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(REST_URL_PREFIX + <span class="string">&quot;/dept/list&quot;</span>, List.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过Feign实现：—改造后controller：DeptConsumerController.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptConsumerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DeptClientService deptClientService = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/dept/add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.deptClientService.addDept(dept);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/dept/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">get</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.deptClientService.queryById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/dept/list&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.deptClientService.queryAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Feign和Ribbon二者对比，前者显现出面向接口编程特点，代码看起来更清爽</p>
<p>主配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="comment">//feign客户端注解,并指定要扫描的包以及配置接口DeptClientService</span></span><br><span class="line"><span class="meta">@EnableFeignClients(basePackages = &#123;&quot;com.haust.springcloud&quot;&#125;)</span></span><br><span class="line"><span class="comment">//扫描所有自己的包,让所有注解也能生效</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.haust.springcloud&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignDeptConsumer_80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(FeignDeptConsumer_80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>改造springcloud-api模块</p>
<p>pom.xml添加feign依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Feign的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>新建service包，并新建DeptClientService.java接口，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@FeignClient:微服务客户端注解,value:指定微服务的名字,这样就可以使Feign客户端直接找到对应的微服务</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;SPRINGCLOUD-PROVIDER-DEPT&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeptClientService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/dept/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">queryById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/dept/list&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">queryAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/dept/add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">addDept</span><span class="params">(Dept dept)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="7-3-Feign和Ribbon如何选择？"><a href="#7-3-Feign和Ribbon如何选择？" class="headerlink" title="7.3 Feign和Ribbon如何选择？"></a>7.3 Feign和Ribbon如何选择？</h4><p><strong>根据个人习惯而定，如果喜欢REST风格使用Ribbon；如果喜欢社区版的面向接口风格使用Feign.</strong></p>
<h2 id="8-Hystrix：服务熔断"><a href="#8-Hystrix：服务熔断" class="headerlink" title="8. Hystrix：服务熔断"></a>8. Hystrix：服务熔断</h2><p><strong>分布式系统面临的问题</strong></p>
<p>复杂分布式体系结构中的应用程序有数十个依赖关系，每个依赖关系在某些时候将不可避免失败！</p>
<h4 id="8-1-服务雪崩"><a href="#8-1-服务雪崩" class="headerlink" title="8.1 服务雪崩"></a>8.1 服务雪崩</h4><p> 多个微服务之间调用的时候，假设微服务A调用微服务B和微服务C，微服务B和微服务C又调用其他的微服务，这就是所谓的“扇出”，如果扇出的链路上<strong>某个微服务的调用响应时间过长，或者不可用</strong>，对微服务A的调用就会占用越来越多的系统资源，进而引起系统崩溃，所谓的“雪崩效应”。</p>
<p> 对于高流量的应用来说，单一的后端依赖可能会导致所有服务器上的所有资源都在几十秒内饱和。比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，备份队列，线程和其他系统资源紧张，导致整个系统发生更多的级联故障，这些都表示需要对故障和延迟进行隔离和管理，以便单个依赖关系的失败，不能取消整个应用程序或系统。</p>
<p> <strong>我们需要，弃车保帅</strong></p>
<h4 id="8-2-什么是Hystrix？"><a href="#8-2-什么是Hystrix？" class="headerlink" title="8.2 什么是Hystrix？"></a>8.2 什么是Hystrix？</h4><p> Hystrix是一个应用于处理分布式系统的延迟和容错的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时，异常等，Hystrix能够保证在一个依赖出问题的情况下，不会导致整个体系服务失败，避免级联故障，以提高分布式系统的弹性。</p>
<p> “断路器”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控 (类似熔断保险丝) ，<strong>向调用方方茴一个服务预期的，可处理的备选响应 (FallBack) ，而不是长时间的等待或者抛出调用方法无法处理的异常，这样就可以保证了服务调用方的线程不会被长时间，不必要的占用</strong>，从而避免了故障在分布式系统中的蔓延，乃至雪崩。</p>
<h4 id="8-3-Hystrix能干嘛？"><a href="#8-3-Hystrix能干嘛？" class="headerlink" title="8.3 Hystrix能干嘛？"></a>8.3 Hystrix能干嘛？</h4><ul>
<li>服务降级</li>
<li>服务熔断</li>
<li>服务限流</li>
<li>接近实时的监控</li>
<li>…</li>
</ul>
<p>当一切正常时，请求流可以如下所示：</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRodWIuY29tL05ldGZsaXgvSHlzdHJpeC93aWtpL2ltYWdlcy9zb2EtMS02NDAucG5n?x-oss-process=image/format,png" alt="img"></p>
<p>当许多后端系统中有一个潜在时，它可以阻止整个用户请求：</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRodWIuY29tL05ldGZsaXgvSHlzdHJpeC93aWtpL2ltYWdlcy9zb2EtMi02NDAucG5n?x-oss-process=image/format,png" alt="img"></p>
<p>随着大容量通信量的增加，单个后端依赖项的潜在性会导致所有服务器上的所有资源在几秒钟内饱和。</p>
<p>应用程序中通过网络或客户端库可能导致网络请求的每个点都是潜在故障的来源。比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，从而备份队列、线程和其他系统资源，从而导致更多跨系统的级联故障。</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRodWIuY29tL05ldGZsaXgvSHlzdHJpeC93aWtpL2ltYWdlcy9zb2EtMy02NDAucG5n?x-oss-process=image/format,png" alt="img"></p>
<p>当使用hystrix包装每个基础依赖项时，上面的图表中所示的体系结构会发生类似于以下关系图的变化。每个依赖项是相互隔离的，限制在延迟发生时它可以填充的资源中，并包含在回退逻辑中，该逻辑决定在依赖项中发生任何类型的故障时要做出什么样的响应：</p>
<p><img src="https://img-blog.csdnimg.cn/20200521131820586.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5MTk4MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p><strong>官网资料</strong>：<a href="https://github.com/Netflix/Hystrix/wiki">https://github.com/Netflix/Hystrix/wiki</a></p>
<h4 id="8-4-服务熔断"><a href="#8-4-服务熔断" class="headerlink" title="8.4 服务熔断"></a>8.4 服务熔断</h4><h5 id="什么是服务熔断"><a href="#什么是服务熔断" class="headerlink" title="什么是服务熔断"></a><strong>什么是服务熔断</strong></h5><p> 熔断机制是赌赢雪崩效应的一种微服务链路保护机制。</p>
<p> 在微服务架构中，微服务之间的数据交互通过远程调用完成，微服务A调用微服务B和微服务C，微服务B和微服务C又调用其它的微服务，此时如果链路上某个微服务的调用响应时间过长或者不可用，那么对微服务A的调用就会占用越来越多的系统资源，进而引起系统崩溃，导致“雪崩效应”。</p>
<p>  服务熔断是应对雪崩效应的一种微服务链路保护机制。例如在高压电路中，如果某个地方的电压过高，熔断器就会熔断，对电路进行保护。同样，在微服务架构中，熔断机制也是起着类似的作用。当调用链路的某个微服务不可用或者响应时间太长时，会进行服务熔断，不再有该节点微服务的调用，快速返回错误的响应信息。当检测到该节点微服务调用响应正常后，恢复调用链路。</p>
<p> 当扇出链路的某个微服务不可用或者响应时间太长时，会进行服务的降级，<strong>进而熔断该节点微服务的调用，快速返回错误的响应信息</strong>。检测到该节点微服务调用响应正常后恢复调用链路。在SpringCloud框架里熔断机制通过Hystrix实现。Hystrix会监控微服务间调用的状况，当失败的调用到一定阀值缺省是5秒内20次调用失败，就会启动熔断机制。熔断机制的注解是：**@HystrixCommand** 。</p>
<p> 服务熔断解决如下问题： 1. 当所依赖的对象不稳定时，能够起到快速失败的目的；2. 快速失败后，能够根据一定的算法动态试探所依赖对象是否恢复。</p>
<h5 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h5><p>新建springcloud-provider-dept-hystrix-8001模块并拷贝springcloud-provider-dept–8001内的pom.xml、resource和Java代码进行初始化并调整。</p>
<p><strong>导入hystrix依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入Hystrix依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>调整yml配置文件</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mybatis配置</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="comment"># springcloud-api 模块下的pojo包</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.haust.springcloud.pojo</span></span><br><span class="line">  <span class="comment"># 本模块下的mybatis-config.xml核心配置文件类路径</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">classpath:mybatis/mybatis-config.xml</span></span><br><span class="line">  <span class="comment"># 本模块下的mapper配置文件类路径</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># spring配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment">#项目名</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-provider-dept</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment"># 德鲁伊数据源</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db01?useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Eureka配置：配置服务注册中心地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment"># 注册中心地址7001-7003</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">springcloud-provider-dept-hystrix-8001</span> <span class="comment">#修改Eureka上的默认描述信息</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#改为true后默认显示的是ip地址而不再是localhost</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#info配置</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">app.name:</span> <span class="string">haust-springcloud</span> <span class="comment">#项目的名称</span></span><br><span class="line">  <span class="attr">company.name:</span> <span class="string">com.haust</span> <span class="comment">#公司的名称</span></span><br></pre></td></tr></table></figure>

<p>prefer-ip-address: false:</p>
<p><img src="https://img-blog.csdnimg.cn/20200521131940911.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5MTk4MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>prefer-ip-address: true：</p>
<p><img src="https://img-blog.csdnimg.cn/2020052113195798.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5MTk4MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p><strong>修改controller</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//提供Restful服务</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DeptService deptService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@HystrixCommand(fallbackMethod = &quot;hystrixGet&quot;)</span><span class="comment">//如果根据id查询出现异常,走这段代码</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/dept/get/&#123;id&#125;&quot;)</span><span class="comment">//根据id查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">get</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">        Dept dept = deptService.queryById(id);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dept==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;这个id=&gt;&quot;</span>+id+<span class="string">&quot;,不存在该用户，或信息无法找到~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dept;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//根据id查询备选方案(熔断)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">hystrixGet</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Dept().setDeptno(id)</span><br><span class="line">                .setDname(<span class="string">&quot;这个id=&gt;&quot;</span>+id+<span class="string">&quot;,没有对应的信息,null---@Hystrix~&quot;</span>)</span><br><span class="line">                .setDb_source(<span class="string">&quot;在MySQL中没有这个数据库&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>为主启动类添加对熔断的支持注解@EnableCircuitBreaker</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span> <span class="comment">//EnableEurekaClient 客户端的启动类，在服务启动后自动向注册中心注册服务</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span><span class="comment">//添加对熔断的支持注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixDeptProvider_8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HystrixDeptProvider_8001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试</strong>：</p>
<p>使用熔断后，当访问一个不存在的id时，前台页展示数据如下</p>
<p><img src="https://img-blog.csdnimg.cn/20200521132057247.png#pic_center" alt="在这里插入图片描述"></p>
<p>而不适用熔断的springcloud-provider-dept–8001模块访问相同地址会出现下面状况</p>
<p><img src="https://img-blog.csdnimg.cn/20200521132119757.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5MTk4MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>因此，<strong>为了避免因某个微服务后台出现异常或错误而导致整个应用或网页报错，使用熔断是必要的</strong></p>
<h4 id="8-5-服务降级"><a href="#8-5-服务降级" class="headerlink" title="8.5 服务降级"></a>8.5 服务降级</h4><h5 id="什么是服务降级"><a href="#什么是服务降级" class="headerlink" title="什么是服务降级"></a>什么是服务降级</h5><p> 服务降级是指 当服务器压力剧增的情况下，根据实际业务情况及流量，对一些服务和页面有策略的不处理或换种简单的方式处理，从而释放服务器资源以保证核心业务正常运作或高效运作。说白了，就是尽可能的把系统资源让给优先级高的服务。   资源有限，而请求是无限的。如果在并发高峰期，不做服务降级处理，一方面肯定会影响整体服务的性能，严重的话可能会导致宕机某些重要的服务不可用。所以，一般在高峰期，为了保证核心功能服务的可用性，都要对某些服务降级处理。比如当双11活动时，把交易无关的服务统统降级，如查看蚂蚁深林，查看历史订单等等。</p>
<p>  服务降级主要用于什么场景呢？当整个微服务架构整体的负载超出了预设的上限阈值或即将到来的流量预计将会超过预设的阈值时，为了保证重要或基本的服务能正常运行，可以将一些 不重要 或 不紧急 的服务或任务进行服务的 延迟使用 或 暂停使用。   降级的方式可以根据业务来，可以延迟服务，比如延迟给用户增加积分，只是放到一个缓存中，等服务平稳之后再执行 ；或者在粒度范围内关闭服务，比如关闭相关文章的推荐。</p>
<p><img src="https://img-blog.csdnimg.cn/20200521132141732.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5MTk4MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>由上图可得，<strong>当某一时间内服务A的访问量暴增，而B和C的访问量较少，为了缓解A服务的压力，这时候需要B和C暂时关闭一些服务功能，去承担A的部分服务，从而为A分担压力，叫做服务降级</strong>。</p>
<h5 id="服务降级需要考虑的问题"><a href="#服务降级需要考虑的问题" class="headerlink" title="服务降级需要考虑的问题"></a>服务降级需要考虑的问题</h5><ul>
<li>1）那些服务是核心服务，哪些服务是非核心服务</li>
<li>2）那些服务可以支持降级，那些服务不能支持降级，降级策略是什么</li>
<li>3）除服务降级之外是否存在更复杂的业务放通场景，策略是什么？</li>
</ul>
<h5 id="自动降级分类"><a href="#自动降级分类" class="headerlink" title="自动降级分类"></a>自动降级分类</h5><p>  1）超时降级：主要配置好超时时间和超时重试次数和机制，并使用异步机制探测回复情况</p>
<p>  2）失败次数降级：主要是一些不稳定的api，当失败调用次数达到一定阀值自动降级，同样要使用异步机制探测回复情况</p>
<p>  3）故障降级：比如要调用的远程服务挂掉了（网络故障、DNS故障、http服务返回错误的状态码、rpc服务抛出异常），则可以直接降级。降级后的处理方案有：默认值（比如库存服务挂了，返回默认现货）、兜底数据（比如广告挂了，返回提前准备好的一些静态页面）、缓存（之前暂存的一些缓存数据）</p>
<p>  4）限流降级：秒杀或者抢购一些限购商品时，此时可能会因为访问量太大而导致系统崩溃，此时会使用限流来进行限制访问量，当达到限流阀值，后续请求会被降级；降级后的处理方案可以是：排队页面（将用户导流到排队页面等一会重试）、无货（直接告知用户没货了）、错误页（如活动太火爆了，稍后重试）。</p>
<h5 id="入门案例-1"><a href="#入门案例-1" class="headerlink" title="入门案例"></a>入门案例</h5><p>在springcloud-api模块下的service包中新建降级配置类DeptClientServiceFallBackFactory.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//降级 ~</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptClientServiceFallBackFactory</span> <span class="keyword">implements</span> <span class="title">FallbackFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DeptClientService <span class="title">create</span><span class="params">(Throwable cause)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DeptClientService() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Dept <span class="title">queryById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Dept()</span><br><span class="line">                        .setDeptno(id)</span><br><span class="line">                        .setDname(<span class="string">&quot;id=&gt;&quot;</span> + id + <span class="string">&quot;没有对应的信息，客户端提供了降级的信息，这个服务现在已经被关闭&quot;</span>)</span><br><span class="line">                        .setDb_source(<span class="string">&quot;没有数据~&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">queryAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Boolean <span class="title">addDept</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在DeptClientService中指定降级配置类DeptClientServiceFallBackFactory</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//注册到spring容器中</span></span><br><span class="line"><span class="comment">//@FeignClient:微服务客户端注解,value:指定微服务的名字,这样就可以使Feign客户端直接找到对应的微服务</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;SPRINGCLOUD-PROVIDER-DEPT&quot;,fallbackFactory = DeptClientServiceFallBackFactory.class)</span><span class="comment">//fallbackFactory指定降级配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeptClientService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/dept/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">queryById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/dept/list&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">queryAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/dept/add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">addDept</span><span class="params">(Dept dept)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在springcloud-consumer-dept-feign模块中开启降级</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Eureka配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment"># 不向 Eureka注册自己</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment"># 从三个注册中心中随机取一个去访问</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启降级feign.hystrix</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="8-6-服务熔断和降级的区别"><a href="#8-6-服务熔断和降级的区别" class="headerlink" title="8.6 服务熔断和降级的区别"></a>8.6 服务熔断和降级的区别</h4><ul>
<li><strong>服务熔断—&gt;服务端</strong>：某个服务超时或异常，引起熔断~，类似于保险丝(自我熔断)</li>
<li><strong>服务降级—&gt;客户端</strong>：从整体网站请求负载考虑<del>，当某个服务熔断或者关闭之后，服务将不再被调用</del>，此时在客户端，我们可以准备一个 FallBackFactory ，返回一个默认的值(缺省值)。会导致整体的服务下降，但是好歹能用，比直接挂掉强。</li>
<li>触发原因不太一样，服务熔断一般是某个服务（下游服务）故障引起，而服务降级一般是从整体负荷考虑；管理目标的层次不太一样，熔断其实是一个框架级的处理，每个微服务都需要（无层级之分），而降级一般需要对业务有层级之分（比如降级一般是从最外围服务开始）</li>
<li>实现方式不太一样，服务降级具有代码侵入性(由控制器完成/或自动降级)，熔断一般称为<strong>自我熔断</strong>。</li>
</ul>
<p>限流：限制并发的请求访问量，超过阈值则拒绝； 降级：服务分优先级，牺牲非核心服务（不可用），保证核心服务稳定；从整体负荷考虑； 熔断：依赖的下游服务故障触发熔断，避免引发本系统崩溃；系统自动执行和恢复</p>
<h4 id="8-7-Dashboard-流监控"><a href="#8-7-Dashboard-流监控" class="headerlink" title="8.7 Dashboard 流监控"></a>8.7 Dashboard 流监控</h4><p>新建springcloud-consumer-hystrix-dashboard模块</p>
<p><strong>添加依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Hystrix依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix&lt;/artifact</span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--dashboard依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Ribbon--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-ribbon&lt;/artifactI</span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Eureka--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka&lt;/artifactI</span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--实体类+web--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.haust<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--热部署--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>主启动类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//开启Dashboard</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptConsumerDashboard_9001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DeptConsumerDashboard_9001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>给springcloud-provider-dept-8001模块下的主启动类添加如下代码,添加监控</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span> <span class="comment">//EnableEurekaClient 客户端的启动类，在服务启动后自动向注册中心注册服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptProvider_8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DeptProvider_8001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增加一个 Servlet</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">hystrixMetricsStreamServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ServletRegistrationBean registrationBean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> HystrixMetricsStreamServlet());</span><br><span class="line">        <span class="comment">//访问该页面就是监控页面</span></span><br><span class="line">        registrationBean.addUrlMappings(<span class="string">&quot;/actuator/hystrix.stream&quot;</span>);</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="9-Zull路由网关"><a href="#9-Zull路由网关" class="headerlink" title="9. Zull路由网关"></a>9. Zull路由网关</h2><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p><strong>什么是zuul?</strong></p>
<p> Zull包含了对请求的<strong>路由</strong>(用来跳转的)和<strong>过滤</strong>两个最主要功能：</p>
<p> 其中<strong>路由功能负责将外部请求转发到具体的微服务实例上，是实现外部访问统一入口的基础</strong>，而过<strong>滤器功能则负责对请求的处理过程进行干预，是实现请求校验，服务聚合等功能的基础</strong>。Zuul和Eureka进行整合，将Zuul自身注册为Eureka服务治理下的应用，同时从Eureka中获得其他服务的消息，也即以后的访问微服务都是通过Zuul跳转后获得。</p>
<p> 注意：Zuul服务最终还是会注册进Eureka</p>
<p> 提供：代理+路由+过滤 三大功能！</p>
<p><strong>Zuul能干嘛？</strong></p>
<ul>
<li>路由</li>
<li>过滤</li>
</ul>
<p>官方文档：<a href="https://github.com/Netflix/zuul/">https://github.com/Netflix/zuul/</a></p>
<h4 id="入门案例-2"><a href="#入门案例-2" class="headerlink" title="入门案例"></a>入门案例</h4><p><strong>新建springcloud-zuul模块，并导入依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入zuul依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zuul&lt;/artifactId</span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Hystrix依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix&lt;/artifac</span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--dashboard依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix-dashboar</span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Ribbon--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-ribbon&lt;/artifact</span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Eureka--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka&lt;/artifact</span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--实体类+web--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.haust<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--热部署--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>application.yml</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-zuul</span> <span class="comment">#微服务名称</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span> <span class="comment">#实例的id</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">zuul9527.com</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment"># 显示ip</span></span><br><span class="line"></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">app.name:</span> <span class="string">haust.springcloud</span> <span class="comment">#项目名称</span></span><br><span class="line">  <span class="attr">company.name:</span> <span class="string">haust</span> <span class="comment">#公司名称</span></span><br><span class="line"></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">mydept.serviceId:</span> <span class="string">springcloud-provider-dept</span></span><br><span class="line">    <span class="attr">mydept.path:</span> <span class="string">/mydept/**</span></span><br><span class="line">    <span class="attr">ignored-services:</span> <span class="string">&quot;*&quot;</span>  <span class="comment"># 不能再使用某个(*：全部)路径访问了，ignored ： 忽略,隐藏全部的~</span></span><br><span class="line">    <span class="attr">prefix:</span> <span class="string">/kuagn</span> <span class="comment"># 设置公共的前缀,实现隐藏原有路由</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20200521132228379.png#pic_center" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-pc2gKhub-1590035798590)(C:\Users\dell\AppData\Roaming\Typora\typora-user-images\image-20200520211031365.png)]"></p>
<p><strong>主启动类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span> <span class="comment">//开启Zuul</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulApplication_9527</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ZuulApplication_9527.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>详情参考springcloud中文社区zuul组件 :<a href="https://www.springcloud.cc/spring-cloud-greenwich.html#_router_and_filter_zuul">https://www.springcloud.cc/spring-cloud-greenwich.html#_router_and_filter_zuul</a></p>
<h2 id="10-Spring-Cloud-Config-分布式配置"><a href="#10-Spring-Cloud-Config-分布式配置" class="headerlink" title="10. Spring Cloud Config 分布式配置"></a>10. Spring Cloud Config 分布式配置</h2><p><strong>Dalston.RELEASE</strong></p>
<p><strong>Spring Cloud Config为分布式系统中的外部配置提供服务器和客户端支持</strong>。使用Config Server，您可以在所有环境中管理应用程序的外部属性。客户端和服务器上的概念映射与Spring <code>Environment</code>和<code>PropertySource</code>抽象相同，因此它们与Spring应用程序非常契合，但可以与任何以任何语言运行的应用程序一起使用。随着应用程序通过从开发人员到测试和生产的部署流程，您可以管理这些环境之间的配置，并确定应用程序具有迁移时需要运行的一切。服务器存储后端的默认实现使用git，因此它轻松支持标签版本的配置环境，以及可以访问用于管理内容的各种工具。很容易添加替代实现，并使用Spring配置将其插入。</p>
<h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p><strong>分布式系统面临的–配置文件问题</strong></p>
<p>微服务意味着要将单体应用中的业务拆分成一个个子服务，每个服务的粒度相对较小，因此系统中会出现大量的服务，由于每个服务都需要必要的配置信息才能运行，所以一套集中式的，动态的配置管理设施是必不可少的。spring cloud提供了configServer来解决这个问题，我们每一个微服务自己带着一个application.yml，那上百个的配置文件修改起来，令人头疼！</p>
<p><strong>什么是SpringCloud config分布式配置中心？</strong></p>
<p><img src="https://img-blog.csdnimg.cn/202005211322530.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5MTk4MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p> spring cloud config 为微服务架构中的微服务提供集中化的外部支持，配置服务器为各个不同微服务应用的所有环节提供了一个<strong>中心化的外部配置</strong>。</p>
<p> spring cloud config 分为<strong>服务端</strong>和<strong>客户端</strong>两部分。</p>
<p> 服务端也称为 <strong>分布式配置中心</strong>，它是一个独立的微服务应用，用来连接配置服务器并为客户端提供获取配置信息，加密，解密信息等访问接口。</p>
<p> 客户端则是<strong>通过指定的配置中心来管理应用资源，以及与业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息</strong>。配置服务器默认采用git来存储配置信息，这样就有助于对环境配置进行版本管理。并且可用通过git客户端工具来方便的管理和访问配置内容。</p>
<p><strong>spring cloud config 分布式配置中心能干嘛？</strong></p>
<ul>
<li>集中式管理配置文件</li>
<li>不同环境，不同配置，动态化的配置更新，分环境部署，比如 /dev /test /prod /beta /release</li>
<li>运行期间动态调整配置，不再需要在每个服务部署的机器上编写配置文件，服务会向配置中心统一拉取配置自己的信息</li>
<li>当配置发生变动时，服务不需要重启，即可感知到配置的变化，并应用新的配置</li>
<li>将配置信息以REST接口的形式暴露</li>
</ul>
<p><strong>spring cloud config 分布式配置中心与GitHub整合</strong></p>
<p> 由于spring cloud config 默认使用git来存储配置文件 (也有其他方式，比如自持SVN 和本地文件)，但是最推荐的还是git ，而且使用的是 http / https 访问的形式。</p>
<h4 id="入门案例-3"><a href="#入门案例-3" class="headerlink" title="入门案例"></a>入门案例</h4><h5 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a><strong>服务端</strong></h5><p>新建springcloud-config-server-3344模块导入pom.xml依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--web--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--config--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--eureka--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>resource下创建application.yml配置文件，Spring Cloud Config服务器从git存储库（必须提供）为远程客户端提供配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3344</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-config-server</span></span><br><span class="line">  <span class="comment"># 连接码云远程仓库</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="comment">#注意是https的而不是ssh</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://gitee.com/cao_shi_peng/springcloud-config.git</span> </span><br><span class="line">            <span class="comment"># 通过 config-server可以连接到git，访问其中的资源以及配置~</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不加这个配置会报Cannot execute request on any known server 这个错：连接Eureka服务端地址不对</span></span><br><span class="line"><span class="comment"># 或者直接注释掉eureka依赖 这里暂时用不到eureka</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>主启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableConfigServer</span> <span class="comment">//开启spring cloud config server服务</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config_server_3344</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Config_server_3344.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将本地git仓库springcloud-config文件夹下新建的application.yml提交到码云仓库：</p>
<p><img src="https://img-blog.csdnimg.cn/20200521132326502.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5MTk4MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>定位资源的默认策略是克隆一个git仓库（在<code>spring.cloud.config.server.git.uri</code>），并使用它来初始化一个迷你<code>SpringApplication</code>。小应用程序的<code>Environment</code>用于枚举属性源并通过JSON端点发布。</p>
<p>HTTP服务具有以下格式的资源：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/&#123;application&#125;/&#123;profile&#125;[/&#123;label&#125;]</span><br><span class="line">/&#123;application&#125;-&#123;profile&#125;.yml</span><br><span class="line">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.yml</span><br><span class="line">/&#123;application&#125;-&#123;profile&#125;.properties</span><br><span class="line">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.properties</span><br></pre></td></tr></table></figure>

<p>其中“应用程序”作为<code>SpringApplication</code>中的<code>spring.config.name</code>注入（即常规的Spring Boot应用程序中通常是“应用程序”），“配置文件”是活动配置文件（或逗号分隔列表的属性），“label”是可选的git标签（默认为“master”）。</p>
<p>测试访问<a href="http://localhost:3344/application-dev.yml">http://localhost:3344/application-dev.yml</a></p>
<p><img src="https://img-blog.csdnimg.cn/20200521132350566.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5MTk4MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>测试访问 <a href="http://localhost:3344/application/test/master">http://localhost:3344/application/test/master</a></p>
<p><img src="https://img-blog.csdnimg.cn/20200521132406474.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5MTk4MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>测试访问 <a href="http://localhost:3344/master/application-dev.yml">http://localhost:3344/master/application-dev.yml</a></p>
<p><img src="https://img-blog.csdnimg.cn/20200521132423447.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5MTk4MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>如果测试访问不存在的配置则不显示 如：<a href="http://localhost:3344/master/application-aaa.yml">http://localhost:3344/master/application-aaa.yml</a></p>
<p><img src="https://img-blog.csdnimg.cn/20200521132439404.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5MTk4MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h5 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a><strong>客户端</strong></h5><p>将本地git仓库springcloud-config文件夹下新建的config-client.yml提交到码云仓库：</p>
<p><img src="https://img-blog.csdnimg.cn/20200521132503261.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5MTk4MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>新建一个springcloud-config-client-3355模块，并导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--config--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-start</span></span><br><span class="line"><span class="comment">&lt;dependency&gt;</span></span><br><span class="line"><span class="comment">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">    &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">    &lt;version&gt;2.1.1.RELEASE&lt;/version&gt;</span></span><br><span class="line"><span class="comment">&lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">&lt;dependency&gt;</span></span><br><span class="line"><span class="comment">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">&lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">&lt;dependency&gt;</span></span><br><span class="line"><span class="comment">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">&lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">pendencies&gt;</span></span><br></pre></td></tr></table></figure>

<p>resources下创建application.yml和bootstrap.yml配置文件</p>
<p>bootstrap.yml是系统级别的配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 系统级别的配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config-client</span> <span class="comment"># 需要从git上读取的资源名称，不要后缀</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:3344</span></span><br></pre></td></tr></table></figure>

<p>application.yml是用户级别的配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用户级别的配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-config-client</span></span><br></pre></td></tr></table></figure>

<p>创建controller包下的ConfigClientController.java用于测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.application.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String applicationName; <span class="comment">//获取微服务名称</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;eureka.client.service-url.defaultZone&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String eurekaServer; <span class="comment">//获取Eureka服务</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String port; <span class="comment">//获取服务端的端口号</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/config&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfig</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;applicationName:&quot;</span>+applicationName +</span><br><span class="line">         <span class="string">&quot;eurekaServer:&quot;</span>+eurekaServer +</span><br><span class="line">         <span class="string">&quot;port:&quot;</span>+port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigClient.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<p>启动服务端Config_server_3344 再启动客户端ConfigClient</p>
<p>访问：<a href="http://localhost:8201/config/">http://localhost:8201/config/</a></p>
<p><img src="https://img-blog.csdnimg.cn/20200521132534867.png#pic_center" alt="在这里插入图片描述"></p>
<p><strong>小案例</strong></p>
<p>本地新建config-dept.yml和config-eureka.yml并提交到码云仓库</p>
<p><img src="https://img-blog.csdnimg.cn/20200521132550150.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5MTk4MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20200521132601463.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5MTk4MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>这里配置文件内容不再列举直接到代码中看把。</p>
<p>新建springcloud-config-eureka-7001模块，并将原来的springcloud-eureka-7001模块下的内容拷贝的该模块。</p>
<p>1.清空该模块的application.yml配置，并新建bootstrap.yml连接远程配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config-eureka</span> <span class="comment"># 仓库中的配置文件名称</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:3344</span></span><br></pre></td></tr></table></figure>

<p>2.在pom.xml中添加spring cloud config依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--config--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-config --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3.主启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span> <span class="comment">//EnableEurekaServer 服务端的启动类，可以接受别人注册进来~</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigEurekaServer_7001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigEurekaServer_7001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4.测试</p>
<p>第一步：启动 Config_Server_3344，并访问 <a href="http://localhost:3344/master/config-eureka-dev.yml">http://localhost:3344/master/config-eureka-dev.yml</a> 测试</p>
<p><img src="https://img-blog.csdnimg.cn/2020052113262082.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5MTk4MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"> 第二部：启动ConfigEurekaServer_7001，访问 <a href="http://localhost:7001/">http://localhost:7001/</a> 测试</p>
<p><img src="https://img-blog.csdnimg.cn/20200521132633925.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5MTk4MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"> 显示上图则成功</p>
<p>新建springcloud-config-dept-8001模块并拷贝springcloud-provider-dept-8001的内容</p>
<p>同理导入spring cloud config依赖、清空application.yml 、新建bootstrap.yml配置文件并配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config-dept</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:3344</span></span><br></pre></td></tr></table></figure>

<p>主启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span> <span class="comment">//在服务启动后自动注册到Eureka中！</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">//服务发现~</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span> <span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigDeptProvider_8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigDeptProvider_8001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增加一个 Servlet</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">hystrixMetricsStreamServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ServletRegistrationBean registrationBean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> HystrixMetricsStreamServlet());</span><br><span class="line">        registrationBean.addUrlMappings(<span class="string">&quot;/actuator/hystrix.stream&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试 (略)</p>
<p>后端</p>
<p>分布式</p>
<p>Java</p>
<p>SpringCloud</p>
<p>赞赏</p>
<p>作者：海贼王<a href="https://blog.csp1999.top/blog/about">（联系作者）</a>发表时间：2020-05-22 15:55版权声明：自由转载-非商用-非衍生-保持署名（创意共享3.0许可证）公众号转载：请在文末添加作者公众号二维码</p>
<p><img src="https://blog.csp1999.top/blog/images/wechat.jpg" alt="img"></p>
<h3 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h3><p>发布</p>
<p>目录<a href="https://blog.csp1999.top/blog/blog/26#comment-container">留言</a></p>
<p><img src="https://blog.csp1999.top/blog/images/wechat.jpg" alt="img"></p>
<h4 id="最新博客"><a href="#最新博客" class="headerlink" title="最新博客"></a>最新博客</h4><p><a href="https://blog.csp1999.top/blog/41">第15章 泛型</a><a href="https://blog.csp1999.top/blog/40">第14章 类型信息(包含Java反射机制)</a><a href="https://blog.csp1999.top/blog/39">第13章 字符串</a></p>
<h4 id="联系我"><a href="#联系我" class="headerlink" title="联系我"></a>联系我</h4><p><a href="https://blog.csp1999.top/blog/blog/26#">Email：CSP19990129@163.com</a><a href="https://blog.csp1999.top/blog/blog/26#">QQ：1165680007</a></p>
<h4 id="Blog"><a href="#Blog" class="headerlink" title="Blog"></a>Blog</h4><p>这是我的个人博客、会分享关于编程、写作、思考相关的任何内容，希望可以给来到这儿的人有所帮助…</p>
<p>HAUST © 2020.5.1 - 2020.5.7 DESIGN BY CAO SHIPENG</p>
]]></content>
      <categories>
        <category>​	SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>基础</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SpringCloud/SpringCloud%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h4 id="SpringBoot与SpringCloud版本对应"><a href="#SpringBoot与SpringCloud版本对应" class="headerlink" title="SpringBoot与SpringCloud版本对应"></a>SpringBoot与SpringCloud版本对应</h4><p>查看<a href="https://start.spring.io/actuator/info">https://start.spring.io/actuator/info</a></p>
<h4 id="整体环境"><a href="#整体环境" class="headerlink" title="整体环境"></a>整体环境</h4><ul>
<li>cloud Hoxton.SR1</li>
<li>boot 2.2.2.RELEASE</li>
<li>cloud alibaba 2.1.0.RELEASE</li>
<li>Java java8</li>
<li>Maven 3.5及以上</li>
<li>Mysql 5.7及以上</li>
</ul>
<h4 id="现阶段各组件状况"><a href="#现阶段各组件状况" class="headerlink" title="现阶段各组件状况"></a>现阶段各组件状况</h4><p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210808155511.png" alt="image-20210808155509941"></p>
<h4 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h4><ul>
<li><p>Eureka</p>
<p>有自我保护机制，当其中一个微服务没有响应时会留着该微服务不会去删除该微服务</p>
</li>
<li><p>Zookeeper</p>
<p>当微服务在一段时间内没有响应，会立刻删掉该微服务</p>
</li>
<li><p>Consul</p>
</li>
</ul>
<p>三种服务的异同</p>
<ul>
<li>CAP （C:强一致性 A:可用性 P:分区容错性）<ul>
<li>Eureka AP</li>
<li>Zookeeper CP</li>
<li>Consul CP</li>
</ul>
</li>
</ul>
<h4 id="服务调用"><a href="#服务调用" class="headerlink" title="服务调用"></a>服务调用</h4><ul>
<li><p>ribbon</p>
<ul>
<li><p>在新版的spring-cloud-starter-netflix-eureka-client中已经集成了ribbon</p>
</li>
<li><p>ribbon的工作原理</p>
<ol>
<li>选择一个负载较少的Eureka服务器</li>
<li>在该服务器中根据负载均衡策略寻找一个合适的服务</li>
</ol>
</li>
<li><p>ribbon自定义规则</p>
<p><font color=red>注意：不能在启动类下的子包中定义自定义规则，因为会被@SpringBootApplication扫描当前目录下，这样的不会使得自定义的规则生效</font></p>
<p>步骤如下：</p>
<ol>
<li><p>定义规则 （与之前的主启动类所在的包分开）</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210809164915.png" alt="image-20210809164913978"></p>
<p>​    </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySelfRule</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">myRule</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;   <span class="comment">//定义为随机</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RandomRule();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>主启动类上生命规则</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@RibbonClient(name = &quot;CLOUD-PAYMENT-SERVICE&quot;,configuration= MySelfRule.class)</span> <span class="comment">//声明规则</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderApplication80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderApplication80.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
</li>
<li><p>openFeign</p>
<ul>
<li><p>自带ribbon负载均衡</p>
</li>
<li><p>直接在接口上添加注解@FeignClient</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@FeignClient(&quot;CLOUD-PAYMENT-SERVICE&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentFeignService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>默认的Feign客户端只等待一秒钟，如果服务端超过一秒钟则会直接返回报错</p>
<p>超时控制</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置feign客户端超时时间(OpenFeign默认支持ribbon)</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="comment">#指的是建立连接所用的时间，适用于网络状况正常的情况下,两端连接所用的时间</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">5000</span></span><br><span class="line">  <span class="comment">#指的是建立连接后从服务器读取到可用资源所用的时间</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure></li>
<li><p>开启并配置日志级别</p>
<ul>
<li><p>yaml中配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="comment"># feign日志以什么级别监控哪个接口</span></span><br><span class="line">    <span class="attr">com.atguigu.springcloud.service.PaymentFeignService:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.<span class="function">Level <span class="title">feignLoggerLevel</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h4><ul>
<li><p>概念</p>
<ul>
<li><p>服务降级</p>
<p>服务器繁忙，不让客户端段等待并立刻返回一个友好的提示</p>
<p>出现情况</p>
<ul>
<li>程序运行异常</li>
<li>超时</li>
<li>服务熔断触发服务降级</li>
<li>线程池/信号量打满也会导致服务降级</li>
</ul>
</li>
<li><p>服务限流</p>
<p>秒杀高并发等操作，严禁一窝蜂的过来拥挤，使其排队</p>
</li>
<li><p>服务熔断</p>
<p>直接拒绝访问，拉闸限电，然后调用服务降级的方法并返回友好提示</p>
</li>
</ul>
</li>
<li><p>解决思路</p>
<ul>
<li><p>超时导致服务器变慢</p>
<p>超时不再等待必须有服务降级</p>
</li>
<li><p>出错</p>
<p>调用者需要有兜底，必须有服务降级</p>
</li>
<li><p>对方服务ok，但是调用者自己出现股灾或者有自我要求（要求的时间小于对方服务返回的时间）</p>
<p>必须有服务降级</p>
</li>
</ul>
</li>
<li><p>代码</p>
<ul>
<li><p>服务降级</p>
<ul>
<li><p>服务端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfoOK</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池： &quot;</span> + Thread.currentThread().getName() +<span class="string">&quot;\t&quot;</span>+ <span class="string">&quot;paymentInfoOK(),id:&quot;</span>+ id+ <span class="string">&quot;\t&quot;</span> +<span class="string">&quot; \&quot;O(∩_∩) 成功返回哈哈哈&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@HystrixCommand(fallbackMethod = &quot;paymentInfo_TimeoutHandler&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name=&quot;execution.isolation.thread.timeoutInMilliseconds&quot;,value=&quot;3000&quot;) //三秒之内不出错</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfoTimeOut</span><span class="params">(Integer id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池:  &quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;  8001系统繁忙或者运行报错，请稍后再试,id:  &quot;</span>+id+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;^_^&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeoutHandler</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池:  &quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;  8001系统繁忙或者运行报错，请稍后再试,id:  &quot;</span>+id+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;o(╥﹏╥)o&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主启动类上添加<code>@EnableCircuitBreaker</code></p>
</li>
<li><p>消费端</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;paymentInfo_TimeoutHandler&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name=&quot;execution.isolation.thread.timeoutInMilliseconds&quot;,value=&quot;1000&quot;) //1秒之内返回</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_Timeout</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">    String result = paymentHystrixService.paymentInfoTimeOut(id);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">      </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeoutHandler</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;线程池:  &quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;  80系统繁忙或者运行报错，请稍后再试,id:  &quot;</span>+id+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;o(╥﹏╥)o&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主启动类上添加<code>@EnableHystrix</code></p>
</li>
</ul>
</li>
</ul>
<p>处理服务降级的三种方法</p>
<ol>
<li><p>直接在原来的方法上进行申明fallback</p>
</li>
<li><p>定义全局fallback  ==方法2的优先级&gt;方法1==</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DefaultProperties(defaultFallback = &quot;payment_Global_FallbackMethod&quot;)</span></span><br></pre></td></tr></table></figure></li>
<li><p>在service层继承接口实现类进行fallback</p>
<p>service类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;CLOUD-PROVIDER-HYSTRIX-PAYMENT&quot;,fallback = PaymentFallbackService.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentHystrixService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfoOk</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfoTimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>fallbac类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentFallbackService</span> <span class="keyword">implements</span> <span class="title">PaymentHystrixService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfoOk</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;impl paymentInfoOk&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfoTimeOut</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;impl paymentInfoTimeOut&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h4 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h4><ul>
<li><p>定义</p>
<p>它是一种对于雪崩效应的微服务链路保护机制，当扇出链路的某个微服务出错或者响应时间太长时，会进行服务的降级，进而熔断该节点的微服务调用，快速返回错误的响应嘻嘻。</p>
<p><font color=red>当检测到该节点微服务调用正常后，恢复调用链路</font></p>
</li>
<li><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//=====服务熔断</span></span><br><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;paymentCircuitBreaker_fallback&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;circuitBreaker.enabled&quot;,value = &quot;true&quot;),// 是否开启断路器</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;circuitBreaker.requestVolumeThreshold&quot;,value = &quot;10&quot;),// 请求次数</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;circuitBreaker.sleepWindowInMilliseconds&quot;,value = &quot;10000&quot;), // 时间窗口期 失败之后经过多长时间会逐渐打开服务</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;circuitBreaker.errorThresholdPercentage&quot;,value = &quot;60&quot;),// 失败率达到多少后跳闸</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="展示dashboard"><a href="#展示dashboard" class="headerlink" title="展示dashboard"></a>展示dashboard</h5><ul>
<li><p>填坑</p>
<p>服务端需要在主启动类上添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *此配置是为了服务监控而配置，与服务容错本身无关，springcloud升级后的坑</span></span><br><span class="line"><span class="comment"> *ServletRegistrationBean因为springboot的默认路径不是&quot;/hystrix.stream&quot;，</span></span><br><span class="line"><span class="comment"> *只要在自己的项目里配置上下面的servlet就可以了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">getServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    HystrixMetricsStreamServlet streamServlet = <span class="keyword">new</span> HystrixMetricsStreamServlet();</span><br><span class="line">    ServletRegistrationBean registrationBean = <span class="keyword">new</span> ServletRegistrationBean(streamServlet);</span><br><span class="line">    registrationBean.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">    registrationBean.addUrlMappings(<span class="string">&quot;/hystrix.stream&quot;</span>);</span><br><span class="line">    registrationBean.setName(<span class="string">&quot;HystrixMetricsStreamServlet&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>dashboard作为一个单独的微服务</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>​      配置端口</p>
<pre><code>  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span></span><br></pre></td></tr></table></figure>
</code></pre>
<p>​    主启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span>  <span class="comment">//访问 http://localhost:9001/hystrix</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixDashboardApplication9001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HystrixDashboardApplication9001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="服务熔断框架比较"><a href="#服务熔断框架比较" class="headerlink" title="服务熔断框架比较"></a>服务熔断框架比较</h5><p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210819145929.png" alt="image-20210819145927536"></p>
<h4 id="服务网关"><a href="#服务网关" class="headerlink" title="服务网关"></a>服务网关</h4><p>Springcloud-gateway 注意点</p>
<ul>
<li><p>当调用feign的时候需要添加feign的配置  </p>
<p>也就是需要添加一个消息转换器，具体原因如下</p>
<p><a href="https://www.codenong.com/cs106907570/">https://www.codenong.com/cs106907570/</a></p>
<p><a href="https://github.com/spring-cloud/spring-cloud-openfeign/issues/235">https://github.com/spring-cloud/spring-cloud-openfeign/issues/235</a></p>
<p>主要原因就是因为springcloud gateway是基于webFlux的，而openfeign在messageconvert在非阻塞式的系统中不会装配，而我们在@RequestController中使用了@ResponseBody使用了消息转换器，因此需要我们自己去装配一个消息转换器。当然这会影响一定的性能。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Decoder <span class="title">feignDecoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntityDecoder(<span class="keyword">new</span> SpringDecoder(feignHttpMessageConverter()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ObjectFactory&lt;HttpMessageConverters&gt; <span class="title">feignHttpMessageConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> HttpMessageConverters httpMessageConverters = <span class="keyword">new</span> HttpMessageConverters(<span class="keyword">new</span> PhpMappingJackson2HttpMessageConverter());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ObjectFactory&lt;HttpMessageConverters&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> HttpMessageConverters <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> httpMessageConverters;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhpMappingJackson2HttpMessageConverter</span> <span class="keyword">extends</span> <span class="title">MappingJackson2HttpMessageConverter</span> </span>&#123;</span><br><span class="line">        PhpMappingJackson2HttpMessageConverter()&#123;</span><br><span class="line">            List&lt;MediaType&gt; mediaTypes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            mediaTypes.add(MediaType.valueOf(MediaType.TEXT_HTML_VALUE + <span class="string">&quot;;charset=UTF-8&quot;</span>)); <span class="comment">//关键</span></span><br><span class="line">            setSupportedMediaTypes(mediaTypes);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>对于feign的调用的服务需要注意serviceId一定要大写，否则需要在yaml中声明</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">#开启从注册中心动态创建路由的功能，利用微服务名进行路由</span></span><br><span class="line">          <span class="attr">lower-case-service-id:</span> <span class="literal">true</span> <span class="comment">#serviceId 如果小写的话一定要注意开启</span></span><br></pre></td></tr></table></figure></li>
<li><p>openfeign的调用的接口的路径一定要写全，尤其是在controller上面的@RequestMapping还有</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">servlet:</span></span><br><span class="line">  <span class="attr">context-path:</span> </span><br></pre></td></tr></table></figure>

<p>这些一定要注意加进去</p>
</li>
</ul>
<h4 id="SpringCloud-Config"><a href="#SpringCloud-Config" class="headerlink" title="SpringCloud Config"></a>SpringCloud Config</h4><p>为微服务架构中的微服务提供集中化的外部配置支持，配置服务器为各个不同微服务应用的所有环境提供一个中心化的外部配置</p>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>初始SpringCloud</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SpringCloud/%E5%88%9D%E5%A7%8BSpringCloud/</url>
    <content><![CDATA[<ol>
<li><p>给整体项目创建pom依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    此处可以指定各个dependency的版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junit-version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit-version</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            springcloud的依赖--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-dependencies --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.SR7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            springboot的依赖--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-dependencies --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            数据库--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            数据源--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            SpringBoot Mybaits启动器--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-core --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
</li>
<li><p>创建子项目springcloud-api（该项目中只利用其创建的实体类）</p>
<p>子项目结构如下</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200813143258.png" alt="image-20200813143211574" style="zoom:50%;" /></li>
</ol>
<p>Dept.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这里要继承Serializable接口，否则有可能无法传输实体</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span> <span class="comment">//链式写法  com.cooper.springcloud.pojo.Dept.setName().setDB_source.</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer deptno;</span><br><span class="line">    <span class="keyword">private</span> String dname;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加数据库名称的字段是为了防止多个数据库中有相同的字段，一个服务对应一个数据库，同一个信息可能存在不同的数据库中</span></span><br><span class="line">    <span class="keyword">private</span> String db_source;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dept</span><span class="params">(String dname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dname = dname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>数据库表如下：</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200813143627.png" alt="image-20200813143410530" style="zoom:50%;" />

<hr>
<ol start="3">
<li><p>创建子项目provider（提供服务者）</p>
<p>provider项目结构如下：</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200813143620.png" alt="image-20200813143615664" style="zoom:50%;" />

<ol>
<li><p>maven依赖如下（此处因为集成了父级的maven依赖，因此无需再写版本号）：</p>
<p><strong><font color = red >在该依赖中导入了上一个子项目创建的实体类</font></strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        为了拿到实体类(即Dept)，所以需要配置api module--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        jetty--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        热部署--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置yaml文件（包括端口号、mybatis、数据库连接等信息）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.cooper.springcloud.pojo</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-provider-dept</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">org.gjt.mm.mysql.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;characterEncodeing=UTF-8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">12345678</span></span><br></pre></td></tr></table></figure></li>
<li><p>创建Dao层</p>
<p>DeptDao接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeptDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addDept</span><span class="params">(Dept dept)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">queryByID</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">queryAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对应的Mapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.cooper.springcloud.dao.DeptDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addDept&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">       insert into dept (dname,db_source) values (#&#123;dname&#125;,DATABASE())</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryByID&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Dept&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Long&quot;</span>&gt;</span></span><br><span class="line">       select * from dept where deptno = #&#123;deptno&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">       select * from dept;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>创建service层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeptService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addDept</span><span class="params">(Dept dept)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">queryByID</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">queryAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptServiceImpl</span> <span class="keyword">implements</span> <span class="title">DeptService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DeptDao deptDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addDept</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptDao.addDept(dept);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">queryByID</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptDao.queryByID(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">queryAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptDao.queryAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>创建controller层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DeptServiceImpl service;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        此处为什么要使用PostMapping？</span></span><br><span class="line"><span class="comment">            因为此处是不面向用户的，所以只对应的开发人员调用，因此用户不能通过该接口添加信息，如果写成GetMapping的话，</span></span><br><span class="line"><span class="comment">            用户可以直接通过该接口向数据库添加信息，造成不安全</span></span><br><span class="line"><span class="comment">        此处为何要添加@RequestBody？</span></span><br><span class="line"><span class="comment">            将用户使用接口通过Get方法传递过来的参数包装成一个实体类，如果不添加该方法，则会出现添加的实体类的部分属性为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/dept/add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addDept</span><span class="params">(<span class="meta">@RequestBody</span>  Dept dept)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> service.addDept(dept);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/dept/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">get</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> service.queryByID(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/dept/list&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">queryAll</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> service.queryAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>编写启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptProvider_8081</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DeptProvider_8081.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
</li>
</ol>
</li>
<li><p>创建consumer子项目</p>
<p>consumer项目结构如下：</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200813150143.png" alt="image-20200813145339509" style="zoom:50%;" />

<ol>
<li><p>添加项目依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写ConfigBean.class 注入 RestTemplate 用来Http通信</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>编写Controller层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//此处是消费者 不提供服务  因此不需要service层</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;<span class="comment">//提供多种便捷访问远程Http服务的方法，简单的Restful服务模板</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REST_URL_PREFIX  = <span class="string">&quot;http://localhost:8081&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//此处填写GetMapping是为了让用户通过url传递参数从而将数据添加到数据库中，相当于在原始的基础上多了一层封装，通过该封装传递了信息到provider</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;consumer/dept/add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(Dept dept)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.postForObject(REST_URL_PREFIX+<span class="string">&quot;/dept/add&quot;</span>,dept,Boolean.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;consumer/dept/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">get</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Long id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(REST_URL_PREFIX+<span class="string">&quot;/dept/get/&quot;</span>+id, Dept.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;consumer/dept/list&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">queryAll</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(REST_URL_PREFIX+<span class="string">&quot;/dept/list&quot;</span>,List.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>编写启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptProvider_8080</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DeptProvider_8080.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
</li>
</ol>
</li>
<li><p>测试</p>
<p>将provider和consumer项目都启动</p>
<ol>
<li>添加测试</li>
</ol>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200813150137.png" alt="image-20200813145722229" style="zoom:50%;" /></li>
</ol>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200813150133.png" alt="image-20200813145751494" style="zoom:50%;" />

<p>​        2. 查询所有信息</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200813150127.png" alt="image-20200813145836250" style="zoom:50%;" />

<p>​        3.查询单个员工</p>
 <img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200813150120.png" alt="image-20200813145940913" style="zoom:50%;" /> 

]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringData</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SpringData/%E5%88%9D%E8%AF%86SpringData/</url>
    <content><![CDATA[<h4 id="SpringData定义"><a href="#SpringData定义" class="headerlink" title="SpringData定义"></a>SpringData定义</h4><p>​        Spring Data JPA是一种JPA的抽象层，底层依赖Hibernate，也就是给我们直接提供了访问数据库的能力，比如常见的CRUD操作，复杂的操作还是需要我们自己编写。</p>
<p>​        可以访问关系型数据库也可以访问NoSQL类型数据库</p>
<p><strong>以关系型数据库为例</strong></p>
<hr>
<h4 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h4><h5 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1. 导入依赖"></a>1. 导入依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="2-配置yaml文件（因为底层是hibernate实现的，所以需要声明一下）"><a href="#2-配置yaml文件（因为底层是hibernate实现的，所以需要声明一下）" class="headerlink" title="2. 配置yaml文件（因为底层是hibernate实现的，所以需要声明一下）"></a>2. 配置yaml文件（因为底层是hibernate实现的，所以需要声明一下）</h5><ul>
<li><p>ddl-auto:create—-每次运行该程序，没有表格会新建表格，表内有数据会清空</p>
</li>
<li><p>ddl-auto:create-drop—-每次程序结束的时候会清空表</p>
</li>
<li><p>ddl-auto:update—-每次运行程序，没有表格会新建表格，表内有数据不会清空，只会更新(此次的选择)</p>
</li>
<li><p>ddl-auto:validate—-运行程序会校验数据与数据库的字段类型是否相同，不同会报错</p>
</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">12345678</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br><span class="line">      <span class="attr">naming:</span></span><br><span class="line">        <span class="attr">physical-strategy:</span> <span class="string">org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy</span> <span class="comment"># 遇到大写加_</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h5 id="3-创建实体类"><a href="#3-创建实体类" class="headerlink" title="3. 创建实体类"></a>3. 创建实体类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cooper.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Table;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Table(name = &quot;user&quot;)</span><span class="comment">//如果没有表则会创建表 </span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GeneratedValue</span> <span class="comment">//自动生成</span></span><br><span class="line">    <span class="meta">@Id</span>  <span class="comment">//指定主键</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-继承Repository接口"><a href="#4-继承Repository接口" class="headerlink" title="4. 继承Repository接口"></a>4. 继承Repository接口</h5><p>​        1. Repository接口是一个空的标记接口，我们定义的接口如果继承了该接口，则该接口会被IOC容器识别为一个Repository Bean纳入到IOC容器中，进而可以在该接口中定义<strong>满足一定规范</strong>的方法</p>
<p>​        2. 可以通过注解替代继承接口     <code>@RepositoryDefinition(domainClass = User.class,idClass = Integer.class)</code></p>
<p>Repository&lt;User,Integer&gt;  其中<strong>User是处理的实体类的类型，Integer为主键类型</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonRepository</span> <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">User</span>,<span class="title">Integer</span>&gt; , <span class="title">PersonDao</span></span>&#123;</span><br><span class="line">    <span class="function">User <span class="title">getUserByName</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5-测试"><a href="#5-测试" class="headerlink" title="5. 测试"></a>5. 测试</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testRepository</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    User user = repository.getUserByName(<span class="string">&quot;Cooper&quot;</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Repository方法规范"><a href="#Repository方法规范" class="headerlink" title="Repository方法规范"></a>Repository方法规范</h4><ol>
<li><p>需要符合一定规范</p>
</li>
<li><p>查询方法以find | read | get开头</p>
</li>
<li><p>涉及条件查询时，条件的属性用条件关键词连接</p>
</li>
<li><p>条件属性以首字母大写开头</p>
</li>
<li><p>支持属性的级联查询，若当前类有符合条件的属性，则优先使用，而不使用级联属性。</p>
<p>如果需要使用级联属性，则属性之间使用 “_” 进行连接</p>
<p>级联属性例子</p>
<p>User类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cooper.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Table(name = &quot;user&quot;)</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JoinColumn(name = &quot;ADDRESS_ID&quot;)</span></span><br><span class="line">    <span class="meta">@ManyToOne</span></span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Address <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(Address address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Address类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cooper.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Table;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Table(name = &quot;address&quot;)</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String addressName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddressName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> addressName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddressName</span><span class="params">(String addressName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.addressName = addressName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Address&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, addressName=&#x27;&quot;</span> + addressName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="Query注解"><a href="#Query注解" class="headerlink" title="@Query注解"></a>@Query注解</h4><p>使用该注解可以自定义查询,但是需要使用JPQL语句</p>
<p>🌰</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Query(&quot;select p from User p where p.id=1 or 1=1&quot;)</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>也可以使用原生SQL语句查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Query(value = &quot;select * from user&quot;,nativeQuery = true)</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUsersByNative</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>带参数查询  参数使用 ？序号  表示  第一个参数就是?1 第二个参数就是?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Query(&quot;select p from User p where p.id=?1&quot;)</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUsersByID</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure>

<p>模糊查询  （记住查询语句中写了%那么调用时参数就不需要加%，否则需要添加%）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Query(&quot;select p from User p where p.name like %?1%&quot;)</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUsersByName</span><span class="params">(String name)</span></span>;</span><br></pre></td></tr></table></figure>



<h4 id="Modifying"><a href="#Modifying" class="headerlink" title="@Modifying"></a>@Modifying</h4><p>可以通过自定义JPQL完成update和delete操作，但是JPQL不支持insert操作</p>
<p>涉及到update和delete操作必须使用@modifying注解以通知SpringData这是一个update或delete操作</p>
<p>涉及到update和delete操作还必须添加事务，此时需要定义service层，在service层上添加事务</p>
<p>默认情况下Springdata的每个方法上都有事务，但是只有一个只读事务无法完成修改和删除操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Modifying</span></span><br><span class="line"><span class="meta">@Query(&quot;update User p set p.name=:name where p.id =:id&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span>String name,<span class="meta">@Param(&quot;id&quot;)</span>Integer id)</span></span>;</span><br></pre></td></tr></table></figure>

<p>service层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    PersonRepository personRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>  <span class="comment">//一定要添加事务注解</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">        personRepository.updateUser(<span class="string">&quot;xyz&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="CrudRepository"><a href="#CrudRepository" class="headerlink" title="CrudRepository"></a>CrudRepository</h4><p>继承该接口之后可以有以下方法</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200903101944.png" alt="image-20200903101937834" style="zoom:50%;" />

<p>涉及到update、save、还有delete的操作都需要定义到servcie中并使用事务进行修饰</p>
<p>🌰</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    PersonRepository personRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">        personRepository.updateUser(<span class="string">&quot;xyz&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">3</span>);</span><br><span class="line">        user.setAge(<span class="number">10</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;xyz&quot;</span>);</span><br><span class="line">        Address address = <span class="keyword">new</span> Address();</span><br><span class="line">        address.setId(<span class="number">2</span>);</span><br><span class="line">        user.setAddress(address);</span><br><span class="line">        user.setAddressId(<span class="number">1</span>);</span><br><span class="line">        personRepository.save(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>save就是先检查数据库重视会否含有该数据，如果有则并且有不同的地方则更新该数据，否则添加，相当于merge操作</p>
<h4 id="PagingAndSortingRepository"><a href="#PagingAndSortingRepository" class="headerlink" title="PagingAndSortingRepository"></a>PagingAndSortingRepository</h4><p>继承该方法后有以下方法</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200903104242.png" alt="image-20200903102426373" style="zoom:50%;" />

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pageNo = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> pageSize = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//封装 PageRequest 实现类，其中包含需要分页的信息</span></span><br><span class="line">    Sort sort = Sort.by(Sort.Direction.DESC,<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    Pageable pageable = PageRequest.of(pageNo,pageSize,sort);</span><br><span class="line"></span><br><span class="line">    Page&lt;User&gt; page = repository.findAll(pageable);</span><br><span class="line">    </span><br><span class="line">    System.out.println(page.getTotalElements());</span><br><span class="line">    System.out.println(page.getNumber());</span><br><span class="line">    System.out.println(page.getTotalPages());</span><br><span class="line">    System.out.println(page.getContent());</span><br><span class="line">    System.out.println(page.getNumberOfElements());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="JpaRepository"><a href="#JpaRepository" class="headerlink" title="JpaRepository"></a>JpaRepository</h4><p>PagingAndSortingRepository的子接口，在其基础上增加了一些方法</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200903104954.png" alt="image-20200903104711154" style="zoom:50%;" />



<h4 id="JpaSpecificationExecutor"><a href="#JpaSpecificationExecutor" class="headerlink" title="JpaSpecificationExecutor"></a>JpaSpecificationExecutor</h4><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200903111940.png" alt="image-20200903105905362" style="zoom:50%;" />

<p>可以实现<strong>带查询条件</strong>的查询</p>
<p>以带查询条件的分页的为例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pageNo = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> pageSize = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//封装 PageRequest 实现类，其中包含需要分页的信息</span></span><br><span class="line">    Sort sort = Sort.by(Sort.Direction.DESC,<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    Pageable pageable = PageRequest.of(pageNo,pageSize,sort);</span><br><span class="line"></span><br><span class="line">    Specification&lt;User&gt; specification = <span class="keyword">new</span> Specification&lt;User&gt;() &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> root 代表查询的实体类</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> criteriaQuery 从中可以查询到root对象，即告知 JPA criteria查询哪一个实体类，还可以添加c查询条件，还可以结合</span></span><br><span class="line"><span class="comment">         *                      EntityManager对象得到最终查询的typeQuery对象</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> criteriaBuilder 创建criteria对象工厂，可以从中获取的奥predicate对象</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;User&gt; root, CriteriaQuery&lt;?&gt; criteriaQuery, CriteriaBuilder criteriaBuilder)</span> </span>&#123;</span><br><span class="line">            Path path = root.get(<span class="string">&quot;id&quot;</span>);<span class="comment">//获得具体的查询对象的属性，也就是按照对象的哪个属性进行条件判断</span></span><br><span class="line">            Predicate predicate = criteriaBuilder.gt(path,<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> predicate;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Page&lt;User&gt; page = repository.findAll(specification,pageable);</span><br><span class="line"></span><br><span class="line">    System.out.println(page.getTotalElements());</span><br><span class="line">    System.out.println(page.getNumber());</span><br><span class="line">    System.out.println(page.getTotalPages());</span><br><span class="line">    System.out.println(page.getContent());</span><br><span class="line">    System.out.println(page.getNumberOfElements());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="自定义Repository"><a href="#自定义Repository" class="headerlink" title="自定义Repository"></a>自定义Repository</h4><h5 id="为某一个Repository添加自定义的Repository"><a href="#为某一个Repository添加自定义的Repository" class="headerlink" title="为某一个Repository添加自定义的Repository"></a>为某一个Repository添加自定义的Repository</h5><ol>
<li>定义一个接口: 声明要添加的, 并自实现的方法</li>
<li>提供该接口的实现类: 类名需在要声明的 Repository 后添加 Impl, 并实现方法</li>
<li>声明 Repository 接口, 并继承 1) 声明的接口</li>
<li>使用.</li>
<li>注意: 默认情况下, Spring Data 会在 base-package 中查找 “接口名Impl” 作为实现类. 也可以通过　repository-impl-postfix　声明后缀.</li>
</ol>
<p>🌰</p>
<p>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonRepositoryImpl</span> <span class="keyword">implements</span> <span class="title">PersonDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@PersistenceContext</span></span><br><span class="line">    EntityManager manager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        User user = manager.find(User.class, id);</span><br><span class="line">        System.out.println(<span class="string">&quot;method---&gt;&quot;</span>+user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>PersonRepository继承该接口即可调用自定义Repository的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonRepository</span> <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">User</span>,<span class="title">Integer</span>&gt; , <span class="title">PersonDao</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testPersonDao</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    repository.test(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><font color=red><strong>注意点</strong></font>：</p>
<p>​    命名必须符合声明使用的Repository接口名+Impl</p>
<p>​    在本例中也就是PersonRepository+Impl 即 PersonRepositoryImpl，否则会报错</p>
<p>​    自定义的接口名最好也与声明使用的Repository保持一致也就是此处的PersonDao，当然可以写成其他的名称</p>
<p>​    </p>
<h5 id="为所有的-Repository-都添加自实现的方法"><a href="#为所有的-Repository-都添加自实现的方法" class="headerlink" title="为所有的 Repository 都添加自实现的方法"></a>为所有的 Repository 都添加自实现的方法</h5><ul>
<li>步骤：</li>
</ul>
<ol>
<li>声明一个接口, 在该接口中声明需要自定义的方法, 且该接口需要继承 Spring Data 的 Repository.</li>
<li>提供 1) 所声明的接口的实现类. 且继承 SimpleJpaRepository, 并提供方法的实现</li>
<li>定义 JpaRepositoryFactoryBean 的实现类, 使其生成 1) 定义的接口实现类的对象</li>
<li>修改 &lt;jpa:repositories /&gt; 节点的 factory-class 属性指向 3) 的全类名</li>
<li>注意: 全局的扩展实现类不要用 Imp 作为后缀名, 或为全局扩展接口添加 @NoRepositoryBean 注解告知 Spring Data: Spring Data 不把其作为 Repository</li>
</ol>
]]></content>
      <categories>
        <category>SpringData</category>
      </categories>
      <tags>
        <tag>SpringData</tag>
      </tags>
  </entry>
  <entry>
    <title>html页面传递数据</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SpringMVC/Html%E9%A1%B5%E9%9D%A2%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<ol>
<li><strong>如果想从前端传递一个对象到后端，那么name属性必须和对象的属性名称一一对应，</strong></li>
</ol>
<p><strong>这样的话前端会自动将其封装成一个对象传递给后端</strong></p>
<p>​        <strong>即使前端只传递了一个对象的属性，后端如果说要接受对象的话，那么前端也是可以通过该属性将其自动封装成一个对象的</strong>。</p>
<p>​        举例：</p>
<p>​        Person.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Value(&quot;$&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="comment">//@Email()</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//@Value((&quot;$&#123;age&#125;&quot;))</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; map;</span><br><span class="line">    <span class="keyword">private</span> Department department;</span><br></pre></td></tr></table></figure>

<p>​    Department.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br></pre></td></tr></table></figure>

<p>那么我在前端页面中想要通过提交一个表单来添加一个人的对象的话，对于部门这个属性来说，如果是通过select组件来选择部门，那么select的name写成department.id的话，系统会通过该级联属性帮你自动封装成Department对象，其中自动封装后的department对象的id属性就是select选择的value，而name属性则为null。</p>
<ol start="2">
<li><p>Url路径中的信息后端如何获取</p>
<p><code>@PathVariable</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>restful</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SpringMVC/Restful/</url>
    <content><![CDATA[<h3 id="RestFul-风格"><a href="#RestFul-风格" class="headerlink" title="RestFul 风格"></a>RestFul 风格</h3><p><strong>概念</strong></p>
<p>Restful就是一个资源定位及资源操作的风格。不是标准也不是协议，只是一种风格。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p>
<p><strong>功能</strong></p>
<p>资源：互联网所有的事物都可以被抽象为资源</p>
<p>资源操作：使用POST、DELETE、PUT、GET，使用不同方法对资源进行操作。</p>
<p>分别对应 添加、 删除、修改、查询。</p>
<p><strong>传统方式操作资源</strong>  ：通过不同的参数来实现不同的效果！方法单一，post 和 get</p>
<p>​    <a href="http://127.0.0.1/item/queryItem.action?id=1">http://127.0.0.1/item/queryItem.action?id=1</a> 查询,GET</p>
<p>​    <a href="http://127.0.0.1/item/saveItem.action">http://127.0.0.1/item/saveItem.action</a> 新增,POST</p>
<p>​    <a href="http://127.0.0.1/item/updateItem.action">http://127.0.0.1/item/updateItem.action</a> 更新,POST</p>
<p>​    <a href="http://127.0.0.1/item/deleteItem.action?id=1">http://127.0.0.1/item/deleteItem.action?id=1</a> 删除,GET或POST</p>
<p><strong>使用RESTful操作资源</strong> ：可以通过不同的请求方式来实现不同的效果！如下：<font color=red>请求地址</font>一样，但是功能可以不同！</p>
<p>​    <a href="http://127.0.0.1/item/1">http://127.0.0.1/item/1</a> 查询,GET</p>
<p>​    <a href="http://127.0.0.1/item">http://127.0.0.1/item</a> 新增,POST</p>
<p>​    <a href="http://127.0.0.1/item">http://127.0.0.1/item</a> 更新,PUT</p>
<p>​    <a href="http://127.0.0.1/item/1">http://127.0.0.1/item/1</a> 删除,DELETE</p>
<p><strong>总的来说是保证安全</strong></p>
]]></content>
      <categories>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM整合</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SpringMVC/SSM%E6%95%B4%E5%90%88/</url>
    <content><![CDATA[<h4 id="整体结构图"><a href="#整体结构图" class="headerlink" title="整体结构图"></a>整体结构图</h4><p>​    <img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200802220228.png" alt="image-20200802213710048" style="zoom:50%;" /></p>
<ol>
<li><p>编写实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Books</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> bookID;</span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> bookCounts;</span><br><span class="line">    <span class="keyword">private</span> String detail;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>连接Mybatis  <strong><font color=red>（我们没有编写Mapper的实现类，因为在配置文件中直接动态注入到了spring的容器中）</font></strong></p>
<ol>
<li><p>创建数据库的相关配置文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssmbuild?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">12345678</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写Mybatis的核心配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    这个必须要加上去，否则 mapper.xml 中的 parameterType=&quot;Books&quot;会找不到Books在哪里--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.cooper.books.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--    说明Mapper的位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/cooper/books/dao/BookMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写Mapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cooper.books.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cooper.books.pojo.Books;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//增加一个Book</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Books book)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id删除一个Book</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteBookById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新Book</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Books books)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id查询,返回一个Book</span></span><br><span class="line">    <span class="function">Books <span class="title">queryBookById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询全部Book,返回list集合</span></span><br><span class="line">    <span class="function">List&lt;Books&gt; <span class="title">queryAllBook</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>编写Mapper接口同名的xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.cooper.books.dao.BookMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--增加一个Book--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addBook&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">      insert into ssmbuild.books(bookName,bookCounts,detail)</span><br><span class="line">      values (#&#123;bookName&#125;, #&#123;bookCounts&#125;, #&#123;detail&#125;)</span><br><span class="line">   <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--根据id删除一个Book--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteBookById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">      delete from ssmbuild.books where bookID=#&#123;bookID&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--更新Book--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBook&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">      update ssmbuild.books</span><br><span class="line">      set bookName = #&#123;bookName&#125;,bookCounts = #&#123;bookCounts&#125;,detail = #&#123;detail&#125;</span><br><span class="line">      where bookID = #&#123;bookID&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--根据id查询,返回一个Book--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBookById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">      select * from ssmbuild.books</span><br><span class="line">      where bookID = #&#123;bookID&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--查询全部Book--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryAllBook&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">      SELECT * from ssmbuild.books</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写spring-dao.xml，整合spring和mybatis </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置整合mybatis --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.关联数据库文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:database.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2.数据库连接池 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数据库连接池</span></span><br><span class="line"><span class="comment">        dbcp 半自动化操作 不能自动连接</span></span><br><span class="line"><span class="comment">        c3p0 自动化操作（自动的加载配置文件 并且设置到对象里面）</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置连接池属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- c3p0连接池的私有属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 关闭连接后不自动commit --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;autoCommitOnClose&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 获取连接超时时间 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;checkoutTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10000&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 当获取连接失败重试次数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquireRetryAttempts&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.配置SqlSessionFactory对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 这样就可以不需要编写BookMapperImpl--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--解释 ：https://www.cnblogs.com/jpfss/p/7799806.html--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入sqlSessionFactory --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.cooper.books.dao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>编写Service相关文件</p>
<ol>
<li><p>编写Service接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cooper.books.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cooper.books.pojo.Books;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//增加一个Book</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Books book)</span></span>;</span><br><span class="line">    <span class="comment">//根据id删除一个Book</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteBookById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="comment">//更新Book</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Books books)</span></span>;</span><br><span class="line">    <span class="comment">//根据id查询,返回一个Book</span></span><br><span class="line">    <span class="function">Books <span class="title">queryBookById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="comment">//查询全部Book,返回list集合</span></span><br><span class="line">    <span class="function">List&lt;Books&gt; <span class="title">queryAllBook</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>编写接口实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cooper.books.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cooper.books.dao.BookMapper;</span><br><span class="line"><span class="keyword">import</span> com.cooper.books.pojo.Books;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title">BookService</span></span>&#123;</span><br><span class="line">    <span class="comment">//调用dao层的操作，设置一个set接口，方便Spring管理</span></span><br><span class="line">    <span class="keyword">private</span> BookMapper bookMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBookMapper</span><span class="params">(BookMapper bookMapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bookMapper = bookMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Books book)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.addBook(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteBookById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.deleteBookById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Books books)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.updateBook(books);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Books <span class="title">queryBookById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.queryBookById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Books&gt; <span class="title">queryAllBook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.queryAllBook();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>编写spring-service.xml，整合spring和service</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描service相关的bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.cooper.books.service&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--BookServiceImpl注入到IOC容器中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;BookServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cooper.books.service.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookMapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookMapper&quot;</span>/&gt;</span> <span class="comment">&lt;!--此处的引用在spring-dao里面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>整合SpringMVC</p>
<ol>
<li><p>编写spring-mvc.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">   https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置SpringMVC --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.开启SpringMVC注解驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.静态资源默认servlet配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.配置jsp 显示ViewResolver视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;viewClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.springframework.web.servlet.view.JstlView&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4.扫描web相关的bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.cooper.books.controller&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在web.xml中注册DispatcherServlet以及乱码过滤器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--DispatcherServlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--一定要注意:我们这里加载的是总的配置文件，之前被这里坑了！--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--encodingFilter--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span></span><br><span class="line">            org.springframework.web.filter.CharacterEncodingFilter</span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">absolute-ordering</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Session过期时间--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>15<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写Controller类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cooper.books.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cooper.books.pojo.Books;</span><br><span class="line"><span class="keyword">import</span> com.cooper.books.service.BookService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.net.http.HttpResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;BookServiceImpl&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/allBook&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(Model model, HttpServletRequest  request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        List&lt;Books&gt; list = bookService.queryAllBook();</span><br><span class="line">        model.addAttribute(<span class="string">&quot;list&quot;</span>, list);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Books books:list)</span><br><span class="line">            System.out.println(books.getBookName());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;allBook&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>编写applicationContext.xml  整合所有的配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-dao.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-service.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-mvc.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写网页  allBook.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;书籍列表&lt;/title&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;!-- 引入 Bootstrap --&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;row clearfix&quot;</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;col-md-12 column&quot;</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;page-header&quot;</span>&gt;</span><br><span class="line">                &lt;h1&gt;</span><br><span class="line">                    &lt;small&gt;书籍列表 —— 显示所有书籍&lt;/small&gt;</span><br><span class="line">                &lt;/h1&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;col-md-4 column&quot;</span>&gt;</span><br><span class="line">            &lt;a <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;btn btn-primary&quot;</span> href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/toAddBook&quot;</span>&gt;新增&lt;/a&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;row clearfix&quot;</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;col-md-12 column&quot;</span>&gt;</span><br><span class="line">            &lt;table <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;table table-hover table-striped&quot;</span>&gt;</span><br><span class="line">                &lt;thead&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;th&gt;书籍编号&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;书籍名字&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;书籍数量&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;书籍详情&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;/thead&gt;</span><br><span class="line"></span><br><span class="line">                &lt;tbody&gt;</span><br><span class="line">                &lt;c:forEach <span class="keyword">var</span>=<span class="string">&quot;book&quot;</span> items=<span class="string">&quot;$&#123;requestScope.get(&#x27;list&#x27;)&#125;&quot;</span>&gt;</span><br><span class="line">                    &lt;tr&gt;</span><br><span class="line">                        &lt;td&gt;$&#123;book.getBookID()&#125;&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;$&#123;book.getBookName()&#125;&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;$&#123;book.getBookCounts()&#125;&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;$&#123;book.getDetail()&#125;&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;</span><br><span class="line">                            &lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/toUpdateBook?id=$&#123;book.getBookID()&#125;&quot;</span>&gt;更改&lt;/a&gt; |</span><br><span class="line">                            &lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/del/$&#123;book.getBookID()&#125;&quot;</span>&gt;删除&lt;/a&gt;</span><br><span class="line">                        &lt;/td&gt;</span><br><span class="line">                    &lt;/tr&gt;</span><br><span class="line">                &lt;/c:forEach&gt;</span><br><span class="line">                &lt;/tbody&gt;</span><br><span class="line">            &lt;/table&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>编写index.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: xuejin</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">8</span>/<span class="number">2</span></span><br><span class="line">  Time: 上午<span class="number">10</span>:<span class="number">18</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;title&gt;首页&lt;/title&gt;</span><br><span class="line">  &lt;style type=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">    a &#123;</span><br><span class="line">      text-decoration: none;</span><br><span class="line">      color: black;</span><br><span class="line">      font-size: 18px;</span><br><span class="line">    &#125;</span><br><span class="line">    h3 &#123;</span><br><span class="line">      width: 180px;</span><br><span class="line">      height: 38px;</span><br><span class="line">      margin: 100px auto;</span><br><span class="line">      text-align: center;</span><br><span class="line">      line-height: 38px;</span><br><span class="line">      background: deepskyblue;</span><br><span class="line">      border-radius: 4px;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h3&gt;</span><br><span class="line">  &lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/allBook&quot;</span>&gt;点击进入列表页&lt;/a&gt;</span><br><span class="line">&lt;/h3&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC工作原理</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SpringMVC/SpringMVC%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h4 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h4><p>​    每次添加一个Servlet不需要我们再次注册到配置文件中，而是通过<strong>DispatcherServlet</strong>将用户的 请求分发到不同的处理器。</p>
<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>​    当发起请求时被前置的控制器拦截到请求，根据请求参数生成代理请求，找到请求对应的实际控制器，控制器处理请求，创建数据模型，访问数据库，将模型响应给中心控制器，控制器使用模型与视图渲染视图结果，将结果返回给中心控制器，再将结果返回给请求者。</p>
<p>​    <img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200729112547.png" alt="image-20200729112540789" style="zoom:50%;" /></p>
<h4 id="执行原理"><a href="#执行原理" class="headerlink" title="执行原理"></a>执行原理</h4><p>​    <img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200729112621.png" alt="image-20200729112619862"></p>
<p><strong>简要分析执行流程</strong></p>
<p><strong><font color=red>controller是控制器，handler是控制器的处理器方法</font></strong></p>
<ol>
<li><p>DispatcherServlet表示前置控制器，是整个SpringMVC的控制中心。用户发出请求，DispatcherServlet接收请求并拦截请求。</p>
<p>我们假设请求的url为 : <a href="http://localhost:8080/SpringMVC/hello">http://localhost:8080/SpringMVC/hello</a></p>
<p><strong>如上url拆分成三部分：</strong></p>
<p><a href="http://localhost:8080服务器域名">http://localhost:8080服务器域名</a></p>
<p>SpringMVC部署在服务器上的web站点</p>
<p>hello表示控制器</p>
<p>通过分析，如上url表示为：请求位于服务器localhost:8080上的SpringMVC站点的hello控制器。</p>
</li>
<li><p>HandlerMapping为处理器映射。DispatcherServlet调用HandlerMapping,HandlerMapping根据请求url查找Handler。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    处理器映射器  需要根据bean的名字来查找对于的Controller--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过该处理器映射器找到对应的Handler</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Handler--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cooper.controller.HelloController&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>HandlerExecution表示具体的Handler,其主要作用是根据url查找控制器，如上url被查找控制器为：hello。将该控制器返回给DispatcherServlet</p>
</li>
<li><p>HandlerExecution将解析后的信息传递给DispatcherServlet,如解析控制器映射等。</p>
</li>
<li><p>HandlerAdapter表示处理器适配器，其按照特定的规则去执行Handler，就是去找Controller。</p>
</li>
<li><p>Handler让具体的Controller执行。</p>
</li>
<li><p>Controller将具体的执行信息返回给HandlerAdapter,如ModelAndView。</p>
</li>
<li><p>HandlerAdapter将视图逻辑名或模型传递给DispatcherServlet。</p>
</li>
<li><p>DispatcherServlet调用视图解析器(ViewResolver)来解析HandlerAdapter传递的逻辑视图名。</p>
</li>
<li><p>视图解析器将解析的逻辑视图名传给DispatcherServlet。</p>
</li>
<li><p>DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图。</p>
</li>
<li><p>最终视图呈现给用户。</p>
</li>
</ol>
<h4 id="有可能出现了配置正确并且代码没有问题但是却出现404的情况："><a href="#有可能出现了配置正确并且代码没有问题但是却出现404的情况：" class="headerlink" title="有可能出现了配置正确并且代码没有问题但是却出现404的情况："></a>有可能出现了配置正确并且代码没有问题但是却出现404的情况：</h4><p>有可能是因为编译的时候没有将对应的包没有导入</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200729214731.png" alt="image-20200729214640186" style="zoom:50%;" />

<p>需要在WEB-INF下创建lib包将对应的包导入到其中</p>
]]></content>
      <categories>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>乱码问题</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SpringMVC/%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h5 id="解决办法1"><a href="#解决办法1" class="headerlink" title="解决办法1"></a>解决办法1</h5><p>​    在web.xml文件中添加如下代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--这里一定是/*因为是对页面进行过滤，如果是/的话就不会生效--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="解决办法2"><a href="#解决办法2" class="headerlink" title="解决办法2"></a>解决办法2</h5><p>​    自定义如下过滤器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 解决get和post请求 全部乱码的过滤器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericEncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">       <span class="comment">//处理response的字符编码</span></span><br><span class="line">       HttpServletResponse myResponse=(HttpServletResponse) response;</span><br><span class="line">       myResponse.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 转型为与协议相关对象</span></span><br><span class="line">       HttpServletRequest httpServletRequest = (HttpServletRequest) request;</span><br><span class="line">       <span class="comment">// 对request包装增强</span></span><br><span class="line">       HttpServletRequest myrequest = <span class="keyword">new</span> MyRequest(httpServletRequest);</span><br><span class="line">       chain.doFilter(myrequest, response);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义request对象，HttpServletRequest的包装类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRequest</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line">   <span class="comment">//是否编码的标记</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">boolean</span> hasEncode;</span><br><span class="line">   <span class="comment">//定义一个可以传入HttpServletRequest对象的构造函数，以便对其进行装饰</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">MyRequest</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>(request);<span class="comment">// super必须写</span></span><br><span class="line">       <span class="keyword">this</span>.request = request;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 对需要增强方法 进行覆盖</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Map <span class="title">getParameterMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 先获得请求方式</span></span><br><span class="line">       String method = request.getMethod();</span><br><span class="line">       <span class="keyword">if</span> (method.equalsIgnoreCase(<span class="string">&quot;post&quot;</span>)) &#123;</span><br><span class="line">           <span class="comment">// post请求</span></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="comment">// 处理post乱码</span></span><br><span class="line">               request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">               <span class="keyword">return</span> request.getParameterMap();</span><br><span class="line">          &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equalsIgnoreCase(<span class="string">&quot;get&quot;</span>)) &#123;</span><br><span class="line">           <span class="comment">// get请求</span></span><br><span class="line">           Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">           <span class="keyword">if</span> (!hasEncode) &#123; <span class="comment">// 确保get手动编码逻辑只运行一次</span></span><br><span class="line">               <span class="keyword">for</span> (String parameterName : parameterMap.keySet()) &#123;</span><br><span class="line">                   String[] values = parameterMap.get(parameterName);</span><br><span class="line">                   <span class="keyword">if</span> (values != <span class="keyword">null</span>) &#123;</span><br><span class="line">                       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">                           <span class="keyword">try</span> &#123;</span><br><span class="line">                               <span class="comment">// 处理get乱码</span></span><br><span class="line">                               values[i] = <span class="keyword">new</span> String(values[i]</span><br><span class="line">                                      .getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                          &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">                               e.printStackTrace();</span><br><span class="line">                          &#125;</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">               hasEncode = <span class="keyword">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">           <span class="keyword">return</span> parameterMap;</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">super</span>.getParameterMap();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//取一个值</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getParameter</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">       Map&lt;String, String[]&gt; parameterMap = getParameterMap();</span><br><span class="line">       String[] values = parameterMap.get(name);</span><br><span class="line">       <span class="keyword">if</span> (values == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="keyword">return</span> values[<span class="number">0</span>]; <span class="comment">// 取回参数的第一个值</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//取所有值</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String[] getParameterValues(String name) &#123;</span><br><span class="line">       Map&lt;String, String[]&gt; parameterMap = getParameterMap();</span><br><span class="line">       String[] values = parameterMap.get(name);</span><br><span class="line">       <span class="keyword">return</span> values;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    然后在web.xml中注册该过滤器</p>
<p>特殊情况</p>
<p>有可能是tomcat中的编码有问题，需要检查是否为uft-8</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">URIEncoding</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring面试题</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Spring%E9%9D%A2%E8%AF%95%E9%A2%98/Spring%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<ol>
<li><p>Spring Framework中有哪些重要模块</p>
<ul>
<li>spring-core：Spring基础的API模块，比如资源管理、泛型处理</li>
<li>spring-beans：Spring Bean相关，比如依赖查找，依赖注入</li>
<li>spring-aop：Spring AOP处理</li>
<li>spring-context：事件驱动、注解驱动、模块驱动</li>
<li>spring-expression：Spring表达式语言模块</li>
</ul>
</li>
<li><p>什么是IoC</p>
<p>IoC是反转控制（<strong>属于推的模式，而不是拉的模式</strong>），类似于好莱坞原则，主要有依赖查找和依赖注入两种实现方式</p>
</li>
<li><p>依赖注入中的构造器注入和setter注入有哪些好处与坏处</p>
<ul>
<li><p>构造器注入</p>
<ul>
<li>好处<ol>
<li>Spring团队推荐构造器注入，因为一般我们的类中的属性都会声明成final类型，那么使用构造器注入的话可以保证对象的不变性并且可以保证依赖的对象不为null，<font color=red>setter注入最好用在可选依赖的注入上</font></li>
<li>可以保证对象注入的顺序</li>
</ol>
</li>
<li>坏处<ol>
<li>如果构造器对象太多的话，最好将其拆解开来，避免单一类的职责过多</li>
</ol>
</li>
</ul>
</li>
<li><p>setter注入</p>
<ul>
<li><p>好处</p>
<ol>
<li>可以很好的覆盖掉默认值</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
<li><p>依赖查找和依赖注入区别</p>
<ul>
<li>依赖查找是主动或者手动的依赖查找方式，通常需要依赖容器或者标准API的实现</li>
<li>依赖注入则是手动或者自动依赖绑定的方式，无需依赖特定的容器和API</li>
</ul>
</li>
<li><p>Spring作为IoC容器的优势</p>
<ol>
<li>典型的IoC管理，依赖查找和依赖注入</li>
<li>AOP抽象</li>
<li>事务抽象</li>
<li>事件机制</li>
<li>SPI扩展</li>
<li>强大的第三方整合</li>
<li>易测试性</li>
<li>更好的面向对象</li>
</ol>
</li>
</ol>
<h3 id="Spring-Bean"><a href="#Spring-Bean" class="headerlink" title="Spring Bean"></a>Spring Bean</h3><ol>
<li><p>如何注册一个Spring Bean</p>
<p>通过BeanDefinition和外部单体对象进行注册</p>
<p>后者如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonBeanRegistrationDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext();</span><br><span class="line">        UserFactory factory = <span class="keyword">new</span> DefaultUserFactory();</span><br><span class="line">        ConfigurableListableBeanFactory beanFactory = context.getBeanFactory();</span><br><span class="line">        beanFactory.registerSingleton(<span class="string">&quot;userFactory&quot;</span>,factory);</span><br><span class="line"></span><br><span class="line">        context.refresh();</span><br><span class="line"></span><br><span class="line">        DefaultUserFactory factoryLookup = context.getBean(DefaultUserFactory.class);</span><br><span class="line">        System.out.println(factory==factoryLookup);</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ol start="2">
<li><p>什么是Spring BeanDefinition</p>
<p>定义Bean元信息的接口，该接口允许我们存储Bean的各种信息，包括初始化方法、销毁方法、作用域等等</p>
<p>基本上XML配置Bean的所有字段和该接口中的资源是一一对应的</p>
</li>
</ol>
<ol start="3">
<li>Spring容器是怎样管理注册Bean</li>
</ol>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>JWT</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/mall%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JWT/</url>
    <content><![CDATA[<h4 id="JWT可以避免csrf攻击"><a href="#JWT可以避免csrf攻击" class="headerlink" title="JWT可以避免csrf攻击"></a>JWT可以避免csrf攻击</h4><h5 id="csrf攻击原理"><a href="#csrf攻击原理" class="headerlink" title="csrf攻击原理"></a>csrf攻击原理</h5><img src="/Users/cooper/Library/Application Support/typora-user-images/image-20200925094805513.png" alt="image-20200925094805513" style="zoom:50%;" />

<h5 id="jwt避免crsf攻击原理"><a href="#jwt避免crsf攻击原理" class="headerlink" title="jwt避免crsf攻击原理"></a>jwt避免crsf攻击原理</h5><p>前端使用JS将<em>JWT</em>放在header中手动发送给服务端,服务端验证header中的<em>JWT</em>字段,而非cookie信息,这样就避免了<em>CSRF</em>漏洞攻击</p>
]]></content>
      <categories>
        <category>Mall项目学习笔记</category>
      </categories>
      <tags>
        <tag>Mall项目学习笔记</tag>
        <tag>JWT</tag>
      </tags>
  </entry>
  <entry>
    <title>MybatisGenerator</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/mall%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/MybatisGenerator/</url>
    <content><![CDATA[<h4 id="Mybatis-Generator的作用"><a href="#Mybatis-Generator的作用" class="headerlink" title="Mybatis Generator的作用"></a>Mybatis Generator的作用</h4><p>自动生成dao层，mapper以及对应的xml文件</p>
<h4 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4><ol>
<li><p>添加maven</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- MyBatis 生成器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写GeneratorConfig配置文件（其中可以使用外部的properties文件进行配置，比如数据源的配置）</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;generator.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;MySqlContext&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span> <span class="attr">defaultModelType</span>=<span class="string">&quot;flat&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;beginningDelimiter&quot;</span> <span class="attr">value</span>=<span class="string">&quot;`&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;endingDelimiter&quot;</span> <span class="attr">value</span>=<span class="string">&quot;`&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;javaFileEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 为模型生成序列化方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.generator.plugins.SerializablePlugin&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 为生成的Java模型创建一个toString方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.generator.plugins.ToStringPlugin&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--可以自定义生成model的代码注释--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span> <span class="attr">type</span>=<span class="string">&quot;com.cooper.mbg.CommentGenerator&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressDate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;addRemarkComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置数据库连接--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;$&#123;jdbc.driverClass&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;$&#123;jdbc.connectionURL&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;$&#123;jdbc.userId&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--解决mysql驱动升级到8.0后不生成指定数据库代码的问题--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;nullCatalogMeansCurrent&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定生成model的路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.cooper.mbg.model&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;./src/main/java&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定生成mapper.xml的路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.cooper.mall.tiny.mbg.mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;./src/main/resources&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定生成mapper接口的的路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.cooper.mbg.mapper&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetProject</span>=<span class="string">&quot;./src/main/java&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--生成全部表tableName设为%--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;pms_brand&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generatedKey</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">sqlStatement</span>=<span class="string">&quot;MySql&quot;</span> <span class="attr">identity</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>需要注意的是在指定生成的接口的地址</p>
<pre><code>- mac   需要是 ’/‘ 而不是 ’\‘ 
- win    ’\‘
</code></pre>
<ol start="3">
<li>编写生成类（固定的写法）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Generator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//MBG 执行过程中的警告信息</span></span><br><span class="line">        List&lt;String&gt; warnings = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="comment">//当生成的代码重复时，覆盖原代码</span></span><br><span class="line">        <span class="keyword">boolean</span> overwrite = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//读取我们的 MBG 配置文件</span></span><br><span class="line">        InputStream is = Generator.class.getResourceAsStream(<span class="string">&quot;/generatorConfig.xml&quot;</span>);</span><br><span class="line">        ConfigurationParser cp = <span class="keyword">new</span> ConfigurationParser(warnings);</span><br><span class="line">        Configuration config = cp.parseConfiguration(is);</span><br><span class="line">        is.close();</span><br><span class="line"></span><br><span class="line">        DefaultShellCallback callback = <span class="keyword">new</span> DefaultShellCallback(overwrite);</span><br><span class="line">        <span class="comment">//创建 MBG</span></span><br><span class="line">        MyBatisGenerator myBatisGenerator = <span class="keyword">new</span> MyBatisGenerator(config, callback, warnings);</span><br><span class="line">        <span class="comment">//执行生成代码</span></span><br><span class="line">        myBatisGenerator.generate(<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//输出警告信息</span></span><br><span class="line">        <span class="keyword">for</span> (String warning : warnings) &#123;</span><br><span class="line">            System.out.println(warning);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<pre><code>1. 如果需要自定义自动生成类的实体类的注释则可以重新DefaultCommentGenerator的方法

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义注释生成器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommentGenerator</span> <span class="keyword">extends</span> <span class="title">DefaultCommentGenerator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> addRemarkComments = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXAMPLE_SUFFIX=<span class="string">&quot;Example&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String API_MODEL_PROPERTY_FULL_CLASS_NAME=<span class="string">&quot;io.swagger.annotations.ApiModelProperty&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置用户配置的参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addConfigurationProperties</span><span class="params">(Properties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.addConfigurationProperties(properties);</span><br><span class="line">        <span class="keyword">this</span>.addRemarkComments = StringUtility.isTrue(properties.getProperty(<span class="string">&quot;addRemarkComments&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给字段添加注释</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFieldComment</span><span class="params">(Field field, IntrospectedTable introspectedTable,</span></span></span><br><span class="line"><span class="params"><span class="function">                                IntrospectedColumn introspectedColumn)</span> </span>&#123;</span><br><span class="line">        String remarks = introspectedColumn.getRemarks();</span><br><span class="line">        <span class="comment">//根据参数和备注信息判断是否添加备注信息</span></span><br><span class="line">        <span class="keyword">if</span>(addRemarkComments&amp;&amp;StringUtility.stringHasValue(remarks))&#123;</span><br><span class="line"><span class="comment">//            addFieldJavaDoc(field, remarks);</span></span><br><span class="line">            <span class="comment">//数据库中特殊字符需要转义</span></span><br><span class="line">            <span class="keyword">if</span>(remarks.contains(<span class="string">&quot;\&quot;&quot;</span>))&#123;</span><br><span class="line">                remarks = remarks.replace(<span class="string">&quot;\&quot;&quot;</span>,<span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//给model的字段添加swagger注解</span></span><br><span class="line">            field.addJavaDocLine(<span class="string">&quot;@ApiModelProperty(value = \&quot;&quot;</span>+remarks+<span class="string">&quot;\&quot;)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给model的字段添加注释</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addFieldJavaDoc</span><span class="params">(Field field, String remarks)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//文档注释开始</span></span><br><span class="line">        field.addJavaDocLine(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">        <span class="comment">//获取数据库字段的备注信息</span></span><br><span class="line">        String[] remarkLines = remarks.split(System.getProperty(<span class="string">&quot;line.separator&quot;</span>));</span><br><span class="line">        <span class="keyword">for</span>(String remarkLine:remarkLines)&#123;</span><br><span class="line">            field.addJavaDocLine(<span class="string">&quot; * &quot;</span>+remarkLine);</span><br><span class="line">        &#125;</span><br><span class="line">        addJavadocTag(field, <span class="keyword">false</span>);</span><br><span class="line">        field.addJavaDocLine(<span class="string">&quot; */&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addJavaFileComment</span><span class="params">(CompilationUnit compilationUnit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.addJavaFileComment(compilationUnit);</span><br><span class="line">        <span class="comment">//只在model中添加swagger注解类的导入</span></span><br><span class="line">     <span class="keyword">if</span>(!compilationUnit.isJavaInterface()&amp;&amp;!compilationUnit.getType().getFullyQualifiedName().contains(EXAMPLE_SUFFIX))&#123;</span><br><span class="line">            compilationUnit.addImportedType(<span class="keyword">new</span> FullyQualifiedJavaType(API_MODEL_PROPERTY_FULL_CLASS_NAME));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</code></pre>
<h4 id="生成的-Example类的作用"><a href="#生成的-Example类的作用" class="headerlink" title="生成的***Example类的作用"></a>生成的***Example类的作用</h4><p>作用：mybatis-generator会为每个字段产生Criterion，为底层的mapper.xml创建动态sql。如果表的字段比较多,产生的example类会十分庞大。理论上通过example类可以构造你想到的任何筛选条件。</p>
<p>Example类的成员:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//升序还是降序:字段+空格+asc(desc)</span></span><br><span class="line"><span class="keyword">protected</span> String orderByClause;</span><br><span class="line"><span class="comment">//去除重复:true是选择不重复记录,false,反之</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">boolean</span> distinct;</span><br><span class="line"><span class="comment">//自定义查询条件</span></span><br><span class="line"><span class="keyword">protected</span> List&lt;Criteria&gt; oredCriteria;</span><br></pre></td></tr></table></figure>

<p><em>需求</em>:根据用户名查询查询user<br><em>sql</em>:select id, username, birthday, sex, address from user WHERE ( username = ‘张三’ ) order by username asc</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindUserByName</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过criteria构造查询条件</span></span><br><span class="line">        UserExample userExample = <span class="keyword">new</span> UserExample();</span><br><span class="line">        userExample.setOrderByClause(<span class="string">&quot;username asc&quot;</span>); <span class="comment">//asc升序,desc降序排列</span></span><br><span class="line">        userExample.setDistinct(<span class="keyword">false</span>); <span class="comment">//去除重复,true是选择不重复记录,false反之</span></span><br><span class="line">        UserExample.Criteria criteria = userExample.createCriteria(); <span class="comment">//构造自定义查询条件</span></span><br><span class="line">        criteria.andUsernameEqualTo(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自定义查询条件可能返回多条记录,使用List接收</span></span><br><span class="line">        List&lt;User&gt; users = userMapper.selectByExample(userExample);</span><br><span class="line"></span><br><span class="line">        System.out.println(users);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Mall项目学习笔记</category>
      </categories>
      <tags>
        <tag>Mybatis-plus</tag>
        <tag>Mall项目学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/mall%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Redis/</url>
    <content><![CDATA[<p>使用步骤</p>
<ol>
<li><p>下载Redis并启动服务</p>
</li>
<li><p>导入相应maevn</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--redis依赖配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>修改SpringBoot配置文件配置Redis</li>
</ol>
<p>在spring节点下进行配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">redis:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">localhost</span> <span class="comment"># Redis服务器地址</span></span><br><span class="line">  <span class="attr">database:</span> <span class="number">0</span> <span class="comment"># Redis数据库索引（默认为0）</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">6379</span> <span class="comment"># Redis服务器连接端口</span></span><br><span class="line">  <span class="attr">password:</span> <span class="comment"># Redis服务器连接密码（默认为空）</span></span><br><span class="line">  <span class="attr">jedis:</span></span><br><span class="line">    <span class="attr">pool:</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">8</span> <span class="comment"># 连接池最大连接数（使用负值表示没有限制）</span></span><br><span class="line">      <span class="attr">max-wait:</span> <span class="string">-1ms</span> <span class="comment"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span></span><br><span class="line">      <span class="attr">max-idle:</span> <span class="number">8</span> <span class="comment"># 连接池中的最大空闲连接</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">0</span> <span class="comment"># 连接池中的最小空闲连接</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="string">3000ms</span> <span class="comment"># 连接超时时间（毫秒）</span></span><br></pre></td></tr></table></figure>

<p>也可以自定义一些key的配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自定义redis key</span></span><br><span class="line"><span class="attr">redis:</span></span><br><span class="line">  <span class="attr">key:</span></span><br><span class="line">    <span class="attr">prefix:</span></span><br><span class="line">      <span class="attr">authCode:</span> <span class="string">&quot;portal:authCode:&quot;</span></span><br><span class="line">    <span class="attr">expire:</span></span><br><span class="line">      <span class="attr">authCode:</span> <span class="number">120</span> <span class="comment"># 验证码超期时间</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>定义操作Redis的接口以及对应的实现类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RedisService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存储数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(String key, String value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">get</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置超期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">expire</span><span class="params">(String key, <span class="keyword">long</span> expire)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自增操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 自增步长</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">increment</span><span class="params">(String key, <span class="keyword">long</span> delta)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisServiceImpl</span> <span class="keyword">implements</span> <span class="title">RedisService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">        stringRedisTemplate.opsForValue().set(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">expire</span><span class="params">(String key, <span class="keyword">long</span> expire)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stringRedisTemplate.expire(key, expire, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        stringRedisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">increment</span><span class="params">(String key, <span class="keyword">long</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stringRedisTemplate.opsForValue().increment(key,delta);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Mall项目学习笔记</category>
      </categories>
      <tags>
        <tag>redis</tag>
        <tag>Mall项目学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringSecurity请求调用流程</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/mall%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SpringSecurity%E8%AF%B7%E6%B1%82%E8%B0%83%E7%94%A8%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<p>测试环境</p>
<p>Swagger2 2.7.0 springboot 2.3.x</p>
<p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JwtAuthenticationTokenFilter extends OncePerRequestFilter</span><br></pre></td></tr></table></figure>

<p>该类继承OncePerRequestFilter，表明不管是什么请求都会被该Filter过滤一次，注意是不管什么请求都会被过滤一次！！</p>
<ol>
<li><p>经过JwtAuthenticationTokenFilter类</p>
</li>
<li><p>进入到<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201110202833.png" alt="image-20201110202831683"></p>
</li>
<li><p>doFilter 方法就是 Spring Security 中过滤器挨个执行的过程，如果 <code>currentPosition == size</code>，表示过滤器链已经执行完毕，此时通过调用 originalChain.doFilter 进入到原生过滤链方法中，同时也退出了 Spring Security 过滤器链。否则就从 additionalFilters 取出 Spring Security 过滤器链中的一个个过滤器，挨个调用 doFilter 方法</p>
<p>![image-20201110204414460](/Users/cooper/Library/Application Support/typora-user-images/image-20201110204414460.png)</p>
</li>
<li><p>到<code>currentPosition == size</code>时会跳转到</p>
<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20201110223532345.png" alt="image-20201110223532345" style="zoom:50%;" />

<p>通过递归的方法调用剩下的filters</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201110225158.png" alt="image-20201110225152059" style="zoom:50%;" /></li>
<li><p>当所有的filters都过滤完之后会调用该方法，也就是需要调用servlet</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201110225343.png" alt="image-20201110225336821" style="zoom:50%;" />

<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201110225609.png" alt="image-20201110225607098"></p>
</li>
</ol>
<ol start="6">
<li><p>调用dispatch分配url请求</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201110225825.png" alt="image-20201110225823170"></p>
</li>
<li><p>获取handler调用对应的Interceptor</p>
<p>获取handler</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201110225925.png" alt="Hello"></p>
<p>调用对应的Interceptor</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201110230240.png" alt="image-20201110230238535"></p>
</li>
</ol>
<p>从中我们看到大致的流程：</p>
<p>请求发生-&gt;过滤器1（按照一定的顺序进行过滤并且不同的请求类型过滤的过程也不一样，一般都是11个过滤器）-&gt;过滤器2（当过滤器1都过滤完之后会有过滤器2，一般就是originalChain.doFilter ，请求进入到原生过滤链方法中）-&gt;经过dispatcher转发请求-&gt;请求对应的handler-&gt;请求对应的Interceptor</p>
]]></content>
      <categories>
        <category>Mall项目学习笔记</category>
      </categories>
      <tags>
        <tag>springsecurity</tag>
        <tag>Mall项目学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>springsecurity</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/mall%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/springsecurity/</url>
    <content><![CDATA[<ol>
<li><p>动态加盐</p>
<p>密码每次都是被动态加盐记录到数据库中的，也就是说不可能出现一个密码被加密之后是相同的情况。</p>
<p>springsecurity会每次自动记录下加盐的位置，以便解密。</p>
</li>
<li><p>对用户的账号判断是否失效、密码是否失效、用户账号是否被锁</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201114195312.png" alt="image-20201114195304582"></p>
</li>
<li><p>如果开启了csrf保护</p>
<p>那么需要注意一下在logout和login页面都需要使用post方式，get方式不得行</p>
</li>
<li><p>在使用remember-me之后会自动生成一个token，但是该token默认是存储在cookie中的，很容易被盗取，因此需要将其持久化。</p>
</li>
<li><p>关于角色写法问题</p>
<p>![image-20201116155655992](/Users/cooper/Library/Application Support/typora-user-images/image-20201116155655992.png)</p>
<p>ROLE_XXX 其中的XXX部分必须要<font color=red>大写</font></p>
</li>
<li><p>token持久化时候所用的表只有这么多的字段，多一个少一个都不行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;persistent_logins&quot;)</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersistentLogin</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String series;</span><br><span class="line">    <span class="keyword">private</span> String token;</span><br><span class="line">    <span class="keyword">private</span> Date last_used;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>springmvc中的子容器和父容器</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201116192926.png" alt="image-20201116192925008"></p>
<p>注解一定要放到对应的容器中去。子容器的注解支持只能在子容器中生效无法在父容器中生效。父容器的注解支持也仅仅能够在父容器中生效，在子容器中无法生效。</p>
</li>
</ol>
<ol start="8">
<li><p>springsecurity中使用@ControllerAdviced的注意事项   <a href="https://blog.csdn.net/qq_39986681/article/details/107760997">参考</a></p>
<p><font color=red>RestControllerAdvice是处理全局异常的！！！！</font></p>
<p><font color=red>过滤器中产生的异常不是全局异常都是无法接收到的！！！</font></p>
<p>在使用该注解的时候需要考虑到springsecurity中的ExceptionTranslationFilter对exception作出了处理</p>
<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20201117100911575.png" alt="image-20201117100911575" style="zoom:50%;" />

<p>因此我们无法在@ControllerAdviced注解的类中得到异常，因为在filter中已经被拦截了。</p>
<p>我们追踪源码可以看到异常已经被处理了，以AccessDeniledException为例</p>
<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20201117102445529.png" alt="image-20201117102445529" style="zoom:50%;" /></li>
</ol>
<p>​        如果想要解决该问题必须将异常从Filter中抛到ControllerAdvcied层</p>
<p>​        新建一个ErrorControllerImpl 实现ErrorController 把ErrorPath 指向<code>error</code> 再写一个方法把Error抛出 然后Controller全局统一异常处理RestControllerAdvice就能捕获到异常了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorControllerImpl</span> <span class="keyword">implements</span> <span class="title">ErrorController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getErrorPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/error&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleError</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(response.getStatus()==<span class="number">403</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AccessDeniedException(<span class="string">&quot;权限不足。。。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(response.getStatus()==<span class="number">404</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NotFoundException(<span class="string">&quot;未找到该页面。。。。&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;服务器出错&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样之后就可以得到处理对应的异常。</p>
<p><strong>原因</strong>：</p>
<p>springmvc提供全局异常处理器（一个系统只有一个异常处理器）进行统一异常处理，@ControllerAdvice只能捕获全局异常</p>
<p>全局异常一般由系统的dao、service、controller产生，通过throws Exception向上抛出，最后由springmvc前端控制器交由异常处理器进行异常处理，但是springsecurity产生的并异常并非是全局异常自然无法进行处理，这些都是过滤器里面产生的异常，自然无法进行捕获。</p>
<p>实际上当springboot项目出现异常时，默认会跳转到/error，而/error则是由BasicErrorController进行处理</p>
<p>当我们编写了其实现类之后就会默认转发异常到Controller层，这样返回给前端控制器的时候就会抛出一个全局异常，ControllerAdviced就会获取到该异常。</p>
]]></content>
      <categories>
        <category>Mall项目学习笔记</category>
      </categories>
      <tags>
        <tag>springsecurity</tag>
        <tag>Mall项目学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>swaggerUI</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/mall%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/swaggerUI/</url>
    <content><![CDATA[<p>使用步骤：</p>
<p>​    1. 导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.swagger<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Swagger-UI API文档生产工具--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>常用注解解析</p>
<ul>
<li>@Api：用于修饰Controller类，生成Controller相关文档信息</li>
<li>@ApiOperation：用于修饰Controller类中的方法，生成接口方法相关文档信息</li>
<li>@ApiParam：用于修饰接口中的参数，生成接口参数相关文档信息</li>
<li>@ApiModelProperty：用于修饰实体类的属性，当实体类是请求参数或返回结果时，直接生成相关文档信息</li>
</ul>
</li>
<li><p>swagger-UI文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Swagger2API文档的配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2Config</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//为当前包下controller生成API文档</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.cooper.controller&quot;</span>))</span><br><span class="line">                <span class="comment">//为有@Api注解的Controller生成API文档</span></span><br><span class="line"><span class="comment">//                .apis(RequestHandlerSelectors.withClassAnnotation(Api.class))</span></span><br><span class="line">                <span class="comment">//为有@ApiOperation注解的方法生成API文档</span></span><br><span class="line"><span class="comment">//                .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))</span></span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">&quot;SwaggerUI演示&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;mall-tiny&quot;</span>)</span><br><span class="line">                .contact(<span class="string">&quot;macro&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在需要描述的方法名上添加swagger注释@ApiOperation（“xxxxx”）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;获取所有品牌列表&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;listAll&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> CommonResult&lt;List&lt;PmsBrand&gt;&gt; getBrandList() &#123;</span><br><span class="line">    <span class="keyword">return</span> CommonResult.success(brandService.listAllBrand());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>描述的参数方法名添加swagger注释@ApiParam</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;分页查询品牌列表&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/list&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> CommonResult&lt;CommonPage&lt;PmsBrand&gt;&gt; listBrand(<span class="meta">@RequestParam(value = &quot;pageNum&quot;, defaultValue = &quot;1&quot;)</span></span><br><span class="line">                                                    <span class="meta">@ApiParam(&quot;页码&quot;)</span> Integer pageNum,</span><br><span class="line">                                                    <span class="meta">@RequestParam(value = &quot;pageSize&quot;, defaultValue = &quot;3&quot;)</span></span><br><span class="line">                                                    <span class="meta">@ApiParam(&quot;每页数量&quot;)</span> Integer pageSize) &#123;</span><br><span class="line">    List&lt;PmsBrand&gt; brandList = brandService.listBrand(pageNum, pageSize);</span><br><span class="line">    <span class="keyword">return</span> CommonResult.success(CommonPage.restPage(brandList));</span><br></pre></td></tr></table></figure></li>
<li><p>给实体类添加swagger注释</p>
<p>在实体类的字段上添加@ApiModelProperty(value = “xxxx”)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiModelProperty(value = &quot;产品数量&quot;)</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Mall项目学习笔记</category>
      </categories>
      <tags>
        <tag>Mall项目学习笔记</tag>
        <tag>swagger</tag>
      </tags>
  </entry>
  <entry>
    <title>swaggerUI踩坑记</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/mall%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/swaggerUI%E8%B8%A9%E5%9D%91%E8%AE%B0/</url>
    <content><![CDATA[<p>Swagger2 2.7.x踩坑（与Swagger2 2.9.0比较）</p>
<p>一开始使用的是</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在此版本中有一次的几个Bug</p>
<ol>
<li><p>每次填写一个ApiKey都会发送请求</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20201110170619.png" alt="image-20201110170613111"></p>
</li>
</ol>
<p>但是在2.9.0中被解决</p>
<ol start="2">
<li><p>所有的ApiKey在任何路径中都被添加了，但是有些没有被主动添加的ApiKey在需要被认证的路径中没有被添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;SecurityReference&gt; <span class="title">defaultAuth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;SecurityReference&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        AuthorizationScope authorizationScope = <span class="keyword">new</span> AuthorizationScope(<span class="string">&quot;global&quot;</span>, <span class="string">&quot;accessEverything&quot;</span>);</span><br><span class="line">        AuthorizationScope[] authorizationScopes = <span class="keyword">new</span> AuthorizationScope[<span class="number">1</span>];</span><br><span class="line">        authorizationScopes[<span class="number">0</span>] = authorizationScope;</span><br><span class="line">        <span class="comment">//将ApiKey添加到每次需要进行认真的请求中  但是在swagger2.7.0 中除了需要认证的路径其他的任何路径都可以使用该APIKey</span></span><br><span class="line">        result.add(<span class="keyword">new</span> SecurityReference(<span class="string">&quot;Authorization&quot;</span>, authorizationScopes));</span><br><span class="line">        result.add(<span class="keyword">new</span> SecurityReference(<span class="string">&quot;sessionId&quot;</span>,authorizationScopes));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Mall项目学习笔记</category>
      </categories>
      <tags>
        <tag>Mall项目学习笔记</tag>
        <tag>swagger</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2022/01/07/%E5%BE%AE%E6%9C%8D%E5%8A%A1/SpringCloud%20Gateway/API%E7%BD%91%E5%85%B3/</url>
    <content><![CDATA[<h3 id="API网关"><a href="#API网关" class="headerlink" title="API网关"></a>API网关</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul>
<li>微服务架构统一的入口</li>
<li>是一个服务器，是系统对外的唯一入口</li>
</ul>
<h4 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h4><ul>
<li>易于监控，可以在微服务网关收集监控数据并将其推送到外部系统进行分析</li>
<li>易于认证，可以在微服务网关上进行认证，然后再将请求转发到后端的微服务，从而无需在每个微服务中进行认证</li>
<li>减少客户端宇各个微服务之间的交互次数</li>
</ul>
<h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210724150756.png" alt="image-20210724150750864" style="zoom:50%;" />

]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/01/07/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/basic/bias%E5%92%8Cvariance/</url>
    <content><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><h4 id="Bais"><a href="#Bais" class="headerlink" title="Bais"></a>Bais</h4><p>bais指的是每次距离目标值都比较远</p>
<img src="D:\坚果云\我的坚果云\Typora\机器学习\pic\image-20210606102313695-1622946206588.png" alt="image-20210606102313695" style="zoom:50%;" />

<h4 id="Variance"><a href="#Variance" class="headerlink" title="Variance"></a>Variance</h4><p>variance指的是值都非常分散</p>
<img src="D:\坚果云\我的坚果云\Typora\机器学习\pic\image-20210606103105236-1622946668385.png" alt="image-20210606103105236" style="zoom:50%;" />



<h3 id="Bais-VS-variance"><a href="#Bais-VS-variance" class="headerlink" title="Bais VS variance"></a>Bais VS variance</h3><ul>
<li><p>比较简单的model</p>
<p>一般来说bais比较大，variance比较小(variance比较小是因为简单的model受到不同的data的影响比较小)</p>
</li>
<li><p>比较复杂的model</p>
<p>一般来说variance比较大，bais比较小</p>
</li>
</ul>
<p>比较简单的model得到的function space比较小，有可能就不包含target，但是比较复杂的model的function space比较大，就可能包含target</p>
<h3 id="不同场景对应解决方法"><a href="#不同场景对应解决方法" class="headerlink" title="不同场景对应解决方法"></a>不同场景对应解决方法</h3><ul>
<li><p>Bais比较大</p>
<p>重新设计模型（考虑更多的feature、模型变得复杂一些）</p>
</li>
<li><p>variance比较大</p>
<ul>
<li>增加data</li>
<li>正则化  （有可能会伤害bais），这么做的目的是为了让曲线更加平滑</li>
</ul>
</li>
<li><p>注意</p>
<p>当几个模型跑出来的结果err不一样，不一定err最小的那个model就是最好的model</p>
<p>比较好的方法是将training set分为两部分：training set和validation set，使用N-fold Cross Validation</p>
<p>这样训练了之后选择一个最好的model，然后用全部的training set去训练选择的model</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210611113452.png" alt="image-20210611113450144"></p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>classification</title>
    <url>/2022/01/07/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/basic/classification/</url>
    <content><![CDATA[<h3 id="Generative"><a href="#Generative" class="headerlink" title="Generative"></a>Generative</h3><p>这种使用的高斯分布的原理</p>
<h3 id="Discriminative"><a href="#Discriminative" class="headerlink" title="Discriminative"></a>Discriminative</h3><p>这种使用的是logistic regression</p>
<p>logistic regression和linear regression的区别在于：</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210613171232.png" alt="image-20210613171200438" style="zoom:50%;" />

<p>可以看到两者的不同之处有如下几个方面：</p>
<ul>
<li><p>输出结果</p>
<p>logistic regression输出就是0或者1</p>
<p>linear regression输出可以为任意值</p>
</li>
<li><p>loss function不一样</p>
<p>logistic regression使用的是cross entropy （效果更好）</p>
<p>linear regression使用的是常见的loss function</p>
</li>
<li><p>model有区别</p>
<p>对于logistic regression多了一个系数，那个系数就是sigmod</p>
</li>
</ul>
<p><font color=red>注意：</font></p>
<p>当遇到多分类问题的时候，我们可以将sigmod改成softmax</p>
<h4 id="logistic-regression的限制"><a href="#logistic-regression的限制" class="headerlink" title="logistic regression的限制"></a>logistic regression的限制</h4><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210613173412.png" alt="image-20210613173342555" style="zoom:50%;" />

<p>有的时候我们没有办法直接使用一条直线将两个种类的划分出来，就像上图中的两种点一样。</p>
<h4 id="如何解决？"><a href="#如何解决？" class="headerlink" title="如何解决？"></a>如何解决？</h4><h5 id="特征转换"><a href="#特征转换" class="headerlink" title="特征转换"></a>特征转换</h5><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210613173657.png" alt="image-20210613173638442" style="zoom:50%;" />

<p>但是还是存在问题：当特征比较多的时候没有办法直接找到一个比较好的feature transformation</p>
<h5 id="多层连接"><a href="#多层连接" class="headerlink" title="多层连接"></a>多层连接</h5><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210613174413.png" alt="image-20210613174405289" style="zoom:50%;" />

<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210613174451.png" alt="image-20210613174442983" style="zoom:50%;" />

<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210613174525.png" alt="image-20210613174520470" style="zoom:50%;" />

<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210613174631.png" alt="image-20210613174619676" style="zoom:50%;" />

<h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210613174705.png" alt="image-20210613174700890" style="zoom:50%;" />

]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>regression</title>
    <url>/2022/01/07/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/basic/gradient%20descent/</url>
    <content><![CDATA[<h3 id="Gradient-Descent"><a href="#Gradient-Descent" class="headerlink" title="Gradient Descent"></a>Gradient Descent</h3><p>当一个batch做完之后更新参数</p>
<h3 id="Stochastic-Gradient-Descent"><a href="#Stochastic-Gradient-Descent" class="headerlink" title="Stochastic Gradient Descent"></a>Stochastic Gradient Descent</h3><p>对于每一个example都会更新一个参数，他训练的更快</p>
<h3 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h3><p>有可能在高的地方他的导数就比较小，这样话就到导致训练停止不会再去寻找到低的地方</p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>optimizer</title>
    <url>/2022/01/07/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/basic/optimizer/</url>
    <content><![CDATA[<h2 id="SGD类"><a href="#SGD类" class="headerlink" title="SGD类"></a>SGD类</h2><h3 id="SGD"><a href="#SGD" class="headerlink" title="SGD"></a>SGD</h3><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210613131939.png" alt="image-20210613131927258" style="zoom:50%;" />

<p>会一直按照梯度下降的方法走，直到梯度的大小到一定小的程度就会停止</p>
<p>缺点：会在局部比较小的地方停止移动</p>
<h3 id="SGDM"><a href="#SGDM" class="headerlink" title="SGDM"></a>SGDM</h3><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210613132128.png" alt="image-20210613132119489" style="zoom:50%;" />

<p>针对原来SGD的缺点改进：不仅仅依靠梯度进行移动，也会根据历史移动的梯度进行移动，避免停留在局部最低点。</p>
<h4 id="过程："><a href="#过程：" class="headerlink" title="过程："></a>过程：</h4><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210613132454.png" alt="image-20210613132447966" style="zoom:50%;" />

<h2 id="Adaptive-learning-rate类"><a href="#Adaptive-learning-rate类" class="headerlink" title="Adaptive learning rate类"></a>Adaptive learning rate类</h2><h3 id="Adagrad"><a href="#Adagrad" class="headerlink" title="Adagrad"></a>Adagrad</h3><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210613132650.png" alt="image-20210613132645191" style="zoom:50%;" />

<p><strong>相比较之前SGD，在梯度之前多了一个变量，这个变量是防止一直开始的时候梯度过大，导致一下子暴走。</strong></p>
<h3 id="RMSProp"><a href="#RMSProp" class="headerlink" title="RMSProp"></a>RMSProp</h3><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210613133026.png" alt="image-20210613133019874" style="zoom:50%;" />

<p>Adagrad的缺点在于有可能一开始的时候梯度很大，那么有可能没走几步就导致成了这个系数的梯度变得很小，从而停止移动。</p>
<p>RMSProp的优点在于可以避免梯度累加过大。</p>
<h3 id="Adam"><a href="#Adam" class="headerlink" title="Adam"></a>Adam</h3><img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210613133443535.png" alt="image-20210613133443535" style="zoom:50%;" />

<p>Adam  = SGDM+RMSProp</p>
<h2 id="Compare"><a href="#Compare" class="headerlink" title="Compare"></a>Compare</h2><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210613134334.png" alt="image-20210613134328833" style="zoom:50%;" />

<p>Adam：收敛速度快，不稳定</p>
<p>SGDM：稳定，速度慢，可以收敛到比较小的值</p>
<p><strong>因此两者的结合就是SWATS</strong></p>
<h4 id="SWATS"><a href="#SWATS" class="headerlink" title="SWATS"></a>SWATS</h4><img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210613134617259.png" alt="image-20210613134617259" style="zoom:50%;" />

]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>优化器</tag>
      </tags>
  </entry>
  <entry>
    <title>regression</title>
    <url>/2022/01/07/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/basic/regression/</url>
    <content><![CDATA[<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210603195119.png" alt="image-20210603195117481"></p>
<h3 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h3><p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210603203001.png" alt="image-20210603202958558"></p>
<h4 id="不同种类的宝可梦因为对应不同的物种，因此其对应的cp值就会不一样，但是他也可以写成一个linear-function"><a href="#不同种类的宝可梦因为对应不同的物种，因此其对应的cp值就会不一样，但是他也可以写成一个linear-function" class="headerlink" title="不同种类的宝可梦因为对应不同的物种，因此其对应的cp值就会不一样，但是他也可以写成一个linear function"></a>不同种类的宝可梦因为对应不同的物种，因此其对应的cp值就会不一样，但是他也可以写成一个linear function</h4><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210603205715.png" alt="image-20210603205707802" style="zoom:50%;" />



<h3 id="正则-（不用考虑bias，因为bias只是使得曲线上下移动）"><a href="#正则-（不用考虑bias，因为bias只是使得曲线上下移动）" class="headerlink" title="正则 （不用考虑bias，因为bias只是使得曲线上下移动）"></a>正则 （不用考虑bias，因为bias只是使得曲线上下移动）</h3><p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210603211702.png" alt="image-20210603211655156"></p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>TipsforDeepLearning</title>
    <url>/2022/01/07/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/deeplearning/TipsforDeepLearning/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210617095201.png" alt="image-20210617095157325"></p>
<p><font color=red>千万注意dropout应用在测试集上面需要乘以对应的p%</font></p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210617095302.png" alt="image-20210617095258446"></p>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>反向传播</title>
    <url>/2022/01/07/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/deeplearning/%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD/</url>
    <content><![CDATA[<h3 id="反向传播的意义"><a href="#反向传播的意义" class="headerlink" title="反向传播的意义"></a>反向传播的意义</h3><p><font color=red>加快计算loss函数的梯度</font></p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210616110415.png" alt="image-20210616110409650" style="zoom:50%;" />

<p>前向传播计算出每一个hidden layer的值，然后反向传播的时候计算loss的梯度的时候就可以直接从后往前使用</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210616110625.png" alt="image-20210616110620150" style="zoom:50%;" />

<p>进行计算</p>
<h3 id="反向传播过程"><a href="#反向传播过程" class="headerlink" title="反向传播过程"></a>反向传播过程</h3><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210616110933.png" alt="image-20210616110924166" style="zoom:50%;" />



<p>取其中的一项作为例子</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210616111112.png" alt="image-20210616111105373" style="zoom:50%;" />



<p>前一项通过前向传播计算得出</p>
<p>后一项通过反向传播计算得出</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210616110755.png" alt="image-20210616110743881" style="zoom:50%;" />

]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>pytorch基础</title>
    <url>/2022/01/07/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/pytorch/pytorch-base/</url>
    <content><![CDATA[<h3 id="打开jupyter-notebook"><a href="#打开jupyter-notebook" class="headerlink" title="打开jupyter notebook"></a>打开jupyter notebook</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda activate pytorch</span><br><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure>



<h3 id="DataSet"><a href="#DataSet" class="headerlink" title="DataSet"></a>DataSet</h3><p>Pytorch里面的数据集是需要我们自己去定义的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyData</span>(<span class="params">Dataset</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,root_dir,label_dir</span>):</span></span><br><span class="line">        self.root_dir = root_dir</span><br><span class="line">        self.label_dir = label_dir</span><br><span class="line">        self.path = os.path.join(self.root_dir,self.label_dir)</span><br><span class="line">        self.img_path = os.listdir(self.path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果获取每一个文件</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span>(<span class="params">self, idx</span>):</span></span><br><span class="line">        img_name = self.img_path[idx]</span><br><span class="line">        img_item_path = os.path.join(self.root_dir,self.label_dir,img_name)</span><br><span class="line">        <span class="comment"># 根据下标获取每一个元素</span></span><br><span class="line">        label = self.label_dir</span><br><span class="line">        <span class="keyword">return</span> label</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 数据集长度</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.img_path)</span><br></pre></td></tr></table></figure>



<h3 id="TensorBoard"><a href="#TensorBoard" class="headerlink" title="TensorBoard"></a>TensorBoard</h3><p>就是TensorFlow的tensorboard</p>
<ul>
<li><p>如果不清除掉原来生成的文件，那么它会在原有的基础上继续绘制</p>
</li>
<li><p>运行命令</p>
<p><code>tensorboard --logdir=&#123;xxx&#125; --port=xxx</code></p>
</li>
<li><p>例子(报错需要 <code>pip install tensorboard</code>)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;logs&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tag:标题 scalar_value:y轴 global_step:x轴</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    writer.add_scalar(tag=<span class="string">&quot;y=2x&quot;</span>,scalar_value=<span class="number">2</span>*i,global_step=i)</span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Transforms"><a href="#Transforms" class="headerlink" title="Transforms"></a>Transforms</h3><ul>
<li><p>将变量转为tensor向量、裁剪、resize等</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"></span><br><span class="line">img_path = <span class="string">&quot;./pic/Snipaste_2021-05-30_15-08-36.png&quot;</span></span><br><span class="line">img = Image.<span class="built_in">open</span>(img_path)</span><br><span class="line"></span><br><span class="line">tensor_trans = transforms.ToTensor()</span><br><span class="line">tensor_img = tensor_trans(img)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(tensor_img)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Normalize</span></span><br><span class="line"><span class="built_in">print</span>(tensor_img[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">tran_norm = transforms.Normalize([<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>],[<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>]) <span class="comment">#此处是三通道，因此mean和std都需要是三维向量</span></span><br><span class="line">img_norm = tran_norm(tensor_img)</span><br><span class="line"><span class="built_in">print</span>(img_norm[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Resize</span></span><br><span class="line"><span class="built_in">print</span>(img.size)</span><br><span class="line">trans_resize = transforms.Resize((<span class="number">512</span>,<span class="number">512</span>))</span><br><span class="line">img_resize = trans_resize(img)</span><br><span class="line"><span class="built_in">print</span>(img_resize.size)</span><br><span class="line"></span><br><span class="line"><span class="comment"># RandomCrop 随机裁剪</span></span><br><span class="line">trans_random = transforms.RandomCrop(<span class="number">256</span>)</span><br><span class="line">trans_compose = transforms.Compose([trans_random,tensor_trans])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    img_crop = trans_compose(img)</span><br><span class="line">    <span class="built_in">print</span>(img_crop.size)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Tensor"><a href="#Tensor" class="headerlink" title="Tensor"></a>Tensor</h3><p>主要的作用是将变量包装，包装的信息包含了机器学习所需要的信息，比如反向传播需要的信息，梯度，等等</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210530151529.png" alt="image-20210530151518448"></p>
<h3 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h3><ul>
<li><p>DataSet</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"><span class="comment"># Compose 的作用就是将多个操作紧凑到一起 比如说转为tensor、裁剪等等</span></span><br><span class="line">dataset_transform = torchvision.transforms.Compose([</span><br><span class="line">    torchvision.transforms.ToTensor()</span><br><span class="line">])</span><br><span class="line"><span class="comment"># root 存放目录 train：是否为训练集还是测试集 download：本地没有的话是否去下载 transform:直接将数据集转为tensor</span></span><br><span class="line">train_set = torchvision.datasets.CIFAR10(root=<span class="string">&quot;./dataset&quot;</span>,train=<span class="literal">True</span>,download=<span class="literal">True</span>,transform=dataset_transform)</span><br><span class="line">test_set = torchvision.datasets.CIFAR10(root=<span class="string">&quot;./dataset&quot;</span>,train=<span class="literal">False</span>,download=<span class="literal">True</span>,transform=dataset_transform)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(test_set[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(test_set.classes)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(test_set))</span><br><span class="line">img,target = test_set[<span class="number">0</span>] <span class="comment"># 每一个元素都由两个元素组成：图片，以及对应的图片类型</span></span><br><span class="line"><span class="built_in">print</span>(img)</span><br><span class="line"><span class="built_in">print</span>(target)</span><br><span class="line"><span class="built_in">print</span>(test_set.classes[target])</span><br><span class="line"><span class="comment"># img.show()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;p10&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">10</span>):</span><br><span class="line">    img,target = test_set[i]</span><br><span class="line">    writer.add_image(<span class="string">&quot;test_set&quot;</span>,img,i)</span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure></li>
<li><p>DataLoader</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line">dataset_transform = torchvision.transforms.Compose([</span><br><span class="line">    torchvision.transforms.ToTensor()</span><br><span class="line">])</span><br><span class="line">test_set = torchvision.datasets.CIFAR10(root=<span class="string">&quot;./dataset&quot;</span>,train=<span class="literal">False</span>,download=<span class="literal">True</span>,transform=dataset_transform)</span><br><span class="line"></span><br><span class="line"><span class="comment"># batch_size 每次抓取数据的个数  shuffle：是否打乱 num_workers：多少个子线程去做load data（在windows下非0数会报错，0代表当前主线程） drop_last:是否丢弃最后剩余的数据  例如batch_size=3 总共有100个，为True则丢弃最后一个元素</span></span><br><span class="line">test_loader = DataLoader(dataset=test_set,batch_size=<span class="number">64</span>,shuffle=<span class="literal">True</span>,num_workers=<span class="number">0</span>,drop_last=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">img,target = test_set[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(img.shape)</span><br><span class="line"><span class="built_in">print</span>(target)</span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;dataloader&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    setp = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> test_loader:</span><br><span class="line">        <span class="comment"># 此处的imgs: torch.Size([64, 3, 32, 32])  64位个数，后三个为图片RGB ， H ,W</span></span><br><span class="line">        <span class="comment"># 此处的targets: 为64个对应的target</span></span><br><span class="line">        imgs,targets = data</span><br><span class="line">        <span class="built_in">print</span>(imgs.shape)</span><br><span class="line">        <span class="built_in">print</span>(targets)</span><br><span class="line">        writer.add_images(<span class="string">&quot;Epoch &#123;&#125;&quot;</span>.<span class="built_in">format</span>(epoch),imgs,setp)</span><br><span class="line">        setp+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="torch-nn"><a href="#torch-nn" class="headerlink" title="torch.nn"></a>torch.nn</h3><h4 id="torch-nn-functional"><a href="#torch-nn-functional" class="headerlink" title="torch.nn.functional"></a>torch.nn.functional</h4><p>以卷积为例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 卷积</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="built_in">input</span> = torch.tensor([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">1</span>],</span><br><span class="line">                      [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>],</span><br><span class="line">                      [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                      [<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                      [<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line">kernel = torch.tensor([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>],</span><br><span class="line">                       [<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                       [<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为conv2d输入的参数input与kernel都需要是 input tensor of shape (minibatch,in_channels,iW)这种形式因此需要对其进行转换reshape一下</span></span><br><span class="line"><span class="built_in">input</span> = torch.reshape(<span class="built_in">input</span>,(<span class="number">1</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">5</span>))</span><br><span class="line">kernel = torch.reshape(kernel,(<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">input</span>.shape)</span><br><span class="line"><span class="built_in">print</span>(kernel.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># stride 每次移动的部长</span></span><br><span class="line">output = F.conv2d(<span class="built_in">input</span>,kernel,stride=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(output)</span><br><span class="line"></span><br><span class="line">output = F.conv2d(<span class="built_in">input</span>,kernel,stride=<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(output)</span><br><span class="line"></span><br><span class="line"><span class="comment"># padding 最外层添加一层 值都是0</span></span><br><span class="line">output = F.conv2d(<span class="built_in">input</span>,kernel,stride=<span class="number">1</span>,padding=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(output)</span><br></pre></td></tr></table></figure>



<h4 id="torch-nn-Model"><a href="#torch-nn-Model" class="headerlink" title="torch.nn.Model"></a>torch.nn.Model</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Conv2d</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line">test_set = torchvision.datasets.CIFAR10(root=<span class="string">&quot;./dataset&quot;</span>,train=<span class="literal">False</span>,download=<span class="literal">True</span>,transform=torchvision.transforms.ToTensor())</span><br><span class="line">test_loader = DataLoader(dataset=test_set,batch_size=<span class="number">64</span>,shuffle=<span class="literal">True</span>,num_workers=<span class="number">0</span>,drop_last=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Test, self).__init__()</span><br><span class="line">        self.conv1 = Conv2d(in_channels=<span class="number">3</span>,out_channels=<span class="number">6</span>,kernel_size=<span class="number">3</span>,stride=<span class="number">1</span>,padding=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self,x</span>):</span></span><br><span class="line">        x = self.conv1(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">test = Test()</span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;./test&quot;</span>)</span><br><span class="line"></span><br><span class="line">step = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> test_loader:</span><br><span class="line">    imgs,targets = data</span><br><span class="line">    output = test(imgs)</span><br><span class="line">    <span class="built_in">print</span>(imgs.shape)</span><br><span class="line">    <span class="built_in">print</span>(output.shape)</span><br><span class="line"></span><br><span class="line">    writer.add_images(<span class="string">&quot;input&quot;</span>,imgs,step)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#这里会变成64*2 因为是有6个channel，而原始的只有3个channel reshape的目的是为了将其重新转变为三通道的图片</span></span><br><span class="line">    output = torch.reshape(output,(-<span class="number">1</span>,<span class="number">3</span>,<span class="number">30</span>,<span class="number">30</span>))</span><br><span class="line">    writer.add_images(<span class="string">&quot;output&quot;</span>,output,step)</span><br><span class="line"></span><br><span class="line">    step = step+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure>



<h4 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> ReLU</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = torch.tensor([[<span class="number">1</span>,-<span class="number">0.5</span>],</span><br><span class="line">                      [-<span class="number">1</span>,<span class="number">3</span>]])</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = torch.reshape(<span class="built_in">input</span>,[-<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">input</span>.shape)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Test, self).__init__()</span><br><span class="line">        self.relu = ReLU()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self,x</span>):</span></span><br><span class="line">        output = self.relu(x)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test = Test()</span><br><span class="line">output = test(<span class="built_in">input</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(output)</span><br></pre></td></tr></table></figure>



<h4 id="linear"><a href="#linear" class="headerlink" title="linear"></a>linear</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Linear</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line">test_set = torchvision.datasets.CIFAR10(root=<span class="string">&quot;./dataset&quot;</span>,train=<span class="literal">False</span>,download=<span class="literal">True</span>,transform=torchvision.transforms.ToTensor())</span><br><span class="line">test_loader = DataLoader(dataset=test_set,batch_size=<span class="number">64</span>,shuffle=<span class="literal">True</span>,num_workers=<span class="number">0</span>,drop_last=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Test, self).__init__()</span><br><span class="line">        self.linear1 = Linear(<span class="number">196608</span>,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self,<span class="built_in">input</span></span>):</span></span><br><span class="line">        output = self.linear1(<span class="built_in">input</span>)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">test = Test()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> test_loader:</span><br><span class="line">    imgs,targets = data</span><br><span class="line">    <span class="built_in">print</span>(imgs.shape)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 直接将多维转为一维</span></span><br><span class="line">    output = torch.flatten(imgs)</span><br><span class="line">    <span class="built_in">print</span>(output.shape)</span><br><span class="line"></span><br><span class="line">    output = test(output)</span><br><span class="line">    <span class="built_in">print</span>(output.shape)</span><br></pre></td></tr></table></figure>



<h4 id="Sequential"><a href="#Sequential" class="headerlink" title="Sequential"></a>Sequential</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Sequential, Conv2d, MaxPool2d, Flatten, Linear</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Test, self).__init__()</span><br><span class="line">        self.model1 = Sequential(</span><br><span class="line">            Conv2d(<span class="number">3</span>,<span class="number">32</span>,<span class="number">5</span>,padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Conv2d(<span class="number">32</span>, <span class="number">32</span>, <span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Conv2d(<span class="number">32</span>, <span class="number">64</span>, <span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Flatten(),</span><br><span class="line">            Linear(<span class="number">1024</span>,<span class="number">64</span>),</span><br><span class="line">            Linear(<span class="number">64</span>,<span class="number">10</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self,x</span>):</span></span><br><span class="line">        x =self.model1(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">test = Test()</span><br><span class="line"><span class="built_in">print</span>(test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构成测试数据，都是1</span></span><br><span class="line"><span class="built_in">input</span> = torch.ones((<span class="number">64</span>,<span class="number">3</span>,<span class="number">32</span>,<span class="number">32</span>))</span><br><span class="line">output = test(<span class="built_in">input</span>)</span><br><span class="line"><span class="built_in">print</span>(output.shape)</span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;./logs_seq&quot;</span>)</span><br><span class="line">writer.add_graph(test,<span class="built_in">input</span>)</span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure>



<h4 id="Loss"><a href="#Loss" class="headerlink" title="Loss"></a>Loss</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> L1Loss</span><br><span class="line"></span><br><span class="line">inputs = torch.tensor([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],dtype=torch.float32)</span><br><span class="line">targets = torch.tensor([<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>],dtype=torch.float32)</span><br><span class="line"></span><br><span class="line">inputs = torch.reshape(inputs,(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">targets = torch.reshape(targets,(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 和</span></span><br><span class="line">loss = L1Loss(reduction=<span class="string">&#x27;sum&#x27;</span>)</span><br><span class="line">result = loss(inputs,targets)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="comment"># mean 默认是mean</span></span><br><span class="line">loss = L1Loss(reduction=<span class="string">&#x27;mean&#x27;</span>)</span><br><span class="line">result = loss(inputs,targets)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line">loss_mse = nn.MSELoss()</span><br><span class="line">result_mse = loss_mse(inputs,targets)</span><br><span class="line"><span class="built_in">print</span>(result_mse)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 交叉熵</span></span><br><span class="line">x = torch.tensor([<span class="number">0.1</span>,<span class="number">0.2</span>,<span class="number">0.3</span>])</span><br><span class="line">y = torch.tensor([<span class="number">1</span>])</span><br><span class="line">x = torch.reshape(x,(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">loss_cross = nn.CrossEntropyLoss()</span><br><span class="line">result_cross = loss_cross(x,y)</span><br><span class="line"><span class="built_in">print</span>(result_cross)</span><br></pre></td></tr></table></figure>



<h4 id="backward"><a href="#backward" class="headerlink" title="backward"></a>backward</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Sequential, Conv2d, MaxPool2d, Flatten, Linear</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line">test_set = torchvision.datasets.CIFAR10(root=<span class="string">&quot;./dataset&quot;</span>,train=<span class="literal">False</span>,download=<span class="literal">True</span>,transform=torchvision.transforms.ToTensor())</span><br><span class="line">dataloader = DataLoader(test_set,batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Test, self).__init__()</span><br><span class="line">        self.model1 = Sequential(</span><br><span class="line">            Conv2d(<span class="number">3</span>,<span class="number">32</span>,<span class="number">5</span>,padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Conv2d(<span class="number">32</span>, <span class="number">32</span>, <span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Conv2d(<span class="number">32</span>, <span class="number">64</span>, <span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Flatten(),</span><br><span class="line">            Linear(<span class="number">1024</span>,<span class="number">64</span>),</span><br><span class="line">            Linear(<span class="number">64</span>,<span class="number">10</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self,x</span>):</span></span><br><span class="line">        x =self.model1(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">test = Test()</span><br><span class="line"><span class="built_in">print</span>(test)</span><br><span class="line"></span><br><span class="line">loss = nn.CrossEntropyLoss()</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> dataloader:</span><br><span class="line">    imgs,targets = data</span><br><span class="line">    outputs = test(imgs)</span><br><span class="line">    result_loss = loss(outputs,targets)</span><br><span class="line">    <span class="comment"># 这里千万要注意到此处的backward只能在result_loss下执行</span></span><br><span class="line">    result_loss.backward()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ok&quot;</span>)</span><br></pre></td></tr></table></figure>



<h4 id="optimizer"><a href="#optimizer" class="headerlink" title="optimizer"></a>optimizer</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Sequential, Conv2d, MaxPool2d, Flatten, Linear</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line">test_set = torchvision.datasets.CIFAR10(root=<span class="string">&quot;./dataset&quot;</span>,train=<span class="literal">False</span>,download=<span class="literal">True</span>,transform=torchvision.transforms.ToTensor())</span><br><span class="line">dataloader = DataLoader(test_set,batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Test, self).__init__()</span><br><span class="line">        self.model1 = Sequential(</span><br><span class="line">            Conv2d(<span class="number">3</span>,<span class="number">32</span>,<span class="number">5</span>,padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Conv2d(<span class="number">32</span>, <span class="number">32</span>, <span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Conv2d(<span class="number">32</span>, <span class="number">64</span>, <span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Flatten(),</span><br><span class="line">            Linear(<span class="number">1024</span>,<span class="number">64</span>),</span><br><span class="line">            Linear(<span class="number">64</span>,<span class="number">10</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self,x</span>):</span></span><br><span class="line">        x =self.model1(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">test = Test()</span><br><span class="line"><span class="built_in">print</span>(test)</span><br><span class="line"></span><br><span class="line">loss = nn.CrossEntropyLoss()</span><br><span class="line">optim = torch.optim.SGD(test.parameters(),lr=<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    running_loss = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> dataloader:</span><br><span class="line">        imgs,targets = data</span><br><span class="line">        outputs = test(imgs)</span><br><span class="line">        result_loss = loss(outputs,targets)</span><br><span class="line">        <span class="comment"># 这里注意一定要全部置为0  因为上一轮对下一轮的训练没有用</span></span><br><span class="line">        optim.zero_grad()</span><br><span class="line">        <span class="comment"># 这里千万要注意到此处的backward只能在result_loss下执行</span></span><br><span class="line">        result_loss.backward()</span><br><span class="line">        <span class="comment"># 训练</span></span><br><span class="line">        optim.step()</span><br><span class="line"></span><br><span class="line">        running_loss+=result_loss</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(result_loss)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>对学习率分阶段修改</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分步骤训练 就是不同训练次数选择不同的学习率（越来院小）</span></span><br><span class="line"><span class="comment"># 下面表示每训练五次学习率*0.1</span></span><br><span class="line">scheduler = StepLR(optim,step_size=<span class="number">5</span>,gamma=<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    running_loss = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> dataloader:</span><br><span class="line">        imgs,targets = data</span><br><span class="line">        outputs = test(imgs)</span><br><span class="line">        result_loss = loss(outputs,targets)</span><br><span class="line">        <span class="comment"># 这里注意一定要全部置为0  因为上一轮对下一轮的训练没有用</span></span><br><span class="line">        optim.zero_grad()</span><br><span class="line">        <span class="comment"># 这里千万要注意到此处的backward只能在result_loss下执行</span></span><br><span class="line">        result_loss.backward()</span><br><span class="line">        <span class="comment"># 训练</span></span><br><span class="line">        <span class="comment"># optim.step()</span></span><br><span class="line">        scheduler.step()</span><br><span class="line">        running_loss+=result_loss</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(result_loss)</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="加载官网训练好的模型以及在此基础上进行修改"><a href="#加载官网训练好的模型以及在此基础上进行修改" class="headerlink" title="加载官网训练好的模型以及在此基础上进行修改"></a>加载官网训练好的模型以及在此基础上进行修改</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torchvision.models</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为true的话会将整个模型下载下来，为false的话会在网络中加载该模型,但是是没有训练好的模型</span></span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line">vgg16_false = torchvision.models.vgg16(pretrained=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(vgg16_false)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以数组的方式将第六层改变为nn.Linear(4096,10)</span></span><br><span class="line">vgg16_false.classifier[<span class="number">6</span>] = nn.Linear(<span class="number">4096</span>,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在classifier中添加一层</span></span><br><span class="line">vgg16_false.classifier.add_module(<span class="string">&#x27;add_linear&#x27;</span>,nn.Linear(<span class="number">1000</span>,<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接添加一层</span></span><br><span class="line">vgg16_false.add_module(<span class="string">&#x27;add_linear&#x27;</span>,nn.Linear(<span class="number">1000</span>,<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(vgg16_false)</span><br></pre></td></tr></table></figure>



<h4 id="模型save和load"><a href="#模型save和load" class="headerlink" title="模型save和load"></a>模型save和load</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision.models</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式1 方式1的缺陷在于在导入的时候需要模型的定义信息，就是class Mymodel(nn.Moudel)这个类需要加载进来，否则会报错</span></span><br><span class="line"><span class="comment"># save</span></span><br><span class="line">vgg16 = torchvision.models.vgg16(pretrained=<span class="literal">False</span>)</span><br><span class="line">torch.save(vgg16,<span class="string">&quot;./model/vgg16_method1.pth&quot;</span>)</span><br><span class="line">model = torch.load(<span class="string">&quot;./model/vgg16_method1.pth&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式2  以字典的形式加载模型，将参数赋予到模型上</span></span><br><span class="line">torch.save(vgg16.state_dict(), <span class="string">&quot;./model/vgg16_method2.pth&quot;</span>)</span><br><span class="line">vgg = torchvision.models.vgg16(pretrained=<span class="literal">False</span>)</span><br><span class="line">vgg.load_state_dict(torch.load(<span class="string">&quot;./model/vgg16_method2.pth&quot;</span>))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pytorch</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>pytorch</tag>
      </tags>
  </entry>
  <entry>
    <title>graph embedding</title>
    <url>/2022/01/07/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%9B%BE%E7%BD%91%E7%BB%9C/Graph%20embedding/</url>
    <content><![CDATA[<h4 id="主要作用"><a href="#主要作用" class="headerlink" title="主要作用"></a>主要作用</h4><p>常见的表示节点的方法就是利用one-hot编码，那么有多少个节点就有多少维的向量</p>
<p>缺陷也是显而易见的：</p>
<ul>
<li>节点数量比较多的话会造成向量的长度比较大</li>
<li>丢失了节点在图上的信息</li>
</ul>
<p>graph embedding的好处</p>
<ul>
<li>简化了节点的特征长度</li>
<li>保留了节点在图上的信息</li>
</ul>
<h4 id="DeepWalk"><a href="#DeepWalk" class="headerlink" title="DeepWalk"></a>DeepWalk</h4><ul>
<li><p>主要思想</p>
<p>通过随机游走产生图的序列，就像wordvec2中的语料一样</p>
</li>
<li><p>使用场景</p>
<p>无向图</p>
</li>
</ul>
<h4 id="LINE"><a href="#LINE" class="headerlink" title="LINE"></a>LINE</h4><ul>
<li><p>使用场景</p>
<p>大规模图上，表示节点之间的结构信息，有向图无向图都可以、</p>
</li>
<li><p>主要思想</p>
<ul>
<li><p>一阶相似性</p>
<p>局部的结构信息 （如果两个节点之间连接并且连接的权重比较大，那么这两个节点的embedding是相似的）</p>
</li>
<li><p>二阶相似性</p>
<p>节点的邻居，共享邻居的节点可能是相似的 （如果两个节点的邻居是相似的，那么即使这两个节点之间没有连接，那么这两个节点的embedding也是相似的）</p>
</li>
<li><p>将一阶和二阶拼接在一起</p>
</li>
</ul>
</li>
</ul>
<h4 id="node2vec"><a href="#node2vec" class="headerlink" title="node2vec"></a>node2vec</h4><ul>
<li><p>主要思想</p>
<p>不同的随机游走策略，形成序列，类似skip-gram方式生成节点embedding</p>
</li>
</ul>
<h4 id="Struct2Vec"><a href="#Struct2Vec" class="headerlink" title="Struct2Vec"></a>Struct2Vec</h4><ul>
<li><p>使用场景</p>
<p>寻找两个不同图中相似的节点</p>
<p>适用于节点分类中，其结构标识比邻居标识更重要，采用Struct2Vec效果好</p>
</li>
<li><p>主要思想</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210720154602.png" alt="image-20210720154555078" style="zoom:50%;" /></li>
</ul>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210720155239.png" alt="image-20210720155227466" style="zoom:50%;" />

<p>​                                                                （动态规划）</p>
<h4 id="SDNE"><a href="#SDNE" class="headerlink" title="SDNE"></a>SDNE</h4><ul>
<li><p>主要思想</p>
<p>采用了多个非线性层的方式捕获一阶二阶的相似性</p>
</li>
</ul>
]]></content>
      <categories>
        <category>图网络</category>
      </categories>
      <tags>
        <tag>图网络</tag>
      </tags>
  </entry>
  <entry>
    <title>空域GNN</title>
    <url>/2022/01/07/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%9B%BE%E7%BD%91%E7%BB%9C/%E7%A9%BA%E5%9F%9FGNN/</url>
    <content><![CDATA[<h4 id="NN4G"><a href="#NN4G" class="headerlink" title="NN4G"></a>NN4G</h4><ul>
<li><p>每一层的训练</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210719154532.png" alt="image-20210719154522060" style="zoom:50%;" /></li>
<li><p>输出</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210719154810.png" alt="image-20210719154806203" style="zoom:50%;" /></li>
</ul>
<h4 id="DCNN"><a href="#DCNN" class="headerlink" title="DCNN"></a>DCNN</h4><ul>
<li><p>每一层的训练</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210719155148.png" alt="image-20210719155143110" style="zoom:50%;" /></li>
<li><p>输出</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210719155226.png" alt="image-20210719155221204" style="zoom:50%;" /></li>
</ul>
]]></content>
      <categories>
        <category>图网络</category>
      </categories>
      <tags>
        <tag>图网络</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2022/01/07/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87Offer/%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<ol>
<li><p>对于Deque中的</p>
<ul>
<li><p>pop() 去除<strong>栈顶元素</strong></p>
</li>
<li><p>peek() 获取<strong>队头元素</strong>，<font color=red>千万注意这里和Stack中的peek的区别，这里是队头元素</font></p>
</li>
</ul>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/01/07/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%89%91%E6%8C%87Offer/%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<ol>
<li>利用递归的算法实现</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>CAS整合springboot</title>
    <url>/2022/01/07/%E7%BD%91%E7%BB%9C/cas/CAS%E6%95%B4%E5%90%88springboot/</url>
    <content><![CDATA[<ol>
<li></li>
<li><p>pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.unicon.cas<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cas-client-autoconfig-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0-GA<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><font color=red>如果打包的时候出现问题，比如少了什么jar包之类的，直接去下载，然后放到对应的Repository下面即可</font></p>
<p>需要在启动类上面添加：<code>@EnableCasClient</code></p>
<p>ymal配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cas:</span></span><br><span class="line">  <span class="attr">server-url-prefix:</span> <span class="string">https://testcas.com:8443/cas</span> <span class="comment">#cas服务端</span></span><br><span class="line">  <span class="attr">server-login-url:</span> <span class="string">https://testcas.com:8443/cas/login</span> <span class="comment">#cas登录地址</span></span><br><span class="line">  <span class="attr">client-host-url:</span> <span class="string">http://localhost:7777</span> <span class="comment">#登录成功回调地址</span></span><br><span class="line">  <span class="attr">validation-type:</span> <span class="string">cas3</span></span><br></pre></td></tr></table></figure></li>
<li><p>出现以下错误表示CAS服务器没有支持http请求</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210502092808.png" alt="image-20210502092800529"></p>
<p>如何修改使得CAS服务器支持http请求呢？</p>
<ol>
<li><p>修改HTTPSandIMAPS-10000001.json文件,添加http请求到配置中</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210502093107.png" alt="image-20210502093105908"></p>
</li>
</ol>
<ol start="2">
<li><p>修改application.properties</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210502093343.png" alt="image-20210502093341272"></p>
<p>添加如下内容：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#添加http请求</span></span><br><span class="line"><span class="meta">cas.tgc.secure</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">cas.serviceRegistry.initFromJson</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>登录成功之后你就会发现出现如下问题</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210502101311.png" alt="image-20210502101309967"></p>
<p>一开始的时候我以为是路径跳转错误，因为毕竟我们指定的跳转路径后面多了一个ticket嘛，<font color=red>但是后来发现是没有导入证书导致的，因为我们自己制作的https证书java是不信任的，因此需要我们自己使得java信任我们制作的https证书</font></p>
<p>解决步骤如下：</p>
<ol>
<li><p>导入java证书（此处也可以直接导入进去，keytool -import -alias tomcat -keystore {java中当前jre下的security中的cacerts} -file ./tomcat.cer）</p>
<p><code>keytool -import -alias tomcat -keystore cacerts -file ./tomcat.cer </code></p>
<p>最后一个参数是导入证书的位置，倒数第二个参数是生产证书的位置+名字</p>
<p>此时会生成一个新的文件</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210502102422.png" alt="image-20210502102420282"></p>
</li>
<li><p>将该生成的文件放到java的jre目录下的security下面</p>
</li>
<li><p>重启服务器</p>
</li>
<li><p>实在不行直接修改tomcat配置文件，将clientAuth改为false</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210502110459.png" alt="image-20210502110456988"></p>
</li>
</ol>
</li>
<li><p>退出</p>
<p>退出需要重定向到CAS的退出接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/logout&quot;,method = RequestMethod.GET)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">logout</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:https://172.23.27.119:8443:/cas/logout&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>最重要的一点就是</p>
<h1 id="如果一直有问题，不妨把浏览器的缓存清空一下，重启一下"><a href="#如果一直有问题，不妨把浏览器的缓存清空一下，重启一下" class="headerlink" title="如果一直有问题，不妨把浏览器的缓存清空一下，重启一下"></a>如果一直有问题，不妨把浏览器的缓存清空一下，重启一下</h1></li>
<li><p>有问题加上参数调试</p>
<p><code>-Djavax.net.debug=ssl,handshake</code></p>
</li>
</ol>
<p>​    </p>
]]></content>
      <categories>
        <category>cas</category>
      </categories>
      <tags>
        <tag>cas</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>CAS服务器搭建</title>
    <url>/2022/01/07/%E7%BD%91%E7%BB%9C/cas/CAS%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<ol>
<li><p>准备工作</p>
<ul>
<li>https环境搭建</li>
<li>tomcat</li>
<li>jdk环境</li>
</ul>
</li>
<li><p>下载项目文件</p>
<p><code>git clone -b 5.3 https://github.com/apereo/cas-overlay-template.git</code></p>
<p>此处使用的5.3版本</p>
</li>
<li><p>打开项目新建文件夹（src/main/resources）</p>
<p>复制文件application.properties和log4j2.xml</p>
<p>主要是为了打包的时候能够直接将配置文件导入到war包中</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210430111326.png" alt="image-20210430111325186"></p>
</li>
<li><p>修改application.properties配置文件</p>
<ul>
<li><p>导入数据库配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># CAS Authentication Credentials</span><br><span class="line">#</span><br><span class="line">#cas.authn.accept.users=casuser::Mellon</span><br><span class="line">cas.authn.jdbc.query[0].url=jdbc:mysql://172.23.27.120:3306/casserver?nullCatalogMeansCurrent=true&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true&amp;serverTimezone=GMT%2B8&amp;useSSL=false</span><br><span class="line">cas.authn.jdbc.query[0].user=root</span><br><span class="line">cas.authn.jdbc.query[0].password=123456</span><br><span class="line">cas.authn.jdbc.query[0].sql=select * from cas where username = ?</span><br><span class="line">cas.authn.jdbc.query[0].fieldPassword=password</span><br><span class="line">cas.authn.jdbc.query[0].driverClass=com.mysql.jdbc.Driver</span><br><span class="line"></span><br><span class="line">#密码加密方式  使用了默认的MD5</span><br><span class="line">cas.authn.jdbc.query[0].passwordEncoder.type=DEFAULT</span><br><span class="line">#如果不想使用默认的可以重写方法</span><br><span class="line">#cas.authn.jdbc.query[0].passwordEncoder.type=com.example.CustomPasswordEncoder</span><br><span class="line">cas.authn.jdbc.query[0].passwordEncoder.characterEncoding=UTF-8</span><br><span class="line">cas.authn.jdbc.query[0].passwordEncoder.encodingAlgorithm=MD5</span><br></pre></td></tr></table></figure></li>
<li><p>修改证书位置y以及密码</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210430111425.png" alt="image-20210430111423104"></p>
</li>
<li><p>加入依赖</p>
<p><font color=red>此处一定要注意：版本要与大环境保持一致，否则启动不了，会有包冲突，mysql版本可以稍微低一些，也可以高一些，但是最好保持一致</font></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apereo.cas<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cas-server-support-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;cas.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.35<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>将war包导入到tomcat的webapps目录下，tomcat会自动解压并运行该项目</p>
<p>访问：xxxx:8443/cas</p>
</li>
</ol>
]]></content>
      <categories>
        <category>cas</category>
      </categories>
      <tags>
        <tag>cas</tag>
      </tags>
  </entry>
  <entry>
    <title>https证书搭建</title>
    <url>/2022/01/07/%E7%BD%91%E7%BB%9C/https/https%E8%AF%81%E4%B9%A6%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<ol>
<li></li>
</ol>
<p><font color=red>必须要安装java环境</font></p>
<ol>
<li><p>生成服务端证书</p>
<p><code>keytool -genkey -v -alias &#123;证书名称&#125; --keyalg RSA -keystore &#123;地址/证书名称.keystore&#125; --validity &#123;有效期,单位为天&#125;  </code></p>
<p>例如</p>
<p><code>keytool -genkey -v -alias tomcat --keyalg RSA -keystore /root/https/tomcat.keystore --validity 36500 </code></p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210429163308.png" alt="image-20210429163306794"></p>
<p>箭头指向的地方代表了访问时候的ip地址，如果写localhost就必须用localhost访问，需要完全用红色箭头处的值来进行访问，ip就用ip访问，域名就用域名访问</p>
</li>
<li><p>生成客户端证书</p>
<p><code>keytool -genkey -v -alias &#123;证书名称&#125; -keyalg RSA -storetype PKCS12 -keystore &#123;地址/证书名.p12&#125; </code></p>
<p>例如</p>
<p><code>keytool -genkey -v -alias mykey -keyalg RSA -storetype PKCS12 -keystore /root/https/mykey.p12</code></p>
<p>客户端的CN可以是任意值</p>
</li>
<li><p>让服务端信任客户端证书</p>
<p>由于是双向ssl认证，服务器必须要信任客户端证书，因此必须把客户端添加为服务器的信任认证。<font color=red>由于不能直接将PKCS12格式的证书库导入，必须先把客户端证书导出为一个单独的CER文件</font>，使用如下命令：</p>
<p><code>keytool -export -alias mykey -keystore &#123;地址/客户端证书&#125; -storetype PKCS12 --storepass &#123;password&#125; -rfc -file &#123;地址/CER文件.cer&#125;</code></p>
<p>例如：</p>
<p><code>keytool -export -alias mykey -keystore /root/https/mykey.p12 -storetype PKCS12 --storepass 123456 -rfc -file /root/https/mykey.cer</code></p>
</li>
<li><p>将该文件导入到服务器的证书库，添加为一个信任证书，命令如下</p>
<p><code>keytool -import -v -file &#123;地址/cer文件&#125; -keystore &#123;地址/服务器端证书&#125;</code></p>
<p>例如：</p>
<p><code>keytool -import -v -file /root/https/mykey.cer -keystore /root/https/tomcat.keystore</code></p>
</li>
<li><p>查看服务器的证书库</p>
<p><code>keytool -list -keystore &#123;地址/服务器端证书&#125;</code></p>
<p><code>keytool -list -keystore /root/https/tomcat.keystore</code></p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210429164904.png" alt="image-20210429164903114"></p>
</li>
<li><p>让客户端信任服务器证书</p>
<p>由于是双向ssl认证，客户端必须要信任服务端证书，因此必须把服务端添加为客户端的信任认证。<font color=red>由于不能直接将keystore格式的证书库导入，必须先把服务端证书导出为一个单独的CER文件</font>，使用如下命令：</p>
<p><code>keytool -keystore &#123;地址/服务端证书&#125; -export -alias &#123;服务端证书名&#125; -file &#123;地址/服务端的证书名.cer&#125;</code></p>
<p>例如：</p>
<p><code>keytool -keystore /root/https/tomcat.keystore -export -alias tomcat -file /root/https/tomcat.cer</code></p>
</li>
<li><p>最终一个会有4个文件</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210429165418.png" alt="image-20210429165416749"></p>
</li>
<li><p>在tomcat的conf/server.xml中添加ssl配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8443&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">maxThreads</span>=<span class="string">&quot;150&quot;</span> <span class="attr">SSLEnabled</span>=<span class="string">&quot;true&quot;</span> <span class="attr">scheme</span>=<span class="string">&quot;https&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">secure</span>=<span class="string">&quot;true&quot;</span> <span class="attr">clientAuth</span>=<span class="string">&quot;true&quot;</span> <span class="attr">sslProtocol</span>=<span class="string">&quot;TLS&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">keystoreFile</span>=<span class="string">&quot;/root/https/tomcat.keystore&quot;</span> <span class="attr">keystorePass</span>=<span class="string">&quot;123456&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">truststoreFile</span>=<span class="string">&quot;/root/https/tomcat.keystore&quot;</span> <span class="attr">truststorePass</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>属性说明：</p>
<p>clientAuth：设置是否双向认证，默认为false</p>
<p>keystoreFile：服务器证书文件路径</p>
<p>keystorePass：服务器证书密码</p>
<p>truststoreFile：用来验证客户端证书的根证书，此例子中就是服务器证书</p>
<p>truststorePass：根证书密码</p>
</li>
<li><p>启动tomcat</p>
<p><code>./catalina.sh run</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">cas.authn.jdbc.query[0].url=jdbc:mysql://172.23.27.120:3306/casserver?nullCatalogMeansCurrent=true&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true&amp;serverTimezone=GMT%2B8&amp;useSSL=false</span><br><span class="line">cas.authn.jdbc.query[0].user=root</span><br><span class="line">cas.authn.jdbc.query[0].password=123456</span><br><span class="line">cas.authn.jdbc.query[0].sql=select * from cas where username = ?</span><br><span class="line">cas.authn.jdbc.query[0].fieldPassword=password</span><br><span class="line">cas.authn.jdbc.query[0].driverClass=com.mysql.jdbc.Driver</span><br><span class="line"></span><br><span class="line">#密码加密方式  使用了默认的MD5</span><br><span class="line">cas.authn.jdbc.query[0].passwordEncoder.type=DEFAULT</span><br><span class="line">#如果不想使用默认的可以重写方法</span><br><span class="line">#cas.authn.jdbc.query[0].passwordEncoder.type=com.example.CustomPasswordEncoder</span><br><span class="line">cas.authn.jdbc.query[0].passwordEncoder.characterEncoding=UTF-8</span><br><span class="line">cas.authn.jdbc.query[0].passwordEncoder.encodingAlgorithm=MD5</span><br></pre></td></tr></table></figure></li>
</ol>
<p>后记：</p>
<p>​    <font color=red>配置https证书，千万不要使用ip配置，否则会非常坑</font></p>
<p>​    </p>
]]></content>
      <categories>
        <category>cas</category>
      </categories>
      <tags>
        <tag>cas</tag>
        <tag>https</tag>
      </tags>
  </entry>
  <entry>
    <title>索引</title>
    <url>/2022/01/07/MySQL/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/09-%E7%B4%A2%E5%BC%95/</url>
    <content><![CDATA[<h3 id="普通索引和唯一索引"><a href="#普通索引和唯一索引" class="headerlink" title="普通索引和唯一索引"></a>普通索引和唯一索引</h3><ol>
<li><p>InnoDB的数据是<strong>按照数据页为单位进行读写</strong>的，也就是当读一条记录的时候并不会将这个记录本身从磁盘中读取出来，而是以页尾单位将其整体读入内存</p>
</li>
<li><p>change buffer</p>
<p>change buffer使用必须要同时满足一下条件</p>
<ul>
<li>索引必须是辅助索引</li>
<li>索引不是唯一的</li>
</ul>
<p>change buffer的机制</p>
<p>在不影响数据一致性的前提下，InnoDB会将更新操作缓存在change buffer中，这样就不需要从磁盘中读入对应的数据页，在下次访问到这个数据页的时候将该数据叶读入内存，然后执行change buffer中与这个数据页的有关操作。</p>
<p><font color=red>注意: 如果将更新操作缓存到change buffer之后又立即对该数据页进行了访问，那么还是会触发随机读IO，将对应数据页加载到了缓存中，那么change buffer的作用也就很小</font></p>
<ul>
<li><p>change buffer不适用于唯一索引的原因</p>
<p>因为每次插入记录的时候需要检查该条记录的唯一性，会触发读取数据页，那么也就无法达到减少随机读IO的效果，也就导致change buffer失效</p>
</li>
<li><p>change buffer的使用场景</p>
<ul>
<li><p>写多读少的业务，页面在写完以后马上被访问的概率比较小，比如说账单类、日志类系统</p>
</li>
<li><p>如果所有的更新后面都马上伴随着对该记录的查询，那么应该关闭change buffer</p>
</li>
</ul>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Balking模式</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Balking%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h3><p>与GuardedSuspension模式的区别在于前者会等待if条件为真，而Balking模式是不会等待，选择快速放弃</p>
<p>因此在判断的时候尽可能的==缩小加锁的范围==</p>
]]></content>
      <categories>
        <category>java并发</category>
      </categories>
      <tags>
        <tag>并发</tag>
        <tag>java</tag>
        <tag>Balking</tag>
      </tags>
  </entry>
  <entry>
    <title>Copy-on-Write模式</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Copy-on-Write%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h3><p>只有在真正需要复制的时候才复制，而不是提前复制好</p>
<h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p>读多写少的情况下适用，即读的性能比较苛刻同时写的场景非常少</p>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>消耗内存，每次修改都会复制一个新的对象</p>
<h3 id="Java中的相关数据结构"><a href="#Java中的相关数据结构" class="headerlink" title="Java中的相关数据结构"></a>Java中的相关数据结构</h3><ul>
<li>CopyOnWriteArrayList</li>
<li>CopyOnWriteArraySet</li>
</ul>
]]></content>
      <categories>
        <category>java并发</category>
      </categories>
      <tags>
        <tag>并发</tag>
        <tag>java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>GuardedSusension模式</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/GuardedSuspension%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h3><p>等待通知机制</p>
<h3 id="通用模板"><a href="#通用模板" class="headerlink" title="通用模板"></a>通用模板</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitAndNotify</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</span><br><span class="line">        ExecutorService service = Executors.newSingleThreadExecutor();</span><br><span class="line">        Future&lt;String&gt; future= service.submit(<span class="keyword">new</span> TestThread());</span><br><span class="line"></span><br><span class="line">        String key = <span class="string">&quot;key&quot;</span>;</span><br><span class="line">        GuardedObject&lt;String&gt; go = GuardedObject.create(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                GuardedObject.fireEvent(key,future.get());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        </span><br><span class="line">        String res = go.get(t-&gt;t!=<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">GuardedObject</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">        T obj;</span><br><span class="line">        <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">        <span class="keyword">final</span> Condition done = lock.newCondition();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> timeout = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">static</span> Map&lt;Object,GuardedObject&gt; gos = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册GuardedObject  该方法是为了在回调方法中找到原来的GuardedObject</span></span><br><span class="line">        <span class="keyword">static</span> &lt;K&gt; <span class="function">GuardedObject <span class="title">create</span><span class="params">(K key)</span></span>&#123;</span><br><span class="line">            GuardedObject go = <span class="keyword">new</span> GuardedObject&lt;&gt;();</span><br><span class="line">            gos.put(key, go);</span><br><span class="line">            <span class="keyword">return</span> go;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//找到GuardedObject并返回结果</span></span><br><span class="line">        <span class="keyword">static</span> &lt;K,T&gt; <span class="function"><span class="keyword">void</span> <span class="title">fireEvent</span><span class="params">(K key,T obj)</span></span>&#123;</span><br><span class="line">            GuardedObject go = gos.remove(key);</span><br><span class="line">            <span class="keyword">if</span>(go!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                go.onChanged(obj);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取受保护的对象</span></span><br><span class="line">        <span class="function">T <span class="title">get</span><span class="params">(Predicate&lt;T&gt; p)</span></span>&#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">while</span>(!p.test(obj))&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;wating&quot;</span>);</span><br><span class="line">                    done.await(timeout,TimeUnit.SECONDS);</span><br><span class="line">                    System.out.println(<span class="string">&quot;wating out of time&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">            &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> obj;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//事件通知</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onChanged</span><span class="params">(T obj)</span></span>&#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.obj = obj;</span><br><span class="line">                done.signalAll();</span><br><span class="line">            &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TestThread</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>*<span class="number">10</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java并发</category>
      </categories>
      <tags>
        <tag>并发</tag>
        <tag>java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>ThreadLocal</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/ThreadLocal/</url>
    <content><![CDATA[<h3 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h3><p>每个线程有自己的存储空间，避免共享</p>
<h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p>在线程内部有一个ThreadLocalMap变量，当然这个不是map类型，而是entry类型，并且是一个数组</p>
<p>每个数组的元素是一个entry，entry的key始终是ThreadLocal</p>
<h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ul>
<li>每次不使用一个ThreadLocal的时候，将其移除掉，否则会出现内存泄漏的风险</li>
<li>ThreadLocal存在内存泄漏的风险，不管使用强引用还是弱引用，总的来说内存泄漏是由于线程的生命周期过长导致的，因此需要每次用不到ThreadLocal的时候最好将其删除掉</li>
<li>通过threadlocal创建的变量子线程是无法继承的，即无法访问父线程中的threadlocal创建的变量，要想解决该问题使用InheritableThreadLocal,<font color=red>切记不要在线程池中使用该类型的变量</font></li>
</ul>
<p>推荐观看视频：<a href="https://www.bilibili.com/video/BV1N741127FH?p=12&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1N741127FH?p=12&amp;spm_id_from=pageDriver</a></p>
]]></content>
      <categories>
        <category>java并发</category>
      </categories>
      <tags>
        <tag>并发</tag>
        <tag>java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Immutability模式</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Immutability%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h3><p>一种解决并发问题的设计模式：不变性（Immutability）模式</p>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>解决多线程共同读写共享变量的方法（讲道理其实应该只是读共享变量，因为没有修改共享变量的方法）</p>
<h3 id="实现Immutability模式"><a href="#实现Immutability模式" class="headerlink" title="实现Immutability模式"></a>实现Immutability模式</h3><ul>
<li>将一个类所有的属性都设置成final的</li>
<li>只允许存在只读方法</li>
<li>该类本身设置成final的</li>
<li>类的属性如果是引用型,该属性对应的类也需要满足不可变类的条件,且不能提供修改该属性的方法</li>
</ul>
<p>注意：</p>
<ol>
<li>对象的所有属性都是final的，并不能保证不可变性，因此需要明确不变性的边界在哪里</li>
</ol>
<h3 id="Java中使用Immutability模式的例子"><a href="#Java中使用Immutability模式的例子" class="headerlink" title="Java中使用Immutability模式的例子"></a>Java中使用Immutability模式的例子</h3><p>Java语言里面 的String和Long、Integer、Double等基础类型的包装类都具备不可变性，这些对象的线程安全性都是靠不 可变性来保证的</p>
<h3 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h3><p>那么如果在实现Immutability模式的情况下对对象进行修改呢？</p>
<p><strong>创建一个新的不可变对象</strong></p>
<p>如何减少对象的创建？</p>
<p><strong>利用享元模式</strong></p>
<p>利用享元模式创建的对象不适合做锁的原因？（比如Integer 和 String 类型的对象不适合做锁）</p>
<p>因为看上去是相同值是不同的对象，实际上他们是享元模式创建出来的对象，因此其中是同一把锁</p>
]]></content>
      <categories>
        <category>java并发</category>
      </categories>
      <tags>
        <tag>并发</tag>
        <tag>java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>生产者消费者模式</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="生产者和消费者模式的优点"><a href="#生产者和消费者模式的优点" class="headerlink" title="生产者和消费者模式的优点"></a>生产者和消费者模式的优点</h3><ol>
<li><p>解耦</p>
<p>生产者和消费者之间没有任何依赖关系，彼此之间的通信只能通过任务队列</p>
</li>
<li><p><font color=red>异步</font></p>
<p>我觉得这是最重要的一个点：可以平衡生产者和消费者之间速度的差异</p>
</li>
</ol>
<h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ol>
<li><p>支持批量执行以提升性能</p>
<p>例子：</p>
<p>比如说有现在有一个采集日志并插入到数据库中的任务</p>
<ul>
<li><p>常见的做法</p>
<p>采集日志的线程每采集到一条日志就直接插入到数据库中</p>
</li>
<li><p>优化做法</p>
<p>将原来直接insert数据到数据库中的线程作为生产者线程，生产者线程只需要将数据添加到任务队列中，然后消费者线程负责从任务队列中<strong>批量</strong>取出数据并执行插入操作</p>
</li>
</ul>
<p><font color=red>注意：一般常用的任务队列可以用<code>LinkedBlockingQueue</code></font></p>
</li>
</ol>
<p>​        </p>
<ol start="2">
<li><p>分阶段提交</p>
<p>例子：</p>
<p>日志异步刷盘</p>
<ol>
<li>ERROR级别的日志需要立即刷盘；</li>
<li> 数据积累到500条需要立即刷盘；</li>
<li>存在未刷盘数据，且5秒钟内未曾刷盘，需要立即刷盘。</li>
</ol>
<p>将日志采集到一个阻塞队列中（日志采集就是生成者线程），消费者线程取出日志，然后根据日志的异步刷盘规则决定是否需要刷盘</p>
</li>
</ol>
<h3 id="生产者消费者模式如何优雅的终止"><a href="#生产者消费者模式如何优雅的终止" class="headerlink" title="生产者消费者模式如何优雅的终止"></a>生产者消费者模式如何优雅的终止</h3><ul>
<li><p>方法1</p>
<p>可以参考线程的优雅终止</p>
</li>
<li><p>方法2 “毒丸对象”</p>
<p>就是生产者生成一条特殊的任务，消费者线程读到该特殊任务（也就是毒丸对象）时就会终止自身运行</p>
</li>
</ul>
]]></content>
      <categories>
        <category>java并发</category>
      </categories>
      <tags>
        <tag>并发</tag>
        <tag>java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p><strong>核心作用</strong></p>
<pre><code>- 保证一个类只有一个实例，并提供一个访问该实例的全局访问点
</code></pre>
<p><strong>优点</strong></p>
<pre><code>- 减少系统性能开销
</code></pre>
<ul>
<li>在系统设置全局访问点，优化共享资源访问 </li>
</ul>
<p>常见的五种单例模式实现方式：</p>
<ul>
<li><p>主要</p>
<ul>
<li><p>饿汉式（线程安全，调用效率高，不能延时加载）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo01</span> </span>&#123;</span><br><span class="line">    <span class="comment">//当该类进行初始化时就加载该对象，类加载时是天然安全的,但是同时也就无法进行延时加载</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonDemo01 s = <span class="keyword">new</span> SingletonDemo01();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo01</span><span class="params">()</span></span>&#123;&#125;<span class="comment">//保证其他人创建不了该类的实例</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法无需使用同步，故效率高</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SingletonDemo01 <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>懒汉式（线程安全、调用效率不高，可以延时加载）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo02</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonDemo02 s;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo02</span><span class="params">()</span></span>&#123;&#125;<span class="comment">//保证其他人创建不了该类的实例</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法用同步，故效率低这里添加同步关键字是为了防止多线程访问</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> SingletonDemo02 <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s==<span class="keyword">null</span>)</span><br><span class="line">            s = <span class="keyword">new</span> SingletonDemo02();</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<ul>
<li><p>其他</p>
<ul>
<li><p>双重检测锁模式（由于JVM底层内部模型，偶尔会出现问题，不建议使用）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo04</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonDemo04 s  = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo04</span><span class="params">()</span></span>&#123;&#125;<span class="comment">//保证其他人创建不了该类的实例</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//保证第一次加载时使用同步关键字，之后就不再使用同步了</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  SingletonDemo04 <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s==<span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            SingletonDemo04 s1;</span><br><span class="line">            <span class="keyword">synchronized</span> (SingletonDemo04.class)</span><br><span class="line">            &#123;</span><br><span class="line">                s1 = s;</span><br><span class="line">                <span class="keyword">if</span>(s1==<span class="keyword">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (SingletonDemo04.class)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(s1==<span class="keyword">null</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            s1 = <span class="keyword">new</span> SingletonDemo04();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    s = s1;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>静态内部类式（线程安全，调用效率高并且可以延时加载）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    静态内部类实现单例模式</span></span><br><span class="line"><span class="comment">    这样的话可以综合需要时才加载并且效率高不需要使用同步代码块的问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo03</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SingletonDemo03</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态内部类 只有调用了getInstance()时才会初始化对象 因此不会出现多线程安全问题 并且没有同步所以效率高</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonInstance</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SingletonDemo03 instance = <span class="keyword">new</span> SingletonDemo03();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SingletonDemo03 <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonInstance.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>枚举单例（线程安全，调用效率高，不能延时加载，并且可以防止放射或反序列话的漏洞）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    枚举实现单例模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span>  <span class="title">SingletonDemo05</span> </span>&#123;</span><br><span class="line">    <span class="comment">//该元素本身就是单例</span></span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//操作方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h6 id="如何选择？"><a href="#如何选择？" class="headerlink" title="如何选择？"></a>如何选择？</h6><p>不需要延时加载：</p>
<p>​    枚举好于饿汉式</p>
<p>需要延时加载：</p>
<p>​    静态内部类好于懒汉式</p>
<p>常见的应用常见：</p>
<ul>
<li>windows的任务管理器</li>
<li>网站计数器</li>
<li>应用程序的日志</li>
<li>数据库的连接池设计</li>
<li>  操作系统的文件系统</li>
<li>Spring中的Bean</li>
<li>Servlet编程中每个Servlet</li>
<li>Spring MVC中控制器对象</li>
</ul>
<p>效率：</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200713222648.png" alt="image-20200713221811174"></p>
<h5 id="常见的问题以及解决措施"><a href="#常见的问题以及解决措施" class="headerlink" title="常见的问题以及解决措施"></a>常见的问题以及解决措施</h5><p>问题：</p>
<ul>
<li><p>反射</p>
<p> 解决措施：</p>
<ul>
<li><p> 通过计数器判断是否新创建了类</p>
</li>
<li><p>判断类中的成员是否为空，若不为空则抛出异常（该解决措施还是存在一些问题的，特别是没有getInstance（）的情况下直接利用发射，会导致失效）</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo06</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        if(s!=null)//防止利用反射调用该方法</span></span><br><span class="line"><span class="comment">//            throw new RuntimeException();</span></span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">if</span>(count&gt;<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="comment">//保证其他人创建不了该类的实例</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
<li><p>反序列化获得类</p>
<p>解决措施：</p>
<ul>
<li><p>添加该方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在单例模式的类中添加该方法可以使得反序列化时获得的类是原来已经创建的类</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> <span class="keyword">throws</span> ObjectStreamException</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>设计模式 - 创建型模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>线程和线程池优雅中断</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BA%BF%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%BC%98%E9%9B%85%E4%B8%AD%E6%96%AD/</url>
    <content><![CDATA[<h3 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h3><p>终止过程需要分为两个部分： </p>
<ol>
<li>向被中断线程发送终止指令</li>
<li>被中断的线程响应终止指令</li>
</ol>
<h4 id="线程中断"><a href="#线程中断" class="headerlink" title="线程中断"></a>线程中断</h4><ol>
<li><p>为了防止线程在睡眠当中，因此需要将线程从睡眠状态唤醒，需要使用线程的<code>interrupt()</code>方法</p>
<ul>
<li>这一步其实这是为了防止线程在睡眠当中，==发送给它的终止指令没有及时的执行==，而<code>interrupt()</code>可以很好的将线程从休眠状态转到runnable状态（<font color=red>因为线程只有在runnable状态才能转向terminated状态</font>）</li>
<li>当线程在sleep状态的时候如果调用<code>interrupt()</code>会抛出异常，线程的interrupt的状态位为会被重置，因此需要在处理异常的时候再次设置线程的interrupt状态位</li>
</ul>
</li>
<li><p>将<strong>自定义</strong>的线程中断的标志位设置为false</p>
<p>在一些第三方包中，捕获到<code>Thread.sleep()</code>方法抛出的异常没有重新设置线程的中断状态(就是上面1中的第二点)，因此如果只检查线程的interrupt状态位是不能够检查到线程的终止状态的，因为线程的interrupt状态位经过异常之后被重置了但是第三方包没有做处理，因此无法根据线程的interrupt的状态位判断该线程是否结束（在线程睡眠的情况下调用线程<code>interrupt()</code>方法，但是如果线程不在睡眠的情况下调用<code>interrupt()</code>方法是可以根据interrupt状态位判断线程结束的）。</p>
<p>因此我们需要自定义线程的中断标志位</p>
</li>
</ol>
<h4 id="线程池中断"><a href="#线程池中断" class="headerlink" title="线程池中断"></a>线程池中断</h4><ul>
<li><p>shutdown()</p>
<p>拒绝接收新的任务， 但是会等待线程池中正在执行的任务和已经进入阻塞队列的任务都执行完之后才最终关闭线程池</p>
</li>
<li><p>shutdownNow()</p>
<p>线程池执行shutdownNow()后，会拒绝接收新的任务，同时还会中断线程池中正在执行的任务，已经进入阻塞队列的任务也被剥夺了执行的机会，不过这些被剥夺执行机会的任务会作为shutdownNow()方法的返回值返回</p>
</li>
</ul>
]]></content>
      <categories>
        <category>java并发</category>
      </categories>
      <tags>
        <tag>并发</tag>
        <tag>java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>原型模式</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h5 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h5><ul>
<li><p> 通过new产生一个对象比较繁琐，因为需要一行行代码的执行</p>
</li>
<li><p> java中的clone方法以某个对象为原型，直接复制该对象的所有数据，然后根据自己想要在该克隆对象的基础上进行修改得到最终的对象</p>
</li>
<li><p>与new不同之处在于：</p>
<p> new是赋值默认值，但是clone的对象的属性与原型保持一致，并且克隆出的对象不会影响原来的对象</p>
</li>
</ul>
<hr>
<h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><p>​    实现Cloneable接口和clone方法</p>
<hr>
<p><strong><font color = red>注意深拷贝和浅拷贝的区别</font></strong></p>
<p><a href="https://www.cnblogs.com/JamesWang1993/p/8526104.html">深拷贝和浅拷贝的区别</a></p>
<p>有以下几个注意点：</p>
<ul>
<li>实现深拷贝需要重写clone方法，并且clone的类的属性需要继承Cloneable接口</li>
</ul>
<p>深拷贝可以利用反序列化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//利用反序列化实现深拷贝</span></span><br><span class="line">        ByteArrayOutputStream out = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(out);</span><br><span class="line">        objectOutputStream.writeObject(sheep);</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = out.toByteArray();</span><br><span class="line"></span><br><span class="line">        ByteArrayInputStream in = <span class="keyword">new</span> ByteArrayInputStream(bytes);</span><br><span class="line">        ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(in);</span><br><span class="line">        Sheep sheep2 = (Sheep) objectInputStream.readObject();</span><br></pre></td></tr></table></figure>



<hr>
<h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h5><p>需要短时间内创建大量的对象并且new的过程十分耗时，可以采用原型模式</p>
]]></content>
      <categories>
        <category>设计模式 - 创建型模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>工厂模式</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h4><p>实现创建者和调用者的分离</p>
<hr>
<h4 id="核心本质"><a href="#核心本质" class="headerlink" title="核心本质"></a>核心本质</h4><p>实例化对象，用工厂方法代替new操作</p>
<p>将选择实现类、创建对象统一管理和控制。从而将调用者和我们的实现类解耦</p>
<hr>
<h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ul>
<li><p>简单工厂模式（<font color=red>使用最多</font>）</p>
<p>用来生产同一等级结构中的任意产品。（对于新增加的产品需要修改原来的代码）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">createCar</span><span class="params">(String type)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;奥迪&quot;</span>.equals(type))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Audi();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;比亚迪&quot;</span>.equals(type))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Byd();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>工厂方法模式</p>
<p>用来生产同一等级结构中的固定产品。（支持增加任意产品,弊端就是类会比较多，即在不修改已有类的前提下，增加新的工厂类实现扩展）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Car car1 = <span class="keyword">new</span> AudiFactory().createCar();</span><br><span class="line">        Car car2 = <span class="keyword">new</span> BydFactory().createCar();</span><br><span class="line"></span><br><span class="line">        car1.run();</span><br><span class="line">        car2.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>抽象工厂模式（<a href="https://blog.csdn.net/yeyazhishang/article/details/95173103">参考</a>）</p>
<p>用来生产不同产品族的全部产品。（对于新增加的产品无能为力，但是支持增加产品族）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//此处的Car、Engin都是接口</span></span><br><span class="line">        Car car1 =  <span class="keyword">new</span> LuxuryCar();</span><br><span class="line">        Engine e = car1.createEngine();</span><br><span class="line">        e.start();</span><br><span class="line">        </span><br><span class="line">        Car car2 = <span class="keyword">new</span> LowCar();</span><br><span class="line">        Engine engine = car2.createEngine();</span><br><span class="line">        engine.start();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200714103151.png" alt="image-20200714103141807"></p>
<p>​    高端汽车是一个产品族</p>
<p>​    低端汽车也是一个产品族</p>
<p>​    对于单个产品的生产，比如单个发动机的生产可以直接使用简单工厂模式生产</p>
<p>​    对于整个产品族使用抽象工厂模式</p>
<p>如图所示：</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200714103648.png" alt="image-20200714103607340" style="zoom:50%;" /></li>
</ul>
]]></content>
      <categories>
        <category>设计模式 - 创建型模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>享元模式</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h5 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h5><p>​    减少相同或者相似对象的数量从而节约内存空间。</p>
<p>​    比如说下围棋，黑子和白子，我只需要设计出两个类即所有黑子为一个对象，所有的白子为一个对象，不需要所有的棋子都生成对象。相同棋子外面不同的地方就在于棋子的位置不同，因此只需要保证内部状态（棋子的本质（颜色））共享，棋子的 外部状态（棋子的位置）不共享即可。</p>
<p>如图所示：</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200715222447.png" alt="image-20200715222445922"></p>
<hr>
<h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200715222523.png" alt="image-20200715222522494"></p>
<hr>
<h5 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h5><ul>
<li>任何与“池”有关的操作<pre><code>- 线程池
   - 数据库连接池
</code></pre>
</li>
<li>String类的设计<ul>
<li>常量的共享</li>
</ul>
</li>
</ul>
<hr>
<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>​    节省了内存，但是时间运行变长了。</p>
]]></content>
      <categories>
        <category>设计模式 - 结构型模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>代理模式</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h5 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h5><p>​    通过代理，控制对对象的访问</p>
<hr>
<h5 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h5><ul>
<li><p>静态代理（静态定义代理类）</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyPerson</span> <span class="keyword">implements</span> <span class="title">Star</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Star star;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyPerson</span><span class="params">(Star star)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.star = star;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;经纪人本人商谈&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">signContract</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;经纪人本人签合同&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bookTickets</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;经纪人本人订票&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        star.sing();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">collectMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;经纪人本人收尾款&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p>动态代理（动态生成代理类）</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StarHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Star star;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StarHandler</span><span class="params">(Star star)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.star = star;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(method.getName().equals(<span class="string">&quot;sing&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            method.invoke(star,args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;args:&quot;</span>+args);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h5 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h5><pre><code>- 安全代理：屏蔽对真实角色的访问
- 远程代理：通过代理类处理远程方法调用（RMI）
- 延迟加载：先加载轻量级的代理对象，真正需要的时候再加载真实对象（比如说有我们下载图库里面的图片，这些图片都很大，那么在展示的时候我们只展示压缩后的图片，当你真正下载的时候再加载真实对象）
</code></pre>
]]></content>
      <categories>
        <category>设计模式 - 结构型模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>建造者模式</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h5 id="本质："><a href="#本质：" class="headerlink" title="本质："></a>本质：</h5><p>​    分离对象子组建的单独构造（使用Builder）和装配（Director），目的就是为了实现构建复杂的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CooperAirshipDirector</span> <span class="keyword">implements</span> <span class="title">AirshipDirector</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AirshipBuilder airshipBuilder;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CooperAirshipDirector</span><span class="params">(AirshipBuilder airshipBuilder)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.airshipBuilder = airshipBuilder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Airship <span class="title">directAirship</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//构建</span></span><br><span class="line">        Engine e = airshipBuilder.buildEngine();</span><br><span class="line">        OrbitalModule o = airshipBuilder.builderOrbitalModule();</span><br><span class="line">        EscapeTower w = airshipBuilder.buildEscapeTower();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//装配</span></span><br><span class="line">        Airship airship = <span class="keyword">new</span> Airship();</span><br><span class="line">        airship.setEngine(e);</span><br><span class="line">        airship.setOrbitalModule(o);</span><br><span class="line">        airship.setEscape(w);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> airship;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="开发场景"><a href="#开发场景" class="headerlink" title="开发场景"></a>开发场景</h5><pre><code>- StringBuilder类中的append方法
- SQL中的PreparedStatement
- JDOM中的DomBuilder、SAXBuilder
</code></pre>
]]></content>
      <categories>
        <category>设计模式 - 结构型模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>外观模式</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h5 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h5><p>​    为子系统提供统一的入口。封装子系统的复杂性，便于客户端的调用</p>
<p>说到底就是封装好对象供客户使用</p>
]]></content>
      <categories>
        <category>设计模式 - 结构型模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>桥接模式</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>假设有以下场景：</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200715103139.png" alt="image-20200715103121098" style="zoom:50%;" />





<h4 id="问题：我如果想要增加一个新品牌的系列产品，那么我需要增加三个类，很繁琐"><a href="#问题：我如果想要增加一个新品牌的系列产品，那么我需要增加三个类，很繁琐" class="headerlink" title="问题：我如果想要增加一个新品牌的系列产品，那么我需要增加三个类，很繁琐"></a>问题：我如果想要增加一个新品牌的系列产品，那么我需要增加三个类，很繁琐</h4><p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200715103018.png" alt="image-20200715103009960"></p>
<p>总结：</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200715112305.png" alt="image-20200715112000565"></p>
]]></content>
      <categories>
        <category>设计模式 - 结构型模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>组合模式</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h5 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h5><p>​    把部分和整体的关系使用树形结构表示，从而使得客户端可以对于整体和部分使用同一的方式进行 处理。</p>
<hr>
<h5 id="组合模式结构"><a href="#组合模式结构" class="headerlink" title="组合模式结构"></a>组合模式结构</h5><ul>
<li>抽象构件角色：定义叶子和容器的共同点</li>
<li>叶子构件角色：无子节点</li>
<li>容器构件角色：有容器特征，可以包含叶子节点</li>
</ul>
<h3 id="树形结构最适合利用该模式"><a href="#树形结构最适合利用该模式" class="headerlink" title="树形结构最适合利用该模式"></a><strong><font color=red>树形结构最适合利用该模式</font></strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AbstractFile</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">killVirus</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImageFile</span> <span class="keyword">implements</span> <span class="title">AbstractFile</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImageFile</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">killVirus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;图像文件：&quot;</span>+name+<span class="string">&quot;被查杀...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextFile</span> <span class="keyword">implements</span> <span class="title">AbstractFile</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TextFile</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">killVirus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;文本文件：&quot;</span>+name+<span class="string">&quot;被查杀...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VideoFile</span> <span class="keyword">implements</span> <span class="title">AbstractFile</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VideoFile</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">killVirus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;视频文件：&quot;</span>+name+<span class="string">&quot;被查杀...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Folder</span> <span class="keyword">implements</span> <span class="title">AbstractFile</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;AbstractFile&gt; files;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Folder</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        files = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(AbstractFile file)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        files.add(file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(AbstractFile file)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        files.remove(file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AbstractFile <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> files.get(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">killVirus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;文件夹：&quot;</span>+name+<span class="string">&quot;被查杀...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(AbstractFile file:files)</span><br><span class="line">        &#123;</span><br><span class="line">            file.killVirus();<span class="comment">//本身就是递归调用</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>设计模式 - 结构型模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>装饰器模式</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h5 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h5><pre><code>- 动态为对象增加新的功能
- 代替继承，无需通过继承增加子类就能扩展对象的新功能，同时避免类型体系的快速膨胀
</code></pre>
<hr>
<h5 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h5><p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200715161606.png" alt="image-20200715161604863"></p>
<hr>
<p>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICar</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体构件角色  真正对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car_</span> <span class="keyword">implements</span> <span class="title">ICar</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;地上跑&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//装饰器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperCar</span> <span class="keyword">implements</span> <span class="title">ICar</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ICar car;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SuperCar</span><span class="params">(ICar car)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.car = car;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        car.move();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体装饰角色</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WaterCar</span> <span class="keyword">extends</span> <span class="title">SuperCar</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WaterCar</span><span class="params">(ICar car)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(car);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;水里游&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.move();<span class="comment">//继承父类所会的所有功能</span></span><br><span class="line">        swim();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体装饰角色</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SkyCar</span> <span class="keyword">extends</span> <span class="title">SuperCar</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SkyCar</span><span class="params">(ICar car)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(car);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;天上飞&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.move();</span><br><span class="line">        fly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其实实现的本质就是创建的类，一个个往里套</p>
]]></content>
      <categories>
        <category>设计模式 - 结构型模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>适配器模式</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>本质</p>
<p>​    通过一个类作为中间的适配器，完成两个类之间的过渡。</p>
<p>​    比如电脑电源是一个两孔插头，但是只有三口的插座，因此需要一个适配器，将2孔转换为三孔。</p>
<hr>
<p>实现方式：</p>
<ul>
<li><p>继承类</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">Adaptee</span> <span class="keyword">implements</span> <span class="title">Target</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.work();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p>添加成员</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter1</span> <span class="keyword">implements</span> <span class="title">Target</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Adaptee adaptee;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Adapter1</span><span class="params">(Adaptee adaptee)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.adaptee = adaptee;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        adaptee.work();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h5><pre><code>- 旧系统的改造和升级
</code></pre>
<ul>
<li>学习中使用到的场景<pre><code>- java.io.InputStreamReader(InputStream)
   - Java.io.OutputStreamReader(OutputStream)
</code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>设计模式 - 结构型模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>模式</title>
    <url>/2022/01/07/Java%E6%B2%89%E6%80%9D%E5%BD%95/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h4><h5 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h5><p>​    将能够处理同一请求的对象连成一条链，所提交的请求沿着链进行传递，如果链上的某个节点无法处理则提交给下一个节点，如果依然无法处理该请求则依次向后传递。</p>
<h5 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h5><pre><code>- 打牌时轮流出牌
- 接力赛跑
- 奖学金的审批
- 公司公文的审批
</code></pre>
<p><strong><font color = red>类似于链表</font></strong></p>
<hr>
<h4 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h4><h5 id="本质-1"><a href="#本质-1" class="headerlink" title="本质"></a>本质</h5><p>​    java里面的迭代器组件：List/set</p>
<hr>
<h4 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h4><h5 id="本质-2"><a href="#本质-2" class="headerlink" title="本质"></a>本质</h5><p>​    解耦多个同事之间的交互关系。每个对象都持有中介者对象的引用，只跟中介者对象打交道。我们通过中介者统一管理这些交互关系。</p>
<h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><p>​    公司部门中的多个部门：财务部，研发部，市场部。如果这些直接进行打交道就会混乱，因此需要总经理对几个部门之间进行协调，总经理就类似于中介者。</p>
<h5 id="常见场景"><a href="#常见场景" class="headerlink" title="常见场景"></a>常见场景</h5><pre><code>- MVC模式中的C
- java反射中的Method.invoke()
</code></pre>
<hr>
<h4 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h4><h5 id="本质-3"><a href="#本质-3" class="headerlink" title="本质"></a>本质</h5><p>​    将一个请求封装为一个对象，从而可以使我们不同的请求对客户进行参数化。对请求排队或者记录请求日志，以及支持可撤销的操作。</p>
<h5 id="实现结构"><a href="#实现结构" class="headerlink" title="实现结构"></a>实现结构</h5><p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200716153025.png" alt="image-20200716153013483"></p>
<h5 id="常用场景"><a href="#常用场景" class="headerlink" title="常用场景"></a>常用场景</h5><pre><code>- 数据库事务机制的底层实现
- 命令的撤销与恢复
</code></pre>
<hr>
<h4 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h4><h5 id="本质-4"><a href="#本质-4" class="headerlink" title="本质"></a>本质</h5><p>​    解析特殊的语言的设计模式</p>
<p>​    使用较少</p>
<hr>
<h4 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h4><h5 id="本质-5"><a href="#本质-5" class="headerlink" title="本质"></a>本质</h5><p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200716153905.png" alt="image-20200716153903842"></p>
<hr>
<h4 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h4><h5 id="本质-6"><a href="#本质-6" class="headerlink" title="本质"></a>本质</h5><p>​    分离算法，选择实现。</p>
<p>​    对应于解决某一个问题的算法族，允许用户从该算法族中任选一个算法解决某一问题，同时可以方便的更换算法或者增加新的算法，并由客户决定调用哪个算法。</p>
<hr>
<h4 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h4><h5 id="本质-7"><a href="#本质-7" class="headerlink" title="本质"></a>本质</h5><p>​        实现一个算法时步骤很固定，但是某些部分很容易发生改变，易变部分可以抽象出来，供子类实现    </p>
<h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h5><ul>
<li>数据库访问的封装</li>
<li>Junit单元测试</li>
<li>servlet中doGet/doPost调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BankTemplateMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeNumber</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;取号...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">transact</span><span class="params">()</span></span>;<span class="comment">//具体业务，钩子方法</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">evaluate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;反馈评分...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span><span class="comment">//不可以修改 因为是一个骨架，是固定的流程</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.takeNumber();</span><br><span class="line">        <span class="keyword">this</span>.transact();</span><br><span class="line">        <span class="keyword">this</span>.evaluate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h4><h5 id="本质-8"><a href="#本质-8" class="headerlink" title="本质"></a>本质</h5><p>​    用于解决系统中复杂对象的状态转换以及不同状态下行为的封装问题</p>
<p>​    </p>
<h5 id="实现结构-1"><a href="#实现结构-1" class="headerlink" title="实现结构"></a>实现结构</h5><ul>
<li>Context环境类<pre><code>    - 环境类中维护一个State对象，他定义了当前的状态
</code></pre>
</li>
<li>State抽象类</li>
<li>ConcentrateState具体状态类<ul>
<li>每一个类封装了一个状态对应的行为</li>
</ul>
</li>
</ul>
<hr>
<h4 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h4><h5 id="本质-9"><a href="#本质-9" class="headerlink" title="本质"></a>本质</h5><p>​    让观察者能够及时了解到对象发生的变化。（1：N）</p>
<p>​    有两种方式：</p>
<pre><code>        - 推  对象主动向观察者发送新的状态

    -  拉  观察者主动获取对象的状态
</code></pre>
<h5 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h5><pre><code>- 聊天室
- 网络游戏
- 邮件订阅
- Servlet监听器实现
- Android中广播机制
- 京东商城群发商品打折信息
</code></pre>
<hr>
<h4 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h4><h5 id="本质-10"><a href="#本质-10" class="headerlink" title="本质"></a>本质</h5><p>​    保存某个对象内部状态的拷贝，以便出问题时后期及时恢复到先前的状态</p>
<p>​    </p>
<h5 id="实现结构-2"><a href="#实现结构-2" class="headerlink" title="实现结构"></a>实现结构</h5><p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20200717102504.png" alt="image-20200717102503333"></p>
]]></content>
      <categories>
        <category>设计模式 - 行为模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>AOP</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Spring/spring%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/AOP/</url>
    <content><![CDATA[<h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li><p>导入aop模块</p>
</li>
<li><p>定义一个业务逻辑类</p>
</li>
<li><p>定义一个日志切面类</p>
<p>通知方法：</p>
<p>前置通知（@Before）：在目标方法运行之前运行</p>
<p>后置通知（@After）：在目标方法运行结束之后运行，无论方法是否正常结束</p>
<p>返回通知（@AfterReturning）：在目标方法正常返回之后运行（在后置通知之前运行）</p>
<p>异常通知（@AfterThrowing）：在目标方法出现异常之后运行（在后置通知之前运行）</p>
<p>环绕通知（@Around）：动态代理，手动推进目标方法运行（jointPoint.procced() ）</p>
</li>
<li><p>给切面类的目标方法标志何时何地运行</p>
</li>
<li><p>将切面类和业务逻辑类都加入到容器中</p>
</li>
<li><p>必须告诉Spring哪个类是切面类（给切面类加上一个注解：@Aspect）</p>
</li>
<li><p>给配置类加上@EnableAspectJAutoProxy（开启基于注解的aop模型）</p>
</li>
</ol>
<p>例子：</p>
<p>AOP类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspect</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 抽取公共切入点的表达式</span></span><br><span class="line"><span class="comment">     * 1. 本地引用</span></span><br><span class="line"><span class="comment">     * 2.其他切面类引用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution (public int func.MathCalculator.*(..))&quot; )</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointCut</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logStart</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        System.out.println(<span class="string">&quot;除法运行 。。。。@Before &quot;</span>+ Arrays.toString(args));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//其他切面类引用</span></span><br><span class="line">    <span class="meta">@After(&quot;DIY.LogAspect.pointCut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logEnd</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;除法运行 。。。。@After &quot;</span>+joinPoint.getSignature().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//joint必须出现在第一位</span></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;pointCut()&quot;,returning = &quot;result&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logReturning</span><span class="params">(JoinPoint joinPoint,Object result)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;除法运行 。。。。@AfterReturning &quot;</span>+result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;pointCut()&quot;,throwing = &quot;exception&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logException</span><span class="params">(Exception exception)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;除法运行 。。。。@AfterThrowing &quot;</span>+exception);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>业务类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathCalculator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;div --- func&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> i/j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span> <span class="comment">//必须要加上这个，否则就不会自动开启aop</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mainConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LogAspect <span class="title">aspect</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LogAspect();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MathCalculator <span class="title">mathCalculator</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MathCalculator();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationStart</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext configApplicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(mainConfig.class);</span><br><span class="line">        MathCalculator bean = configApplicationContext.getBean(MathCalculator.class); <span class="comment">//必须从容器中获取，直接new的类无法启动AOP</span></span><br><span class="line">        bean.div(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="原理（看给容器中注册了什么组件，这个组件何时工作以及功能是什么）"><a href="#原理（看给容器中注册了什么组件，这个组件何时工作以及功能是什么）" class="headerlink" title="原理（看给容器中注册了什么组件，这个组件何时工作以及功能是什么）"></a>原理（看给容器中注册了什么组件，这个组件何时工作以及功能是什么）</h3><blockquote>
<p>注册了什么组件</p>
</blockquote>
<p>@EnableAspectJAutoProxy （开启aop注解功能）</p>
<ol>
<li><p>@Import(AspectJAutoProxyRegister.class):给容器中导入AspectJAutoProxyRegister.class</p>
<p>利用AspectJAutoProxyRegister自定义发给容器中注册bean，主要是BeanDefinition信息</p>
<p>internalAutoPorxyCreator=AnnotationAwareAspectJAutoProxyCreator</p>
<p>给容器中注册一个AnnotationAwareAspectJAutoProxyCreator</p>
</li>
<li><p>AnnotationAwareAspectJAutoProxyCreator</p>
<p>AnnotationAwareAspectJAutoProxyCreator</p>
<p>​    -&gt; AspectJAwareAdvisorAutoProxyCreator</p>
<p>​        -&gt;AbstractAdvisorAutoProxyCreator</p>
<p>​            -&gt;AbstractAutoProxyCreator</p>
<p>​                implements SmartInstantiationAwareBeanPostProcessor、BeanFactoryAware </p>
<p>​            关注后置处理器（在bean初始化前后做事情）、自动装配BeanFactory </p>
</li>
</ol>
<blockquote>
<p>做了哪些事情</p>
</blockquote>
<h5 id="在AbstractAutoProxyCreator中"><a href="#在AbstractAutoProxyCreator中" class="headerlink" title="在AbstractAutoProxyCreator中"></a>在AbstractAutoProxyCreator中</h5><ol>
<li><p>重写BeanFactoryAware中的方法</p>
<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210326094305845.png" alt="image-20210326094305845" style="zoom:50%;" /></li>
<li><p>重写SmartInstantiationAwareBeanPostProcessor中的方法</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210326094401.png" alt="image-20210326094356719" style="zoom:50%;" /></li>
</ol>
<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210326094442401.png" alt="image-20210326094442401" style="zoom:50%;" />



<h5 id="在AbstractAdvisorAutoProxyCreator中"><a href="#在AbstractAdvisorAutoProxyCreator中" class="headerlink" title="在AbstractAdvisorAutoProxyCreator中"></a>在AbstractAdvisorAutoProxyCreator中</h5><ol>
<li><p>重写setBeanFactory方法，在该方法中会调用initBeanFactory方法</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210326094721.png" alt="image-20210326094715926" style="zoom:50%;" /></li>
</ol>
<h5 id="在AspectJAwareAdvisorAutoProxyCreator中"><a href="#在AspectJAwareAdvisorAutoProxyCreator中" class="headerlink" title="在AspectJAwareAdvisorAutoProxyCreator中"></a>在AspectJAwareAdvisorAutoProxyCreator中</h5><p>没有与setFactory和BeanPostProcessor相关的方法</p>
<h5 id="在AnnotationAwareAspectJAutoProxyCreator中"><a href="#在AnnotationAwareAspectJAutoProxyCreator中" class="headerlink" title="在AnnotationAwareAspectJAutoProxyCreator中"></a>在AnnotationAwareAspectJAutoProxyCreator中</h5><ol>
<li><p>重写了AbstractAdvisorAutoProxyCreator中setBeanFactory中的initBeanFactory</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210326095010.png" alt="image-20210326095004545" style="zoom:50%;" /></li>
</ol>
<blockquote>
<p>创建和注册AnnotationAwareAspectJAutoProxyCreator流程</p>
</blockquote>
<ol>
<li><p>传入配置类，创建ioc容器</p>
</li>
<li><p>注册配置类，调用refresh() 刷新容器</p>
</li>
<li><p>registerBeanPostProcessors(beanFactory);注册bean的后置处理器来方便拦截bean的创建</p>
<ol>
<li><p>先获取ioc容器已经定义了的需要创建对象的所有BeanPostProcessor （解析配置类时需要注册的BeanPostProcessor，例如此处的@EnableAspectJAutoProxy），如下图所示</p>
<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210326095625322.png" alt="image-20210326095625322" style="zoom:50%;" /></li>
<li><p>给容器中加别的BeanPostProcessor</p>
</li>
<li><p>优先注册实现了PriorityOrdered接口的BeanPostProcessor</p>
</li>
<li><p>再给容器中注册实现了Ordered接口的BeanPostProcessor：<strong>我们的AnnotationAwareAspectJAutoProxyCreator父类实现了Ordered接口</strong></p>
</li>
<li><p>最后注册没有实现优先级接口的BeanPostProcessor </p>
</li>
<li><p>注册BeanPostProcessor，实际上就是创建BeanPostProcessor对象保存在容器中</p>
<p>创建internalAutoProxyCreator的BeanPostProcessor【AnnotationAwareAspectJAutoProxyCreator】</p>
<ol>
<li>创建Bean的实例也就是AnnotationAwareAspectJAutoProxyCreator的实例</li>
<li>populateBean：给bean的各种属性赋值</li>
<li>initializeBean：初始化bean<ol>
<li>invokeAwareMethods():处理Aware接口的方法回调 <strong>我们的AnnotationAwareAspectJAutoProxyCreator的父类实现了BeanFactoryAware的接口</strong></li>
<li>applyBeanPostProcessorBeforeInitialization()：应用后置处理器的postPorcessorBeforeInitialization（）</li>
<li>invokeInitMethods(): 执行自定义的初始化方法</li>
<li>applyBeanPostProcessorAfterInitialization(): 执行后置处理器的postProcessorAfterInitialization（）</li>
</ol>
</li>
<li>BeanPostProcessor(AnnotationAwareAspectJAutoProxyCreator)创建成功：aspectJAdvisorBuilder</li>
</ol>
</li>
<li><p>把BeanPostProcessor注册到BeanFactory中，调用BeanFactory.addBeanPostProcessor(postProcessor)</p>
</li>
</ol>
</li>
<li><p>finishBeanFactoryInitialization（beanFactory);完成BeanFactory初始化工作，创建剩下的单实例Bean</p>
<ol>
<li><p>遍历获取容器中所有的Bean，依次创建对象getBean(beanName)</p>
<p>getBean-&gt;doGetBean()-&gt;getSingleton()-&gt;</p>
</li>
<li><p>创建Bean：<strong>AnnotationAwareAspectJAutoProxyCreator在所有bean创建之前会有一个拦截，InstantiationAwareBeanPostProcessor，会调用PostProcessBeforeInstantiation（）</strong></p>
<ol>
<li><p>先从缓存中获取当前bean，如果能获取到，说明bean是之前被创建过的，直接使用，否则再创建</p>
<p>只要缓存好的Bean都会被缓存起来</p>
</li>
<li><p>createBean() 创建bean:     <strong>AnnotationAwareAspectJAutoProxyCreator会在任何bean创建之前先尝试返回bean的实例</strong></p>
<p>如下图所示：</p>
<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210326114738850.png" alt="image-20210326114738850" style="zoom:50%;" />

<p><font color=red>【BeanPostProcessor是在Bean对象创建完成初始化前后调用的】</font></p>
<p><font color=red>【InstantiationAwareBeanPostProcessor是在创建Bean之前先尝试使用后置处理器返回对象的】</font></p>
<ol>
<li><p>resolveBeforeInstantiation(beanName,mbdToUser);解析BeforeInstantiation</p>
<p>希望后置处理器在此能返回一个代理对象，如果能返回代理对象就使用，如果不能就继续</p>
<ol>
<li><p>后置处理器先尝试返回对象</p>
<p>bean = applyBeanPostProcessorBeforeInstantiation(xxx);</p>
<p>拿到所有后置处理器，如果是InstantiationAwareBeanPostProcessor就执行postProcessBeforeinstantiation</p>
</li>
</ol>
<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210326113931654.png" alt="image-20210326113931654" style="zoom:50%;" /></li>
<li><p>doCreateBean(beanName,mbdToUse,args);真正去创建一个bean，和3.6的流程是一样的</p>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<p>​    </p>
<blockquote>
<p>创建AOP</p>
</blockquote>
<p>如上面所说</p>
<ol>
<li><p>每一个bean创建之前，调用postProcessBeforeInstantiation();</p>
<p>我们只关心要代理的类（MathCaculator）和切面类（LogAspect）</p>
<ol>
<li><p>判断当前bean是否在advisedBeans中（该集合保存了所有需要增强的bean）</p>
</li>
<li><p>判断当前bean是否是基础类型的Advice、Pointcut、Advisor、AOPInfrastructureBean，或者是否是切面（@Aspect）</p>
</li>
<li><p>是否需要跳过</p>
<ol>
<li><p>获取候选的增强器（切面里面的通知方法）【List&lt; Advisor &gt; candidateAdvisors】</p>
<p>每一个封装的通知方法的增强器是InstantiationModelAwarePointcutAdvisor；</p>
<p>然后判断每一个增强器是否是AspectJointcutAdvisor类型的；如果是返回true</p>
</li>
<li><p>永远返回false，因为此处在我们的案例中增强器的类型是InstantiationModelAwarePointcutAdvisor，不是AspectJointcutAdvisor类型</p>
</li>
</ol>
</li>
</ol>
</li>
<li><p>创建对象，使用PostProcessAfterinitialization</p>
<p>​                return wrapInfNecessary(bean,beanName,cacheKey);//包装如果需要的情况下</p>
<ol>
<li><p>获取当前bean的所有增强器（通知方法） specificInterceptors</p>
<ol>
<li><p>找到候选的的所有增强器（找哪些通知方法是需要切入当前bean方法的（根据）@Pointcut、@Before等注解的表达式判断）</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210326170027.png" alt="image-20210326170025265"></p>
</li>
<li><p>获取到能在bean使用的增强器</p>
</li>
<li><p>给增强器排序</p>
</li>
</ol>
</li>
<li><p>保存当前bean在advisedBeans中</p>
</li>
<li><p>如果当前bean需要增强，创建当前bean的代理对象</p>
<ol>
<li><p>获取所有增强器（通知方法）</p>
</li>
<li><p>保存到proxyFactory</p>
</li>
<li><p>创建代理对象：Spring自动决定</p>
<p>JdkDynamicAopProxy（config）；jdk动态代理</p>
<p>ObjenesisCglibAopProxy（config）：cglib动态代理</p>
</li>
</ol>
</li>
<li><p>给容器中返回当前组件使用cglib增强的代理对象</p>
</li>
<li><p><strong>以后容器中获取到的就是这个组件的代理对象，执行目标方法的时候，代理对象就会执行通知方法的流程</strong></p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210326171051.png" alt="image-20210326171045255" style="zoom:50%;" /></li>
</ol>
</li>
<li><p>目标方法执行</p>
<p>容器中保存了组件的代理对象（cglib增强的对象），这个对象里面保存了详细的信息（比如增强器，目标对象，xxx）</p>
<ol>
<li><p>CglibAopProxy.intercept()；拦截目标方法的执行</p>
</li>
<li><p>根据ProxyFactory对象获取将要执行的目标方法拦截器链</p>
<p>List&lt; Object &gt; chain = this.advised.getInterceptorAndDynamicInterceptionAdvice</p>
<ol>
<li><p>List&lt; Object &gt; interceptorList保存所有拦截器  默认是5个—–Before、After、AfterThrowing、AfterReturning以及自带的ExposeInvocationInterceptor</p>
</li>
<li><p>遍历所有的增强器，将其转为Interceptor</p>
<p>registry.getInterceptors(advisor)</p>
</li>
<li><p>将增强器转为List&lt; MethodInteceptor &gt;</p>
<p>如果是MethodInteceptor，直接加入到集合中</p>
<p>如果不是，使用AdvisorAdapter将增强器转为MethodInterceptor （针对不同的对象有不同的AdvisorAdapter进行转化）</p>
<p>转换完成后返回MethodInterceptor数组</p>
</li>
</ol>
</li>
<li><p>如果没有拦截器链，则直接执行目标方法</p>
<p>拦截器链（每一个通知方法又被包装为方法拦截器，利用MethodInterceptor机制）</p>
</li>
<li><p>如果有拦截器链，把需要执行的目标对象，目标方法，拦截器链等信息传入创建一个CglibMethodInvocation对象并调用Object retVal = mi.proceed();</p>
</li>
<li><p>拦截器链的触发过程</p>
<ol>
<li><p>如果没有拦截器执行目标方法，或者拦截器的索引和拦截器数组-1大小一样（指定了最后一个拦截器），则执行目标方法</p>
</li>
<li><p>链式获取每一个拦截器，拦截器执行invoke方法，每一个拦截器等待下一个拦截器执行完成以后再来执行</p>
<p>拦截器链的机制，保证通知方法与目标方法的执行顺序</p>
</li>
</ol>
<img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210326174717520.png" alt="image-20210326174717520" style="zoom:50%;" /></li>
</ol>
<p>​            <font color=red>注意：spring5在@After标注的方法执行顺序变为了最后一个</font></p>
</li>
</ol>
<blockquote>
<p>总结</p>
</blockquote>
<ol>
<li><p>@EnableAspectJAutoProxy 开启AOP功能</p>
</li>
<li><p>@EnableAspectJAutoProxy会给容器注册一个组件：AnnotationAwareAspectJAutoProxyCreator</p>
</li>
<li><p>AnnotationAwareAspectJAutoProxyCreator是一个后置处理器</p>
</li>
<li><p>容器创建流程</p>
<ol>
<li><p>registerBeanPostProcessors（）注册后置处理器，创建AnnotationAwareAspectJAutoProxyCreator</p>
</li>
<li><p>finishBeanFactoryInitialization（）初始化生效的单实例bean</p>
<ol>
<li><p>创建业务逻辑组件和切面组件</p>
</li>
<li><p>AnnotationAwareAspectJAutoProxyCreator拦截组件的创建过程</p>
</li>
<li><p>组件创建完之后，判断组件是否需要增强</p>
<ul>
<li><p>是</p>
<p>切面的通知方法，包装成增强器（Advisor）给业务逻辑组件创建一个代理对象（Cglib代理对象）</p>
</li>
</ul>
</li>
</ol>
</li>
</ol>
</li>
<li><p>执行目标方法</p>
<ol>
<li><p>代理对象执行目标方法</p>
</li>
<li><p>CglibAopProxy.intercept()</p>
<ol>
<li><p>得到目标方法的拦截器链（增强器包装成拦截器MethodInterceptor）</p>
</li>
<li><p>利用拦截器的链式机制，一次进入每一个拦截器进行执行</p>
</li>
<li><p>效果</p>
<p>正常执行：前置通知-&gt;目标方法-&gt;返回通知-&gt;后置通知</p>
<p>异常执行：前置通知-&gt;目标方法-&gt;异常通知-&gt;后置通知</p>
</li>
</ol>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Spring源码</tag>
      </tags>
  </entry>
  <entry>
    <title>ApplicationListener</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Spring/spring%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/ApplicationListener/</url>
    <content><![CDATA[<h3 id="ApplicationListener-监听器中发布的事件"><a href="#ApplicationListener-监听器中发布的事件" class="headerlink" title="ApplicationListener 监听器中发布的事件"></a>ApplicationListener 监听器中发布的事件</h3><p>public interface ApplicationListener&lt; E extends ApplicationEvent&gt;</p>
<p>监听ApplicationEvent及其下面的子事件</p>
<p>步骤：</p>
<ol>
<li><p>写一个监听器来监听某个事件（ApplicationEvent及其子类）</p>
<p> 或者</p>
<p> 在方法上标注</p>
<p> @EventListener</p>
<p> 原理：使用EventListenerMethodProcessor处理器解析方法上的@EventListener</p>
<p> @EventListener底层原理</p>
<p> SmartInitializingSingleton原理：-&gt;afterSingletonsInstantiated（）；</p>
<ol>
<li><p>ioc容器创建对象并refresh（）</p>
</li>
<li><p>finishBeanFactoryInitialization（BeanFactory）；初始化剩下的单实例bean</p>
<ol>
<li><p>先创建所有的单实例bean:getBean()</p>
</li>
<li><p>获取所有创建好的单实例bean，判断是否是SmartInitializingSingleton类型的</p>
<p>如果是就调用afterSingletonsInstantiated()</p>
</li>
</ol>
</li>
</ol>
</li>
<li><p> 把监听器加入到容器中</p>
</li>
<li><p>只要容器中有相关事件的发布，我们就能监听到这个事前：</p>
<ul>
<li>ContextRefreshedEvent：容器刷新完成（所有bean都完全创建）会发布这个事件</li>
<li>ContextClosedEvent：关闭容器会发布这个事件</li>
</ul>
</li>
</ol>
<pre><code>4. 发布事件

application.publishEvent()
</code></pre>
<p>原理：</p>
<ol>
<li><p>ContextRefreshedEvent事件：</p>
<ol>
<li>创建容器对象，refresh（）</li>
<li>finishRefresh()；容器刷新完成自己也会发布ContextRefreshedEvent事件</li>
</ol>
</li>
<li><p>自己发布事件</p>
<p>publishEvent（new ContextRefreshedEvent(this)）</p>
<ol>
<li><p>获取时间的多播器（派发器): getApplicationEventMulticaster()</p>
</li>
<li><p>multicastEvent派发事件</p>
</li>
<li><p>获取到所有的ApplicationListener</p>
<p>for(final ApplicationListener&lt;?&gt; listener : getApplicationListeners（event，type）)</p>
<ol>
<li><p>如果有Executor，就可以支持使用Executor进行异步派发</p>
<p> Executor executor = getTaskExecutor()</p>
</li>
<li><p>否则同步的方式直接执行listener方法：invokeListener（listener，event）</p>
<p>拿到listener回调ApplicationEvent方法</p>
</li>
</ol>
</li>
</ol>
</li>
<li><p>容器关闭也会发布ContextClosedEvent事件</p>
</li>
</ol>
<p>事件多播器（派发器）</p>
<ol>
<li><p>容器创建对象：refresh（）</p>
</li>
<li><p>initApplicationEventMulticaster（）；初始化ApplicationEventMulticaster</p>
<ol>
<li><p> 先去容器中有没有 id = ApplicationEventMulticaster 的组件</p>
</li>
<li><p>如果没有this.applicationEventMulticaster = new SimpleApplicationEventMulticaster（BeanFactory）</p>
<p> 并且加入到容器中，我们就可以在其他组件派发时间，自动注入这个ApplicationEventMulticaster</p>
</li>
</ol>
</li>
</ol>
<p>如何找到容器中有哪些监听器？</p>
<ol>
<li><p>容器创建对象：refresh（）</p>
</li>
<li><p>registerListeners()</p>
<p>从容器中拿到所有的监听器，把他们注册到ApplicationEventMulticaster中</p>
<p>String[] listenerBeanNames = getBeanNamesForType(ApplicationListener.class，true, false)</p>
<p>也就是我们implement implements ApplicationListener&lt; ApplicationEvent &gt;的类</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Spring源码</tag>
      </tags>
  </entry>
  <entry>
    <title>BeanFactoryPostProcessor</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Spring/spring%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/BeanFactoryPostProcessor/</url>
    <content><![CDATA[<h3 id="BeanFactoryPostProcessor"><a href="#BeanFactoryPostProcessor" class="headerlink" title="BeanFactoryPostProcessor"></a>BeanFactoryPostProcessor</h3><p>BeanFactory的后置处理器</p>
<p><font color=red>生效时机：在BeanFactory标准初始化之后调用，来定制和修改BeanFactory的内容 ，所有的Bean定义已经保存加载到BeanFactory，但是Bean的实例还未进行创建</font></p>
<p>流程：</p>
<ol>
<li><p> ioc容器创建对象</p>
</li>
<li><p>invokeBeanFactoryPostProcessors(beanFactory);执行BeanFactoryPostProcesor</p>
<p> 如何找到所有的BeanFactoryPostProcessor并执行他们的方法：</p>
<pre><code> 1. 直接在BeanFactory中找到所有类型时BeanFactoryPostProcessor的组件并执行他们的方法
 2. 在初始化创建其他组件前面执行
</code></pre>
</li>
</ol>
<h3 id="BeanDefinitionRegistryPostProcessor"><a href="#BeanDefinitionRegistryPostProcessor" class="headerlink" title="BeanDefinitionRegistryPostProcessor"></a>BeanDefinitionRegistryPostProcessor</h3><p>是BeanFactoryPostProcessor的子类</p>
<p>postProcessorBeanDefinitionRegistry()</p>
<p><font color=red>生效时机：在所有bean定义的信息==将要==被加载，bean实例还未创建的时候</font></p>
<p>因此生效 时机应该是在BeanFactoryPostProcessor之前</p>
<p>利用BeanDefinitionRegistryPostProcessor给容器中再额外添加一些组件</p>
<p>流程：</p>
<pre><code>1. ioc创建对象
2. refresh（）——&gt;invokeBeanFactoryPostProcessors(beanFactory)
3. 从容器中获取到所有的BeanDefinitionRegistryPostProcessor组件
 1. 依次触发所有的PostProcessorBeanDefinitionRegistry()方法
 2. 再来触发postProcessBeanFactory()方法
4. 再来从容器中找到BeanFactoryPostProcessor组件，然后依次触发PostProcessorBeanFactory（）方法
</code></pre>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Spring源码</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Bean</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Spring/spring%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/Spring%20Bean/</url>
    <content><![CDATA[<h2 id="BeanDefintion"><a href="#BeanDefintion" class="headerlink" title="BeanDefintion"></a>BeanDefintion</h2><h3 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h3><p>Spring Framework中定义Bean的配置元信息接口，包含：</p>
<ul>
<li>Bean的类名</li>
<li>Bean行为的配置元素，比如作用域、自动绑定模式、生命周期的回调（初始化、回调）等</li>
<li>其他Bean引用</li>
<li>配置设置，比如Bean的属性 </li>
</ul>
<h3 id="BeanDefintion元信息"><a href="#BeanDefintion元信息" class="headerlink" title="BeanDefintion元信息"></a>BeanDefintion元信息</h3><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20220103180059.png" alt="image-20220103180042386" style="zoom:50%;" />



<h3 id="BeanDefintion构建方式"><a href="#BeanDefintion构建方式" class="headerlink" title="BeanDefintion构建方式"></a>BeanDefintion构建方式</h3><ol>
<li><p>BeanDefintionBuilder</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过BeanDefinitionBuilder构建 其实该类本质上也是调用的AbstractBeanDefinition里面的相关设置方法来进行操作的</span></span><br><span class="line">BeanDefinitionBuilder beanDefinitionBuilder = BeanDefinitionBuilder.genericBeanDefinition(User.class);</span><br><span class="line"><span class="comment">//设置属性</span></span><br><span class="line">beanDefinitionBuilder.addPropertyValue(<span class="string">&quot;id&quot;</span>,<span class="number">1</span>);</span><br><span class="line">beanDefinitionBuilder.addPropertyValue(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;Cooper&quot;</span>);</span><br><span class="line"><span class="comment">//获取实例，获取到之后还可以进行对其自身修改，并非是最终的状态</span></span><br><span class="line">BeanDefinition beanDefinition = beanDefinitionBuilder.getBeanDefinition();</span><br><span class="line">System.out.println(beanDefinition);</span><br></pre></td></tr></table></figure></li>
<li><p>AbstractBeanDefinition以及派生类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过AbstractBeanDefinition 以及派生类</span></span><br><span class="line">GenericBeanDefinition genericBeanDefinition = <span class="keyword">new</span> GenericBeanDefinition();</span><br><span class="line">genericBeanDefinition.setBeanClass(User.class);</span><br><span class="line">MutablePropertyValues values = <span class="keyword">new</span> MutablePropertyValues();</span><br><span class="line">values.add(<span class="string">&quot;id&quot;</span>,<span class="number">1</span>).</span><br><span class="line">        add(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;Cooper&quot;</span>);</span><br><span class="line">genericBeanDefinition.setPropertyValues(values);</span><br><span class="line">System.out.println(genericBeanDefinition);</span><br><span class="line"></span><br><span class="line">System.out.println(beanDefinition==genericBeanDefinition);</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Bean的名称"><a href="#Bean的名称" class="headerlink" title="Bean的名称"></a>Bean的名称</h3><ul>
<li>指定名称</li>
<li>不指定名称默认会调用命名方法（<code>defaultNameGenerator</code>），其名称为（类型+<code>#</code> +count） （count是从0开始计数的）</li>
</ul>
<h2 id="BeanDefinition注册"><a href="#BeanDefinition注册" class="headerlink" title="BeanDefinition注册"></a>BeanDefinition注册</h2><h4 id="XML-配置元信息"><a href="#XML-配置元信息" class="headerlink" title="XML 配置元信息"></a>XML 配置元信息</h4><ul>
<li><bean name="..." /></li>
</ul>
<h4 id="Java注解配置元信息"><a href="#Java注解配置元信息" class="headerlink" title="Java注解配置元信息"></a>Java注解配置元信息</h4><ul>
<li><p>@Bean</p>
</li>
<li><p>@Component</p>
</li>
<li><p>@Import</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(AnnotationBeanDefinitionDemo.class)</span> <span class="comment">//通过Import进行导入</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationBeanDefinitionDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext configApplicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext();</span><br><span class="line">        configApplicationContext.register(Config.class);</span><br><span class="line"></span><br><span class="line">        configApplicationContext.refresh();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Config 类型的所有Beans&quot;</span> +configApplicationContext.getBeansOfType(Config.class));</span><br><span class="line">        System.out.println(<span class="string">&quot;User 类型的所有Beans&quot;</span>+ configApplicationContext.getBeansOfType(User.class));</span><br><span class="line">        <span class="comment">//自己不能导入自己，因此查询出来是没有的</span></span><br><span class="line">        System.out.println(<span class="string">&quot;AnnotationBeanDefinitionDemo 类型所有的Beans&quot;</span> +configApplicationContext.getBeansOfType(AnnotationBeanDefinitionDemo.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过@Component定义</span></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span></span>&#123;</span><br><span class="line">        <span class="comment">//通过@Bean定义</span></span><br><span class="line">        <span class="meta">@Bean(name=&#123;&quot;user&quot;,&quot;cooper-user&quot;&#125;)</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">            User user = <span class="keyword">new</span> User();</span><br><span class="line">            user.setId(<span class="number">1</span>);</span><br><span class="line">            user.setName(<span class="string">&quot;Cooper&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> user;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="Java-API配置元信息"><a href="#Java-API配置元信息" class="headerlink" title="Java API配置元信息"></a>Java API配置元信息</h4><ul>
<li><p>命名方式</p>
<p>BeanDefinitionRegistry</p>
</li>
<li><p>非命名方式</p>
<p>BeanDefinitionReaderUtils</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerBeanDefinition</span><span class="params">(BeanDefinitionRegistry registry,String beanName,Class&lt;?&gt; beanClass)</span></span>&#123;</span><br><span class="line">    BeanDefinitionBuilder beanDefinitionBuilder = BeanDefinitionBuilder.genericBeanDefinition(beanClass);</span><br><span class="line">    beanDefinitionBuilder.addPropertyValue(<span class="string">&quot;id&quot;</span>,<span class="number">1</span>)</span><br><span class="line">            .addPropertyValue(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;Cooper&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(StringUtils.hasText(beanName))&#123;</span><br><span class="line">        <span class="comment">//命名方式</span></span><br><span class="line">        registry.registerBeanDefinition(beanName,beanDefinitionBuilder.getBeanDefinition());</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//非命名方式</span></span><br><span class="line">        BeanDefinitionReaderUtils.registerWithGeneratedName(beanDefinitionBuilder.getBeanDefinition(),registry);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>配置类方式</p>
<p>AnnotatedBeanDefinitionReader</p>
</li>
</ul>
<h2 id="实例化Spring-Bean"><a href="#实例化Spring-Bean" class="headerlink" title="实例化Spring Bean"></a>实例化Spring Bean</h2><h3 id="常规方式"><a href="#常规方式" class="headerlink" title="常规方式"></a>常规方式</h3><h4 id="构造器（配置元信息XML、java注解和java-API）"><a href="#构造器（配置元信息XML、java注解和java-API）" class="headerlink" title="构造器（配置元信息XML、java注解和java API）"></a>构造器（配置元信息XML、java注解和java API）</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user-by-static-method&quot;</span> <span class="attr">class</span>=<span class="string">&quot;pojo.User&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;createUser&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> User <span class="title">createUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">1</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;Cooper&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="静态工厂方法（配置元信息：XML和Java-API）"><a href="#静态工厂方法（配置元信息：XML和Java-API）" class="headerlink" title="静态工厂方法（配置元信息：XML和Java API）"></a>静态工厂方法（配置元信息：XML和Java API）</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    实例方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user-by-instance-method&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;userFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;createUser&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;factory.DefaultUserFactory&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> User <span class="title">createUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> User.createUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultUserFactory</span> <span class="keyword">implements</span> <span class="title">UserFactory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Bean工厂方法（配置元信息：XML和Java-API）"><a href="#Bean工厂方法（配置元信息：XML和Java-API）" class="headerlink" title="Bean工厂方法（配置元信息：XML和Java API）"></a>Bean工厂方法（配置元信息：XML和Java API）</h4><h4 id="FactoryBean-（配置元信息：XML、Java注解和Java-API）"><a href="#FactoryBean-（配置元信息：XML、Java注解和Java-API）" class="headerlink" title="FactoryBean （配置元信息：XML、Java注解和Java API）"></a>FactoryBean （配置元信息：XML、Java注解和Java API）</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user-by-factory-bean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;factory.UserFactoryBean&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserFactoryBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> User.createUser();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> User.class;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>​    获取Bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanInstantiationDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BeanFactory factory = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;META-INF/dependency-instantiation-context.xml&quot;</span>);</span><br><span class="line">        User user = factory.getBean(<span class="string">&quot;user-by-static-method&quot;</span>,User.class);</span><br><span class="line">        User userByInstanceMethod = factory.getBean(<span class="string">&quot;user-by-instance-method&quot;</span>,User.class);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        System.out.println(userByInstanceMethod);</span><br><span class="line">        System.out.println(user==userByInstanceMethod);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="特殊方式"><a href="#特殊方式" class="headerlink" title="特殊方式"></a>特殊方式</h3><ul>
<li><p>ServiceLoaderFactoryBean</p>
</li>
<li><p>AutowireCapableBeanFactory</p>
</li>
<li><p>BeanDefinitionRegistry</p>
</li>
</ul>
<h2 id="初始化Spring-Bean"><a href="#初始化Spring-Bean" class="headerlink" title="初始化Spring Bean"></a>初始化Spring Bean</h2><h3 id="PostConstruct"><a href="#PostConstruct" class="headerlink" title="@PostConstruct"></a>@PostConstruct</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;@PostConstruct UserFactory 初始化中...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="实现InitializingBean接口的afterPropertiesSet-方法"><a href="#实现InitializingBean接口的afterPropertiesSet-方法" class="headerlink" title="实现InitializingBean接口的afterPropertiesSet() 方法"></a>实现InitializingBean接口的afterPropertiesSet() 方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultUserFactory</span> <span class="keyword">implements</span> <span class="title">UserFactory</span>, <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;@PostConstruct UserFactory 初始化中...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initUserFactory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;自定义初始化方法 initUserFactory(): UserFactory 初始化中...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;InitializingBean initUserFactory(): UserFactory 初始化中...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义初始化方法"><a href="#自定义初始化方法" class="headerlink" title="自定义初始化方法"></a>自定义初始化方法</h3><ul>
<li><p>XML配置 <code>&lt;bean init-method=&quot;init&quot; .../&gt;</code></p>
</li>
<li><p>Java注解 <code>@Bean(initMethod=&quot;init&quot;)</code></p>
</li>
<li><p>Java API: <code>AbstractBeanDefinition</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean(initMethod = &quot;initUserFactory&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DefaultUserFactory <span class="title">userFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DefaultUserFactory();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="三者顺序"><a href="#三者顺序" class="headerlink" title="三者顺序"></a>三者顺序</h3><p>@PostConstruct UserFactory 初始化中…<br>InitializingBean initUserFactory(): UserFactory 初始化中…<br>自定义初始化方法 initUserFactory(): UserFactory 初始化中…</p>
<p>即@PostConstruct -&gt; InitializingBean initUserFactory() -&gt; 自定义初始化方法</p>
<h2 id="延迟初始化"><a href="#延迟初始化" class="headerlink" title="延迟初始化"></a>延迟初始化</h2><h3 id="XML-配置：-lt-bean-lazy-init-”true”-…-gt"><a href="#XML-配置：-lt-bean-lazy-init-”true”-…-gt" class="headerlink" title="XML 配置：&lt;bean lazy-init=”true” …/&gt;"></a>XML 配置：&lt;bean lazy-init=”true” …/&gt;</h3><h3 id="Java注解-：-Lazy-true"><a href="#Java注解-：-Lazy-true" class="headerlink" title="Java注解 ：@Lazy(true)"></a>Java注解 ：@Lazy(true)</h3><p>延迟加载指的是Spring应用上下文启动之后之后才会进行加载</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanInitializationDemon</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext();</span><br><span class="line">        context.register(BeanInitializationDemon.class);</span><br><span class="line">        context.refresh();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;context已经启动。。。&quot;</span>);</span><br><span class="line">        DefaultUserFactory factory = context.getBean(DefaultUserFactory.class);</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(initMethod = &quot;initUserFactory&quot;)</span></span><br><span class="line">    <span class="meta">@Lazy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultUserFactory <span class="title">userFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultUserFactory();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">context已经启动。。。</span><br><span class="line">@PostConstruct UserFactory 初始化中...</span><br><span class="line">InitializingBean initUserFactory(): UserFactory 初始化中...</span><br><span class="line">自定义初始化方法 initUserFactory(): UserFactory 初始化中...</span><br></pre></td></tr></table></figure>

<p>可以看到Spring上下文已经启动了，但是DefaultUserFactory是在启动之后才进行加载的（此处进行了依赖查找，因此使用到了该Bean，因此需要进行加载）</p>
<h2 id="销毁Spring-Bean"><a href="#销毁Spring-Bean" class="headerlink" title="销毁Spring Bean"></a>销毁Spring Bean</h2><h3 id="PreDestory"><a href="#PreDestory" class="headerlink" title="@PreDestory"></a>@PreDestory</h3><h3 id="实现DisposableBean接口的destroy-方法"><a href="#实现DisposableBean接口的destroy-方法" class="headerlink" title="实现DisposableBean接口的destroy()方法"></a>实现DisposableBean接口的destroy()方法</h3><h3 id="自定义销毁方法"><a href="#自定义销毁方法" class="headerlink" title="自定义销毁方法"></a>自定义销毁方法</h3><ul>
<li>XML 配置：&lt;bean destroy=”destroy” …/&gt;</li>
<li>Java注解：@Bean(destroy=”destroy”)</li>
<li>Java API: AbstractBeanDefinition#setDestroyMethodName(String)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultUserFactory</span> <span class="keyword">implements</span> <span class="title">UserFactory</span>, <span class="title">InitializingBean</span>, <span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;@PostConstruct UserFactory 初始化中...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initUserFactory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;自定义初始化方法 initUserFactory(): UserFactory 初始化中...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;InitializingBean initUserFactory(): UserFactory 初始化中...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preDestroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; @PreDestroy UserFactory销毁中。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;DisposableBean UserFactory销毁中。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doDestroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;自定义销毁方法 UserFactory销毁中。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>三者的执行顺序为</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">@PreDestroy UserFactory销毁中。。。</span><br><span class="line">DisposableBean UserFactory销毁中。。。</span><br><span class="line">自定义销毁方法 UserFactory销毁中。。。</span><br></pre></td></tr></table></figure>

<p>其<font color=red>销毁方法是有<code>context.close();</code>方法进行触发的</font></p>
<h2 id="垃圾回收Spring-Bean"><a href="#垃圾回收Spring-Bean" class="headerlink" title="垃圾回收Spring Bean"></a>垃圾回收Spring Bean</h2><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><ol>
<li><p>关闭Spring容器（应用上下文）</p>
</li>
<li><p>执行GC （不是必须的）</p>
</li>
<li><p>Spring Bean覆盖的finalize()方法被回调 （不一定会主动触发该方法）</p>
<p>其实就是重写Object类中的<code>finalize</code>方法</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>IOC</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Spring/spring%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/IOC/</url>
    <content><![CDATA[<h1 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h1><h3 id="IOC容器的职责"><a href="#IOC容器的职责" class="headerlink" title="IOC容器的职责"></a>IOC容器的职责</h3><ul>
<li><p>通用职责</p>
<ul>
<li>依赖处理<ul>
<li>依赖查找</li>
<li>依赖注入</li>
</ul>
</li>
</ul>
<p>两者区别            </p>
<table>
<thead>
<tr>
<th>类型</th>
<th>依赖处理</th>
<th>实现便利性</th>
<th>代码侵入性</th>
<th>API 依赖性</th>
<th>可读性</th>
</tr>
</thead>
<tbody><tr>
<td>依赖查找</td>
<td>主动获取</td>
<td>相对繁琐</td>
<td>侵入业务逻辑</td>
<td>依赖容器API</td>
<td>良好</td>
</tr>
<tr>
<td>依赖注入</td>
<td>被动提供</td>
<td>相对便利</td>
<td>低侵入性</td>
<td>不依赖容器API</td>
<td>一般</td>
</tr>
</tbody></table>
<ul>
<li>生命周期管理<ul>
<li>容器</li>
<li>托管的资源（Java Beans或者其他资源）</li>
</ul>
</li>
<li>配置<ul>
<li>容器</li>
<li>外部化配置</li>
<li>托管的资源（Java Beans或者其他资源）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h3><ul>
<li><p>excludeFilers  = Filter[] 指定扫描的时候按照什么规则排除哪些组件</p>
</li>
<li><p>includeFilers  = Filter[] 指定扫描的时候只需要包含哪些组件</p>
</li>
<li><p>FIlterType.ANNOTATION 按照注释</p>
</li>
<li><p>FilerType.ASSIGNABLE_TYPE 按照给定的类型</p>
</li>
<li><p>FilterType.ASPECTJ 使用ASPECTJ表达式</p>
</li>
<li><p>FilterType.REGEX 使用正则指定</p>
</li>
<li><p>FilterType.CUSTOM 使用自定义规则</p>
<p>这个需要自己编写一个类继承TypeFilter（这个类不需要加上注解@Component）</p>
</li>
</ul>
<h3 id="Scope"><a href="#Scope" class="headerlink" title="@Scope"></a>@Scope</h3><ul>
<li><p>prototype 多实例的 <font color=red>ioc容器启动并不会去调用方法创建对象放在容器中，每次获取的时候才会调用方法创建对象</font></p>
</li>
<li><p>singleton 单实例的（默认值）<font color=red>ioc容器启动会调用方法创建对象放到ioc容器中，以后每次获取就会直接从容器中（map.get）中拿</font></p>
<p>@Lazy 懒加载 仅在单实例下生效，当调用时才会进行创建然后加载</p>
</li>
<li><p>request 同一次请求创建一个实例 （很少用）</p>
</li>
<li><p>session 同一个session创建一个实例 （很少用）</p>
</li>
</ul>
<h3 id="Conditional"><a href="#Conditional" class="headerlink" title="@Conditional"></a>@Conditional</h3><p>可以在方法或者类上进行使用，与此同时需要编写一个实现Condition（spring中的一个注解类）的类从而实现条件判断获取bean</p>
<h3 id="给容器注册组件"><a href="#给容器注册组件" class="headerlink" title="给容器注册组件"></a>给容器注册组件</h3><ol>
<li><p>包扫描+组件标注注解（@Controller/@Service/@Repository/@Component）</p>
</li>
<li><p>@Bean 导入第三方包里面的组件</p>
</li>
<li><p>@Import 快速给容器中导入一个组件</p>
<ol>
<li><p>@Import，容器就会自动注册这个组件，id默认是全类名</p>
</li>
<li><p>ImportSelector（需要实现该接口）：返回需要导入的组件的全类名数组（如果没有类需要导入，但是使用了实现该类的接口，需要返回一个空数组，如果返回一个null会直接报错）</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210326092003.png" alt="image-20210326092000953"></p>
</li>
<li><p>ImportBeanDefinitionRegistrar ：手动注册bean到容器中</p>
<p>需要实现ImportBeanDefinitionRegistrar该类的方法</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210326092101.png" alt="image-20210326092100293"></p>
</li>
</ol>
</li>
<li><p>使用spring提供的FactoryBean，实现该类的方法</p>
<p>其中实现的两个方法：</p>
<ul>
<li><p>getObject（）</p>
<p>返回一个对象，该对象会添加到容器中</p>
</li>
<li><p>getObjectType()</p>
<p>返回对象的类型</p>
</li>
<li><p>isSingleton（）</p>
<p>返回是否为单例，如果为True，则返回单例，否则是prototype</p>
</li>
</ul>
<ol>
<li>默认获取到的是工厂bean调用getObject的对象</li>
<li>要获取factoryBean本身，我们需要给id前加一个”&amp;“</li>
</ol>
</li>
</ol>
<h3 id="指定-Bean的初始化和销毁方法"><a href="#指定-Bean的初始化和销毁方法" class="headerlink" title="指定@Bean的初始化和销毁方法"></a>指定@Bean的初始化和销毁方法</h3><ol>
<li><p>指定@Bean的初始化和销毁方法</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210323142348.png" alt="image-20210323142335194" style="zoom:50%;" />

<p>单实例的bean容器关闭的时候调用destroyMethod方法</p>
<p>多实例的时候容器不会管理该bean</p>
</li>
<li><p>也可以直接在需要注册到容器中的类实现InitializingBean和DisposableBean接口从而完成类的初始化和销毁方法</p>
<p>此处的InitializingBean接口中实现的方法触发的时机是当所有的properties赋好值完了之后才会进行调用</p>
</li>
<li><p>在类中使用@PostConstruct和@PreDestroy</p>
<p>@PostConstruct注解的方法是在对象创建并赋值之后调用</p>
</li>
<li><p>BeanPostProcessor：bean的后置处理器  需要实现BeanPostProcessor该接口</p>
<p>在bean初始化之前进行一些处理工作</p>
<p>postProcessBeforeInitialization：在初始化之前工作，<font color=red>但是实际上在赋值之后初始化之前调用</font></p>
<p>postProcessAfterInitialization：在初始化之后工作</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210323145823.png" alt="image-20210323145816702"></p>
</li>
</ol>
<p><font color=red>BeanPostProcessor这个接口非常重要</font>，是spring中其他一些注解的接口，其他注解比如@Async、@PostConstruct等都是实现了该接口的方法来实现的对应功能</p>
<h3 id="Properties"><a href="#Properties" class="headerlink" title="@Properties"></a>@Properties</h3><p>SpringBoot可以识别两种格式的配置文件，分别是yml文件与properties文件，我们可以将application.properties文件换成application.yml，这两个文件都可以被SpringBoot自动识别并加载.</p>
<p>application.properties配置文件欲被SpringBoot自动加载，需要放置到指定的位置：src/main/resource目录下，一般自定义的配置文件也位于此目录之下。需要在启动类上添加上@PropertySource(value = {“classpath:/xxxx.yaml”})</p>
<h3 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h3><ol>
<li><p>默认优先按照类型去容器中找对应的组件：application.getBean()</p>
</li>
<li><p>如果找到多个类型相同的组件，再将属性的名称作为组件的id去容器中查找</p>
</li>
<li><p>@Qualifier(“bookDao”) 使用@Qualifier指定需要装配的组件id，而不是使用属性名</p>
</li>
<li><p>自动装配默认一定要将属性赋值好，没有就会报错，意思就是容器中本身就没有需要Autowired的组件</p>
<p>可以使用@Autowired(required=false)</p>
</li>
<li><p>@Primary：让Spring进行自动装配的时候，默认使用首选的bean，也可以继续使用@Qualifier指定需要装配的bean的名字</p>
</li>
</ol>
<p>@Autowired：构造器、参数、方法、属性：都是从容器中获取参数组件的值</p>
<ul>
<li><p>标注在方法位置</p>
<p>@Bean+方法参数，参数从容器中获取，默认不写@Autowired效果是一样的，比如下图中的Car就可以不使用@Autowired进行标注，也会自动装入 </p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210324110835.png" alt="image-20210324110829858" style="zoom:50%;" /></li>
<li><p>标在构造器上</p>
<p>如果组件只有一个有参构造器，这个有参构造器的@Autowired可以省略，参数位置的组件依旧可以自动从容器中获取</p>
</li>
<li><p>放在参数位置</p>
</li>
<li><p><font color=red>如果没有构造器的话，默认会加载无参构造器，如果你里面依旧有其他需要注入的参数组件，但是对应的参数组件又没有Autowired标识，那么是不会进行自动装配的</font>。</p>
</li>
</ul>
<h3 id="Resource-Inject"><a href="#Resource-Inject" class="headerlink" title="@Resource @Inject"></a>@Resource @Inject</h3><ol>
<li><p>@Resource  (JSR250)</p>
<p>可以和@Autowired一样实现自动装配部的功能，默认是按照组件名称进行装配的</p>
<p>没有能支持@Primary功能</p>
<p>没有能支持@Autowired(required=false)</p>
</li>
<li><p>@Inject （JSR330）</p>
<p>需要导入javax.inject的包,和Autowired的功能一样，没有required=false的功能</p>
</li>
<li><p>和@Autowired的区别</p>
<p>@Inject和@Resource是java规范,@Autowired是Spring定义的</p>
</li>
</ol>
<h3 id="自定义组件使用Spring容器底层的一些组价（ApplicationContext、BeanFactory、xxx）"><a href="#自定义组件使用Spring容器底层的一些组价（ApplicationContext、BeanFactory、xxx）" class="headerlink" title="自定义组件使用Spring容器底层的一些组价（ApplicationContext、BeanFactory、xxx）"></a>自定义组件使用Spring容器底层的一些组价（ApplicationContext、BeanFactory、xxx）</h3><p>自定义组件实现xxxxAware：在创建对象 的时候会调用接口规定的方法注入相关组件</p>
<p>把srping底层一些组件注入到自定义的Bean中:</p>
<p>xxxxAware:功能使用xxxxProcessor:</p>
<p>​    ApplicationContextAware==&gt;ApplicationContextWaareProcessor</p>
<h3 id="Profile"><a href="#Profile" class="headerlink" title="@Profile"></a>@Profile</h3><p>指定组件在哪个环境的情况下才能被注册到容器中，不指定任何环境在都能注册这个组件</p>
<ul>
<li>加了环境标识的bean，只有在这个环境被激活的时候才能注册到容器中，默认是default环境</li>
<li>写在配置类上只有在制定的环境的时候，整个配置类里面的所有配置才能开始生效</li>
<li>没有标注环境标识的bean在任何环境下都是加载的</li>
</ul>
<p>设置applicationContext的运行环境</p>
<ol>
<li><p>命令行参数启动</p>
</li>
<li><p>代码启动 </p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210324113748.png" alt="image-20210324113746729"></p>
<p>此处一定要注意，不能是直接写AnnotationConfigApplicationContext application = new AnnotationConfigApplicationContext(xxxx.class) (xxxx.class为配置类)</p>
<p>因为它会自动执行自己的方法</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210324113928.png" alt="image-20210324113927243"></p>
<p>环境啥的都没有配置好，导致直接refresh()容器，其实最主要的就是需要设置一个激活的环境，也就是</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210324114020.png" alt="image-20210324114016821"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Spring源码</tag>
      </tags>
  </entry>
  <entry>
    <title>Transactional</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Spring/spring%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/Transactional/</url>
    <content><![CDATA[<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ol>
<li><p>@EnableTransactionManagement</p>
<p>利用TransactionManagementConfigurationSelector给容器中会导入两个组件</p>
<ul>
<li>AutoProxyRegister</li>
<li>ProxyTransactionManagementConfiguration</li>
</ul>
<p>导入流程如下：</p>
<ol>
<li><p>首先根据adviceMode判断类型</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210330083104.png" alt="image-20210330083058910"></p>
</li>
<li><p>由于EnableTransactionManagement是</p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210330083205.png" alt="image-20210330083203182"></p>
<p>因此会自动导入上述两个组件</p>
</li>
<li><p>AutoProxyRegister：给容器中注册一个InfrastructureAdvisorAutoProxyCreator组件</p>
<p>InfrastructureAdvisorAutoProxyCreator该组件的作用在于：</p>
<p>利用后置处理器机制在对象创建以后，包装对象，返回一个代理对象（增强器，和AOP中的增强器作用一样），代理对象执行方法利用拦截器链进行调用</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210330084218.png" alt="image-20210330084214278"></p>
</li>
<li><p>ProxyTransactionManagementConfiguration作用</p>
<ol>
<li><p>给容器中注册事务增强器</p>
<p> 事务增强器要用事务注解的信息：AnnotationTransactionAttributeSource解析事务注解</p>
<ol>
<li>根据 不同的注解类型调用不同的事务注解</li>
</ol>
 <img src="/Users/cooper/Library/Application Support/typora-user-images/image-20210330084650053.png" alt="image-20210330084650053" style="zoom:50%;" />

<ol start="2">
<li><p>调用事务注解</p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210330084803.png" alt="image-20210330084757042" style="zoom:50%;" />

<ol start="2">
<li>事务拦截器</li>
</ol>
</li>
</ol>
</li>
</ol>
<pre><code>TransactionInterceptor：保存了事务属性信息，事务管理器

他是一个MethodIntercept

在执行目标方法的时候执行拦截器链

事物拦截器：

 1.  先获取事务相关属性

 2.  再获取PlatformTransactionManager，如果事先没有添加指定任何TransactionManager,

     最终会从容器中按照类型获取一个PlatformTransactionManager

     所以说我们可以直接在IOC容器中直接注册一个PlatformTransactionManager是可以直接使用的，因为最后找不到都回去容器中找对应类型的Bean

     &lt;img src=&quot;https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210330085716.png&quot; alt=&quot;image-20210330085709877&quot; style=&quot;zoom:50%;&quot; /&gt;

3. 执行目标方法

   如果异常，并且添加了事务注解，那么获取到事务管理器之后就会利用事务管理回滚操作

   如果正常，利用事务管理器对事物进行提交

   ![image-20210330090829103](https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210330090837.png)

   ![image-20210330091133277](https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210330091134.png)

   **正常**：

   ![image-20210330091223867](https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210330091225.png)

   **异常**：

   ![image-20210330091012000](https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210330091016.png)

   ​    

   
</code></pre>
</li>
</ol>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Spring源码</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring容器的生命周期</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Spring/spring%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/spring%E5%AE%B9%E5%99%A8%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<h2 id="BeanFactory的创建及预准备工作"><a href="#BeanFactory的创建及预准备工作" class="headerlink" title="BeanFactory的创建及预准备工作"></a>BeanFactory的创建及预准备工作</h2><h3 id="spring容器的refresh-【创建刷新】"><a href="#spring容器的refresh-【创建刷新】" class="headerlink" title="spring容器的refresh()【创建刷新】"></a>spring容器的refresh()【创建刷新】</h3><h4 id="prepareRefresh-刷新前的预处理"><a href="#prepareRefresh-刷新前的预处理" class="headerlink" title="prepareRefresh()刷新前的预处理"></a>prepareRefresh()刷新前的预处理</h4><ol>
<li><p>initPropertySources()</p>
<p>初始化一些属性的设置，子类自定义个性化的属性设置方法</p>
</li>
<li><p>getEnvironment().validateRequiredProperties()</p>
<p>校验属性的合法性等</p>
</li>
<li><p>earlyApplicationEvents = new LinkedHashSet&lt; ApplicationEvent &gt;();</p>
<p>保存容器的一些早期事件</p>
</li>
</ol>
<h4 id="obtainFreshBeanFactory-获取BeanFactory"><a href="#obtainFreshBeanFactory-获取BeanFactory" class="headerlink" title="obtainFreshBeanFactory();获取BeanFactory"></a>obtainFreshBeanFactory();获取BeanFactory</h4><ol>
<li><p>refreshBeanFactory()</p>
<p>刷新【创建】BeanFactory</p>
<p>设置了一个this.beanFactory = new DefaultListableBeanFactory();</p>
<p>设置id</p>
</li>
<li><p>getBeanFactory()</p>
<p>返回刚才GenericApplicationContext创建的BeanFactory对象</p>
</li>
<li><p>将创建的BeanFactory【DefaultListableBeanFactory】返回</p>
</li>
</ol>
<h4 id="prepareBeanFactory-beanFactory-BeanFactory的预准备工作（BeanFactory进行一些设置）"><a href="#prepareBeanFactory-beanFactory-BeanFactory的预准备工作（BeanFactory进行一些设置）" class="headerlink" title="prepareBeanFactory(beanFactory);BeanFactory的预准备工作（BeanFactory进行一些设置）"></a>prepareBeanFactory(beanFactory);BeanFactory的预准备工作（BeanFactory进行一些设置）</h4><ol>
<li><p>设置BeanFactory的类加载器、支持表达式解析器</p>
</li>
<li><p>添加部分BeanPostProcessor【ApplicationContextAwareProcessor】</p>
</li>
<li><p>设置忽略的自动装配接口，例如EnvironmentAware、EmbeddedValueResolverAware、xxx</p>
</li>
<li><p>注册可以解析的自动装配，我们能直接在任何组件中自动注入：BeanFactory、ResourceLoader、ApplicationEventPublisher 、ApplicationContext</p>
</li>
<li><p>添加BeanPostProcessor【ApplicationListenerDetector】</p>
</li>
<li><p>添加编译时的AspectJ</p>
</li>
<li><p>给BeanFactory中注册一些能用的组件</p>
<p>environment【ConfigurableEnvironment】</p>
<p>systemProperties【Map&lt; String,Object &gt;】</p>
<p>systemEnviroment【Map&lt; String,Object &gt;】</p>
</li>
</ol>
<h4 id="postProcessBeanFactory-beanFactory-；BeanFactory准备工作完成后进行的一些后置处理工作"><a href="#postProcessBeanFactory-beanFactory-；BeanFactory准备工作完成后进行的一些后置处理工作" class="headerlink" title="postProcessBeanFactory(beanFactory)；BeanFactory准备工作完成后进行的一些后置处理工作"></a>postProcessBeanFactory(beanFactory)；BeanFactory准备工作完成后进行的一些后置处理工作</h4><ol>
<li>子类通过重写这个方法来在BeanFactory创建并预准备完成以后做进一步的设置</li>
</ol>
<hr>
<h4 id="invokeBeanFactoryPostProcessors-beanFactory-；执行BeanFactoryPostProcessor；"><a href="#invokeBeanFactoryPostProcessors-beanFactory-；执行BeanFactoryPostProcessor；" class="headerlink" title="invokeBeanFactoryPostProcessors(beanFactory)；执行BeanFactoryPostProcessor；"></a>invokeBeanFactoryPostProcessors(beanFactory)；执行BeanFactoryPostProcessor；</h4><p><font color=red>主要就是对BeanFactory里面的bean做一些修改操作，使得里面的Bean满足自己的需求</font></p>
<p>BeanFactoryPostProcessor：BeanFactory的后置处理器。在BeanFactory标准初始化之后执行</p>
<ol>
<li><p>执行BeanFactoryPostProcessor的方法</p>
<p>先执行BeanDefinitionRegistryPostProcessor</p>
<ol>
<li><p>获取所有的BeanDefinitionRegistryPostProcessor</p>
</li>
<li><p>先执行实现了PriorityOrdered优先级接口的BeanDefinitionRegistryPostProcessor</p>
<p>PostProcessor.postProcessBeanDefinitionRegistry（registry）</p>
</li>
<li><p>在执行实现了Ordered顺序接口的BeanDefinitionRegistry（registry）</p>
<p>PostProcessor.postProcessBeanDefinitionRegistry（registry）</p>
</li>
<li><p>最后执行没有实现任何优先级或者是顺序接口的BeanDefinitionRegistryPostProcessor</p>
<p>PostProcessor.postProcessBeanDefinitionRegistry（registry）</p>
</li>
</ol>
<p>再执行BeanFactoryPostProcessor的方法</p>
<ol>
<li><p>获取所有的BeanDefinitionRegistryPostProcessor</p>
</li>
<li><p>先执行实现了PriorityOrdered优先级接口的BeanDefinitionRegistryPostProcessor</p>
<p>PostProcessor.postProcessBeanDefinitionRegistry（registry）</p>
</li>
<li><p>在执行实现了Ordered顺序接口的BeanDefinitionRegistry（registry）</p>
<p>PostProcessor.postProcessBeanDefinitionRegistry（registry）</p>
</li>
<li><p>最后执行没有实现任何优先级或者是顺序接口的BeanDefinitionRegistryPostProcessor</p>
<p>PostProcessor.postProcessBeanDefinitionRegistry（registry）</p>
</li>
</ol>
</li>
</ol>
<hr>
<h4 id="registerBeanPostProcessors-beanFactory-注册BeanPostProcessor（Bean的后置处理器），拦截Bean的创建过程"><a href="#registerBeanPostProcessors-beanFactory-注册BeanPostProcessor（Bean的后置处理器），拦截Bean的创建过程" class="headerlink" title="registerBeanPostProcessors(beanFactory) 注册BeanPostProcessor（Bean的后置处理器），拦截Bean的创建过程"></a>registerBeanPostProcessors(beanFactory) 注册BeanPostProcessor（Bean的后置处理器），拦截Bean的创建过程</h4><p>不同接口类型的BeanPostProcessor在Bean创建前后执行的时机是不一样的</p>
<p>BeanPostProcessor、DestructionAwareBeanPostProcessor、InstantiationAwareBeanPostProcessor、</p>
<p>SmartInstantiationAwareBeanPostProcessor、MergedBeanDefinitionPostProcessor【internalPostProcessors】</p>
<ol>
<li><p>先获取所有的BeanPostProcess</p>
<p>后置处理器默认度可以通过PriorityOrdered、Ordered接口来执行优先级</p>
</li>
<li><p>先注册PriorityOrdered优先级接口的BeanPostProcessor</p>
<p>把每一个BeanPostProcessor添加到BeanFactory中</p>
<p>beanFactory.addBeanPostProcessor(postProcessor)</p>
</li>
<li><p>再注册Ordered接口的BeanPostProcessor</p>
</li>
<li><p>然后注册没有实现任何优先级接口的BeanPostProcessor</p>
</li>
<li><p>最终注册MergedBeanDefinitionPostProcessor</p>
</li>
<li><p>注册一个ApplicationListenerDetector在Bean创建完成后检查是否是ApplicationListener；</p>
<p>如果是则加入到容器中</p>
<p>applicationContext.addApplicationListener((ApplicationListener&lt;?&gt; bean));</p>
</li>
</ol>
<hr>
<h4 id="initMessageSource-初始化MessageSource组件（做国际化功能、消息绑定、消息解析）"><a href="#initMessageSource-初始化MessageSource组件（做国际化功能、消息绑定、消息解析）" class="headerlink" title="initMessageSource() 初始化MessageSource组件（做国际化功能、消息绑定、消息解析）"></a>initMessageSource() 初始化MessageSource组件（做国际化功能、消息绑定、消息解析）</h4><ol>
<li><p>获取BeanFactory</p>
</li>
<li><p>看容器中是否有id为messageSource的，类型是MessageSource的组件</p>
<p>如果有赋值给messageSource，如果没有自己创建一个DelegatingMessageSource</p>
<p>MessageSource：取出国际化配置文件中的某个key的值，能按照区域信息获取</p>
</li>
<li><p>把创建好的MessageSource创建在容器中，以后获取国际化配置文件的值的时候，可以自动注入MessageSource</p>
<p>BeanFactory.registerSingleton(MESSAGE_SOURCE_BEAN_NAME,this.messageSource);</p>
<p>MessageSource.String getMessage(String code,Object[] agrs,String defaultMessage)</p>
</li>
</ol>
<hr>
<h4 id="initApplicationEventMulticaster-初始化事件派发器"><a href="#initApplicationEventMulticaster-初始化事件派发器" class="headerlink" title="initApplicationEventMulticaster() 初始化事件派发器"></a>initApplicationEventMulticaster() 初始化事件派发器</h4><ol>
<li>获取BeanFactory</li>
<li>从BeanFactory中获取applicationEventMulticaster的ApplicationEventMulticaster</li>
<li>如果上一步没有配置，则会自动创建一个SimpleApplicationMulticaster</li>
<li>将创建的ApplicationEventMulticaster添加到BeanFactory中，以后其他组件直接自动注入</li>
</ol>
<hr>
<h4 id="onRefresh-留给子容器（子类）"><a href="#onRefresh-留给子容器（子类）" class="headerlink" title="onRefresh() 留给子容器（子类）"></a>onRefresh() 留给子容器（子类）</h4><ol>
<li>子类重写这个方法，在容器刷新的时候可以自定义逻辑</li>
</ol>
<hr>
<h4 id="registerListener-给容器中所有将项目里面的ApplicationListener注册进来"><a href="#registerListener-给容器中所有将项目里面的ApplicationListener注册进来" class="headerlink" title="registerListener()  给容器中所有将项目里面的ApplicationListener注册进来"></a>registerListener()  给容器中所有将项目里面的ApplicationListener注册进来</h4><ol>
<li><p>从容器中拿到所有的ApplicationListener</p>
</li>
<li><p>将每个监听器派发到事件派发器中</p>
<p>getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName)</p>
</li>
<li><p>派发之前步骤产生的事件</p>
</li>
</ol>
<hr>
<h4 id="finishBeanFactoryInitialization-beanFactory-初始化所有剩下的单实例Bean"><a href="#finishBeanFactoryInitialization-beanFactory-初始化所有剩下的单实例Bean" class="headerlink" title="finishBeanFactoryInitialization(beanFactory) 初始化所有剩下的单实例Bean"></a>finishBeanFactoryInitialization(beanFactory) 初始化所有剩下的单实例Bean</h4><ol>
<li><p>beanFactory.preInstantiateSingletons() 初始化后剩下的单实例bean</p>
<ol>
<li><p>获取容器中的所有Bean，依次进行初始化和创建对象</p>
</li>
<li><p>获取Bean的定义信息；RootBeanDefinition</p>
</li>
<li><p>Bean不是抽象的，是单实例的，是懒加载的</p>
<ol>
<li><p>判断是否是FactoryBean,是否是实现FactoryBean接口的Bean,如果是则利用创建工厂Bean的方法对Bean进行创建</p>
</li>
<li><p>不是工厂的Bean，利用getBean(beanName)创建对象</p>
<ol>
<li><p>getBean(beanName)</p>
<p>Ioc.getBean()</p>
</li>
<li><p>doGetBean(name，null,null,false)</p>
</li>
<li><p><font color=red>先获取缓存中保存的单实例Bean</font>。如果能获取到说明这个Bean之前被创建过（所有创建过的单实例Bean都会被缓存起来）</p>
</li>
<li><p>标记当前bean已经被创建，防止多线程对bean进行了创建，保持其单例的特性</p>
</li>
<li><p>获取Bean的定义信息</p>
</li>
<li><p><font color=red>获取当前Bean依赖的其他Bean；如果有，按照getBean()把依赖的Bean先创建出来</font></p>
</li>
<li><p>启动单实例Bean的创建流程：</p>
<ol>
<li><p>createBean(beanName.mbd,args)</p>
</li>
<li><p>Object bean = resolveBeforeInstantiation(beanName,mbdToUser) </p>
<p><font color=red>让BeanPostProcessor拦截返回代理对象</font></p>
<p>【InstantiationAwareBeanPostProcessor】提前执行</p>
<p>先触发：postProcessBeforeInstantiation()</p>
<p>如果有返回值：触发PostProcessorAfterInitialization()</p>
</li>
<li><p>如果前面的InstantiationAwareBeanPostProcessor没有返回代理对象，调用4</p>
</li>
<li><p>Object beanInstance = doCreateBean(beanName,mbdToUse,args);创建Bean</p>
<ol>
<li><p>【创建Bean实例】，createBeanInstance(beanName,mbd,args)</p>
<p>利用工厂方法或者对象的构造器创建出Bean实例</p>
</li>
<li><p>applyMergedBeanDefinitionPostProcessors(mbd,beanType,beanName)</p>
<p>调用MergedBeanDefinitionPostProcessor的postProcessMergedBeanDefinition</p>
</li>
<li><p>【Bean属性赋值】 populateBean（beanName,mbd,instanceWrapper)；</p>
<p>赋值之前：</p>
<ol>
<li><p>拿到InstantiationAwareBeanPostProcessor后置处理器</p>
<p>PostProcessAfterInstantiation();</p>
</li>
<li><p>拿到InstantiationAwareBeanPostProcess后置处理器</p>
<p>postProcessPropertyValues();</p>
<p>——–赋值之前————</p>
</li>
<li><p>应用Bean属性的值</p>
<p>为属性利用setter方法等进行赋值</p>
<p>applyPropertyValues(beanName,mbd,bw,pvs)</p>
</li>
</ol>
</li>
<li><p>【Bean初始化】initializeBean(beanName,exposedObject,mbd)</p>
<ol>
<li><p>【执行Aware接口方法】invokeAwareMethods(beanName,bean);执行xxxxAware接口的方法</p>
<p>BeanNameAware、BeanClassLoaderAware、BeanFactoryAware</p>
</li>
<li><p>【执行后置处理器初始化之前】applyBeanPostProcessorsBeforeInitialization(wrappedBean,beanName)</p>
<p>BeanPostProcessor.postProcessBeforeInitialization()</p>
</li>
<li><p>【执行初始化方法】invokeInitMethods(beanName,wrappedBean,mbd)</p>
<ol>
<li>是否是InitializatingBean接口的实现；执行接口规定的初始化</li>
<li>是否有自定义初始化的方法，有则执行</li>
</ol>
</li>
<li><p>【执行后置处理器初始化之后】applyBeanPostProcessorsAfterInitialization</p>
<p>BeanPostProcessor.postProcessAfterInitialization()</p>
</li>
<li><p>注册Bean的销毁方法</p>
</li>
</ol>
</li>
<li><p>将创建的Bean添加到缓存中的singletonObjects</p>
<p><font color=red>ioc容器就是这些Map，Map里面保存了单实例Bean、环境信息等等</font></p>
</li>
</ol>
</li>
</ol>
</li>
<li><p>所有Bean都利用getBean创建完成以后</p>
<p>检查所有的Bean是否是SmartInitializalizingSingleton接口的</p>
<p>如果是就执行afterSingletonsInstantiated()方法</p>
<img src="https://gitee.com/CooperXJ/blog-map-bed/raw/master/img/20210402093002.png" alt="image-20210402092956671" style="zoom:50%;" /></li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<hr>
<h4 id="finishRefresh-完成BeanFactory的初始化创建工作，IOC容器创建完成"><a href="#finishRefresh-完成BeanFactory的初始化创建工作，IOC容器创建完成" class="headerlink" title="finishRefresh() 完成BeanFactory的初始化创建工作，IOC容器创建完成"></a>finishRefresh() 完成BeanFactory的初始化创建工作，IOC容器创建完成</h4><ol>
<li><p>initLifecycleProcessor（） 初始化和生命周期有关的后置处理器：LifecycleProcessor</p>
<p>默认从容器中找是否有LifecycleProcessor的组件【LifecycleProcessor】</p>
<p>如果没有则new DefaultLifecycleProcessor，加入到容器中</p>
<p>写一个LifecycleProcessor的实现类，可以在BeanFactory</p>
<p>void onRefresh（）</p>
<p>void onClose()</p>
<p>这些生命周期时对该实现类的方法进行调用</p>
</li>
<li><p>getLifeCycleProcessor().onRefresh()</p>
<p>拿到前面定义的生命周期处理器（BeanFactory）回调onRefresh()</p>
</li>
<li><p>publishEvent(new ContextRefreshdEvent(this));发布容器刷新完成事件</p>
</li>
<li><p>liveBeansView.registerApplicationContext(this);</p>
</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li><p>spring容器在启动的时候，会先保存所有注册进来的Bean的定义信息</p>
<ul>
<li><p>xml注册bean</p>
</li>
<li><p>注解注册bean；@Service、@Bean、@Component</p>
</li>
</ul>
</li>
<li><p>spring容器会在合适的时机创建这些Bean</p>
<ul>
<li>用到这个Bean的时候，利用getBean创建Bean，创建好以后保存在容器中</li>
<li>统一创建所有剩下bean的时候，finishBeanFactoryInitialization()</li>
</ul>
</li>
<li><p>后置处理器 BeanPostProcessor</p>
<ol>
<li><p>每一个Bean创建完成，都会使用各种后置处理器进行处理来增强Bean的功能</p>
<p>比如AutowiredAnnotationBeanPostProcessor、AnnotationAwareAspectJAutoProxyCreator来做AOP<br>功能</p>
</li>
</ol>
</li>
<li><p>事件驱动模型</p>
<p>ApplicationListener：事件监听</p>
<p>ApplicationEventMulticaster：事件派发</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Spring源码</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Spring/spring%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/Async/Async/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Servlet</title>
    <url>/2022/01/07/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Spring/spring%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/servlet/servlet/</url>
    <content><![CDATA[<h3 id="Servlet-3-0"><a href="#Servlet-3-0" class="headerlink" title="Servlet 3.0"></a>Servlet 3.0</h3><ol>
<li><p>Servlet容器启动会扫描当前应用里面的每一个jar包的ServletContainerInitializer的实现</p>
</li>
<li><p>提供ServletContainerInitializer的实现类</p>
<p>必须绑定在META-INF/service/javax.servlet.ServletContainerInitializer这个文件下</p>
<p>文件的内容就是ServletContainerInitializer实现类的全类名</p>
</li>
</ol>
<p>总结：容器在启动应用的时候，会扫描当前应用的每一个jar包里面的META-INF/service/javax.servlet.ServletContainerInitializer</p>
<p>指定的实现类，启动并运行这个实现类的方法,也可以传入感兴趣的类型（利用@HandlesTypes，感兴趣的类型接受的是该类的子类或者实现类，不包括该类本身）</p>
<p>如下图所示</p>
<img src="https://gitee.com/CooperXJ/blog-map-bed/raw/master/img/20210403131931.png" alt="image-20210403131926148" style="zoom:50%;" />

<p><img src="https://gitee.com/CooperXJ/blog-map-bed/raw/master/img/20210403130725.png" alt="image-20210403130714213"></p>
<p>然后可以在该类的覆写方法下注册Servlet、Listener、Filter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@HandlesTypes(value = &#123;HelloService.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServletContainerInitializer</span> <span class="keyword">implements</span> <span class="title">ServletContainerInitializer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(Set&lt;Class&lt;?&gt;&gt; set, ServletContext servletContext)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        set.forEach(s-&gt;&#123;</span><br><span class="line">            System.out.println(s.getName());</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加servlet</span></span><br><span class="line">        ServletRegistration.Dynamic userServlet = servletContext.addServlet(<span class="string">&quot;userServlet&quot;</span>, <span class="keyword">new</span> UserServlet());</span><br><span class="line">        userServlet.addMapping(<span class="string">&quot;/user&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加Listener</span></span><br><span class="line">        servletContext.addListener(UserListener.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加filter</span></span><br><span class="line">        FilterRegistration.Dynamic userFilter = servletContext.addFilter(<span class="string">&quot;userFilter&quot;</span>, <span class="keyword">new</span> UserFilter());</span><br><span class="line">        userFilter.addMappingForUrlPatterns(EnumSet.of(DispatcherType.REQUEST),<span class="keyword">true</span>,<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="在springboot中的体现"><a href="#在springboot中的体现" class="headerlink" title="在springboot中的体现"></a>在springboot中的体现</h3><p><font color=red>在springboot中的spring-web包下也是采用的这种机制</font></p>
<p><img src="https://gitee.com/CooperXJ/blog-map-bed/raw/master/img/20210403132510.png" alt="image-20210403132508320"></p>
<p><img src="https://gitee.com/CooperXJ/blog-map-bed/raw/master/img/20210403132734.png" alt="image-20210403132732248"></p>
<h3 id="springMVC整个过程"><a href="#springMVC整个过程" class="headerlink" title="springMVC整个过程"></a>springMVC整个过程</h3><p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210403133625.png" alt="image-20210403133622948"></p>
<p><strong>需要形成父子容器的效果</strong></p>
<img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210403134103.png" alt="image-20210403134056838" style="zoom:50%;" />

<ul>
<li><p>子容器：</p>
<p>​    springmvc只扫描Controller</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210403134254.png" alt="image-20210403134252316"></p>
<p>下图的最初的继承类指的是 <font color=red>WebMvcConfigurer</font></p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210403135240.png" alt="image-20210403135237563"></p>
</li>
<li><p>父容器</p>
<p>除了Controller都扫描</p>
<p>![image-20210403134340303](/Users/cooper/Library/Application Support/typora-user-images/image-20210403134340303.png)</p>
</li>
<li><p>最终放到AbstractAnnotationConfigDispatcherServletInitializer的实现类（此处也就是MyWebAppInitializer）中</p>
<p><img src="https://raw.githubusercontent.com/CooperXJ/ImageBed/master/img/20210403134453.png" alt="image-20210403134452356"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Spring源码</tag>
      </tags>
  </entry>
</search>
